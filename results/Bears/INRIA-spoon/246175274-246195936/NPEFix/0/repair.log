cd /tmp/NPEFix_Bears_INRIA-spoon_246175274-246195936;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/npefix.jar fr.inria.spirals.npefix.main.run.Main \
    --test spoon.test.api.MetamodelTest \
    --iteration 100 \
	--complianceLevel 8 \
	--workingdirectory . \
	--source src/main/java \
	--classpath target/classes:target/test-classes:/home/tdurieux/.m2/repository/commons-io/commons-io/2.6/commons-io-2.6.jar:/home/tdurieux/.m2/repository/com/github/stefanbirkner/system-rules/1.9.0/system-rules-1.9.0.jar:/home/tdurieux/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/tdurieux/.m2/repository/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar:/home/tdurieux/.m2/repository/org/mockito/mockito-all/2.0.2-beta/mockito-all-2.0.2-beta.jar:/home/tdurieux/.m2/repository/ant/ant/1.6.5/ant-1.6.5.jar:/home/tdurieux/.m2/repository/junit/junit/4.11/junit-4.11.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/.m2/repository/com/martiansoftware/jsap/2.1/jsap-2.1.jar:/home/tdurieux/.m2/repository/org/eclipse/tycho/org.eclipse.jdt.core/3.12.0.v20160516-2131/org.eclipse.jdt.core-3.12.0.v20160516-2131.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
TernarySplitter  in 145ms
return ((field.getAnnotation(Parameter.class)) != null) || (TemplateParameter.class.isAssignableFrom(field.getType()))
return replace(toBeReplaced, (replacement == null ? Collections.<E>emptyList() : Collections.<E>singletonList(replacement)))
wildcard.setUpper((((type.getUpperBounds()) != null) && (!(type.getUpperBounds()[0].equals(Object.class)))))
return (((getFile()) == null ? (s.getFile()) == null : getFile().equals(s.getFile())) && ((getLine()) == (s.getLine()))) && ((getColumn()) == (s.getColumn()))
return (((getFile()) == null ? (s.getFile()) == null : getFile().equals(s.getFile())) && ((getLine()) == (s.getLine()))) && ((getColumn()) == (s.getColumn()))
return (parent) != null
assert executableJDT != null
boolean isOtherBinding = ((qualifiedNameReference.otherBindings) == null) || ((qualifiedNameReference.otherBindings.length) == 0)
p.getType().setImplicit(((argument.type) == null))
((CtArrayTypeReference) (p.getType())).getComponentType().setImplicit(((argument.type) == null))
return ((added) != null) && (!(added.isEmpty()))
return ((modified) != null) && (!(modified.isEmpty()))
return ((removed) != null) && (!(removed.isEmpty()))
return includeSamePackage || (((getPackage()) != null) && (!(CtTypeImpl.getPackageReference(typeRef).equals(getPackage().getReference()))))
return ((typeRef.getPackage()) != null) && ("java.lang".equals(typeRef.getPackage().toString()))
return ((getDeclaringType()) == null) && ((getPackage()) != null)
return ((getDeclaringType()) == null) && ((getPackage()) != null)
return (super.matches(element)) && ((element.getAnnotation(annotationType)) != null)
environment.debugMessage(((("    " + (e.getClass().getSimpleName())) + " ") + ((e.getPosition()) == null ? "(?)" : "" + (e.getPosition()))))
return (m != null) && (Modifier.isFinal(m.getModifiers()))
return (((parent.defaultValue) != null) && (getFinalExpressionFromCast(parent.defaultValue).equals(childJDT))) && (!(child.equals(ctVariable.getDefaultExpression())))
return (((parent.initialization) != null) && (getFinalExpressionFromCast(parent.initialization).equals(childJDT))) && (!(child.equals(ctVariable.getDefaultExpression())))
return (((parent.returnType) != null) && (parent.returnType.equals(childJDT))) && (!(child.equals(ctMethod.getType())))
return (((parent.defaultValue) != null) && (parent.defaultValue.equals(childJDT))) && (!(child.equals(ctAnnotationMethod.getDefaultExpression())))
return (((parent.qualification) != null) && (getFinalExpressionFromCast(parent.qualification).equals(childJDT))) && (!(child.equals(ctInvocation.getTarget())))
return (((parent.receiver) != null) && (getFinalExpressionFromCast(parent.receiver).equals(childJDT))) && (!(child.equals(ctInvocation.getTarget())))
return (((parent.enclosingInstance) != null) && (getFinalExpressionFromCast(parent.enclosingInstance).equals(childJDT))) && (!(child.equals(ctConstructorCall.getTarget())))
return ((parent.type) != null) && (parent.type.equals(childJDT))
final boolean lookingForFields = (clazz == null) || (coreFactory.createField().getClass().isAssignableFrom(clazz))
return createReference(e.getParent(CtType.class).getReference(), (lambdaMethod == null ? null : lambdaMethod.getType().clone()), executableName, refs)
return ((getExecutable()) != null) && (getExecutable().removeActualTypeArgument(actualTypeArgument))
isGenericTypeExplicit = (typeArgument != null) && ((typeArgument.length) > 0)
isNotInAnnotation = ((newArray.getParent(CtAnnotationType.class)) == null) && ((newArray.getParent(CtAnnotation.class)) == null)
isNotInAnnotation = ((newArray.getParent(CtAnnotationType.class)) == null) && ((newArray.getParent(CtAnnotation.class)) == null)
boolean isInner = (ref.getDeclaringType()) != null
return ((getExecutable()) != null) && (getExecutable().removeActualTypeArgument(actualTypeArgument))
return (currentTypeRef != null) && (typeRef.equals(currentTypeRef))
final CtQuery q = ((CtQueryable) (input)).map(new SuperInheritanceHierarchyFunction(((distinctSet) == null ? new HashSet<String>() : distinctSet)).includingSelf(true))
return (element != null) && (type.isAssignableFrom(element.getClass()))
return (null == inv) || (inv.equals(o))
new ReplacementVisitor(original, (replace == null ? ReplacementVisitor.EMPTY : new CtElement[]{ replace })).scan(original.getParent())
new ReplacementVisitor(original, (replace == null ? ReplacementVisitor.EMPTY : new CtElement[]{ replace })).scan(original.getParent())
CheckNotNull  in 908ms
ForceNullInit in 176ms
AddImplicitCastChecker --> 1 in 250ms
new CtScanner() {
    private final List<String> internals = Collections.singletonList("CtCircularTypeReference");

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 89, 4139, 4145)) {
            final String npe_invocation_var654 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var654, String.class, 89, 4139, 4161)) {
                if (!(npe_invocation_var654.startsWith("visitCt"))) {
                    return ;
                }
            }
        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 92, 4231, 4237)) {
            clone = element.clone();
        }
        final CtParameter<CtElement> ctParameter = ((CtParameter<CtElement>) (element.getParameters().get(0)));
        final CtVariableAccess<CtElement> elementVarRead = factory.Code().createVariableRead(ctParameter.getReference(), false);
        final CtInvocation cloneBuilderInvocation = createCloneBuilderInvocation(elementVarRead);
        final CtLocalVariable localCloningElement = createLocalCloningElement(ctParameter.getType(), cloneBuilderInvocation);
        for (int i = 1; i < ((clone.getBody().getStatements().size()) - 1); i++) {
            final CtInvocation targetInvocation = ((CtInvocation) (((CtInvocation) (clone.getBody().getStatement(i))).getArguments().get(0)));
            if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 103, 5012, 5027)) {
                final CtExecutableReference npe_invocation_var655 = targetInvocation.getExecutable();
                if (CallChecker.beforeDeref(npe_invocation_var655, CtExecutableReference.class, 103, 5012, 5043)) {
                    if (CallChecker.beforeDeref("getValue", String.class, 103, 4994, 5003)) {
                        if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 103, 5084, 5099)) {
                            final CtExecutableReference npe_invocation_var656 = targetInvocation.getExecutable();
                            if (CallChecker.beforeDeref(npe_invocation_var656, CtExecutableReference.class, 103, 5084, 5115)) {
                                final CtTypeReference npe_invocation_var657 = npe_invocation_var656.getDeclaringType();
                                if (CallChecker.beforeDeref(npe_invocation_var657, CtTypeReference.class, 103, 5084, 5134)) {
                                    if (CallChecker.beforeDeref("CtLiteral", String.class, 103, 5065, 5075)) {
                                        if (("getValue".equals(npe_invocation_var655.getSimpleName())) && ("CtLiteral".equals(npe_invocation_var657.getSimpleName()))) {
                                            if (CallChecker.beforeDeref(clone, CtMethod.class, 104, 5162, 5166)) {
                                                final CtBlock<T> npe_invocation_var658 = clone.getBody();
                                                if (CallChecker.beforeDeref(npe_invocation_var658, CtBlock.class, 104, 5162, 5176)) {
                                                    final CtStatement npe_invocation_var659 = npe_invocation_var658.getStatement((i--));
                                                    if (CallChecker.beforeDeref(npe_invocation_var659, CtStatement.class, 104, 5162, 5194)) {
                                                        npe_invocation_var659.delete();
                                                    }
                                                }
                                            }
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CallChecker.beforeDeref(clone, CtMethod.class, 107, 5234, 5238)) {
                final CtBlock<T> npe_invocation_var660 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var660, CtBlock.class, 107, 5234, 5248)) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 108, 5313, 5317)) {
                        final CtBlock<T> npe_invocation_var661 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var661, CtBlock.class, 108, 5313, 5327)) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 108, 5346, 5352)) {
                                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 108, 5380, 5398)) {
                                    final CodeFactory npe_invocation_var662 = factory.Code();
                                    if (CallChecker.beforeDeref(npe_invocation_var662, CodeFactory.class, 108, 5346, 5359)) {
                                        final CtStatement npe_invocation_var663 = npe_invocation_var660.getStatement(i);
                                        if (CallChecker.beforeDeref(npe_invocation_var663, CtStatement.class, 107, 5234, 5264)) {
                                            npe_invocation_var663.replace(createSetter(((CtInvocation) (npe_invocation_var661.getStatement(i))), npe_invocation_var662.createVariableRead(localCloningElement.getReference(), false)));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 112, 5475, 5479)) {
            final CtBlock<T> npe_invocation_var664 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var664, CtBlock.class, 112, 5475, 5489)) {
                final CtStatement npe_invocation_var665 = npe_invocation_var664.getStatement(0);
                if (CallChecker.beforeDeref(npe_invocation_var665, CtStatement.class, 112, 5475, 5505)) {
                    npe_invocation_var665.delete();
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 113, 5521, 5525)) {
            if (CallChecker.beforeDeref(clone, CtMethod.class, 113, 5550, 5554)) {
                final CtBlock<T> npe_invocation_var666 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var666, CtBlock.class, 113, 5550, 5564)) {
                    final List<CtStatement> npe_invocation_var667 = npe_invocation_var666.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var667, List.class, 113, 5550, 5580)) {
                        final CtBlock<T> npe_invocation_var668 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var668, CtBlock.class, 113, 5521, 5535)) {
                            final CtStatement npe_invocation_var669 = npe_invocation_var668.getStatement(((npe_invocation_var667.size()) - 1));
                            if (CallChecker.beforeDeref(npe_invocation_var669, CtStatement.class, 113, 5521, 5592)) {
                                npe_invocation_var669.delete();
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 116, 5672, 5676)) {
            final CtBlock<T> npe_invocation_var670 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var670, CtBlock.class, 116, 5672, 5686)) {
                npe_invocation_var670.insertBegin(localCloningElement);
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 119, 5771, 5775)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 119, 5814, 5820)) {
                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 119, 5848, 5866)) {
                    final CodeFactory npe_invocation_var671 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var671, CodeFactory.class, 119, 5814, 5827)) {
                        final CtBlock<T> npe_invocation_var672 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var672, CtBlock.class, 119, 5771, 5785)) {
                            npe_invocation_var672.insertEnd(createAssignment(npe_invocation_var671.createVariableRead(localCloningElement.getReference(), false)));
                        }
                    }
                }
            }
        }
        final CtComment comment = factory.Core().createComment();
        if (CallChecker.beforeDeref(comment, CtComment.class, 123, 5996, 6002)) {
            comment.setCommentType(INLINE);
        }
        if (CallChecker.beforeDeref(comment, CtComment.class, 124, 6054, 6060)) {
            comment.setContent(("auto-generated, see " + (CloneVisitorGenerator.class.getName())));
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 125, 6142, 6146)) {
            clone.addComment(comment);
        }
        if (CallChecker.beforeDeref(target, CtClass.class, 127, 6174, 6179)) {
            target.addMethod(clone);
        }
    }

    private CtInvocation<?> createSetter(CtInvocation scanInvocation, CtVariableAccess<CtElement> elementVarRead) {
        final CtInvocation<?> getter = ((CtInvocation<?>) (scanInvocation.getArguments().get(0)));
        final String getterName = getter.getExecutable().getSimpleName();
        final CtExecutableReference<Object> setterRef = factory.Executable().createReference((("void CtElement#set" + (getterName.substring(3, getterName.length()))) + "()"));
        final CtExecutableReference<Object> cloneRef = factory.Executable().createReference("CtElement spoon.support.visitor.equals.CloneHelper#clone()");
        final CtInvocation<Object> cloneInv = factory.Code().createInvocation(null, cloneRef, getter);
        if (CallChecker.beforeDeref(factory, Factory.class, 142, 7125, 7131)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 142, 7157, 7163)) {
                final TypeFactory npe_invocation_var673 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var673, TypeFactory.class, 142, 7157, 7170)) {
                    final CodeFactory npe_invocation_var674 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var674, CodeFactory.class, 142, 7125, 7138)) {
                        if (CallChecker.beforeDeref(cloneInv, CtInvocation.class, 142, 7106, 7113)) {
                            cloneInv.setTarget(npe_invocation_var674.createTypeAccess(npe_invocation_var673.createReference("spoon.support.visitor.equals.CloneHelper")));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 143, 7246, 7252)) {
            final CodeFactory npe_invocation_var675 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var675, CodeFactory.class, 143, 7246, 7259)) {
                return npe_invocation_var675.createInvocation(elementVarRead, setterRef, cloneInv);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtAssignment createAssignment(CtVariableAccess assignment) {
        if (CallChecker.beforeDeref(factory, Factory.class, 152, 7519, 7525)) {
            final CodeFactory npe_invocation_var676 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var676, CodeFactory.class, 152, 7519, 7532)) {
                return npe_invocation_var676.createVariableAssignment(other, false, assignment);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtLocalVariable<T> createLocalCloningElement(CtTypeReference<T> typeReference, CtInvocation<T> ctInvocation) {
        if (CallChecker.beforeDeref(factory, Factory.class, 162, 8054, 8060)) {
            final CodeFactory npe_invocation_var677 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var677, CodeFactory.class, 162, 8054, 8067)) {
                return npe_invocation_var677.createLocalVariable(typeReference, ("a" + (typeReference.getSimpleName())), ctInvocation);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<CloneBuilder> createCloneBuilderInvocation(CtVariableAccess<CtElement> elementAccess) {
        final CtExecutableReference<CloneBuilder> buildExecRef = factory.Executable().createReference("CloneBuilder CtElement#build()");
        if (CallChecker.beforeDeref(factory, Factory.class, 172, 8597, 8603)) {
            if (CallChecker.beforeDeref(elementAccess, CtVariableAccess.class, 172, 8720, 8732)) {
                final CodeFactory npe_invocation_var678 = factory.Code();
                if (CallChecker.beforeDeref(npe_invocation_var678, CodeFactory.class, 172, 8597, 8610)) {
                    return npe_invocation_var678.createInvocation(cloneBuilderType, buildExecRef, builderFieldAccess, elementAccess, createFactoryInvocation(elementAccess.clone()));
                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<Object> createFactoryInvocation(CtVariableAccess<CtElement> elementAccess) {
        final String typeName = elementAccess.getType().getSimpleName();
        final CtInvocation<Object> getFactory = factory.Code().createInvocation(null, factory.Executable().createReference("Factory CtElement#getFactory()"));
        if (CallChecker.beforeDeref(getFactory, CtInvocation.class, 184, 9242, 9251)) {
            getFactory.setTarget(elementAccess);
        }
        String factoryName = CallChecker.init(String.class);
        if (CallChecker.beforeDeref(internals, List.class, 186, 9354, 9362)) {
            if (internals.contains(typeName)) {
                factoryName = "Internal";
            }else {
                factoryName = "Core";
            }
        }
        final CtInvocation<Object> coreFactory = factory.Code().createInvocation(getFactory, factory.Executable().createReference((("CoreFactory Factory#" + factoryName) + "()")));
        if (CallChecker.beforeDeref(factory, Factory.class, 189, 9625, 9631)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 189, 9670, 9676)) {
                if (CallChecker.beforeDeref(typeName, String.class, 189, 9762, 9769)) {
                    final ExecutableFactory npe_invocation_var679 = factory.Executable();
                    if (CallChecker.beforeDeref(npe_invocation_var679, ExecutableFactory.class, 189, 9670, 9689)) {
                        final CodeFactory npe_invocation_var680 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var680, CodeFactory.class, 189, 9625, 9638)) {
                            return npe_invocation_var680.createInvocation(coreFactory, npe_invocation_var679.createReference((("CoreFactory CtElement#create" + (typeName.substring(2, typeName.length()))) + "()")));
                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var682.get(CtScanner.class))-->new CtScanner() {
    private final List<String> internals = Collections.singletonList("CtCircularTypeReference");

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 89, 4139, 4145)) {
            final String npe_invocation_var654 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var654, String.class, 89, 4139, 4161)) {
                if (!(npe_invocation_var654.startsWith("visitCt"))) {
                    return ;
                }
            }
        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 92, 4231, 4237)) {
            clone = element.clone();
        }
        final CtParameter<CtElement> ctParameter = ((CtParameter<CtElement>) (element.getParameters().get(0)));
        final CtVariableAccess<CtElement> elementVarRead = factory.Code().createVariableRead(ctParameter.getReference(), false);
        final CtInvocation cloneBuilderInvocation = createCloneBuilderInvocation(elementVarRead);
        final CtLocalVariable localCloningElement = createLocalCloningElement(ctParameter.getType(), cloneBuilderInvocation);
        for (int i = 1; i < ((clone.getBody().getStatements().size()) - 1); i++) {
            final CtInvocation targetInvocation = ((CtInvocation) (((CtInvocation) (clone.getBody().getStatement(i))).getArguments().get(0)));
            if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 103, 5012, 5027)) {
                final CtExecutableReference npe_invocation_var655 = targetInvocation.getExecutable();
                if (CallChecker.beforeDeref(npe_invocation_var655, CtExecutableReference.class, 103, 5012, 5043)) {
                    if (CallChecker.beforeDeref("getValue", String.class, 103, 4994, 5003)) {
                        if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 103, 5084, 5099)) {
                            final CtExecutableReference npe_invocation_var656 = targetInvocation.getExecutable();
                            if (CallChecker.beforeDeref(npe_invocation_var656, CtExecutableReference.class, 103, 5084, 5115)) {
                                final CtTypeReference npe_invocation_var657 = npe_invocation_var656.getDeclaringType();
                                if (CallChecker.beforeDeref(npe_invocation_var657, CtTypeReference.class, 103, 5084, 5134)) {
                                    if (CallChecker.beforeDeref("CtLiteral", String.class, 103, 5065, 5075)) {
                                        if (("getValue".equals(npe_invocation_var655.getSimpleName())) && ("CtLiteral".equals(npe_invocation_var657.getSimpleName()))) {
                                            if (CallChecker.beforeDeref(clone, CtMethod.class, 104, 5162, 5166)) {
                                                final CtBlock<T> npe_invocation_var658 = clone.getBody();
                                                if (CallChecker.beforeDeref(npe_invocation_var658, CtBlock.class, 104, 5162, 5176)) {
                                                    final CtStatement npe_invocation_var659 = npe_invocation_var658.getStatement((i--));
                                                    if (CallChecker.beforeDeref(npe_invocation_var659, CtStatement.class, 104, 5162, 5194)) {
                                                        npe_invocation_var659.delete();
                                                    }
                                                }
                                            }
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CallChecker.beforeDeref(clone, CtMethod.class, 107, 5234, 5238)) {
                final CtBlock<T> npe_invocation_var660 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var660, CtBlock.class, 107, 5234, 5248)) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 108, 5313, 5317)) {
                        final CtBlock<T> npe_invocation_var661 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var661, CtBlock.class, 108, 5313, 5327)) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 108, 5346, 5352)) {
                                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 108, 5380, 5398)) {
                                    final CodeFactory npe_invocation_var662 = factory.Code();
                                    if (CallChecker.beforeDeref(npe_invocation_var662, CodeFactory.class, 108, 5346, 5359)) {
                                        final CtStatement npe_invocation_var663 = npe_invocation_var660.getStatement(i);
                                        if (CallChecker.beforeDeref(npe_invocation_var663, CtStatement.class, 107, 5234, 5264)) {
                                            npe_invocation_var663.replace(createSetter(((CtInvocation) (npe_invocation_var661.getStatement(i))), npe_invocation_var662.createVariableRead(localCloningElement.getReference(), false)));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 112, 5475, 5479)) {
            final CtBlock<T> npe_invocation_var664 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var664, CtBlock.class, 112, 5475, 5489)) {
                final CtStatement npe_invocation_var665 = npe_invocation_var664.getStatement(0);
                if (CallChecker.beforeDeref(npe_invocation_var665, CtStatement.class, 112, 5475, 5505)) {
                    npe_invocation_var665.delete();
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 113, 5521, 5525)) {
            if (CallChecker.beforeDeref(clone, CtMethod.class, 113, 5550, 5554)) {
                final CtBlock<T> npe_invocation_var666 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var666, CtBlock.class, 113, 5550, 5564)) {
                    final List<CtStatement> npe_invocation_var667 = npe_invocation_var666.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var667, List.class, 113, 5550, 5580)) {
                        final CtBlock<T> npe_invocation_var668 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var668, CtBlock.class, 113, 5521, 5535)) {
                            final CtStatement npe_invocation_var669 = npe_invocation_var668.getStatement(((npe_invocation_var667.size()) - 1));
                            if (CallChecker.beforeDeref(npe_invocation_var669, CtStatement.class, 113, 5521, 5592)) {
                                npe_invocation_var669.delete();
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 116, 5672, 5676)) {
            final CtBlock<T> npe_invocation_var670 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var670, CtBlock.class, 116, 5672, 5686)) {
                npe_invocation_var670.insertBegin(localCloningElement);
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 119, 5771, 5775)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 119, 5814, 5820)) {
                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 119, 5848, 5866)) {
                    final CodeFactory npe_invocation_var671 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var671, CodeFactory.class, 119, 5814, 5827)) {
                        final CtBlock<T> npe_invocation_var672 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var672, CtBlock.class, 119, 5771, 5785)) {
                            npe_invocation_var672.insertEnd(createAssignment(npe_invocation_var671.createVariableRead(localCloningElement.getReference(), false)));
                        }
                    }
                }
            }
        }
        final CtComment comment = factory.Core().createComment();
        if (CallChecker.beforeDeref(comment, CtComment.class, 123, 5996, 6002)) {
            comment.setCommentType(INLINE);
        }
        if (CallChecker.beforeDeref(comment, CtComment.class, 124, 6054, 6060)) {
            comment.setContent(("auto-generated, see " + (CloneVisitorGenerator.class.getName())));
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 125, 6142, 6146)) {
            clone.addComment(comment);
        }
        if (CallChecker.beforeDeref(target, CtClass.class, 127, 6174, 6179)) {
            target.addMethod(clone);
        }
    }

    private CtInvocation<?> createSetter(CtInvocation scanInvocation, CtVariableAccess<CtElement> elementVarRead) {
        final CtInvocation<?> getter = ((CtInvocation<?>) (scanInvocation.getArguments().get(0)));
        final String getterName = getter.getExecutable().getSimpleName();
        final CtExecutableReference<Object> setterRef = factory.Executable().createReference((("void CtElement#set" + (getterName.substring(3, getterName.length()))) + "()"));
        final CtExecutableReference<Object> cloneRef = factory.Executable().createReference("CtElement spoon.support.visitor.equals.CloneHelper#clone()");
        final CtInvocation<Object> cloneInv = factory.Code().createInvocation(null, cloneRef, getter);
        if (CallChecker.beforeDeref(factory, Factory.class, 142, 7125, 7131)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 142, 7157, 7163)) {
                final TypeFactory npe_invocation_var673 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var673, TypeFactory.class, 142, 7157, 7170)) {
                    final CodeFactory npe_invocation_var674 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var674, CodeFactory.class, 142, 7125, 7138)) {
                        if (CallChecker.beforeDeref(cloneInv, CtInvocation.class, 142, 7106, 7113)) {
                            cloneInv.setTarget(npe_invocation_var674.createTypeAccess(npe_invocation_var673.createReference("spoon.support.visitor.equals.CloneHelper")));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 143, 7246, 7252)) {
            final CodeFactory npe_invocation_var675 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var675, CodeFactory.class, 143, 7246, 7259)) {
                return npe_invocation_var675.createInvocation(elementVarRead, setterRef, cloneInv);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtAssignment createAssignment(CtVariableAccess assignment) {
        if (CallChecker.beforeDeref(factory, Factory.class, 152, 7519, 7525)) {
            final CodeFactory npe_invocation_var676 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var676, CodeFactory.class, 152, 7519, 7532)) {
                return npe_invocation_var676.createVariableAssignment(other, false, assignment);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtLocalVariable<T> createLocalCloningElement(CtTypeReference<T> typeReference, CtInvocation<T> ctInvocation) {
        if (CallChecker.beforeDeref(factory, Factory.class, 162, 8054, 8060)) {
            final CodeFactory npe_invocation_var677 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var677, CodeFactory.class, 162, 8054, 8067)) {
                return npe_invocation_var677.createLocalVariable(typeReference, ("a" + (typeReference.getSimpleName())), ctInvocation);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<CloneBuilder> createCloneBuilderInvocation(CtVariableAccess<CtElement> elementAccess) {
        final CtExecutableReference<CloneBuilder> buildExecRef = factory.Executable().createReference("CloneBuilder CtElement#build()");
        if (CallChecker.beforeDeref(factory, Factory.class, 172, 8597, 8603)) {
            if (CallChecker.beforeDeref(elementAccess, CtVariableAccess.class, 172, 8720, 8732)) {
                final CodeFactory npe_invocation_var678 = factory.Code();
                if (CallChecker.beforeDeref(npe_invocation_var678, CodeFactory.class, 172, 8597, 8610)) {
                    return npe_invocation_var678.createInvocation(cloneBuilderType, buildExecRef, builderFieldAccess, elementAccess, createFactoryInvocation(elementAccess.clone()));
                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<Object> createFactoryInvocation(CtVariableAccess<CtElement> elementAccess) {
        final String typeName = elementAccess.getType().getSimpleName();
        final CtInvocation<Object> getFactory = factory.Code().createInvocation(null, factory.Executable().createReference("Factory CtElement#getFactory()"));
        if (CallChecker.beforeDeref(getFactory, CtInvocation.class, 184, 9242, 9251)) {
            getFactory.setTarget(elementAccess);
        }
        String factoryName = CallChecker.init(String.class);
        if (CallChecker.beforeDeref(internals, List.class, 186, 9354, 9362)) {
            if (internals.contains(typeName)) {
                factoryName = "Internal";
            }else {
                factoryName = "Core";
            }
        }
        final CtInvocation<Object> coreFactory = factory.Code().createInvocation(getFactory, factory.Executable().createReference((("CoreFactory Factory#" + factoryName) + "()")));
        if (CallChecker.beforeDeref(factory, Factory.class, 189, 9625, 9631)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 189, 9670, 9676)) {
                if (CallChecker.beforeDeref(typeName, String.class, 189, 9762, 9769)) {
                    final ExecutableFactory npe_invocation_var679 = factory.Executable();
                    if (CallChecker.beforeDeref(npe_invocation_var679, ExecutableFactory.class, 189, 9670, 9689)) {
                        final CodeFactory npe_invocation_var680 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var680, CodeFactory.class, 189, 9625, 9638)) {
                            return npe_invocation_var680.createInvocation(coreFactory, npe_invocation_var679.createReference((("CoreFactory CtElement#create" + (typeName.substring(2, typeName.length()))) + "()")));
                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var682.get(CtScanner.class))
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:137)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:1023)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1033)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:50)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
new CtScanner() {
    private final List<String> excludesAST = Arrays.asList("spoon.support.reflect.declaration.CtTypeInformationImpl", "spoon.support.reflect.code.CtAbstractInvocationImpl", "spoon.support.reflect.declaration.CtTypedElementImpl", "spoon.support.reflect.declaration.CtVariableImpl", "spoon.support.reflect.reference.CtActualTypeContainerImpl", "spoon.support.reflect.code.CtCFlowBreakImpl", "spoon.support.reflect.code.CtLabelledFlowBreakImpl", "spoon.support.reflect.declaration.CtCodeSnippetImpl", "spoon.support.reflect.declaration.CtFormalTypeDeclarerImpl", "spoon.support.reflect.declaration.CtGenericElementImpl", "spoon.support.reflect.reference.CtGenericElementReferenceImpl", "spoon.support.reflect.declaration.CtModifiableImpl", "spoon.support.reflect.declaration.CtMultiTypedElementImpl", "spoon.support.reflect.declaration.CtTypeMemberImpl");

    private final List<String> excludesFields = Arrays.asList("factory", "elementValues", "target", "metadata");

    private final CtTypeReference<List> LIST_REFERENCE = factory.Type().createReference(List.class);

    private final CtTypeReference<Collection> COLLECTION_REFERENCE = factory.Type().createReference(Collection.class);

    private final CtTypeReference<Set> SET_REFERENCE = factory.Type().createReference(Set.class);

    private final CtTypeReference<CtElement> CTELEMENT_REFERENCE = factory.Type().createReference(CtElement.class);

    private final CtClass<?> GETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(((CloneVisitorGenerator.GENERATING_CLONE_PACKAGE) + ".GetterTemplateMatcher"));

    private final CtClass<?> SETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(((CloneVisitorGenerator.GENERATING_CLONE_PACKAGE) + ".SetterTemplateMatcher"));

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 212, 11667, 11673)) {
            final String npe_invocation_var683 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var683, String.class, 212, 11667, 11689)) {
                if (CallChecker.beforeDeref(element, CtMethod.class, 212, 11717, 11723)) {
                    final String npe_invocation_var684 = element.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var684, String.class, 212, 11717, 11739)) {
                        if ((!(npe_invocation_var683.startsWith("visitCt"))) && (!(npe_invocation_var684.startsWith("scanCt")))) {
                            return ;
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(element, CtMethod.class, 215, 11817, 11823)) {
            if (CallChecker.beforeDeref("scanCtVisitable", String.class, 215, 11792, 11808)) {
                if ("scanCtVisitable".equals(element.getSimpleName())) {
                    return ;
                }
            }
        }
        final String qualifiedNameOfImplClass = ("spoon.support" + (element.getParameters().get(0).getType().getQualifiedName().substring(5))) + "Impl";
        if (CallChecker.beforeDeref(excludesAST, List.class, 219, 12017, 12027)) {
            if (excludesAST.contains(qualifiedNameOfImplClass)) {
                return ;
            }
        }
        final CtType<?> declaration = factory.Class().get(qualifiedNameOfImplClass);
        if (declaration == null) {
            if (CallChecker.beforeDeref(element, CtMethod.class, 224, 12309, 12315)) {
                throw new SpoonException(((qualifiedNameOfImplClass + " doesn't have declaration in the source path for ") + (element.getSignature())));
            }else
                throw new AbnormalExecutionError();

        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 227, 12365, 12371)) {
            clone = element.clone();
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 228, 12386, 12390)) {
            final CtBlock<T> npe_invocation_var685 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var685, CtBlock.class, 228, 12386, 12400)) {
                final List<CtStatement> npe_invocation_var686 = npe_invocation_var685.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var686, List.class, 228, 12386, 12416)) {
                    npe_invocation_var686.clear();
                }
            }
        }
        for (CtField<?> ctField : declaration.getFields()) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 230, 12517, 12523)) {
                if (CallChecker.beforeDeref(excludesFields, List.class, 230, 12493, 12506)) {
                    if (excludesFields.contains(ctField.getSimpleName())) {
                        continue;
                    }
                }
            }
            if (isConstantOrStatic(ctField)) {
                continue;
            }
            if (CallChecker.beforeDeref(ctField, CtField.class, 236, 12661, 12667)) {
                if (isSubTypeOfCtElement(ctField.getType())) {
                    continue;
                }
            }
            final CtMethod<?> setterOfField = getSetterOf(ctField);
            final CtInvocation<?> setterInvocation = createSetterInvocation(element.getParameters().get(0).getType(), setterOfField, createGetterInvocation(element.getParameters().get(0), getGetterOf(ctField)));
            final List<CtMethod<?>> methodsToAvoid = getCtMethodThrowUnsupportedOperation(setterOfField);
            if (CallChecker.beforeDeref(methodsToAvoid, List.class, 244, 13100, 13113)) {
                if ((methodsToAvoid.size()) > 0) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 245, 13135, 13139)) {
                        final CtBlock<T> npe_invocation_var687 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var687, CtBlock.class, 245, 13135, 13149)) {
                            npe_invocation_var687.addStatement(createProtectionToException(setterInvocation, methodsToAvoid));
                        }
                    }
                }else {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 247, 13248, 13252)) {
                        final CtBlock<T> npe_invocation_var688 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var688, CtBlock.class, 247, 13248, 13262)) {
                            npe_invocation_var688.addStatement(setterInvocation);
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 250, 13317, 13321)) {
            final CtBlock<T> npe_invocation_var689 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var689, CtBlock.class, 250, 13317, 13331)) {
                final List<CtStatement> npe_invocation_var690 = npe_invocation_var689.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var690, List.class, 250, 13317, 13347)) {
                    if ((npe_invocation_var690.size()) > 0) {
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 251, 13368, 13372)) {
                            final CtBlock<T> npe_invocation_var691 = clone.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var691, CtBlock.class, 251, 13368, 13382)) {
                                npe_invocation_var691.insertEnd(createSuperInvocation(element));
                            }
                        }
                        final CtComment comment = factory.Core().createComment();
                        if (CallChecker.beforeDeref(comment, CtComment.class, 255, 13532, 13538)) {
                            comment.setCommentType(INLINE);
                        }
                        if (CallChecker.beforeDeref(comment, CtComment.class, 256, 13591, 13597)) {
                            comment.setContent(("auto-generated, see " + (CloneVisitorGenerator.class.getName())));
                        }
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 257, 13680, 13684)) {
                            clone.addComment(comment);
                        }
                        if (CallChecker.beforeDeref(targetBuilder, CtClass.class, 259, 13713, 13725)) {
                            targetBuilder.addMethod(clone);
                        }
                    }
                }
            }
        }
    }

    private CtIf createProtectionToException(CtInvocation<?> setterInvocation, List<CtMethod<?>> methodsAvoid) {
        final CtIf anIf = factory.Core().createIf();
        if (CallChecker.beforeDeref(factory, Factory.class, 268, 14044, 14050)) {
            final CoreFactory npe_invocation_var692 = factory.Core();
            if (CallChecker.beforeDeref(npe_invocation_var692, CoreFactory.class, 268, 14044, 14057)) {
                final CtUnaryOperator<Object> npe_invocation_var693 = npe_invocation_var692.createUnaryOperator();
                if (CallChecker.beforeDeref(npe_invocation_var693, CtUnaryOperator.class, 268, 14044, 14079)) {
                    final CtUnaryOperator npe_invocation_var694 = npe_invocation_var693.setOperand(createBinaryConditions(methodsAvoid));
                    if (CallChecker.beforeDeref(npe_invocation_var694, CtUnaryOperator.class, 268, 14044, 14128)) {
                        if (CallChecker.beforeDeref(anIf, CtIf.class, 268, 14026, 14029)) {
                            anIf.setCondition(npe_invocation_var694.setKind(UnaryOperatorKind.NOT));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 269, 14189, 14195)) {
            final CodeFactory npe_invocation_var695 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var695, CodeFactory.class, 269, 14189, 14202)) {
                if (CallChecker.beforeDeref(anIf, CtIf.class, 269, 14167, 14170)) {
                    anIf.setThenStatement(npe_invocation_var695.createCtBlock(setterInvocation));
                }
            }
        }
        return anIf;
    }

    private CtExpression<Object> createBinaryConditions(List<CtMethod<?>> methodsAvoid) {
        CtExpression<Object> left = null;
        CtExpression<Object> right = CallChecker.init(CtExpression.class);
        for (int i = 0; i < (methodsAvoid.size()); i++) {
            final CtInterface<?> ctInterface = getInterfaceOf(methodsAvoid.get(i).getDeclaringType());
            if (i == 0) {
                if (CallChecker.beforeDeref(factory, Factory.class, 284, 14722, 14728)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 285, 14780, 14786)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 285, 14812, 14822)) {
                            final CodeFactory npe_invocation_var696 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var696, CodeFactory.class, 285, 14780, 14793)) {
                                final CodeFactory npe_invocation_var697 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var697, CodeFactory.class, 284, 14722, 14735)) {
                                    left = npe_invocation_var697.createBinaryOperator(otherRead, npe_invocation_var696.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
            }else {
                if (CallChecker.beforeDeref(factory, Factory.class, 288, 14912, 14918)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 289, 14970, 14976)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 289, 15002, 15012)) {
                            final CodeFactory npe_invocation_var698 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var698, CodeFactory.class, 289, 14970, 14983)) {
                                final CodeFactory npe_invocation_var699 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var699, CodeFactory.class, 288, 14912, 14925)) {
                                    right = npe_invocation_var699.createBinaryOperator(otherRead, npe_invocation_var698.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
                if (CallChecker.beforeDeref(factory, Factory.class, 292, 15088, 15094)) {
                    final CodeFactory npe_invocation_var700 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var700, CodeFactory.class, 292, 15088, 15101)) {
                        left = npe_invocation_var700.createBinaryOperator(left, right, BinaryOperatorKind.OR);
                    }
                }
            }
        }
        return left;
    }

    private List<CtMethod<?>> getCtMethodThrowUnsupportedOperation(CtMethod<?> method) {
        final List<CtMethod<?>> avoid = new ArrayList<>();
        final CtInterface<?> ctInterface = getInterfaceOf(method.getDeclaringType());
        if (ctInterface == null) {
            return avoid;
        }
        final CtMethod<?> declarationMethod = getMethodByCtMethod(ctInterface, method);
        for (CtMethod<?> ctMethod : Query.getElements(factory, new OverridingMethodFilter(declarationMethod))) {
            if (!(avoidThrowUnsupportedOperationException(ctMethod))) {
                if (CallChecker.beforeDeref(avoid, List.class, 310, 15891, 15895)) {
                    avoid.add(ctMethod);
                }
            }
        }
        return avoid;
    }

    private boolean avoidThrowUnsupportedOperationException(CtMethod<?> candidate) {
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 320, 16131, 16139)) {
            final CtBlock<?> npe_invocation_var701 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var701, CtBlock.class, 320, 16131, 16149)) {
                final List<CtStatement> npe_invocation_var702 = npe_invocation_var701.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var702, List.class, 320, 16131, 16165)) {
                    if ((npe_invocation_var702.size()) != 1) {
                        return true;
                    }
                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(candidate, CtMethod.class, 323, 16216, 16224)) {
            final CtBlock<?> npe_invocation_var703 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var703, CtBlock.class, 323, 16216, 16234)) {
                if (!((npe_invocation_var703.getStatement(0)) instanceof CtThrow)) {
                    return true;
                }
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        CtThrow ctThrow = CallChecker.init(CtThrow.class);
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 326, 16321, 16329)) {
            final CtBlock<?> npe_invocation_var704 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var704, CtBlock.class, 326, 16321, 16339)) {
                ctThrow = npe_invocation_var704.getStatement(0);
            }
        }
        if (CallChecker.beforeDeref(ctThrow, CtThrow.class, 327, 16368, 16374)) {
            if (!((ctThrow.getThrownExpression()) instanceof CtConstructorCall)) {
                return true;
            }
        }else
            throw new AbnormalExecutionError();

        final CtConstructorCall<? extends Throwable> thrownExpression = ((CtConstructorCall<? extends Throwable>) (ctThrow.getThrownExpression()));
        if (CallChecker.beforeDeref(thrownExpression, CtConstructorCall.class, 331, 16604, 16619)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 331, 16638, 16644)) {
                final TypeFactory npe_invocation_var705 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var705, TypeFactory.class, 331, 16638, 16651)) {
                    final CtTypeReference<? extends Throwable> npe_invocation_var706 = thrownExpression.getType();
                    if (CallChecker.beforeDeref(npe_invocation_var706, CtTypeReference.class, 331, 16604, 16629)) {
                        if (!(npe_invocation_var706.equals(npe_invocation_var705.createReference(UnsupportedOperationException.class)))) {
                            return true;
                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        return false;
    }

    private CtMethod<?> getMethodByCtMethod(CtType<?> ctType, CtMethod<?> method) {
        for (CtMethod<?> ctMethod : ctType.getAllMethods()) {
            if (CallChecker.beforeDeref(method, CtMethod.class, 342, 16968, 16973)) {
                if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 342, 16998, 17005)) {
                    final String npe_invocation_var707 = method.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var707, String.class, 342, 16968, 16989)) {
                        if (!(npe_invocation_var707.equals(ctMethod.getSimpleName()))) {
                            continue;
                        }
                    }
                }
            }
            boolean cont = CallChecker.init(boolean.class);
            if (CallChecker.beforeDeref(method, CtMethod.class, 345, 17070, 17075)) {
                final List<?> npe_invocation_var708 = method.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var708, List.class, 345, 17070, 17091)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 345, 17103, 17110)) {
                        final List<?> npe_invocation_var709 = ctMethod.getParameters();
                        if (CallChecker.beforeDeref(npe_invocation_var709, List.class, 345, 17103, 17126)) {
                            cont = (npe_invocation_var708.size()) == (npe_invocation_var709.size());
                        }
                    }
                }
            }
            for (int i = 0; cont && (i < (method.getParameters().size())); i++) {
                if (CallChecker.beforeDeref(method, CtMethod.class, 347, 17218, 17223)) {
                    final List<?> npe_invocation_var710 = method.getParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var710, List.class, 347, 17218, 17239)) {
                        if (CallChecker.beforeDeref(npe_invocation_var710.get(i), CtParameter.class, 347, 17218, 17246)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 347, 17265, 17272)) {
                                final List<?> npe_invocation_var711 = ctMethod.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var711, List.class, 347, 17265, 17288)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var711.get(i), CtParameter.class, 347, 17265, 17295)) {
                                        final CtTypeReference<?> npe_invocation_var712 = npe_invocation_var710.get(i).getType();
                                        if (CallChecker.beforeDeref(npe_invocation_var712, CtTypeReference.class, 347, 17218, 17256)) {
                                            if (!(npe_invocation_var712.equals(npe_invocation_var711.get(i).getType()))) {
                                                cont = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (cont) {
                return ctMethod;
            }
        }
        if (CallChecker.beforeDeref(method, CtMethod.class, 355, 17452, 17457)) {
            if (CallChecker.beforeDeref(ctType, CtType.class, 355, 17505, 17510)) {
                throw new AssertionError(((("Can't find method " + (method.getSignature())) + " in the given interface ") + (ctType.getQualifiedName())));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInterface<?> getInterfaceOf(CtType<?> declaringType) {
        final CtTypeReference<?>[] interfaces = declaringType.getSuperInterfaces().toArray(new CtTypeReference[declaringType.getSuperInterfaces().size()]);
        for (CtTypeReference<?> anInterface : interfaces) {
            if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 364, 17885, 17895)) {
                if (CallChecker.beforeDeref(declaringType, CtType.class, 364, 17920, 17932)) {
                    if (CallChecker.beforeDeref(declaringType, CtType.class, 364, 17963, 17975)) {
                        final String npe_invocation_var713 = declaringType.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var713, String.class, 364, 17963, 17991)) {
                            final String npe_invocation_var714 = declaringType.getSimpleName();
                            if (CallChecker.beforeDeref(npe_invocation_var714, String.class, 364, 17920, 17948)) {
                                final String npe_invocation_var715 = anInterface.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var715, String.class, 364, 17885, 17911)) {
                                    if (npe_invocation_var715.equals(npe_invocation_var714.substring(0, ((npe_invocation_var713.length()) - 4)))) {
                                        if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 365, 18041, 18051)) {
                                            return ((CtInterface<?>) (anInterface.getDeclaration()));
                                        }else
                                            throw new AbnormalExecutionError();

                                    }
                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(declaringType, CtType.class, 368, 18171, 18183)) {
            throw new AssertionError(("You should have the interface for the implementation " + (declaringType.getQualifiedName())));
        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtInvocation<T> createSuperInvocation(CtMethod<T> element) {
        if (CallChecker.beforeDeref(factory, Factory.class, 377, 18421, 18427)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 378, 18460, 18466)) {
                final CoreFactory npe_invocation_var716 = factory.Core();
                if (CallChecker.beforeDeref(npe_invocation_var716, CoreFactory.class, 378, 18460, 18473)) {
                    if (CallChecker.beforeDeref(element, CtMethod.class, 378, 18496, 18502)) {
                        if (CallChecker.beforeDeref(factory, Factory.class, 378, 18520, 18526)) {
                            if (CallChecker.beforeDeref(element, CtMethod.class, 378, 18554, 18560)) {
                                final List<?> npe_invocation_var717 = element.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var717, List.class, 378, 18554, 18576)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var717.get(0), CtParameter.class, 378, 18554, 18583)) {
                                        final CodeFactory npe_invocation_var718 = factory.Code();
                                        if (CallChecker.beforeDeref(npe_invocation_var718, CodeFactory.class, 378, 18520, 18533)) {
                                            final CodeFactory npe_invocation_var719 = factory.Code();
                                            if (CallChecker.beforeDeref(npe_invocation_var719, CodeFactory.class, 377, 18421, 18434)) {
                                                return npe_invocation_var719.createInvocation(npe_invocation_var716.createSuperAccess(), element.getReference(), npe_invocation_var718.createVariableRead(npe_invocation_var717.get(0).getReference(), false));
                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createSetterInvocation(CtTypeReference<?> type, CtMethod<?> setter, CtInvocation<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 391, 19070, 19076)) {
            if (CallChecker.beforeDeref(otherRead, CtVariableAccess.class, 391, 19102, 19110)) {
                final CtVariableAccess<Object> npe_invocation_var720 = otherRead.clone();
                if (CallChecker.beforeDeref(npe_invocation_var720, CtVariableAccess.class, 391, 19102, 19118)) {
                    if (CallChecker.beforeDeref(setter, CtMethod.class, 391, 19139, 19144)) {
                        final CodeFactory npe_invocation_var721 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var721, CodeFactory.class, 391, 19070, 19083)) {
                            return npe_invocation_var721.createInvocation(npe_invocation_var720.addTypeCast(type), setter.getReference(), getter);
                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createGetterInvocation(CtParameter<?> element, CtMethod<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 401, 19429, 19435)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 401, 19461, 19467)) {
                if (CallChecker.beforeDeref(element, CtParameter.class, 401, 19495, 19501)) {
                    final CodeFactory npe_invocation_var722 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var722, CodeFactory.class, 401, 19461, 19474)) {
                        if (CallChecker.beforeDeref(getter, CtMethod.class, 401, 19527, 19532)) {
                            final CodeFactory npe_invocation_var723 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var723, CodeFactory.class, 401, 19429, 19442)) {
                                return npe_invocation_var723.createInvocation(npe_invocation_var722.createVariableRead(element.getReference(), false), getter.getReference());
                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getSetterOf(final CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19802, 19809)) {
                final String npe_invocation_var724 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var724, String.class, 410, 19802, 19825)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19848, 19855)) {
                        final String npe_invocation_var725 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var725, String.class, 410, 19848, 19871)) {
                            if (CallChecker.beforeDeref(ctField, CtField.class, 410, 19896, 19902)) {
                                final String npe_invocation_var726 = ctField.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var726, String.class, 410, 19896, 19918)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var725.toLowerCase(), String.class, 410, 19848, 19885)) {
                                        if ((npe_invocation_var724.startsWith("set")) && (npe_invocation_var725.toLowerCase().contains(npe_invocation_var726.toLowerCase()))) {
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 411, 19948, 19955)) {
                                                final List<?> npe_invocation_var727 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var727, List.class, 411, 19948, 19971)) {
                                                    if ((npe_invocation_var727.size()) != 1) {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 414, 20024, 20031)) {
                                                final List<?> npe_invocation_var728 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var728, List.class, 414, 20024, 20047)) {
                                                    if (CallChecker.beforeDeref(npe_invocation_var728.get(0), CtParameter.class, 414, 20024, 20054)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 414, 20073, 20079)) {
                                                            final CtTypeReference<?> npe_invocation_var729 = npe_invocation_var728.get(0).getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var729, CtTypeReference.class, 414, 20024, 20064)) {
                                                                if (!(npe_invocation_var729.equals(ctField.getType()))) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            return ctMethod;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(factory, Factory.class, 420, 20214, 20220)) {
            final TypeFactory npe_invocation_var730 = factory.Type();
            if (CallChecker.beforeDeref(npe_invocation_var730, TypeFactory.class, 420, 20214, 20227)) {
                if (CallChecker.beforeDeref(SETTER_TEMPLATE_MATCHER_CLASS, CtClass.class, 420, 20160, 20188)) {
                    final CtMethod<Object> npe_invocation_var731 = SETTER_TEMPLATE_MATCHER_CLASS.getMethod("setElement", npe_invocation_var730.BOOLEAN_PRIMITIVE);
                    if (CallChecker.beforeDeref(npe_invocation_var731, CtMethod.class, 420, 20160, 20246)) {
                        npe_invocation_var731.getBody();
                    }
                }
            }
        }
        final List<CtMethod> matchers = ctField.getDeclaringType().getElements(new TypeFilter<CtMethod>(CtMethod.class) {
            @Override
            public boolean matches(CtMethod element) {
                final CtBlock body = element.getBody();
                if (CallChecker.beforeDeref(body, CtBlock.class, 425, 20496, 20499)) {
                    final List<CtStatement> npe_invocation_var732 = body.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var732, List.class, 425, 20496, 20515)) {
                        if ((npe_invocation_var732.size()) != 2) {
                            return false;
                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

                if (CallChecker.beforeDeref(body, CtBlock.class, 428, 20571, 20574)) {
                    if ((body.getStatement(0)) instanceof CtAssignment) {
                        final CtExpression assigned = ((CtAssignment) (body.getStatement(0))).getAssigned();
                        if (!(assigned instanceof CtFieldAccess)) {
                            return false;
                        }
                        if (CallChecker.beforeDeref(assigned, CtExpression.class, 433, 20820, 20827)) {
                            final CtFieldReference npe_invocation_var733 = ((CtFieldAccess) (assigned)).getVariable();
                            if (CallChecker.beforeDeref(npe_invocation_var733, CtFieldReference.class, 433, 20803, 20842)) {
                                if (CallChecker.beforeDeref(ctField, CtField.class, 433, 20867, 20873)) {
                                    final String npe_invocation_var734 = npe_invocation_var733.getSimpleName();
                                    if (CallChecker.beforeDeref(npe_invocation_var734, String.class, 433, 20803, 20858)) {
                                        if (!(npe_invocation_var734.equals(ctField.getSimpleName()))) {
                                            return false;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else {
                        return false;
                    }
                }else
                    throw new AbnormalExecutionError();

                return true;
            }
        });
        if (CallChecker.beforeDeref(matchers, List.class, 442, 21012, 21019)) {
            if ((matchers.size()) != 1) {
                throw new SpoonException("Get more than one setter. Please make an more ingenious method to get setter method.");
            }
        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 445, 21172, 21179)) {
            return matchers.get(0);
        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getGetterOf(CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21439, 21446)) {
                final String npe_invocation_var735 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var735, String.class, 454, 21439, 21462)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21485, 21492)) {
                        final String npe_invocation_var736 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var736, String.class, 454, 21485, 21508)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 455, 21541, 21548)) {
                                final String npe_invocation_var737 = ctMethod.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var737, String.class, 455, 21541, 21564)) {
                                    if (CallChecker.beforeDeref(ctField, CtField.class, 455, 21589, 21595)) {
                                        final String npe_invocation_var738 = ctField.getSimpleName();
                                        if (CallChecker.beforeDeref(npe_invocation_var738, String.class, 455, 21589, 21611)) {
                                            if (CallChecker.beforeDeref(npe_invocation_var737.toLowerCase(), String.class, 455, 21541, 21578)) {
                                                if (((npe_invocation_var735.startsWith("get")) || (npe_invocation_var736.startsWith("is"))) && (npe_invocation_var737.toLowerCase().contains(npe_invocation_var738.toLowerCase()))) {
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 456, 21642, 21649)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 456, 21668, 21674)) {
                                                            final CtTypeReference<?> npe_invocation_var739 = ctMethod.getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var739, CtTypeReference.class, 456, 21642, 21659)) {
                                                                if (!(npe_invocation_var739.equals(ctField.getType()))) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 459, 21725, 21732)) {
                                                        final List<?> npe_invocation_var740 = ctMethod.getParameters();
                                                        if (CallChecker.beforeDeref(npe_invocation_var740, List.class, 459, 21725, 21748)) {
                                                            if ((npe_invocation_var740.size()) != 0) {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    return ctMethod;
                                                }
                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        final CtBlock<?> templateRoot = GETTER_TEMPLATE_MATCHER_CLASS.getMethod("getElement").getBody();
        if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 467, 21972, 21983)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 467, 22024, 22030)) {
                if (CallChecker.beforeDeref(ctField, CtField.class, 467, 22058, 22064)) {
                    final CodeFactory npe_invocation_var741 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var741, CodeFactory.class, 467, 22024, 22037)) {
                        final CtReturn npe_invocation_var742 = ((CtReturn) (templateRoot.getStatement(0)));
                        if (CallChecker.beforeDeref(npe_invocation_var742, CtReturn.class, 467, 21972, 21999)) {
                            npe_invocation_var742.setReturnedExpression(npe_invocation_var741.createVariableRead(ctField.getReference(), true));
                        }
                    }
                }
            }
        }
        List<CtMethod> matchers = CallChecker.init(List.class);
        if (CallChecker.beforeDeref(ctField, CtField.class, 468, 22120, 22126)) {
            final CtType<?> npe_invocation_var744 = ctField.getDeclaringType();
            if (CallChecker.beforeDeref(npe_invocation_var744, CtType.class, 468, 22120, 22145)) {
                matchers = npe_invocation_var744.getElements(new TypeFilter<CtMethod>(CtMethod.class) {
                    @Override
                    public boolean matches(CtMethod element) {
                        if (CallChecker.beforeDeref(element, CtMethod.class, 471, 22278, 22284)) {
                            final CtBlock npe_invocation_var743 = element.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var743, CtBlock.class, 471, 22278, 22294)) {
                                if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 471, 22314, 22325)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var743.toString(), String.class, 471, 22278, 22305)) {
                                        return npe_invocation_var743.toString().equals(templateRoot.toString());
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }
                });
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 474, 22363, 22370)) {
            if ((matchers.size()) != 1) {
                throw new SpoonException("Get more than one getter. Please make an more ingenious method to get getter method.");
            }
        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 477, 22523, 22530)) {
            return matchers.get(0);
        }else
            throw new AbnormalExecutionError();

    }

    private boolean isSubTypeOfCtElement(CtTypeReference<?> type) {
        if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22687, 22690)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 484, 22722, 22728)) {
                final TypeFactory npe_invocation_var745 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var745, TypeFactory.class, 484, 22722, 22735)) {
                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22710, 22713)) {
                        if ((!(type.isPrimitive())) && (!(type.equals(npe_invocation_var745.STRING)))) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 485, 22774, 22780)) {
                                final TypeFactory npe_invocation_var746 = factory.Type();
                                if (CallChecker.beforeDeref(npe_invocation_var746, TypeFactory.class, 485, 22774, 22787)) {
                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 485, 22757, 22760)) {
                                        if (type.isSubtypeOf(npe_invocation_var746.createReference(CtElement.class))) {
                                            return true;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                            if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22861, 22864)) {
                                if (CallChecker.beforeDeref(LIST_REFERENCE, CtTypeReference.class, 488, 22892, 22905)) {
                                    final String npe_invocation_var747 = type.getQualifiedName();
                                    if (CallChecker.beforeDeref(npe_invocation_var747, String.class, 488, 22861, 22883)) {
                                        if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22930, 22933)) {
                                            if (CallChecker.beforeDeref(COLLECTION_REFERENCE, CtTypeReference.class, 488, 22961, 22980)) {
                                                final String npe_invocation_var748 = type.getQualifiedName();
                                                if (CallChecker.beforeDeref(npe_invocation_var748, String.class, 488, 22930, 22952)) {
                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 23005, 23008)) {
                                                        if (CallChecker.beforeDeref(SET_REFERENCE, CtTypeReference.class, 488, 23036, 23048)) {
                                                            final String npe_invocation_var749 = type.getQualifiedName();
                                                            if (CallChecker.beforeDeref(npe_invocation_var749, String.class, 488, 23005, 23027)) {
                                                                if (((npe_invocation_var747.equals(LIST_REFERENCE.getQualifiedName())) || (npe_invocation_var748.equals(COLLECTION_REFERENCE.getQualifiedName()))) || (npe_invocation_var749.equals(SET_REFERENCE.getQualifiedName()))) {
                                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 489, 23083, 23086)) {
                                                                        final List<?> npe_invocation_var750 = type.getActualTypeArguments();
                                                                        if (CallChecker.beforeDeref(npe_invocation_var750, List.class, 489, 23083, 23111)) {
                                                                            if (CallChecker.beforeDeref(npe_invocation_var750.get(0), CtTypeReference.class, 489, 23083, 23118)) {
                                                                                if (npe_invocation_var750.get(0).isSubtypeOf(CTELEMENT_REFERENCE)) {
                                                                                    return true;
                                                                                }
                                                                            }else
                                                                                throw new AbnormalExecutionError();

                                                                        }else
                                                                            throw new AbnormalExecutionError();

                                                                    }else
                                                                        throw new AbnormalExecutionError();

                                                                }
                                                            }else
                                                                throw new AbnormalExecutionError();

                                                        }else
                                                            throw new AbnormalExecutionError();

                                                    }else
                                                        throw new AbnormalExecutionError();

                                                }else
                                                    throw new AbnormalExecutionError();

                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        return false;
    }

    private boolean isConstantOrStatic(CtField<?> ctField) {
        if (CallChecker.beforeDeref(ctField, CtField.class, 498, 23292, 23298)) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 498, 23347, 23353)) {
                return (ctField.getModifiers().contains(ModifierKind.FINAL)) || (ctField.getModifiers().contains(ModifierKind.STATIC));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var752.get(CtInheritanceScanner.class))-->new CtScanner() {
    private final List<String> excludesAST = Arrays.asList("spoon.support.reflect.declaration.CtTypeInformationImpl", "spoon.support.reflect.code.CtAbstractInvocationImpl", "spoon.support.reflect.declaration.CtTypedElementImpl", "spoon.support.reflect.declaration.CtVariableImpl", "spoon.support.reflect.reference.CtActualTypeContainerImpl", "spoon.support.reflect.code.CtCFlowBreakImpl", "spoon.support.reflect.code.CtLabelledFlowBreakImpl", "spoon.support.reflect.declaration.CtCodeSnippetImpl", "spoon.support.reflect.declaration.CtFormalTypeDeclarerImpl", "spoon.support.reflect.declaration.CtGenericElementImpl", "spoon.support.reflect.reference.CtGenericElementReferenceImpl", "spoon.support.reflect.declaration.CtModifiableImpl", "spoon.support.reflect.declaration.CtMultiTypedElementImpl", "spoon.support.reflect.declaration.CtTypeMemberImpl");

    private final List<String> excludesFields = Arrays.asList("factory", "elementValues", "target", "metadata");

    private final CtTypeReference<List> LIST_REFERENCE = factory.Type().createReference(List.class);

    private final CtTypeReference<Collection> COLLECTION_REFERENCE = factory.Type().createReference(Collection.class);

    private final CtTypeReference<Set> SET_REFERENCE = factory.Type().createReference(Set.class);

    private final CtTypeReference<CtElement> CTELEMENT_REFERENCE = factory.Type().createReference(CtElement.class);

    private final CtClass<?> GETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(((CloneVisitorGenerator.GENERATING_CLONE_PACKAGE) + ".GetterTemplateMatcher"));

    private final CtClass<?> SETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(((CloneVisitorGenerator.GENERATING_CLONE_PACKAGE) + ".SetterTemplateMatcher"));

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 212, 11667, 11673)) {
            final String npe_invocation_var683 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var683, String.class, 212, 11667, 11689)) {
                if (CallChecker.beforeDeref(element, CtMethod.class, 212, 11717, 11723)) {
                    final String npe_invocation_var684 = element.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var684, String.class, 212, 11717, 11739)) {
                        if ((!(npe_invocation_var683.startsWith("visitCt"))) && (!(npe_invocation_var684.startsWith("scanCt")))) {
                            return ;
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(element, CtMethod.class, 215, 11817, 11823)) {
            if (CallChecker.beforeDeref("scanCtVisitable", String.class, 215, 11792, 11808)) {
                if ("scanCtVisitable".equals(element.getSimpleName())) {
                    return ;
                }
            }
        }
        final String qualifiedNameOfImplClass = ("spoon.support" + (element.getParameters().get(0).getType().getQualifiedName().substring(5))) + "Impl";
        if (CallChecker.beforeDeref(excludesAST, List.class, 219, 12017, 12027)) {
            if (excludesAST.contains(qualifiedNameOfImplClass)) {
                return ;
            }
        }
        final CtType<?> declaration = factory.Class().get(qualifiedNameOfImplClass);
        if (declaration == null) {
            if (CallChecker.beforeDeref(element, CtMethod.class, 224, 12309, 12315)) {
                throw new SpoonException(((qualifiedNameOfImplClass + " doesn't have declaration in the source path for ") + (element.getSignature())));
            }else
                throw new AbnormalExecutionError();

        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 227, 12365, 12371)) {
            clone = element.clone();
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 228, 12386, 12390)) {
            final CtBlock<T> npe_invocation_var685 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var685, CtBlock.class, 228, 12386, 12400)) {
                final List<CtStatement> npe_invocation_var686 = npe_invocation_var685.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var686, List.class, 228, 12386, 12416)) {
                    npe_invocation_var686.clear();
                }
            }
        }
        for (CtField<?> ctField : declaration.getFields()) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 230, 12517, 12523)) {
                if (CallChecker.beforeDeref(excludesFields, List.class, 230, 12493, 12506)) {
                    if (excludesFields.contains(ctField.getSimpleName())) {
                        continue;
                    }
                }
            }
            if (isConstantOrStatic(ctField)) {
                continue;
            }
            if (CallChecker.beforeDeref(ctField, CtField.class, 236, 12661, 12667)) {
                if (isSubTypeOfCtElement(ctField.getType())) {
                    continue;
                }
            }
            final CtMethod<?> setterOfField = getSetterOf(ctField);
            final CtInvocation<?> setterInvocation = createSetterInvocation(element.getParameters().get(0).getType(), setterOfField, createGetterInvocation(element.getParameters().get(0), getGetterOf(ctField)));
            final List<CtMethod<?>> methodsToAvoid = getCtMethodThrowUnsupportedOperation(setterOfField);
            if (CallChecker.beforeDeref(methodsToAvoid, List.class, 244, 13100, 13113)) {
                if ((methodsToAvoid.size()) > 0) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 245, 13135, 13139)) {
                        final CtBlock<T> npe_invocation_var687 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var687, CtBlock.class, 245, 13135, 13149)) {
                            npe_invocation_var687.addStatement(createProtectionToException(setterInvocation, methodsToAvoid));
                        }
                    }
                }else {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 247, 13248, 13252)) {
                        final CtBlock<T> npe_invocation_var688 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var688, CtBlock.class, 247, 13248, 13262)) {
                            npe_invocation_var688.addStatement(setterInvocation);
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 250, 13317, 13321)) {
            final CtBlock<T> npe_invocation_var689 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var689, CtBlock.class, 250, 13317, 13331)) {
                final List<CtStatement> npe_invocation_var690 = npe_invocation_var689.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var690, List.class, 250, 13317, 13347)) {
                    if ((npe_invocation_var690.size()) > 0) {
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 251, 13368, 13372)) {
                            final CtBlock<T> npe_invocation_var691 = clone.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var691, CtBlock.class, 251, 13368, 13382)) {
                                npe_invocation_var691.insertEnd(createSuperInvocation(element));
                            }
                        }
                        final CtComment comment = factory.Core().createComment();
                        if (CallChecker.beforeDeref(comment, CtComment.class, 255, 13532, 13538)) {
                            comment.setCommentType(INLINE);
                        }
                        if (CallChecker.beforeDeref(comment, CtComment.class, 256, 13591, 13597)) {
                            comment.setContent(("auto-generated, see " + (CloneVisitorGenerator.class.getName())));
                        }
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 257, 13680, 13684)) {
                            clone.addComment(comment);
                        }
                        if (CallChecker.beforeDeref(targetBuilder, CtClass.class, 259, 13713, 13725)) {
                            targetBuilder.addMethod(clone);
                        }
                    }
                }
            }
        }
    }

    private CtIf createProtectionToException(CtInvocation<?> setterInvocation, List<CtMethod<?>> methodsAvoid) {
        final CtIf anIf = factory.Core().createIf();
        if (CallChecker.beforeDeref(factory, Factory.class, 268, 14044, 14050)) {
            final CoreFactory npe_invocation_var692 = factory.Core();
            if (CallChecker.beforeDeref(npe_invocation_var692, CoreFactory.class, 268, 14044, 14057)) {
                final CtUnaryOperator<Object> npe_invocation_var693 = npe_invocation_var692.createUnaryOperator();
                if (CallChecker.beforeDeref(npe_invocation_var693, CtUnaryOperator.class, 268, 14044, 14079)) {
                    final CtUnaryOperator npe_invocation_var694 = npe_invocation_var693.setOperand(createBinaryConditions(methodsAvoid));
                    if (CallChecker.beforeDeref(npe_invocation_var694, CtUnaryOperator.class, 268, 14044, 14128)) {
                        if (CallChecker.beforeDeref(anIf, CtIf.class, 268, 14026, 14029)) {
                            anIf.setCondition(npe_invocation_var694.setKind(UnaryOperatorKind.NOT));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 269, 14189, 14195)) {
            final CodeFactory npe_invocation_var695 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var695, CodeFactory.class, 269, 14189, 14202)) {
                if (CallChecker.beforeDeref(anIf, CtIf.class, 269, 14167, 14170)) {
                    anIf.setThenStatement(npe_invocation_var695.createCtBlock(setterInvocation));
                }
            }
        }
        return anIf;
    }

    private CtExpression<Object> createBinaryConditions(List<CtMethod<?>> methodsAvoid) {
        CtExpression<Object> left = null;
        CtExpression<Object> right = CallChecker.init(CtExpression.class);
        for (int i = 0; i < (methodsAvoid.size()); i++) {
            final CtInterface<?> ctInterface = getInterfaceOf(methodsAvoid.get(i).getDeclaringType());
            if (i == 0) {
                if (CallChecker.beforeDeref(factory, Factory.class, 284, 14722, 14728)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 285, 14780, 14786)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 285, 14812, 14822)) {
                            final CodeFactory npe_invocation_var696 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var696, CodeFactory.class, 285, 14780, 14793)) {
                                final CodeFactory npe_invocation_var697 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var697, CodeFactory.class, 284, 14722, 14735)) {
                                    left = npe_invocation_var697.createBinaryOperator(otherRead, npe_invocation_var696.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
            }else {
                if (CallChecker.beforeDeref(factory, Factory.class, 288, 14912, 14918)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 289, 14970, 14976)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 289, 15002, 15012)) {
                            final CodeFactory npe_invocation_var698 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var698, CodeFactory.class, 289, 14970, 14983)) {
                                final CodeFactory npe_invocation_var699 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var699, CodeFactory.class, 288, 14912, 14925)) {
                                    right = npe_invocation_var699.createBinaryOperator(otherRead, npe_invocation_var698.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
                if (CallChecker.beforeDeref(factory, Factory.class, 292, 15088, 15094)) {
                    final CodeFactory npe_invocation_var700 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var700, CodeFactory.class, 292, 15088, 15101)) {
                        left = npe_invocation_var700.createBinaryOperator(left, right, BinaryOperatorKind.OR);
                    }
                }
            }
        }
        return left;
    }

    private List<CtMethod<?>> getCtMethodThrowUnsupportedOperation(CtMethod<?> method) {
        final List<CtMethod<?>> avoid = new ArrayList<>();
        final CtInterface<?> ctInterface = getInterfaceOf(method.getDeclaringType());
        if (ctInterface == null) {
            return avoid;
        }
        final CtMethod<?> declarationMethod = getMethodByCtMethod(ctInterface, method);
        for (CtMethod<?> ctMethod : Query.getElements(factory, new OverridingMethodFilter(declarationMethod))) {
            if (!(avoidThrowUnsupportedOperationException(ctMethod))) {
                if (CallChecker.beforeDeref(avoid, List.class, 310, 15891, 15895)) {
                    avoid.add(ctMethod);
                }
            }
        }
        return avoid;
    }

    private boolean avoidThrowUnsupportedOperationException(CtMethod<?> candidate) {
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 320, 16131, 16139)) {
            final CtBlock<?> npe_invocation_var701 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var701, CtBlock.class, 320, 16131, 16149)) {
                final List<CtStatement> npe_invocation_var702 = npe_invocation_var701.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var702, List.class, 320, 16131, 16165)) {
                    if ((npe_invocation_var702.size()) != 1) {
                        return true;
                    }
                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(candidate, CtMethod.class, 323, 16216, 16224)) {
            final CtBlock<?> npe_invocation_var703 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var703, CtBlock.class, 323, 16216, 16234)) {
                if (!((npe_invocation_var703.getStatement(0)) instanceof CtThrow)) {
                    return true;
                }
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        CtThrow ctThrow = CallChecker.init(CtThrow.class);
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 326, 16321, 16329)) {
            final CtBlock<?> npe_invocation_var704 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var704, CtBlock.class, 326, 16321, 16339)) {
                ctThrow = npe_invocation_var704.getStatement(0);
            }
        }
        if (CallChecker.beforeDeref(ctThrow, CtThrow.class, 327, 16368, 16374)) {
            if (!((ctThrow.getThrownExpression()) instanceof CtConstructorCall)) {
                return true;
            }
        }else
            throw new AbnormalExecutionError();

        final CtConstructorCall<? extends Throwable> thrownExpression = ((CtConstructorCall<? extends Throwable>) (ctThrow.getThrownExpression()));
        if (CallChecker.beforeDeref(thrownExpression, CtConstructorCall.class, 331, 16604, 16619)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 331, 16638, 16644)) {
                final TypeFactory npe_invocation_var705 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var705, TypeFactory.class, 331, 16638, 16651)) {
                    final CtTypeReference<? extends Throwable> npe_invocation_var706 = thrownExpression.getType();
                    if (CallChecker.beforeDeref(npe_invocation_var706, CtTypeReference.class, 331, 16604, 16629)) {
                        if (!(npe_invocation_var706.equals(npe_invocation_var705.createReference(UnsupportedOperationException.class)))) {
                            return true;
                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        return false;
    }

    private CtMethod<?> getMethodByCtMethod(CtType<?> ctType, CtMethod<?> method) {
        for (CtMethod<?> ctMethod : ctType.getAllMethods()) {
            if (CallChecker.beforeDeref(method, CtMethod.class, 342, 16968, 16973)) {
                if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 342, 16998, 17005)) {
                    final String npe_invocation_var707 = method.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var707, String.class, 342, 16968, 16989)) {
                        if (!(npe_invocation_var707.equals(ctMethod.getSimpleName()))) {
                            continue;
                        }
                    }
                }
            }
            boolean cont = CallChecker.init(boolean.class);
            if (CallChecker.beforeDeref(method, CtMethod.class, 345, 17070, 17075)) {
                final List<?> npe_invocation_var708 = method.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var708, List.class, 345, 17070, 17091)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 345, 17103, 17110)) {
                        final List<?> npe_invocation_var709 = ctMethod.getParameters();
                        if (CallChecker.beforeDeref(npe_invocation_var709, List.class, 345, 17103, 17126)) {
                            cont = (npe_invocation_var708.size()) == (npe_invocation_var709.size());
                        }
                    }
                }
            }
            for (int i = 0; cont && (i < (method.getParameters().size())); i++) {
                if (CallChecker.beforeDeref(method, CtMethod.class, 347, 17218, 17223)) {
                    final List<?> npe_invocation_var710 = method.getParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var710, List.class, 347, 17218, 17239)) {
                        if (CallChecker.beforeDeref(npe_invocation_var710.get(i), CtParameter.class, 347, 17218, 17246)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 347, 17265, 17272)) {
                                final List<?> npe_invocation_var711 = ctMethod.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var711, List.class, 347, 17265, 17288)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var711.get(i), CtParameter.class, 347, 17265, 17295)) {
                                        final CtTypeReference<?> npe_invocation_var712 = npe_invocation_var710.get(i).getType();
                                        if (CallChecker.beforeDeref(npe_invocation_var712, CtTypeReference.class, 347, 17218, 17256)) {
                                            if (!(npe_invocation_var712.equals(npe_invocation_var711.get(i).getType()))) {
                                                cont = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (cont) {
                return ctMethod;
            }
        }
        if (CallChecker.beforeDeref(method, CtMethod.class, 355, 17452, 17457)) {
            if (CallChecker.beforeDeref(ctType, CtType.class, 355, 17505, 17510)) {
                throw new AssertionError(((("Can't find method " + (method.getSignature())) + " in the given interface ") + (ctType.getQualifiedName())));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInterface<?> getInterfaceOf(CtType<?> declaringType) {
        final CtTypeReference<?>[] interfaces = declaringType.getSuperInterfaces().toArray(new CtTypeReference[declaringType.getSuperInterfaces().size()]);
        for (CtTypeReference<?> anInterface : interfaces) {
            if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 364, 17885, 17895)) {
                if (CallChecker.beforeDeref(declaringType, CtType.class, 364, 17920, 17932)) {
                    if (CallChecker.beforeDeref(declaringType, CtType.class, 364, 17963, 17975)) {
                        final String npe_invocation_var713 = declaringType.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var713, String.class, 364, 17963, 17991)) {
                            final String npe_invocation_var714 = declaringType.getSimpleName();
                            if (CallChecker.beforeDeref(npe_invocation_var714, String.class, 364, 17920, 17948)) {
                                final String npe_invocation_var715 = anInterface.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var715, String.class, 364, 17885, 17911)) {
                                    if (npe_invocation_var715.equals(npe_invocation_var714.substring(0, ((npe_invocation_var713.length()) - 4)))) {
                                        if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 365, 18041, 18051)) {
                                            return ((CtInterface<?>) (anInterface.getDeclaration()));
                                        }else
                                            throw new AbnormalExecutionError();

                                    }
                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(declaringType, CtType.class, 368, 18171, 18183)) {
            throw new AssertionError(("You should have the interface for the implementation " + (declaringType.getQualifiedName())));
        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtInvocation<T> createSuperInvocation(CtMethod<T> element) {
        if (CallChecker.beforeDeref(factory, Factory.class, 377, 18421, 18427)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 378, 18460, 18466)) {
                final CoreFactory npe_invocation_var716 = factory.Core();
                if (CallChecker.beforeDeref(npe_invocation_var716, CoreFactory.class, 378, 18460, 18473)) {
                    if (CallChecker.beforeDeref(element, CtMethod.class, 378, 18496, 18502)) {
                        if (CallChecker.beforeDeref(factory, Factory.class, 378, 18520, 18526)) {
                            if (CallChecker.beforeDeref(element, CtMethod.class, 378, 18554, 18560)) {
                                final List<?> npe_invocation_var717 = element.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var717, List.class, 378, 18554, 18576)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var717.get(0), CtParameter.class, 378, 18554, 18583)) {
                                        final CodeFactory npe_invocation_var718 = factory.Code();
                                        if (CallChecker.beforeDeref(npe_invocation_var718, CodeFactory.class, 378, 18520, 18533)) {
                                            final CodeFactory npe_invocation_var719 = factory.Code();
                                            if (CallChecker.beforeDeref(npe_invocation_var719, CodeFactory.class, 377, 18421, 18434)) {
                                                return npe_invocation_var719.createInvocation(npe_invocation_var716.createSuperAccess(), element.getReference(), npe_invocation_var718.createVariableRead(npe_invocation_var717.get(0).getReference(), false));
                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createSetterInvocation(CtTypeReference<?> type, CtMethod<?> setter, CtInvocation<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 391, 19070, 19076)) {
            if (CallChecker.beforeDeref(otherRead, CtVariableAccess.class, 391, 19102, 19110)) {
                final CtVariableAccess<Object> npe_invocation_var720 = otherRead.clone();
                if (CallChecker.beforeDeref(npe_invocation_var720, CtVariableAccess.class, 391, 19102, 19118)) {
                    if (CallChecker.beforeDeref(setter, CtMethod.class, 391, 19139, 19144)) {
                        final CodeFactory npe_invocation_var721 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var721, CodeFactory.class, 391, 19070, 19083)) {
                            return npe_invocation_var721.createInvocation(npe_invocation_var720.addTypeCast(type), setter.getReference(), getter);
                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createGetterInvocation(CtParameter<?> element, CtMethod<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 401, 19429, 19435)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 401, 19461, 19467)) {
                if (CallChecker.beforeDeref(element, CtParameter.class, 401, 19495, 19501)) {
                    final CodeFactory npe_invocation_var722 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var722, CodeFactory.class, 401, 19461, 19474)) {
                        if (CallChecker.beforeDeref(getter, CtMethod.class, 401, 19527, 19532)) {
                            final CodeFactory npe_invocation_var723 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var723, CodeFactory.class, 401, 19429, 19442)) {
                                return npe_invocation_var723.createInvocation(npe_invocation_var722.createVariableRead(element.getReference(), false), getter.getReference());
                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getSetterOf(final CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19802, 19809)) {
                final String npe_invocation_var724 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var724, String.class, 410, 19802, 19825)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19848, 19855)) {
                        final String npe_invocation_var725 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var725, String.class, 410, 19848, 19871)) {
                            if (CallChecker.beforeDeref(ctField, CtField.class, 410, 19896, 19902)) {
                                final String npe_invocation_var726 = ctField.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var726, String.class, 410, 19896, 19918)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var725.toLowerCase(), String.class, 410, 19848, 19885)) {
                                        if ((npe_invocation_var724.startsWith("set")) && (npe_invocation_var725.toLowerCase().contains(npe_invocation_var726.toLowerCase()))) {
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 411, 19948, 19955)) {
                                                final List<?> npe_invocation_var727 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var727, List.class, 411, 19948, 19971)) {
                                                    if ((npe_invocation_var727.size()) != 1) {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 414, 20024, 20031)) {
                                                final List<?> npe_invocation_var728 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var728, List.class, 414, 20024, 20047)) {
                                                    if (CallChecker.beforeDeref(npe_invocation_var728.get(0), CtParameter.class, 414, 20024, 20054)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 414, 20073, 20079)) {
                                                            final CtTypeReference<?> npe_invocation_var729 = npe_invocation_var728.get(0).getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var729, CtTypeReference.class, 414, 20024, 20064)) {
                                                                if (!(npe_invocation_var729.equals(ctField.getType()))) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            return ctMethod;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(factory, Factory.class, 420, 20214, 20220)) {
            final TypeFactory npe_invocation_var730 = factory.Type();
            if (CallChecker.beforeDeref(npe_invocation_var730, TypeFactory.class, 420, 20214, 20227)) {
                if (CallChecker.beforeDeref(SETTER_TEMPLATE_MATCHER_CLASS, CtClass.class, 420, 20160, 20188)) {
                    final CtMethod<Object> npe_invocation_var731 = SETTER_TEMPLATE_MATCHER_CLASS.getMethod("setElement", npe_invocation_var730.BOOLEAN_PRIMITIVE);
                    if (CallChecker.beforeDeref(npe_invocation_var731, CtMethod.class, 420, 20160, 20246)) {
                        npe_invocation_var731.getBody();
                    }
                }
            }
        }
        final List<CtMethod> matchers = ctField.getDeclaringType().getElements(new TypeFilter<CtMethod>(CtMethod.class) {
            @Override
            public boolean matches(CtMethod element) {
                final CtBlock body = element.getBody();
                if (CallChecker.beforeDeref(body, CtBlock.class, 425, 20496, 20499)) {
                    final List<CtStatement> npe_invocation_var732 = body.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var732, List.class, 425, 20496, 20515)) {
                        if ((npe_invocation_var732.size()) != 2) {
                            return false;
                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

                if (CallChecker.beforeDeref(body, CtBlock.class, 428, 20571, 20574)) {
                    if ((body.getStatement(0)) instanceof CtAssignment) {
                        final CtExpression assigned = ((CtAssignment) (body.getStatement(0))).getAssigned();
                        if (!(assigned instanceof CtFieldAccess)) {
                            return false;
                        }
                        if (CallChecker.beforeDeref(assigned, CtExpression.class, 433, 20820, 20827)) {
                            final CtFieldReference npe_invocation_var733 = ((CtFieldAccess) (assigned)).getVariable();
                            if (CallChecker.beforeDeref(npe_invocation_var733, CtFieldReference.class, 433, 20803, 20842)) {
                                if (CallChecker.beforeDeref(ctField, CtField.class, 433, 20867, 20873)) {
                                    final String npe_invocation_var734 = npe_invocation_var733.getSimpleName();
                                    if (CallChecker.beforeDeref(npe_invocation_var734, String.class, 433, 20803, 20858)) {
                                        if (!(npe_invocation_var734.equals(ctField.getSimpleName()))) {
                                            return false;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else {
                        return false;
                    }
                }else
                    throw new AbnormalExecutionError();

                return true;
            }
        });
        if (CallChecker.beforeDeref(matchers, List.class, 442, 21012, 21019)) {
            if ((matchers.size()) != 1) {
                throw new SpoonException("Get more than one setter. Please make an more ingenious method to get setter method.");
            }
        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 445, 21172, 21179)) {
            return matchers.get(0);
        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getGetterOf(CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21439, 21446)) {
                final String npe_invocation_var735 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var735, String.class, 454, 21439, 21462)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21485, 21492)) {
                        final String npe_invocation_var736 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var736, String.class, 454, 21485, 21508)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 455, 21541, 21548)) {
                                final String npe_invocation_var737 = ctMethod.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var737, String.class, 455, 21541, 21564)) {
                                    if (CallChecker.beforeDeref(ctField, CtField.class, 455, 21589, 21595)) {
                                        final String npe_invocation_var738 = ctField.getSimpleName();
                                        if (CallChecker.beforeDeref(npe_invocation_var738, String.class, 455, 21589, 21611)) {
                                            if (CallChecker.beforeDeref(npe_invocation_var737.toLowerCase(), String.class, 455, 21541, 21578)) {
                                                if (((npe_invocation_var735.startsWith("get")) || (npe_invocation_var736.startsWith("is"))) && (npe_invocation_var737.toLowerCase().contains(npe_invocation_var738.toLowerCase()))) {
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 456, 21642, 21649)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 456, 21668, 21674)) {
                                                            final CtTypeReference<?> npe_invocation_var739 = ctMethod.getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var739, CtTypeReference.class, 456, 21642, 21659)) {
                                                                if (!(npe_invocation_var739.equals(ctField.getType()))) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 459, 21725, 21732)) {
                                                        final List<?> npe_invocation_var740 = ctMethod.getParameters();
                                                        if (CallChecker.beforeDeref(npe_invocation_var740, List.class, 459, 21725, 21748)) {
                                                            if ((npe_invocation_var740.size()) != 0) {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    return ctMethod;
                                                }
                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        final CtBlock<?> templateRoot = GETTER_TEMPLATE_MATCHER_CLASS.getMethod("getElement").getBody();
        if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 467, 21972, 21983)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 467, 22024, 22030)) {
                if (CallChecker.beforeDeref(ctField, CtField.class, 467, 22058, 22064)) {
                    final CodeFactory npe_invocation_var741 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var741, CodeFactory.class, 467, 22024, 22037)) {
                        final CtReturn npe_invocation_var742 = ((CtReturn) (templateRoot.getStatement(0)));
                        if (CallChecker.beforeDeref(npe_invocation_var742, CtReturn.class, 467, 21972, 21999)) {
                            npe_invocation_var742.setReturnedExpression(npe_invocation_var741.createVariableRead(ctField.getReference(), true));
                        }
                    }
                }
            }
        }
        List<CtMethod> matchers = CallChecker.init(List.class);
        if (CallChecker.beforeDeref(ctField, CtField.class, 468, 22120, 22126)) {
            final CtType<?> npe_invocation_var744 = ctField.getDeclaringType();
            if (CallChecker.beforeDeref(npe_invocation_var744, CtType.class, 468, 22120, 22145)) {
                matchers = npe_invocation_var744.getElements(new TypeFilter<CtMethod>(CtMethod.class) {
                    @Override
                    public boolean matches(CtMethod element) {
                        if (CallChecker.beforeDeref(element, CtMethod.class, 471, 22278, 22284)) {
                            final CtBlock npe_invocation_var743 = element.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var743, CtBlock.class, 471, 22278, 22294)) {
                                if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 471, 22314, 22325)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var743.toString(), String.class, 471, 22278, 22305)) {
                                        return npe_invocation_var743.toString().equals(templateRoot.toString());
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }
                });
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 474, 22363, 22370)) {
            if ((matchers.size()) != 1) {
                throw new SpoonException("Get more than one getter. Please make an more ingenious method to get getter method.");
            }
        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 477, 22523, 22530)) {
            return matchers.get(0);
        }else
            throw new AbnormalExecutionError();

    }

    private boolean isSubTypeOfCtElement(CtTypeReference<?> type) {
        if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22687, 22690)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 484, 22722, 22728)) {
                final TypeFactory npe_invocation_var745 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var745, TypeFactory.class, 484, 22722, 22735)) {
                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22710, 22713)) {
                        if ((!(type.isPrimitive())) && (!(type.equals(npe_invocation_var745.STRING)))) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 485, 22774, 22780)) {
                                final TypeFactory npe_invocation_var746 = factory.Type();
                                if (CallChecker.beforeDeref(npe_invocation_var746, TypeFactory.class, 485, 22774, 22787)) {
                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 485, 22757, 22760)) {
                                        if (type.isSubtypeOf(npe_invocation_var746.createReference(CtElement.class))) {
                                            return true;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                            if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22861, 22864)) {
                                if (CallChecker.beforeDeref(LIST_REFERENCE, CtTypeReference.class, 488, 22892, 22905)) {
                                    final String npe_invocation_var747 = type.getQualifiedName();
                                    if (CallChecker.beforeDeref(npe_invocation_var747, String.class, 488, 22861, 22883)) {
                                        if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22930, 22933)) {
                                            if (CallChecker.beforeDeref(COLLECTION_REFERENCE, CtTypeReference.class, 488, 22961, 22980)) {
                                                final String npe_invocation_var748 = type.getQualifiedName();
                                                if (CallChecker.beforeDeref(npe_invocation_var748, String.class, 488, 22930, 22952)) {
                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 23005, 23008)) {
                                                        if (CallChecker.beforeDeref(SET_REFERENCE, CtTypeReference.class, 488, 23036, 23048)) {
                                                            final String npe_invocation_var749 = type.getQualifiedName();
                                                            if (CallChecker.beforeDeref(npe_invocation_var749, String.class, 488, 23005, 23027)) {
                                                                if (((npe_invocation_var747.equals(LIST_REFERENCE.getQualifiedName())) || (npe_invocation_var748.equals(COLLECTION_REFERENCE.getQualifiedName()))) || (npe_invocation_var749.equals(SET_REFERENCE.getQualifiedName()))) {
                                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 489, 23083, 23086)) {
                                                                        final List<?> npe_invocation_var750 = type.getActualTypeArguments();
                                                                        if (CallChecker.beforeDeref(npe_invocation_var750, List.class, 489, 23083, 23111)) {
                                                                            if (CallChecker.beforeDeref(npe_invocation_var750.get(0), CtTypeReference.class, 489, 23083, 23118)) {
                                                                                if (npe_invocation_var750.get(0).isSubtypeOf(CTELEMENT_REFERENCE)) {
                                                                                    return true;
                                                                                }
                                                                            }else
                                                                                throw new AbnormalExecutionError();

                                                                        }else
                                                                            throw new AbnormalExecutionError();

                                                                    }else
                                                                        throw new AbnormalExecutionError();

                                                                }
                                                            }else
                                                                throw new AbnormalExecutionError();

                                                        }else
                                                            throw new AbnormalExecutionError();

                                                    }else
                                                        throw new AbnormalExecutionError();

                                                }else
                                                    throw new AbnormalExecutionError();

                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        return false;
    }

    private boolean isConstantOrStatic(CtField<?> ctField) {
        if (CallChecker.beforeDeref(ctField, CtField.class, 498, 23292, 23298)) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 498, 23347, 23353)) {
                return (ctField.getModifiers().contains(ModifierKind.FINAL)) || (ctField.getModifiers().contains(ModifierKind.STATIC));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var752.get(CtInheritanceScanner.class))
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:137)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:1023)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1033)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:50)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:175)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtInvocation(CtScanner.java:494)
	at spoon.support.reflect.code.CtInvocationImpl.accept(CtInvocationImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:473)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment().getNoClasspath()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:175)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:473)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
BeforeDeref --> 11898 (failed:4) in 2283ms
target--> 13461 (failed:0) in 7236ms
TryRegister # Try: 161 in 304ms
Assign --> 2300 (failed: 0) in 1634ms
VarInit --> 1060 in 951ms
MethodEncapsulation # Method: 5050 in 2727ms
ConstructorEncapsulation # Constructor: 370 in 634ms
null
null
null
null
null
null
null
null
null
null
null
null
null
null
null
null
null
null
VariableFor in 671ms
spoon.compiler.ModelBuildingException: The method getType() is undefined for the type capture#133-of ? at /tmp/NPEFix_Bears_INRIA-spoon_246175274-246195936/CloneVisitorGenerator.java:842
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.report(JDTBasedSpoonCompiler.java:581)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.reportProblems(JDTBasedSpoonCompiler.java:562)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.compile(JDTBasedSpoonCompiler.java:157)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:109)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
Exception in thread "main" spoon.compiler.ModelBuildingException: The method getType() is undefined for the type capture#133-of ? at /tmp/NPEFix_Bears_INRIA-spoon_246175274-246195936/CloneVisitorGenerator.java:842
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.report(JDTBasedSpoonCompiler.java:581)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.reportProblems(JDTBasedSpoonCompiler.java:562)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.compile(JDTBasedSpoonCompiler.java:157)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:109)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
Command exited with non-zero status 1
179.64user 2.20system 1:16.58elapsed 237%CPU (0avgtext+0avgdata 2220008maxresident)k
24808inputs+33816outputs (1major+595870minor)pagefaults 0swaps


Node: grisou-48.nancy.grid5000.fr



Date: Thu Dec 27 02:43:15 EST 2018

