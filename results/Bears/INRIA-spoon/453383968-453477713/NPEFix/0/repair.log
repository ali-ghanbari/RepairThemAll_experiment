cd /tmp/NPEFix_Bears_INRIA-spoon_453383968-453477713;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/RepairThemAll/script/../repair_tools/npefix.jar fr.inria.spirals.npefix.main.run.Main \
    --test spoon.test.jar.JarTest \
    --iteration 100 \
	--complianceLevel 8 \
	--workingdirectory . \
	--source src/main/java \
	--classpath target/classes:target/test-classes:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.equinox.app/1.4.0/org.eclipse.equinox.app-1.4.0.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.commands/3.9.200/org.eclipse.core.commands-3.9.200.jar:/home/tdurieux/.m2/repository/com/mysema/querydsl/querydsl-core/3.6.9/querydsl-core-3.6.9.jar:/home/tdurieux/.m2/repository/org/eclipse/jdt/org.eclipse.jdt.core/3.13.102/org.eclipse.jdt.core-3.13.102.jar:/home/tdurieux/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/home/tdurieux/.m2/repository/org/jboss/windup/decompiler/fernflower/fernflower/2.5.0.Final/fernflower-2.5.0.Final.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-utils/3.0.24/plexus-utils-3.0.24.jar:/home/tdurieux/.m2/repository/org/benf/cfr/0.132.0/cfr-0.132.0.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.7.1/plexus-component-annotations-1.7.1.jar:/home/tdurieux/.m2/repository/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.5/jackson-databind-2.9.5.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.equinox.common/3.10.200/org.eclipse.equinox.common-3.10.200.jar:/home/tdurieux/.m2/repository/org/apache/maven/shared/maven-shared-utils/3.2.1/maven-shared-utils-3.2.1.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/.m2/repository/com/martiansoftware/jsap/2.1/jsap-2.1.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.resources/3.13.200/org.eclipse.core.resources-3.13.200.jar:/home/tdurieux/.m2/repository/com/infradna/tool/bridge-method-annotation/1.13/bridge-method-annotation-1.13.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.equinox.preferences/3.7.200/org.eclipse.equinox.preferences-3.7.200.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.text/3.8.0/org.eclipse.text-3.8.0.jar:/home/tdurieux/.m2/repository/commons-io/commons-io/2.5/commons-io-2.5.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.expressions/3.6.200/org.eclipse.core.expressions-3.6.200.jar:/home/tdurieux/.m2/repository/org/mockito/mockito-all/2.0.2-beta/mockito-all-2.0.2-beta.jar:/home/tdurieux/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/tdurieux/.m2/repository/org/tukaani/xz/1.8/xz-1.8.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.5/jackson-core-2.9.5.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-model/3.5.0/maven-model-3.5.0.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.osgi/3.13.200/org.eclipse.osgi-3.13.200.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.equinox.registry/3.8.200/org.eclipse.equinox.registry-3.8.200.jar:/home/tdurieux/.m2/repository/com/github/stefanbirkner/system-rules/1.9.0/system-rules-1.9.0.jar:/home/tdurieux/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.filesystem/1.7.200/org.eclipse.core.filesystem-1.7.200.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.contenttype/3.7.200/org.eclipse.core.contenttype-3.7.200.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.runtime/3.15.100/org.eclipse.core.runtime-3.15.100.jar:/home/tdurieux/.m2/repository/org/apache/maven/shared/maven-invoker/3.0.1/maven-invoker-3.0.1.jar:/home/tdurieux/.m2/repository/com/google/guava/guava/18.0/guava-18.0.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.jobs/3.10.200/org.eclipse.core.jobs-3.10.200.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
TernarySplitter  in 299ms
return ((field.getAnnotation(Parameter.class)) != null) || (TemplateParameter.class.isAssignableFrom(field.getType()))
boolean bodyBetweenElementPosition = (body != null) && (this.isCommentBetweenElementPosition(body))
wildcard.setUpper(((((type.getLowerBounds()) != null) && ((type.getLowerBounds().length) > 0)) == false))
return (clazz != null) && (clazz.isInterface())
return (((getFile()) == null ? (s.getFile()) == null : getFile().equals(s.getFile())) && ((getSourceEnd()) == (s.getSourceEnd()))) && ((getSourceStart()) == (s.getSourceStart()))
return (((getFile()) == null ? (s.getFile()) == null : getFile().equals(s.getFile())) && ((getSourceEnd()) == (s.getSourceEnd()))) && ((getSourceStart()) == (s.getSourceStart()))
return new AbstractList<X>() {
    T element = castTarget(e);

    boolean hasValue = (SingleHandler.this.getValue(element)) != null;

    @Override
    public int size() {
        if (hasValue) {
            return 1;
        }else {
            return 0;
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public X get(int index) {
        if ((index < 0) || (index >= (size()))) {
            throw new IndexOutOfBoundsException(((("Index: " + index) + ", Size: ") + (size())));
        }
        return ((X) (SingleHandler.this.getValue(element)));
    }

    @Override
    public X set(int index, X value) {
        if ((index < 0) || (index >= (size()))) {
            throw new IndexOutOfBoundsException(((("Index: " + index) + ", Size: ") + (size())));
        }
        X oldValue = get(0);
        SingleHandler.this.setValue(element, value);
        return oldValue;
    }

    @Override
    public boolean add(X value) {
        if (hasValue) {
            throw new SpoonException("Single value attribute cannot have more then one value");
        }
        SingleHandler.this.setValue(element, value);
        hasValue = true;
        return true;
    }

    @Override
    public X remove(int index) {
        if ((index < 0) || (index >= (size()))) {
            throw new IndexOutOfBoundsException(((("Index: " + index) + ", Size: ") + (size())));
        }
        X oldValue = get(0);
        if (oldValue != null) {
            SingleHandler.this.setValue(element, null);
        }
        hasValue = false;
        return oldValue;
    }

    @Override
    public boolean remove(Object value) {
        if ((hasValue) == false) {
            return false;
        }
        X oldValue = get(0);
        if (equals(oldValue, value)) {
            if (oldValue != null) {
                SingleHandler.this.setValue(element, null);
            }
            hasValue = false;
            return true;
        }
        return false;
    }

    private boolean equals(Object v1, Object v2) {
        if (v1 == v2) {
            return true;
        }
        if (v1 == null) {
            return false;
        }
        return v1.equals(v2);
    }
}
return (mmCommentField != null) && ((mmCommentField.isDerived()) == false)
typeContext = new ClassTypingContext(((modelClass) != null ? modelClass : modelInterface))
return (parent) != null
assert executableJDT != null
boolean isOtherBinding = ((qualifiedNameReference.otherBindings) == null) || ((qualifiedNameReference.otherBindings.length) == 0)
p.getType().setImplicit(((argument.type) == null))
((CtArrayTypeReference) (p.getType())).getComponentType().setImplicit(((argument.type) == null))
return ((added) != null) && (!(added.isEmpty()))
return ((modified) != null) && (!(modified.isEmpty()))
return ((removed) != null) && (!(removed.isEmpty()))
return ((getBoundingType()) != null) && (getBoundingType().isGenerics())
return includeSamePackage || (((getPackage()) != null) && (!(CtTypeImpl.getPackageReference(typeRef).equals(getPackage().getReference()))))
return ((typeRef.getPackage()) != null) && ("java.lang".equals(typeRef.getPackage().toString()))
return ((getDeclaringType()) == null) && ((getPackage()) != null)
return ((getDeclaringType()) == null) && ((getPackage()) != null)
return (typeDeclaration != null) && ((typeDeclaration.getField(reference.getSimpleName())) == null)
return (typeDeclaration != null) && ((typeDeclaration.getField(reference.getSimpleName())) == null)
return (((exist.getDeclaringType()) != null ? exist.getDeclaringType().getQualifiedName() : "") + ".") + (exist.getSignature())
return (super.matches(element)) && ((element.getAnnotation(annotationType)) != null)
return (declaringType != null) && (declaringType.isSubtypeOf(executable.getDeclaringType()))
return (m != null) && (Modifier.isFinal(m.getModifiers()))
return (((parent.defaultValue) != null) && (getFinalExpressionFromCast(parent.defaultValue).equals(childJDT))) && (!(child.equals(ctVariable.getDefaultExpression())))
return (((parent.initialization) != null) && (getFinalExpressionFromCast(parent.initialization).equals(childJDT))) && (!(child.equals(ctVariable.getDefaultExpression())))
return (((parent.returnType) != null) && (parent.returnType.equals(childJDT))) && (!(child.equals(ctMethod.getType())))
return (((parent.defaultValue) != null) && (parent.defaultValue.equals(childJDT))) && (!(child.equals(ctAnnotationMethod.getDefaultExpression())))
return (((parent.qualification) != null) && (getFinalExpressionFromCast(parent.qualification).equals(childJDT))) && (!(child.equals(ctInvocation.getTarget())))
return (((parent.receiver) != null) && (getFinalExpressionFromCast(parent.receiver).equals(childJDT))) && (!(child.equals(ctInvocation.getTarget())))
return (((parent.enclosingInstance) != null) && (getFinalExpressionFromCast(parent.enclosingInstance).equals(childJDT))) && (!(child.equals(ctConstructorCall.getTarget())))
return ((parent.type) != null) && (parent.type.equals(childJDT))
final boolean lookingForFields = (clazz == null) || (coreFactory.createField().getClass().isAssignableFrom(clazz))
return ((rePattern) != null) && (rePattern.matcher(str).matches())
return createReference(e.getParent(CtType.class).getReference(), (lambdaMethod == null ? null : lambdaMethod.getType().clone()), executableName, refs)
this.sortList = (System.getenv("SPOON_SEED_CU_COMPARATOR")) == null
isGenericTypeExplicit = (typeArgument != null) && ((typeArgument.length) > 0)
return (((((parent instanceof CtFieldWrite) && (targetExp.equals(((CtFieldWrite) (parent)).getTarget()))) && (anonymousParent != null)) && ((((CtFieldWrite) (parent)).getVariable()) != null)) && (((CtFieldWrite) (parent)).getVariable().getModifiers().contains(ModifierKind.STATIC))) && (((CtFieldWrite) (parent)).getVariable().getModifiers().contains(ModifierKind.FINAL))
return (((((parent instanceof CtFieldWrite) && (targetExp.equals(((CtFieldWrite) (parent)).getTarget()))) && (anonymousParent != null)) && ((((CtFieldWrite) (parent)).getVariable()) != null)) && (((CtFieldWrite) (parent)).getVariable().getModifiers().contains(ModifierKind.STATIC))) && (((CtFieldWrite) (parent)).getVariable().getModifiers().contains(ModifierKind.FINAL))
isNotInAnnotation = ((newArray.getParent(CtAnnotationType.class)) == null) && ((newArray.getParent(CtAnnotation.class)) == null)
isNotInAnnotation = ((newArray.getParent(CtAnnotationType.class)) == null) && ((newArray.getParent(CtAnnotation.class)) == null)
boolean isInner = (ref.getDeclaringType()) != null
final CtQuery q = ((CtQueryable) (input)).map(new SuperInheritanceHierarchyFunction(((distinctSet) == null ? new HashSet<>() : distinctSet)).includingSelf(true))
return (element != null) && (type.isAssignableFrom(element.getClass()))
return (matches) != null
boolean needsSetter = (getMethod(MMMethodKind.SET)) != null
new ReplacementVisitor(original, (replace == null ? ReplacementVisitor.EMPTY : new CtElement[]{ replace })).scan(original.getParent())
isRepeatable = (ctAnnotationType.getAnnotation(factory.Type().createReference(Repeatable.class))) != null
CheckNotNull  in 1821ms
ForceNullInit in 272ms
AddImplicitCastChecker --> 10 in 831ms
new PatternParameterConfigurator.StringAttributeScanner() {
    @Override
    protected void visitStringAttribute(RoleHandler roleHandler, CtElement element, String value) {
        if ((value != null) && (value.contains(stringMarker))) {
            if (CallChecker.beforeDeref(roleHandler, RoleHandler.class, 630, 26906, 26916)) {
                addSubstitutionRequest(pi, element, roleHandler.getRole(), stringMarker);
            }
        }
    }

    @Override
    protected void visitStringAttribute(RoleHandler roleHandler, CtElement element, String mapEntryKey, CtElement mapEntryValue) {
        if ((mapEntryKey != null) && (mapEntryKey.contains(stringMarker))) {
            if (CallChecker.beforeDeref(roleHandler, RoleHandler.class, 636, 27227, 27237)) {
                if (CallChecker.beforeDeref(patternBuilder, PatternBuilder.class, 636, 27172, 27185)) {
                    patternBuilder.modifyNodeOfAttributeOfElement(element, roleHandler.getRole(), conflictResolutionMode, ( oldAttrNode) -> {
                        List<RootNode> nodes = ((ListOfNodes) (oldAttrNode)).getNodes();
                        for (int i = 0; i < (nodes.size()); i++) {
                            RootNode node = nodes.get(i);
                            if (node instanceof MapEntryNode) {
                                MapEntryNode mapEntryNode = ((MapEntryNode) (node));
                                nodes.set(i, new MapEntryNode(StringNode.setReplaceMarker(mapEntryNode.getKey(), stringMarker, pi), mapEntryNode.getValue()));
                            }
                        }
                        return oldAttrNode;
                    });
                }
            }
        }
    }
}.scan(patternBuilder.getPatternModel())-->new PatternParameterConfigurator.StringAttributeScanner() {
    @Override
    protected void visitStringAttribute(RoleHandler roleHandler, CtElement element, String value) {
        if ((value != null) && (value.contains(stringMarker))) {
            if (CallChecker.beforeDeref(roleHandler, RoleHandler.class, 630, 26906, 26916)) {
                addSubstitutionRequest(pi, element, roleHandler.getRole(), stringMarker);
            }
        }
    }

    @Override
    protected void visitStringAttribute(RoleHandler roleHandler, CtElement element, String mapEntryKey, CtElement mapEntryValue) {
        if ((mapEntryKey != null) && (mapEntryKey.contains(stringMarker))) {
            if (CallChecker.beforeDeref(roleHandler, RoleHandler.class, 636, 27227, 27237)) {
                if (CallChecker.beforeDeref(patternBuilder, PatternBuilder.class, 636, 27172, 27185)) {
                    patternBuilder.modifyNodeOfAttributeOfElement(element, roleHandler.getRole(), conflictResolutionMode, ( oldAttrNode) -> {
                        List<RootNode> nodes = ((ListOfNodes) (oldAttrNode)).getNodes();
                        for (int i = 0; i < (nodes.size()); i++) {
                            RootNode node = nodes.get(i);
                            if (node instanceof MapEntryNode) {
                                MapEntryNode mapEntryNode = ((MapEntryNode) (node));
                                nodes.set(i, new MapEntryNode(StringNode.setReplaceMarker(mapEntryNode.getKey(), stringMarker, pi), mapEntryNode.getValue()));
                            }
                        }
                        return oldAttrNode;
                    });
                }
            }
        }
    }
}.scan(patternBuilder.getPatternModel())
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:137)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:1023)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1033)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:50)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
new CtScanner() {
    @Override
    public void scan(CtElement element) {
        if ((element != null) && (CtShadowable.class.isAssignableFrom(element.getClass()))) {
            assertFalse(((CtShadowable) (element)).isShadow());
        }
        super.scan(element);
    }

    @Override
    public <T> void visitCtTypeReference(CtTypeReference<T> reference) {
        Check.assertNotNull(reference);
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 220, 6968, 6976)) {
            if (CallChecker.beforeDeref(CtTypeReference.NULL_TYPE_NAME, String.class, 220, 6930, 6959)) {
                if (CallChecker.beforeDeref(reference, CtTypeReference.class, 220, 7009, 7017)) {
                    if (CallChecker.beforeDeref("?", String.class, 220, 6998, 7000)) {
                        if ((CtTypeReference.NULL_TYPE_NAME.equals(reference.getSimpleName())) || ("?".equals(reference.getSimpleName()))) {
                            super.visitCtTypeReference(reference);
                            return ;
                        }
                    }
                }
            }
        }
        final CtType<T> typeDeclaration = reference.getTypeDeclaration();
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 225, 7190, 7198)) {
            Check.assertNotNull(((reference.toString()) + " cannot be found in "), typeDeclaration);
        }
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 226, 7272, 7280)) {
            if (CallChecker.beforeDeref(typeDeclaration, CtType.class, 226, 7299, 7313)) {
                assertEquals(reference.getSimpleName(), typeDeclaration.getSimpleName());
            }
        }
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 227, 7350, 7358)) {
            if (CallChecker.beforeDeref(typeDeclaration, CtType.class, 227, 7380, 7394)) {
                assertEquals(reference.getQualifiedName(), typeDeclaration.getQualifiedName());
            }
        }
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 229, 7426, 7434)) {
            if ((reference.getDeclaration()) == null) {
                if (CallChecker.beforeDeref(typeDeclaration, CtType.class, 230, 7514, 7528)) {
                    ContractVerifier.assertTrue("typeDeclaration must be shadow", typeDeclaration.isShadow());
                }
            }
        }
        super.visitCtTypeReference(reference);
    }

    @Override
    public <T> void visitCtExecutableReference(CtExecutableReference<T> reference) {
        super.visitCtExecutableReference(reference);
        Check.assertNotNull(reference);
        if (isLanguageExecutable(reference)) {
            return ;
        }
        final CtExecutable<T> executableDeclaration = reference.getExecutableDeclaration();
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 243, 7968, 7976)) {
            Check.assertNotNull(("cannot find decl for " + (reference.toString())), executableDeclaration);
        }
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 244, 8031, 8039)) {
            if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 244, 8058, 8078)) {
                assertEquals(reference.getSimpleName(), executableDeclaration.getSimpleName());
            }
        }
        for (int i = 0; i < (reference.getParameters().size()); i++) {
            if (executableDeclaration instanceof CtLambda) {
                return ;
            }
            CtTypeReference<?> methodParamTypeRef = CallChecker.init(CtTypeReference.class);
            if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 252, 8476, 8496)) {
                final List<?> npe_invocation_var2048 = executableDeclaration.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var2048, List.class, 252, 8476, 8512)) {
                    if (CallChecker.beforeDeref(npe_invocation_var2048.get(i), CtParameter.class, 252, 8476, 8519)) {
                        methodParamTypeRef = npe_invocation_var2048.get(i).getType();
                    }
                }
            }
            if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 253, 8550, 8558)) {
                final List<?> npe_invocation_var2049 = reference.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var2049, List.class, 253, 8550, 8574)) {
                    if (CallChecker.beforeDeref(npe_invocation_var2049.get(i), CtTypeReference.class, 253, 8550, 8581)) {
                        if (CallChecker.beforeDeref(methodParamTypeRef, CtTypeReference.class, 253, 8603, 8620)) {
                            final CtTypeReference<?> npe_invocation_var2050 = methodParamTypeRef.getTypeErasure();
                            if (CallChecker.beforeDeref(npe_invocation_var2050, CtTypeReference.class, 253, 8603, 8637)) {
                                assertEquals(npe_invocation_var2049.get(i).getQualifiedName(), npe_invocation_var2050.getQualifiedName());
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 257, 8740, 8748)) {
            final List<?> npe_invocation_var2051 = reference.getActualTypeArguments();
            if (CallChecker.beforeDeref(npe_invocation_var2051, List.class, 257, 8740, 8773)) {
                if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 259, 8858, 8878)) {
                    final List<CtTypeParameter> npe_invocation_var2052 = ((CtMethod) (executableDeclaration)).getFormalCtTypeParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var2052, List.class, 259, 8846, 8907)) {
                        if (((npe_invocation_var2051.isEmpty()) && (executableDeclaration instanceof CtMethod)) && (!(npe_invocation_var2052.isEmpty()))) {
                            if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 261, 8947, 8955)) {
                                if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 261, 8973, 8993)) {
                                    assertEquals(reference.getSignature(), executableDeclaration.getSignature());
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 265, 9097, 9105)) {
            final List<?> npe_invocation_var2053 = reference.getActualTypeArguments();
            if (CallChecker.beforeDeref(npe_invocation_var2053, List.class, 265, 9097, 9130)) {
                if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 267, 9225, 9245)) {
                    final List<CtTypeParameter> npe_invocation_var2054 = ((CtConstructor) (executableDeclaration)).getFormalCtTypeParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var2054, List.class, 267, 9208, 9274)) {
                        if (((npe_invocation_var2053.isEmpty()) && (executableDeclaration instanceof CtConstructor)) && (!(npe_invocation_var2054.isEmpty()))) {
                            if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 269, 9314, 9322)) {
                                if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 269, 9340, 9360)) {
                                    assertEquals(reference.getSignature(), executableDeclaration.getSignature());
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 272, 9394, 9402)) {
            if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 272, 9468, 9488)) {
                if (((reference.getDeclaration()) == null) && (CtShadowable.class.isAssignableFrom(executableDeclaration.getClass()))) {
                    if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 273, 9538, 9546)) {
                        if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 273, 9597, 9617)) {
                            ContractVerifier.assertTrue((("execDecl at " + (reference.toString())) + " must be shadow "), ((CtShadowable) (executableDeclaration)).isShadow());
                        }
                    }
                }
            }
        }
    }

    private <T> boolean isLanguageExecutable(CtExecutableReference<T> reference) {
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 279, 9755, 9763)) {
            if (CallChecker.beforeDeref("values", String.class, 279, 9739, 9746)) {
                return "values".equals(reference.getSimpleName());
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    @Override
    public <T> void visitCtFieldReference(CtFieldReference<T> reference) {
        Check.assertNotNull(reference);
        if ((isLanguageField(reference)) || (isDeclaredInSuperClass(reference))) {
            super.visitCtFieldReference(reference);
            return ;
        }
        final CtField<T> fieldDeclaration = reference.getFieldDeclaration();
        Check.assertNotNull(fieldDeclaration);
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 291, 10172, 10180)) {
            if (CallChecker.beforeDeref(fieldDeclaration, CtField.class, 291, 10199, 10214)) {
                assertEquals(reference.getSimpleName(), fieldDeclaration.getSimpleName());
            }
        }
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 292, 10251, 10259)) {
            final CtTypeReference<T> npe_invocation_var2055 = reference.getType();
            if (CallChecker.beforeDeref(npe_invocation_var2055, CtTypeReference.class, 292, 10251, 10269)) {
                if (CallChecker.beforeDeref(fieldDeclaration, CtField.class, 292, 10291, 10306)) {
                    final CtTypeReference<T> npe_invocation_var2056 = fieldDeclaration.getType();
                    if (CallChecker.beforeDeref(npe_invocation_var2056, CtTypeReference.class, 292, 10291, 10316)) {
                        assertEquals(npe_invocation_var2055.getQualifiedName(), npe_invocation_var2056.getQualifiedName());
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 294, 10348, 10356)) {
            if ((reference.getDeclaration()) == null) {
                if (CallChecker.beforeDeref(fieldDeclaration, CtField.class, 295, 10430, 10445)) {
                    ContractVerifier.assertTrue("fieldDecl must be shadow", fieldDeclaration.isShadow());
                }
            }
        }
        super.visitCtFieldReference(reference);
    }

    private <T> boolean isLanguageField(CtFieldReference<T> reference) {
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 301, 10614, 10622)) {
            if (CallChecker.beforeDeref(reference, CtFieldReference.class, 301, 10660, 10668)) {
                return ("class".equals(reference.getSimpleName())) || ("length".equals(reference.getSimpleName()));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> boolean isDeclaredInSuperClass(CtFieldReference<T> reference) {
        final CtType<?> typeDeclaration = reference.getDeclaringType().getTypeDeclaration();
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 306, 10925, 10933)) {
            return (typeDeclaration != null) && ((typeDeclaration.getField(reference.getSimpleName())) == null);
        }else
            throw new AbnormalExecutionError();

    }
}.visitCtPackage(_rootPackage)-->new CtScanner() {
    @Override
    public void scan(CtElement element) {
        if ((element != null) && (CtShadowable.class.isAssignableFrom(element.getClass()))) {
            assertFalse(((CtShadowable) (element)).isShadow());
        }
        super.scan(element);
    }

    @Override
    public <T> void visitCtTypeReference(CtTypeReference<T> reference) {
        Check.assertNotNull(reference);
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 220, 6968, 6976)) {
            if (CallChecker.beforeDeref(CtTypeReference.NULL_TYPE_NAME, String.class, 220, 6930, 6959)) {
                if (CallChecker.beforeDeref(reference, CtTypeReference.class, 220, 7009, 7017)) {
                    if (CallChecker.beforeDeref("?", String.class, 220, 6998, 7000)) {
                        if ((CtTypeReference.NULL_TYPE_NAME.equals(reference.getSimpleName())) || ("?".equals(reference.getSimpleName()))) {
                            super.visitCtTypeReference(reference);
                            return ;
                        }
                    }
                }
            }
        }
        final CtType<T> typeDeclaration = reference.getTypeDeclaration();
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 225, 7190, 7198)) {
            Check.assertNotNull(((reference.toString()) + " cannot be found in "), typeDeclaration);
        }
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 226, 7272, 7280)) {
            if (CallChecker.beforeDeref(typeDeclaration, CtType.class, 226, 7299, 7313)) {
                assertEquals(reference.getSimpleName(), typeDeclaration.getSimpleName());
            }
        }
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 227, 7350, 7358)) {
            if (CallChecker.beforeDeref(typeDeclaration, CtType.class, 227, 7380, 7394)) {
                assertEquals(reference.getQualifiedName(), typeDeclaration.getQualifiedName());
            }
        }
        if (CallChecker.beforeDeref(reference, CtTypeReference.class, 229, 7426, 7434)) {
            if ((reference.getDeclaration()) == null) {
                if (CallChecker.beforeDeref(typeDeclaration, CtType.class, 230, 7514, 7528)) {
                    ContractVerifier.assertTrue("typeDeclaration must be shadow", typeDeclaration.isShadow());
                }
            }
        }
        super.visitCtTypeReference(reference);
    }

    @Override
    public <T> void visitCtExecutableReference(CtExecutableReference<T> reference) {
        super.visitCtExecutableReference(reference);
        Check.assertNotNull(reference);
        if (isLanguageExecutable(reference)) {
            return ;
        }
        final CtExecutable<T> executableDeclaration = reference.getExecutableDeclaration();
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 243, 7968, 7976)) {
            Check.assertNotNull(("cannot find decl for " + (reference.toString())), executableDeclaration);
        }
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 244, 8031, 8039)) {
            if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 244, 8058, 8078)) {
                assertEquals(reference.getSimpleName(), executableDeclaration.getSimpleName());
            }
        }
        for (int i = 0; i < (reference.getParameters().size()); i++) {
            if (executableDeclaration instanceof CtLambda) {
                return ;
            }
            CtTypeReference<?> methodParamTypeRef = CallChecker.init(CtTypeReference.class);
            if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 252, 8476, 8496)) {
                final List<?> npe_invocation_var2048 = executableDeclaration.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var2048, List.class, 252, 8476, 8512)) {
                    if (CallChecker.beforeDeref(npe_invocation_var2048.get(i), CtParameter.class, 252, 8476, 8519)) {
                        methodParamTypeRef = npe_invocation_var2048.get(i).getType();
                    }
                }
            }
            if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 253, 8550, 8558)) {
                final List<?> npe_invocation_var2049 = reference.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var2049, List.class, 253, 8550, 8574)) {
                    if (CallChecker.beforeDeref(npe_invocation_var2049.get(i), CtTypeReference.class, 253, 8550, 8581)) {
                        if (CallChecker.beforeDeref(methodParamTypeRef, CtTypeReference.class, 253, 8603, 8620)) {
                            final CtTypeReference<?> npe_invocation_var2050 = methodParamTypeRef.getTypeErasure();
                            if (CallChecker.beforeDeref(npe_invocation_var2050, CtTypeReference.class, 253, 8603, 8637)) {
                                assertEquals(npe_invocation_var2049.get(i).getQualifiedName(), npe_invocation_var2050.getQualifiedName());
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 257, 8740, 8748)) {
            final List<?> npe_invocation_var2051 = reference.getActualTypeArguments();
            if (CallChecker.beforeDeref(npe_invocation_var2051, List.class, 257, 8740, 8773)) {
                if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 259, 8858, 8878)) {
                    final List<CtTypeParameter> npe_invocation_var2052 = ((CtMethod) (executableDeclaration)).getFormalCtTypeParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var2052, List.class, 259, 8846, 8907)) {
                        if (((npe_invocation_var2051.isEmpty()) && (executableDeclaration instanceof CtMethod)) && (!(npe_invocation_var2052.isEmpty()))) {
                            if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 261, 8947, 8955)) {
                                if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 261, 8973, 8993)) {
                                    assertEquals(reference.getSignature(), executableDeclaration.getSignature());
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 265, 9097, 9105)) {
            final List<?> npe_invocation_var2053 = reference.getActualTypeArguments();
            if (CallChecker.beforeDeref(npe_invocation_var2053, List.class, 265, 9097, 9130)) {
                if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 267, 9225, 9245)) {
                    final List<CtTypeParameter> npe_invocation_var2054 = ((CtConstructor) (executableDeclaration)).getFormalCtTypeParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var2054, List.class, 267, 9208, 9274)) {
                        if (((npe_invocation_var2053.isEmpty()) && (executableDeclaration instanceof CtConstructor)) && (!(npe_invocation_var2054.isEmpty()))) {
                            if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 269, 9314, 9322)) {
                                if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 269, 9340, 9360)) {
                                    assertEquals(reference.getSignature(), executableDeclaration.getSignature());
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 272, 9394, 9402)) {
            if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 272, 9468, 9488)) {
                if (((reference.getDeclaration()) == null) && (CtShadowable.class.isAssignableFrom(executableDeclaration.getClass()))) {
                    if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 273, 9538, 9546)) {
                        if (CallChecker.beforeDeref(executableDeclaration, CtExecutable.class, 273, 9597, 9617)) {
                            ContractVerifier.assertTrue((("execDecl at " + (reference.toString())) + " must be shadow "), ((CtShadowable) (executableDeclaration)).isShadow());
                        }
                    }
                }
            }
        }
    }

    private <T> boolean isLanguageExecutable(CtExecutableReference<T> reference) {
        if (CallChecker.beforeDeref(reference, CtExecutableReference.class, 279, 9755, 9763)) {
            if (CallChecker.beforeDeref("values", String.class, 279, 9739, 9746)) {
                return "values".equals(reference.getSimpleName());
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    @Override
    public <T> void visitCtFieldReference(CtFieldReference<T> reference) {
        Check.assertNotNull(reference);
        if ((isLanguageField(reference)) || (isDeclaredInSuperClass(reference))) {
            super.visitCtFieldReference(reference);
            return ;
        }
        final CtField<T> fieldDeclaration = reference.getFieldDeclaration();
        Check.assertNotNull(fieldDeclaration);
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 291, 10172, 10180)) {
            if (CallChecker.beforeDeref(fieldDeclaration, CtField.class, 291, 10199, 10214)) {
                assertEquals(reference.getSimpleName(), fieldDeclaration.getSimpleName());
            }
        }
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 292, 10251, 10259)) {
            final CtTypeReference<T> npe_invocation_var2055 = reference.getType();
            if (CallChecker.beforeDeref(npe_invocation_var2055, CtTypeReference.class, 292, 10251, 10269)) {
                if (CallChecker.beforeDeref(fieldDeclaration, CtField.class, 292, 10291, 10306)) {
                    final CtTypeReference<T> npe_invocation_var2056 = fieldDeclaration.getType();
                    if (CallChecker.beforeDeref(npe_invocation_var2056, CtTypeReference.class, 292, 10291, 10316)) {
                        assertEquals(npe_invocation_var2055.getQualifiedName(), npe_invocation_var2056.getQualifiedName());
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 294, 10348, 10356)) {
            if ((reference.getDeclaration()) == null) {
                if (CallChecker.beforeDeref(fieldDeclaration, CtField.class, 295, 10430, 10445)) {
                    ContractVerifier.assertTrue("fieldDecl must be shadow", fieldDeclaration.isShadow());
                }
            }
        }
        super.visitCtFieldReference(reference);
    }

    private <T> boolean isLanguageField(CtFieldReference<T> reference) {
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 301, 10614, 10622)) {
            if (CallChecker.beforeDeref(reference, CtFieldReference.class, 301, 10660, 10668)) {
                return ("class".equals(reference.getSimpleName())) || ("length".equals(reference.getSimpleName()));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> boolean isDeclaredInSuperClass(CtFieldReference<T> reference) {
        final CtType<?> typeDeclaration = reference.getDeclaringType().getTypeDeclaration();
        if (CallChecker.beforeDeref(reference, CtFieldReference.class, 306, 10925, 10933)) {
            return (typeDeclaration != null) && ((typeDeclaration.getField(reference.getSimpleName())) == null);
        }else
            throw new AbnormalExecutionError();

    }
}.visitCtPackage(_rootPackage)
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:137)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:1023)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1033)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:50)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
new CtScanner() {
    @Override
    public void scan(CtElement element) {
        if (CallChecker.beforeDeref(counterInclNull, Counter.class, 326, 11348, 11362)) {
            (counterInclNull.scan)++;
        }
        if (element != null) {
            if (CallChecker.beforeDeref(counter, Counter.class, 328, 11404, 11410)) {
                (counter.scan)++;
            }
        }
        super.scan(element);
    }

    @Override
    public void enter(CtElement element) {
        if (CallChecker.beforeDeref(counter, Counter.class, 335, 11516, 11522)) {
            (counter.enter)++;
        }
        super.enter(element);
    }

    @Override
    public void exit(CtElement element) {
        if (CallChecker.beforeDeref(counter, Counter.class, 341, 11623, 11629)) {
            (counter.exit)++;
        }
        super.exit(element);
    }
}.scan(_rootPackage)-->new CtScanner() {
    @Override
    public void scan(CtElement element) {
        if (CallChecker.beforeDeref(counterInclNull, Counter.class, 326, 11348, 11362)) {
            (counterInclNull.scan)++;
        }
        if (element != null) {
            if (CallChecker.beforeDeref(counter, Counter.class, 328, 11404, 11410)) {
                (counter.scan)++;
            }
        }
        super.scan(element);
    }

    @Override
    public void enter(CtElement element) {
        if (CallChecker.beforeDeref(counter, Counter.class, 335, 11516, 11522)) {
            (counter.enter)++;
        }
        super.enter(element);
    }

    @Override
    public void exit(CtElement element) {
        if (CallChecker.beforeDeref(counter, Counter.class, 341, 11623, 11629)) {
            (counter.exit)++;
        }
        super.exit(element);
    }
}.scan(_rootPackage)
java.lang.ClassCastException: spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtBlockImpl.setStatements(CtBlockImpl.java:171)
	at spoon.support.visitor.replace.ReplacementVisitor$CtStatementListStatementsReplaceListener.set(ReplacementVisitor.java:529)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtBlock(ReplacementVisitor.java:537)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
new CtBiScannerDefault() {
    @Override
    public void biScan(CtElement element, CtElement other) {
        if (CallChecker.beforeDeref(counterBiScan2, Counter.class, 392, 13342, 13355)) {
            (counterBiScan2.scan)++;
        }
        assertSame(element, other);
        super.biScan(element, other);
    }
}.biScan(_rootPackage, _rootPackage)-->new CtBiScannerDefault() {
    @Override
    public void biScan(CtElement element, CtElement other) {
        if (CallChecker.beforeDeref(counterBiScan2, Counter.class, 392, 13342, 13355)) {
            (counterBiScan2.scan)++;
        }
        assertSame(element, other);
        super.biScan(element, other);
    }
}.biScan(_rootPackage, _rootPackage)
java.lang.ClassCastException: spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtBlockImpl.setStatements(CtBlockImpl.java:171)
	at spoon.support.visitor.replace.ReplacementVisitor$CtStatementListStatementsReplaceListener.set(ReplacementVisitor.java:529)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtBlock(ReplacementVisitor.java:537)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
setPackageDeclaration((ctPackage == null ? null : getFactory().Package().createPackageDeclaration(ctPackage.getReference())))-->getFactory().Package()
java.lang.IndexOutOfBoundsException: Index: -1, Size: 2
	at java.util.ArrayList.rangeCheckForAdd(ArrayList.java:665)
	at java.util.ArrayList.add(ArrayList.java:477)
	at spoon.support.reflect.code.CtStatementImpl$InsertType$1.insertFromFirstStatement(CtStatementImpl.java:185)
	at spoon.support.reflect.code.CtStatementImpl$InsertVisitor.visitCtBlock(CtStatementImpl.java:102)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtInheritanceScanner.scan(CtInheritanceScanner.java:173)
	at spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatementImpl.java:84)
	at spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatementImpl.java:66)
	at spoon.support.reflect.code.CtInvocationImpl.insertBefore(CtInvocationImpl.java:108)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.extractInvocations(BeforeDerefAdder.java:378)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:184)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtInvocation(CtScanner.java:494)
	at spoon.support.reflect.code.CtInvocationImpl.accept(CtInvocationImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtInvocation(CtScanner.java:496)
	at spoon.support.reflect.code.CtInvocationImpl.accept(CtInvocationImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:475)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
setPackageDeclaration((ctPackage == null ? null : getFactory().Package().createPackageDeclaration(ctPackage.getReference())))-->getFactory().Package().createPackageDeclaration(ctPackage.getReference())
java.lang.IndexOutOfBoundsException: Index: -1, Size: 2
	at java.util.ArrayList.rangeCheckForAdd(ArrayList.java:665)
	at java.util.ArrayList.add(ArrayList.java:477)
	at spoon.support.reflect.code.CtStatementImpl$InsertType$1.insertFromFirstStatement(CtStatementImpl.java:185)
	at spoon.support.reflect.code.CtStatementImpl$InsertVisitor.visitCtBlock(CtStatementImpl.java:102)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtInheritanceScanner.scan(CtInheritanceScanner.java:173)
	at spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatementImpl.java:84)
	at spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatementImpl.java:66)
	at spoon.support.reflect.code.CtInvocationImpl.insertBefore(CtInvocationImpl.java:108)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.extractInvocations(BeforeDerefAdder.java:378)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:184)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtInvocation(CtScanner.java:496)
	at spoon.support.reflect.code.CtInvocationImpl.accept(CtInvocationImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:475)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.problemReporter = new ProblemReporter(errorHandlingPolicy, compilerOptions, problemFactory) {
        @Override
        public int computeSeverity(int problemID) {
            return 256;
        }
    };
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:175)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtInvocation(CtScanner.java:494)
	at spoon.support.reflect.code.CtInvocationImpl.accept(CtInvocationImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:473)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.problemReporter = new ProblemReporter(errorHandlingPolicy, compilerOptions, problemFactory) {
        @Override
        public int computeSeverity(int problemID) {
            return 256;
        }
    };
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment().getNoClasspath()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:175)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:473)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
BeforeDeref --> 16260 (failed:8) in 3354ms
target--> 17879 (failed:0) in 10659ms
TryRegister # Try: 232 in 604ms
Assign --> 3244 (failed: 0) in 3456ms
VarInit --> 313 in 310ms
Exception in thread "main" spoon.SpoonException: The lambda can be based on interface, which has only one method. But java.util.Comparator has at least two: compare(T,T) and equals(java.lang.Object)
	at spoon.support.reflect.code.CtLambdaImpl.getOverriddenMethod(CtLambdaImpl.java:131)
	at spoon.reflect.factory.ExecutableFactory.createReferenceInternal(ExecutableFactory.java:120)
	at spoon.reflect.factory.ExecutableFactory.createReference(ExecutableFactory.java:100)
	at spoon.support.reflect.code.CtLambdaImpl.getReference(CtLambdaImpl.java:241)
	at spoon.reflect.visitor.ImportScannerImpl.addClassImport(ImportScannerImpl.java:280)
	at spoon.reflect.visitor.ImportScannerImpl.visitCtTypeReference(ImportScannerImpl.java:125)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.accept(CtTypeReferenceImpl.java:83)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtTypeReference(CtScanner.java:766)
	at spoon.reflect.visitor.ImportScannerImpl.visitCtTypeReference(ImportScannerImpl.java:128)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.accept(CtTypeReferenceImpl.java:83)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtLambda(CtScanner.java:603)
	at spoon.support.reflect.code.CtLambdaImpl.accept(CtLambdaImpl.java:66)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.ImportScannerImpl.computeImports(ImportScannerImpl.java:204)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.computeImports(DefaultJavaPrettyPrinter.java:293)
	at spoon.support.reflect.declaration.CtElementImpl.toString(CtElementImpl.java:252)
	at fr.inria.spirals.npefix.transformer.processors.VarRetrieveInit.isToBeProcessed(VarRetrieveInit.java:51)
	at fr.inria.spirals.npefix.transformer.processors.VarRetrieveInit.isToBeProcessed(VarRetrieveInit.java:17)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:80)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtAnonymousExecutable(CtScanner.java:217)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
Command exited with non-zero status 1
107.02user 1.64system 0:41.31elapsed 263%CPU (0avgtext+0avgdata 1853356maxresident)k
27448inputs+248outputs (1major+494291minor)pagefaults 0swaps


Node: suno-35.sophia.grid5000.fr



Date: Wed Dec 26 12:21:01 EST 2018

