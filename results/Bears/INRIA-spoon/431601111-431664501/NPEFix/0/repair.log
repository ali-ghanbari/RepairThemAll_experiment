cd /tmp/NPEFix_Bears_INRIA-spoon_431601111-431664501;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/RepairThemAll/script/../repair_tools/npefix.jar fr.inria.spirals.npefix.main.run.Main \
    --test spoon.test.serializable.SerializableTest \
    --iteration 100 \
	--complianceLevel 8 \
	--workingdirectory . \
	--source src/main/java \
	--classpath target/classes:target/test-classes:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.equinox.app/1.4.0/org.eclipse.equinox.app-1.4.0.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.commands/3.9.200/org.eclipse.core.commands-3.9.200.jar:/home/tdurieux/.m2/repository/com/mysema/querydsl/querydsl-core/3.6.9/querydsl-core-3.6.9.jar:/home/tdurieux/.m2/repository/org/eclipse/jdt/org.eclipse.jdt.core/3.13.102/org.eclipse.jdt.core-3.13.102.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-utils/3.0.24/plexus-utils-3.0.24.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.7.1/plexus-component-annotations-1.7.1.jar:/home/tdurieux/.m2/repository/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.equinox.common/3.10.200/org.eclipse.equinox.common-3.10.200.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.2/jackson-databind-2.9.2.jar:/home/tdurieux/.m2/repository/org/apache/maven/shared/maven-shared-utils/3.2.1/maven-shared-utils-3.2.1.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.2/jackson-core-2.9.2.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/.m2/repository/com/martiansoftware/jsap/2.1/jsap-2.1.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.resources/3.13.200/org.eclipse.core.resources-3.13.200.jar:/home/tdurieux/.m2/repository/com/infradna/tool/bridge-method-annotation/1.13/bridge-method-annotation-1.13.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.equinox.preferences/3.7.200/org.eclipse.equinox.preferences-3.7.200.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.text/3.8.0/org.eclipse.text-3.8.0.jar:/home/tdurieux/.m2/repository/commons-io/commons-io/2.5/commons-io-2.5.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.expressions/3.6.200/org.eclipse.core.expressions-3.6.200.jar:/home/tdurieux/.m2/repository/org/mockito/mockito-all/2.0.2-beta/mockito-all-2.0.2-beta.jar:/home/tdurieux/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-model/3.5.0/maven-model-3.5.0.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.osgi/3.13.200/org.eclipse.osgi-3.13.200.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.equinox.registry/3.8.200/org.eclipse.equinox.registry-3.8.200.jar:/home/tdurieux/.m2/repository/com/github/stefanbirkner/system-rules/1.9.0/system-rules-1.9.0.jar:/home/tdurieux/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.filesystem/1.7.200/org.eclipse.core.filesystem-1.7.200.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.contenttype/3.7.200/org.eclipse.core.contenttype-3.7.200.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.runtime/3.15.100/org.eclipse.core.runtime-3.15.100.jar:/home/tdurieux/.m2/repository/org/apache/maven/shared/maven-invoker/3.0.1/maven-invoker-3.0.1.jar:/home/tdurieux/.m2/repository/com/google/guava/guava/18.0/guava-18.0.jar:/home/tdurieux/.m2/repository/org/eclipse/platform/org.eclipse.core.jobs/3.10.200/org.eclipse.core.jobs-3.10.200.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
TernarySplitter  in 274ms
return ((field.getAnnotation(Parameter.class)) != null) || (TemplateParameter.class.isAssignableFrom(field.getType()))
boolean bodyBetweenElementPosition = (body != null) && (this.isCommentBetweenElementPosition(body))
wildcard.setUpper(((((type.getLowerBounds()) != null) && ((type.getLowerBounds().length) > 0)) == false))
return (clazz != null) && (clazz.isInterface())
return (((getFile()) == null ? (s.getFile()) == null : getFile().equals(s.getFile())) && ((getLine()) == (s.getLine()))) && ((getColumn()) == (s.getColumn()))
return (((getFile()) == null ? (s.getFile()) == null : getFile().equals(s.getFile())) && ((getLine()) == (s.getLine()))) && ((getColumn()) == (s.getColumn()))
return new AbstractList<X>() {
    T element = castTarget(e);

    boolean hasValue = (SingleHandler.this.getValue(element)) != null;

    @Override
    public int size() {
        if (hasValue) {
            return 1;
        }else {
            return 0;
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public X get(int index) {
        if ((index < 0) || (index >= (size()))) {
            throw new IndexOutOfBoundsException(((("Index: " + index) + ", Size: ") + (size())));
        }
        return ((X) (SingleHandler.this.getValue(element)));
    }

    @Override
    public X set(int index, X value) {
        if ((index < 0) || (index >= (size()))) {
            throw new IndexOutOfBoundsException(((("Index: " + index) + ", Size: ") + (size())));
        }
        X oldValue = get(0);
        SingleHandler.this.setValue(element, value);
        return oldValue;
    }

    @Override
    public boolean add(X value) {
        if (hasValue) {
            throw new SpoonException("Single value attribute cannot have more then one value");
        }
        SingleHandler.this.setValue(element, value);
        hasValue = true;
        return true;
    }

    @Override
    public X remove(int index) {
        if ((index < 0) || (index >= (size()))) {
            throw new IndexOutOfBoundsException(((("Index: " + index) + ", Size: ") + (size())));
        }
        X oldValue = get(0);
        if (oldValue != null) {
            SingleHandler.this.setValue(element, null);
        }
        hasValue = false;
        return oldValue;
    }

    @Override
    public boolean remove(Object value) {
        if ((hasValue) == false) {
            return false;
        }
        X oldValue = get(0);
        if (equals(oldValue, value)) {
            if (oldValue != null) {
                SingleHandler.this.setValue(element, null);
            }
            hasValue = false;
            return true;
        }
        return false;
    }

    private boolean equals(Object v1, Object v2) {
        if (v1 == v2) {
            return true;
        }
        if (v1 == null) {
            return false;
        }
        return v1.equals(v2);
    }
}
return (mmCommentField != null) && ((mmCommentField.isDerived()) == false)
typeContext = new ClassTypingContext(((modelClass) != null ? modelClass : modelInterface))
return (parent) != null
assert executableJDT != null
boolean isOtherBinding = ((qualifiedNameReference.otherBindings) == null) || ((qualifiedNameReference.otherBindings.length) == 0)
p.getType().setImplicit(((argument.type) == null))
((CtArrayTypeReference) (p.getType())).getComponentType().setImplicit(((argument.type) == null))
return ((added) != null) && (!(added.isEmpty()))
return ((modified) != null) && (!(modified.isEmpty()))
return ((removed) != null) && (!(removed.isEmpty()))
return ((getBoundingType()) != null) && (getBoundingType().isGenerics())
return includeSamePackage || (((getPackage()) != null) && (!(CtTypeImpl.getPackageReference(typeRef).equals(getPackage().getReference()))))
return ((typeRef.getPackage()) != null) && ("java.lang".equals(typeRef.getPackage().toString()))
return ((getDeclaringType()) == null) && ((getPackage()) != null)
return ((getDeclaringType()) == null) && ((getPackage()) != null)
return (((exist.getDeclaringType()) != null ? exist.getDeclaringType().getQualifiedName() : "") + ".") + (exist.getSignature())
return (super.matches(element)) && ((element.getAnnotation(annotationType)) != null)
return (declaringType != null) && (declaringType.isSubtypeOf(executable.getDeclaringType()))
return (m != null) && (Modifier.isFinal(m.getModifiers()))
return (((parent.defaultValue) != null) && (getFinalExpressionFromCast(parent.defaultValue).equals(childJDT))) && (!(child.equals(ctVariable.getDefaultExpression())))
return (((parent.initialization) != null) && (getFinalExpressionFromCast(parent.initialization).equals(childJDT))) && (!(child.equals(ctVariable.getDefaultExpression())))
return (((parent.returnType) != null) && (parent.returnType.equals(childJDT))) && (!(child.equals(ctMethod.getType())))
return (((parent.defaultValue) != null) && (parent.defaultValue.equals(childJDT))) && (!(child.equals(ctAnnotationMethod.getDefaultExpression())))
return (((parent.qualification) != null) && (getFinalExpressionFromCast(parent.qualification).equals(childJDT))) && (!(child.equals(ctInvocation.getTarget())))
return (((parent.receiver) != null) && (getFinalExpressionFromCast(parent.receiver).equals(childJDT))) && (!(child.equals(ctInvocation.getTarget())))
return (((parent.enclosingInstance) != null) && (getFinalExpressionFromCast(parent.enclosingInstance).equals(childJDT))) && (!(child.equals(ctConstructorCall.getTarget())))
return ((parent.type) != null) && (parent.type.equals(childJDT))
final boolean lookingForFields = (clazz == null) || (coreFactory.createField().getClass().isAssignableFrom(clazz))
return createReference(e.getParent(CtType.class).getReference(), (lambdaMethod == null ? null : lambdaMethod.getType().clone()), executableName, refs)
this.sortList = (System.getenv("SPOON_SEED_CU_COMPARATOR")) == null
isGenericTypeExplicit = (typeArgument != null) && ((typeArgument.length) > 0)
return (((((parent instanceof CtFieldWrite) && (targetExp.equals(((CtFieldWrite) (parent)).getTarget()))) && (anonymousParent != null)) && ((((CtFieldWrite) (parent)).getVariable()) != null)) && (((CtFieldWrite) (parent)).getVariable().getModifiers().contains(ModifierKind.STATIC))) && (((CtFieldWrite) (parent)).getVariable().getModifiers().contains(ModifierKind.FINAL))
return (((((parent instanceof CtFieldWrite) && (targetExp.equals(((CtFieldWrite) (parent)).getTarget()))) && (anonymousParent != null)) && ((((CtFieldWrite) (parent)).getVariable()) != null)) && (((CtFieldWrite) (parent)).getVariable().getModifiers().contains(ModifierKind.STATIC))) && (((CtFieldWrite) (parent)).getVariable().getModifiers().contains(ModifierKind.FINAL))
isNotInAnnotation = ((newArray.getParent(CtAnnotationType.class)) == null) && ((newArray.getParent(CtAnnotation.class)) == null)
isNotInAnnotation = ((newArray.getParent(CtAnnotationType.class)) == null) && ((newArray.getParent(CtAnnotation.class)) == null)
boolean isInner = (ref.getDeclaringType()) != null
final CtQuery q = ((CtQueryable) (input)).map(new SuperInheritanceHierarchyFunction(((distinctSet) == null ? new HashSet<>() : distinctSet)).includingSelf(true))
return (element != null) && (type.isAssignableFrom(element.getClass()))
return (matches) != null
boolean needsSetter = (getMethod(MMMethodKind.SET)) != null
new ReplacementVisitor(original, (replace == null ? ReplacementVisitor.EMPTY : new CtElement[]{ replace })).scan(original.getParent())
isRepeatable = (ctAnnotationType.getAnnotation(factory.Type().createReference(Repeatable.class))) != null
CheckNotNull  in 1685ms
ForceNullInit in 255ms
AddImplicitCastChecker --> 10 in 730ms
new PatternParameterConfigurator.StringAttributeScanner() {
    @Override
    protected void visitStringAttribute(RoleHandler roleHandler, CtElement element, String value) {
        if ((value != null) && (value.contains(stringMarker))) {
            if (CallChecker.beforeDeref(roleHandler, RoleHandler.class, 625, 26350, 26360)) {
                addSubstitutionRequest(pi, element, roleHandler.getRole(), stringMarker);
            }
        }
    }

    @Override
    protected void visitStringAttribute(RoleHandler roleHandler, CtElement element, String mapEntryKey, CtElement mapEntryValue) {
        if ((mapEntryKey != null) && (mapEntryKey.contains(stringMarker))) {
            if (CallChecker.beforeDeref(roleHandler, RoleHandler.class, 631, 26671, 26681)) {
                if (CallChecker.beforeDeref(patternBuilder, PatternBuilder.class, 631, 26616, 26629)) {
                    patternBuilder.modifyNodeOfAttributeOfElement(element, roleHandler.getRole(), conflictResolutionMode, ( oldAttrNode) -> {
                        List<RootNode> nodes = ((ListOfNodes) (oldAttrNode)).getNodes();
                        for (int i = 0; i < (nodes.size()); i++) {
                            RootNode node = nodes.get(i);
                            if (node instanceof MapEntryNode) {
                                MapEntryNode mapEntryNode = ((MapEntryNode) (node));
                                nodes.set(i, new MapEntryNode(StringNode.setReplaceMarker(mapEntryNode.getKey(), stringMarker, pi), mapEntryNode.getValue()));
                            }
                        }
                        return oldAttrNode;
                    });
                }
            }
        }
    }
}.scan(patternBuilder.getPatternModel())-->new PatternParameterConfigurator.StringAttributeScanner() {
    @Override
    protected void visitStringAttribute(RoleHandler roleHandler, CtElement element, String value) {
        if ((value != null) && (value.contains(stringMarker))) {
            if (CallChecker.beforeDeref(roleHandler, RoleHandler.class, 625, 26350, 26360)) {
                addSubstitutionRequest(pi, element, roleHandler.getRole(), stringMarker);
            }
        }
    }

    @Override
    protected void visitStringAttribute(RoleHandler roleHandler, CtElement element, String mapEntryKey, CtElement mapEntryValue) {
        if ((mapEntryKey != null) && (mapEntryKey.contains(stringMarker))) {
            if (CallChecker.beforeDeref(roleHandler, RoleHandler.class, 631, 26671, 26681)) {
                if (CallChecker.beforeDeref(patternBuilder, PatternBuilder.class, 631, 26616, 26629)) {
                    patternBuilder.modifyNodeOfAttributeOfElement(element, roleHandler.getRole(), conflictResolutionMode, ( oldAttrNode) -> {
                        List<RootNode> nodes = ((ListOfNodes) (oldAttrNode)).getNodes();
                        for (int i = 0; i < (nodes.size()); i++) {
                            RootNode node = nodes.get(i);
                            if (node instanceof MapEntryNode) {
                                MapEntryNode mapEntryNode = ((MapEntryNode) (node));
                                nodes.set(i, new MapEntryNode(StringNode.setReplaceMarker(mapEntryNode.getKey(), stringMarker, pi), mapEntryNode.getValue()));
                            }
                        }
                        return oldAttrNode;
                    });
                }
            }
        }
    }
}.scan(patternBuilder.getPatternModel())
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:137)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:1023)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1033)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:50)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.problemReporter = new ProblemReporter(errorHandlingPolicy, compilerOptions, problemFactory) {
        @Override
        public int computeSeverity(int problemID) {
            return 256;
        }
    };
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:175)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtInvocation(CtScanner.java:494)
	at spoon.support.reflect.code.CtInvocationImpl.accept(CtInvocationImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:473)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.problemReporter = new ProblemReporter(errorHandlingPolicy, compilerOptions, problemFactory) {
        @Override
        public int computeSeverity(int problemID) {
            return 256;
        }
    };
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment().getNoClasspath()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:175)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:473)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
BeforeDeref --> 15780 (failed:3) in 2918ms
target--> 17333 (failed:0) in 7745ms
TryRegister # Try: 223 in 589ms
Assign --> 3139 (failed: 0) in 2858ms
VarInit --> 306 in 358ms
Exception in thread "main" spoon.SpoonException: The lambda can be based on interface, which has only one method. But java.util.Comparator has at least two: compare(T,T) and equals(java.lang.Object)
	at spoon.support.reflect.code.CtLambdaImpl.getOverriddenMethod(CtLambdaImpl.java:131)
	at spoon.reflect.factory.ExecutableFactory.createReferenceInternal(ExecutableFactory.java:120)
	at spoon.reflect.factory.ExecutableFactory.createReference(ExecutableFactory.java:100)
	at spoon.support.reflect.code.CtLambdaImpl.getReference(CtLambdaImpl.java:241)
	at spoon.reflect.visitor.ImportScannerImpl.addClassImport(ImportScannerImpl.java:280)
	at spoon.reflect.visitor.ImportScannerImpl.visitCtTypeReference(ImportScannerImpl.java:125)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.accept(CtTypeReferenceImpl.java:83)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtTypeReference(CtScanner.java:766)
	at spoon.reflect.visitor.ImportScannerImpl.visitCtTypeReference(ImportScannerImpl.java:128)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.accept(CtTypeReferenceImpl.java:83)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtLambda(CtScanner.java:603)
	at spoon.support.reflect.code.CtLambdaImpl.accept(CtLambdaImpl.java:66)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.ImportScannerImpl.computeImports(ImportScannerImpl.java:204)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.computeImports(DefaultJavaPrettyPrinter.java:293)
	at spoon.support.reflect.declaration.CtElementImpl.toString(CtElementImpl.java:252)
	at fr.inria.spirals.npefix.transformer.processors.VarRetrieveInit.isToBeProcessed(VarRetrieveInit.java:51)
	at fr.inria.spirals.npefix.transformer.processors.VarRetrieveInit.isToBeProcessed(VarRetrieveInit.java:17)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:80)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtAnonymousExecutable(CtScanner.java:217)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
Command exited with non-zero status 1
93.79user 1.44system 0:36.44elapsed 261%CPU (0avgtext+0avgdata 1877736maxresident)k
27600inputs+160outputs (1major+510365minor)pagefaults 0swaps


Node: suno-31.sophia.grid5000.fr



Date: Wed Dec 26 12:20:45 EST 2018

