cd /tmp/NPEFix_Bears_webfirmframework-wff_453188520-453188718;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/npefix.jar fr.inria.spirals.npefix.main.run.Main \
    --test com.webfirmframework.wffweb.tag.html.AbstractHtmlTest \
    --iteration 100 \
	--complianceLevel 8 \
	--workingdirectory . \
	--source wffweb/src/main/java \
	--classpath wffweb/target/classes:wffweb/target/test-classes:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.7/jackson-databind-2.9.7.jar:/home/tdurieux/.m2/repository/de/undercouch/bson4jackson/2.9.2/bson4jackson-2.9.2.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.7/jackson-core-2.9.7.jar:/home/tdurieux/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
TernarySplitter  in 195ms
return ((webkitFlexGrow != null) || (webkitFlexShrink != null)) || (webkitFlexBasis != null)
return ((webkitFlexGrow != null) || (webkitFlexShrink != null)) || (webkitFlexBasis != null)
return ((webkitFlexGrow != null) || (webkitFlexShrink != null)) || (webkitFlexBasis != null)
return ((flexGrow != null) || (flexShrink != null)) || (flexBasis != null)
return ((flexGrow != null) || (flexShrink != null)) || (flexBasis != null)
return ((flexGrow != null) || (flexShrink != null)) || (flexBasis != null)
return (((((fontStyle != null) || (fontVariant != null)) || (fontWeight != null)) || (fontSize != null)) || (lineHeight != null)) || (fontFamily != null)
return (((((fontStyle != null) || (fontVariant != null)) || (fontWeight != null)) || (fontSize != null)) || (lineHeight != null)) || (fontFamily != null)
return (((((fontStyle != null) || (fontVariant != null)) || (fontWeight != null)) || (fontSize != null)) || (lineHeight != null)) || (fontFamily != null)
return (((((fontStyle != null) || (fontVariant != null)) || (fontWeight != null)) || (fontSize != null)) || (lineHeight != null)) || (fontFamily != null)
return (((((fontStyle != null) || (fontVariant != null)) || (fontWeight != null)) || (fontSize != null)) || (lineHeight != null)) || (fontFamily != null)
return (((((fontStyle != null) || (fontVariant != null)) || (fontWeight != null)) || (fontSize != null)) || (lineHeight != null)) || (fontFamily != null)
return (columnWidth != null) || (columnCount != null)
return (columnWidth != null) || (columnCount != null)
final boolean noTag = (movedChildTag.getTagName()) == null
return ((outlineWidth != null) || (outlineStyle != null)) || (outlineColor != null)
return ((outlineWidth != null) || (outlineStyle != null)) || (outlineColor != null)
return ((outlineWidth != null) || (outlineStyle != null)) || (outlineColor != null)
return ((borderLeftWidth != null) || (borderLeftStyle != null)) || (borderLeftColor != null)
return ((borderLeftWidth != null) || (borderLeftStyle != null)) || (borderLeftColor != null)
return ((borderLeftWidth != null) || (borderLeftStyle != null)) || (borderLeftColor != null)
return (idAttr != null) && (id.equals(idAttr.getAttributeValue()))
return (attribute != null) && (attributeValue.equals(attribute.getAttributeValue()))
return (child.getAttributes()) != null
return (tagName.equals(child.getTagName())) && ((child.getAttributes()) != null)
return (child.getAttributes()) != null
return (attr != null) && (attributeValue.equals(attr.getAttributeValue()))
return (child.getAttributeByName(attributeName)) != null
return (child.getAttributeByName(attributeName)) != null
return (tag.getAttributeByName(attributeName)) != null
return (attribute != null) && (attributeValue.equals(attribute.getAttributeValue()))
final Stream<AbstractAttribute> attributesStream = buildAllTagsStream(parallel).filter(( tag) -> (tagName.equals(tag.getTagName())) && ((tag.getAttributes()) != null)).map(( tag) -> {
    return tag.getAttributes();
}).flatMap(( attributes) -> attributes.stream())
final Stream<AbstractAttribute> attributesStream = buildAllTagsStream(parallel).filter(( tag) -> (tag.getAttributes()) != null).map(( tag) -> {
    return tag.getAttributes();
}).flatMap(( attributes) -> attributes.stream())
return (attribute != null) && (attributeValue.equals(attribute.getAttributeValue()))
return (tag.getAttributeByName(attributeName)) != null
final Stream<AbstractAttribute> attributesStream = buildAllTagsStream(parallel).filter(( tag) -> (tag.getAttributes()) != null).map(( tag) -> {
    return tag.getAttributes();
}).flatMap(( attributes) -> attributes.stream())
return AbstractHtmlRepository.getAllNestedChildrenIncludingParent(parallel, fromTags).filter(( tag) -> (tag.getAttributes()) != null).map(( tag) -> {
    return tag.getAttributes();
}).flatMap(( attributes) -> attributes.stream()).collect(Collectors.toSet())
final Stream<AbstractAttribute> attributesStream = AbstractHtmlRepository.getAllNestedChildrenIncludingParent(parallel, fromTags).filter(( tag) -> (tag.getAttributes()) != null).map(( tag) -> {
    return tag.getAttributes();
}).flatMap(( attributes) -> attributes.stream())
return ((borderBottomWidth != null) || (borderBottomStyle != null)) || (borderBottomColor != null)
return ((borderBottomWidth != null) || (borderBottomStyle != null)) || (borderBottomColor != null)
return ((borderBottomWidth != null) || (borderBottomStyle != null)) || (borderBottomColor != null)
return ((listStyleType != null) || (listStylePosition != null)) || (listStyleImage != null)
return ((listStyleType != null) || (listStylePosition != null)) || (listStyleImage != null)
return ((listStyleType != null) || (listStylePosition != null)) || (listStyleImage != null)
return ((borderTopWidth != null) || (borderTopStyle != null)) || (borderTopColor != null)
return ((borderTopWidth != null) || (borderTopStyle != null)) || (borderTopColor != null)
return ((borderTopWidth != null) || (borderTopStyle != null)) || (borderTopColor != null)
return top != null ? String.valueOf(top) : BorderImageWidth.AUTO
return ((borderRightWidth != null) || (borderRightStyle != null)) || (borderRightColor != null)
return ((borderRightWidth != null) || (borderRightStyle != null)) || (borderRightColor != null)
return ((borderRightWidth != null) || (borderRightStyle != null)) || (borderRightColor != null)
return ((mozFlexGrow != null) || (mozFlexShrink != null)) || (mozFlexBasis != null)
return ((mozFlexGrow != null) || (mozFlexShrink != null)) || (mozFlexBasis != null)
return ((mozFlexGrow != null) || (mozFlexShrink != null)) || (mozFlexBasis != null)
return ((top != null) && (topUnit != null) ? String.valueOf(top).concat(topUnit.getUnit()) : top != null ? String.valueOf(top) : BorderImageSlice.DEFAULT_VALUE).concat(" ").concat(middle)
return ((top != null) && (topUnit != null) ? String.valueOf(top).concat(topUnit.getUnit()) : top != null ? String.valueOf(top) : BorderImageSlice.DEFAULT_VALUE).concat(" ").concat(middle)
return ((top != null) && (topUnit != null) ? String.valueOf(top).concat(topUnit.getUnit()) : top != null ? String.valueOf(top) : BorderImageSlice.DEFAULT_VALUE).concat(" ").concat(middle)
return top != null ? String.valueOf(top) : BorderImageSlice.DEFAULT_VALUE
return top != null ? String.valueOf(top) : BorderImageOutset.DEFAULT_VALUE
return ((flexGrow != null) || (flexShrink != null)) || (flexBasis != null)
return ((flexGrow != null) || (flexShrink != null)) || (flexBasis != null)
return ((flexGrow != null) || (flexShrink != null)) || (flexBasis != null)
final boolean alreadyHasParent = (child.parent) != null
htmlStartSB = new StringBuilder(((tagName) == null ? 0 : ((tagName.length()) + 2) + (((attributes) == null ? 0 : attributes.length) * 16)))
htmlStartSB = new StringBuilder(((tagName) == null ? 0 : ((tagName.length()) + 2) + (((attributes) == null ? 0 : attributes.length) * 16)))
htmlEndSB = new StringBuilder(((tagName) == null ? 16 : (tagName.length()) + 3))
final boolean alreadyHasParent = (abstractHtmlToInsert.parent) != null
CheckNotNull  in 1715ms
ForceNullInit in 306ms
AddImplicitCastChecker --> 1 in 350ms
BeforeDeref --> 6432 (failed:0) in 1394ms
target--> 9875 (failed:0) in 3049ms
TryRegister # Try: 503 in 278ms
Assign --> 4181 (failed: 0) in 2988ms
VarInit --> 2491 in 685ms
Exception in thread "main" spoon.SpoonException: The lambda can be based on interface, which has only one method. But java.util.Comparator has at least two: compare(T,T) and equals(java.lang.Object)
	at spoon.support.reflect.code.CtLambdaImpl.getOverriddenMethod(CtLambdaImpl.java:131)
	at spoon.reflect.factory.ExecutableFactory.createReferenceInternal(ExecutableFactory.java:120)
	at spoon.reflect.factory.ExecutableFactory.createReference(ExecutableFactory.java:100)
	at spoon.support.reflect.code.CtLambdaImpl.getReference(CtLambdaImpl.java:241)
	at spoon.reflect.visitor.ImportScannerImpl.addClassImport(ImportScannerImpl.java:280)
	at spoon.reflect.visitor.ImportScannerImpl.visitCtTypeReference(ImportScannerImpl.java:125)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.accept(CtTypeReferenceImpl.java:83)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtTypeReference(CtScanner.java:766)
	at spoon.reflect.visitor.ImportScannerImpl.visitCtTypeReference(ImportScannerImpl.java:128)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.accept(CtTypeReferenceImpl.java:83)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtLambda(CtScanner.java:603)
	at spoon.support.reflect.code.CtLambdaImpl.accept(CtLambdaImpl.java:66)
	at spoon.reflect.visitor.ImportScannerImpl.scan(ImportScannerImpl.java:135)
	at spoon.reflect.visitor.ImportScannerImpl.computeImports(ImportScannerImpl.java:204)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.computeImports(DefaultJavaPrettyPrinter.java:293)
	at spoon.support.reflect.declaration.CtElementImpl.toString(CtElementImpl.java:252)
	at fr.inria.spirals.npefix.transformer.processors.VarRetrieveInit.isToBeProcessed(VarRetrieveInit.java:51)
	at fr.inria.spirals.npefix.transformer.processors.VarRetrieveInit.isToBeProcessed(VarRetrieveInit.java:17)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:80)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:474)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtAnonymousExecutable(CtScanner.java:217)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtEnum(CtScanner.java:384)
	at spoon.support.reflect.declaration.CtEnumImpl.accept(CtEnumImpl.java:55)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
Command exited with non-zero status 1
52.21user 0.85system 0:19.56elapsed 271%CPU (0avgtext+0avgdata 1563668maxresident)k
20096inputs+96outputs (1major+408221minor)pagefaults 0swaps


Node: graphene-72.nancy.grid5000.fr



Date: Thu Feb 14 15:46:49 EST 2019

