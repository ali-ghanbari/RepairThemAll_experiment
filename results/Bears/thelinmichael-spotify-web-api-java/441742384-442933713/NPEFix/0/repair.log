cd /tmp/NPEFix_Bears_thelinmichael-spotify-web-api-java_441742384-442933713;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/RepairThemAll/script/../repair_tools/npefix.jar fr.inria.spirals.npefix.main.run.Main \
    --test com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest \
    --iteration 100 \
	--complianceLevel 8 \
	--workingdirectory . \
	--source src/main/java \
	--classpath target/classes:target/test-classes:/home/tdurieux/.m2/repository/org/apache/httpcomponents/httpcore/4.4.9/httpcore-4.4.9.jar:/home/tdurieux/.m2/repository/com/google/code/gson/gson/2.8.5/gson-2.8.5.jar:/home/tdurieux/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar:/home/tdurieux/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/tdurieux/.m2/repository/org/mockito/mockito-all/1.10.19/mockito-all-1.10.19.jar:/home/tdurieux/.m2/repository/org/apache/httpcomponents/httpclient-cache/4.5.5/httpclient-cache-4.5.5.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/.m2/repository/com/neovisionaries/nv-i18n/1.23/nv-i18n-1.23.jar:/home/tdurieux/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/home/tdurieux/.m2/repository/org/apache/httpcomponents/httpclient/4.5.5/httpclient-4.5.5.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
TernarySplitter  in 130ms
assert q != null
assert market != null
assert limit != null
assert offset != null
assert builder != null
assert clientId != null
assert clientSecret != null
assert q != null
assert market != null
assert limit != null
assert offset != null
assert device_ids != null
assert id != null
assert device_id != null
assert context_uri != null
assert uris != null
assert offset != null
assert position_ms != null
assert market != null
assert limit != null
assert time_range != null
assert ids != null
assert user_id != null
assert playlist_id != null
assert uris != null
assert uris != null
assert grant_type != null
assert refresh_token != null
assert user_id != null
assert owner_id != null
assert playlist_id != null
assert ids != null
assert ids != null
assert accessToken != null
assert limit != null
assert time_range != null
assert id != null
assert ids != null
assert market != null
assert httpManager != null
assert scheme != null
assert host != null
assert port != null
assert path != null
assert (name != null) && (value != null)
assert (name != null) && (value != null)
assert name != null
assert value != null
assert name != null
assert value != null
assert name != null
assert value != null
assert builder != null
assert (builder.path) != null
assert user_id != null
assert playlist_id != null
assert name != null
assert description != null
assert country != null
assert locale != null
assert (LanguageCode.getByCode(localeParts[0])) != null
assert (CountryCode.getByCode(localeParts[1])) != null
assert position_ms != null
assert device_id != null
assert volume_percent != null
assert device_id != null
assert market != null
assert ids != null
assert market != null
assert category_id != null
assert country != null
assert locale != null
assert (LanguageCode.getByCode(localeParts[0])) != null
assert (CountryCode.getByCode(localeParts[1])) != null
assert q != null
assert type != null
assert market != null
assert limit != null
assert offset != null
assert locale != null
assert (LanguageCode.getByCode(localeParts[0])) != null
assert (CountryCode.getByCode(localeParts[1])) != null
assert country != null
assert timestamp != null
assert type != null
assert ids != null
assert ids != null
assert client_id != null
assert response_type != null
assert redirect_uri != null
assert state != null
assert scope != null
assert category_id != null
assert country != null
assert user_id != null
assert name != null
assert description != null
assert limit != null
assert after != null
assert before != null
assert id != null
assert market != null
assert ids != null
assert ids != null
assert user_id != null
assert playlist_id != null
assert tracks != null
assert snapshotId != null
assert user_id != null
assert playlist_id != null
assert fields != null
assert market != null
assert ids != null
CacheConfig cacheConfig = CacheConfig.custom().setMaxCacheEntries(((cacheMaxEntries) != null ? cacheMaxEntries : SpotifyHttpManager.DEFAULT_CACHE_MAX_ENTRIES)).setMaxObjectSize(((cacheMaxObjectSize) != null ? cacheMaxObjectSize : SpotifyHttpManager.DEFAULT_CACHE_MAX_OBJECT_SIZE)).setSharedCache(false).build()
CacheConfig cacheConfig = CacheConfig.custom().setMaxCacheEntries(((cacheMaxEntries) != null ? cacheMaxEntries : SpotifyHttpManager.DEFAULT_CACHE_MAX_ENTRIES)).setMaxObjectSize(((cacheMaxObjectSize) != null ? cacheMaxObjectSize : SpotifyHttpManager.DEFAULT_CACHE_MAX_OBJECT_SIZE)).setSharedCache(false).build()
RequestConfig requestConfig = RequestConfig.custom().setCookieSpec(CookieSpecs.DEFAULT).setProxy(proxy).setConnectionRequestTimeout(((builder.connectionRequestTimeout) != null ? builder.connectionRequestTimeout : RequestConfig.DEFAULT.getConnectionRequestTimeout())).setConnectTimeout(((builder.connectTimeout) != null ? builder.connectTimeout : RequestConfig.DEFAULT.getConnectTimeout())).setSocketTimeout(((builder.socketTimeout) != null ? builder.socketTimeout : RequestConfig.DEFAULT.getSocketTimeout())).build()
RequestConfig requestConfig = RequestConfig.custom().setCookieSpec(CookieSpecs.DEFAULT).setProxy(proxy).setConnectionRequestTimeout(((builder.connectionRequestTimeout) != null ? builder.connectionRequestTimeout : RequestConfig.DEFAULT.getConnectionRequestTimeout())).setConnectTimeout(((builder.connectTimeout) != null ? builder.connectTimeout : RequestConfig.DEFAULT.getConnectTimeout())).setSocketTimeout(((builder.socketTimeout) != null ? builder.socketTimeout : RequestConfig.DEFAULT.getSocketTimeout())).build()
RequestConfig requestConfig = RequestConfig.custom().setCookieSpec(CookieSpecs.DEFAULT).setProxy(proxy).setConnectionRequestTimeout(((builder.connectionRequestTimeout) != null ? builder.connectionRequestTimeout : RequestConfig.DEFAULT.getConnectionRequestTimeout())).setConnectTimeout(((builder.connectTimeout) != null ? builder.connectTimeout : RequestConfig.DEFAULT.getConnectTimeout())).setSocketTimeout(((builder.socketTimeout) != null ? builder.socketTimeout : RequestConfig.DEFAULT.getSocketTimeout())).build()
assert uri != null
assert uri != null
assert uri != null
assert uri != null
assert q != null
assert market != null
assert limit != null
assert offset != null
assert q != null
assert market != null
assert limit != null
assert offset != null
assert id != null
assert market != null
assert user_id != null
assert playlist_id != null
assert uris != null
assert uris != null
assert (builder.httpManager) != null
assert ids != null
assert user_id != null
assert playlist_id != null
assert image_data != null
assert ids != null
assert market != null
assert type != null
assert ids != null
assert device_id != null
assert ids != null
assert ids != null
assert user_id != null
assert user_id != null
assert playlist_id != null
assert range_start != null
assert range_length != null
assert insert_before != null
assert snapshot_id != null
assert user_id != null
assert playlist_id != null
assert fields != null
assert market != null
assert type != null
assert limit != null
assert time_range != null
assert state != null
assert device_id != null
assert ids != null
assert owner_id != null
assert playlist_id != null
assert device_id != null
assert market != null
assert max_acousticness != null
assert max_danceability != null
assert max_duration_ms != null
assert max_energy != null
assert max_instrumentalness != null
assert max_key != null
assert max_liveness != null
assert max_loudness != null
assert max_mode != null
assert max_popularity != null
assert max_speechiness != null
assert max_tempo != null
assert max_time_signature != null
assert max_valence != null
assert min_acousticness != null
assert min_danceability != null
assert min_duration_ms != null
assert min_energy != null
assert min_instrumentalness != null
assert min_key != null
assert min_liveness != null
assert min_loudness != null
assert min_mode != null
assert min_popularity != null
assert min_speechiness != null
assert min_tempo != null
assert min_time_signature != null
assert min_valence != null
assert seed_artists != null
assert seed_genres != null
assert seed_tracks != null
assert target_acousticness != null
assert target_danceability != null
assert target_duration_ms != null
assert target_energy != null
assert target_instrumentalness != null
assert target_key != null
assert target_liveness != null
assert target_loudness != null
assert target_mode != null
assert target_popularity != null
assert target_speechiness != null
assert target_tempo != null
assert target_time_signature != null
assert target_valence != null
assert owner_id != null
assert playlist_id != null
assert public_ != null
assert device_id != null
assert country != null
assert id != null
assert market != null
assert id != null
assert market != null
assert id != null
assert country != null
return (((((this.getItem()) != null) && ((other.getItem()) != null)) && ((this.getItem().getUri()) != null)) && ((other.getItem().getUri()) != null)) && (this.getItem().getUri().equals(other.getItem().getUri()))
return (((((this.getItem()) != null) && ((other.getItem()) != null)) && ((this.getItem().getUri()) != null)) && ((other.getItem().getUri()) != null)) && (this.getItem().getUri().equals(other.getItem().getUri()))
return (((((this.getItem()) != null) && ((other.getItem()) != null)) && ((this.getItem().getUri()) != null)) && ((other.getItem().getUri()) != null)) && (this.getItem().getUri().equals(other.getItem().getUri()))
return (((((this.getItem()) != null) && ((other.getItem()) != null)) && ((this.getItem().getUri()) != null)) && ((other.getItem().getUri()) != null)) && (this.getItem().getUri().equals(other.getItem().getUri()))
assert grant_type != null
assert user_id != null
assert playlist_id != null
assert id != null
assert grant_type != null
assert code != null
assert redirect_uri != null
assert type != null
assert ids != null
assert id != null
assert album_type != null
assert market != null
assert type != null
assert limit != null
assert after != null
assert device_id != null
CheckNotNull  in 433ms
ForceNullInit in 48ms
AddImplicitCastChecker --> 0 in 142ms
BeforeDeref --> 1392 (failed:0) in 641ms
target--> 2404 (failed:0) in 1424ms
TryRegister # Try: 10 in 102ms
Assign --> 698 (failed: 0) in 599ms
VarInit --> 27 in 84ms
MethodEncapsulation # Method: 1364 in 1318ms
ConstructorEncapsulation # Constructor: 240 in 532ms
VariableFor in 187ms
RMI Selector (Host: 127.0.0.1, Port: 10000): KO
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldReturnDefault_async
<No Strat> Status: Ok
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldReturnDefault_sync
<No Strat> Status: Ok
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldComplyWithReference
<No Strat> Status: Ko
Multirun 3/100 3%
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldComplyWithReference
<No Strat> Status: Ko
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldComplyWithReference
<No Strat> Status: Ko
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldComplyWithReference
<No Strat> Status: Ko
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldComplyWithReference
<No Strat> Status: Ko
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldComplyWithReference
<No Strat> Status: Ko
com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequestTest#shouldComplyWithReference
<No Strat> Status: Ko
85.02user 1.63system 0:33.28elapsed 260%CPU (0avgtext+0avgdata 1635280maxresident)k
21800inputs+10648outputs (1major+432881minor)pagefaults 0swaps


Node: suno-35.sophia.grid5000.fr



Date: Wed Dec 26 12:13:16 EST 2018

