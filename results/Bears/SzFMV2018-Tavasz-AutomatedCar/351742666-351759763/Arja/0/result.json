{
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Delete", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Delete", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Delete", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Delete", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Delete", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "add(progressBarsPanel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 55, 
          "faulty": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Delete", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Delete", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 92, 
          "faulty": "progressBarsPanel.add(gasProgressBar);", 
          "type": "Replace", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "InsertBefore", 
          "seed": "rpmAngle=calculateTachometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 141, 
          "faulty": "final int maxSpeedMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 94, 
          "faulty": "progressBarsPanel.add(breakProgressBar);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "InsertBefore", 
          "seed": "add(progressBarsPanel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 71, 
          "faulty": "initializeProgressBars();", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 57, 
          "faulty": "speedAngle=calculateSpeedometer(0);", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 121, 
          "faulty": "final int minRpmValue=0;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 103, 
          "faulty": "super.paintComponent(g);", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 86, 
          "faulty": "breakLabel.setText(\"break pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 124, 
          "faulty": "final int maxRpmMeter=255;", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "gasProgressBar.setValue(inputPacket.getGasPedalPosition());"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "Replace", 
          "seed": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 69, 
          "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 138, 
          "faulty": "final int minSpeedValue=0;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 58, 
          "faulty": "rpmAngle=calculateTachometer(0);", 
          "type": "Delete", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 90, 
          "faulty": "add(progressBarsPanel);", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 87, 
          "faulty": "gasProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "Replace", 
          "seed": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "Delete", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "InsertBefore", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 139, 
          "faulty": "final int maxSpeedValue=500;", 
          "type": "InsertBefore", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 127, 
          "faulty": "return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;", 
          "type": "InsertBefore", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 142, 
          "faulty": "int newspeed=maxSpeedValue - speed;", 
          "type": "InsertBefore", 
          "seed": "initializeProgressBars();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 67, 
          "faulty": "setLayout(null);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 85, 
          "faulty": "gasLabel.setText(\"gas pedal\");", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(breakLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 144, 
          "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", 
          "type": "InsertBefore", 
          "seed": "breakLabel.setText(\"break pedal\");"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 122, 
          "faulty": "final int maxRpmValue=10000;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "speedAngle=calculateSpeedometer(0);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 78, 
          "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 88, 
          "faulty": "breakProgressBar.setStringPainted(true);", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasProgressBar);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 91, 
          "faulty": "progressBarsPanel.add(gasLabel);", 
          "type": "Replace", 
          "seed": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "setBackground(new Color(backgroundColor));"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 68, 
          "faulty": "setBackground(new Color(backgroundColor));", 
          "type": "Delete", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 93, 
          "faulty": "progressBarsPanel.add(breakLabel);", 
          "type": "Delete", 
          "seed": "progressBarsPanel.add(breakProgressBar);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Delete", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 125, 
          "faulty": "int newrpm=maxRpmValue - rpm;", 
          "type": "InsertBefore", 
          "seed": "progressBarsPanel.add(gasLabel);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 56, 
          "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", 
          "type": "InsertBefore", 
          "seed": "initializeDashboard();"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "breakProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 123, 
          "faulty": "final int minRpmMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 140, 
          "faulty": "final int minSpeedMeter=-75;", 
          "type": "InsertBefore", 
          "seed": "setLayout(null);"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 59, 
          "faulty": "paintComponent(getGraphics());", 
          "type": "Replace", 
          "seed": "gasProgressBar.setStringPainted(true);"
        }, 
        {
          "path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", 
          "line": 79, 
          "faulty": "progressBarsPanel.setBounds(progressBarsPanelX,progressBarsPanelY,progressBarsPanelWidth,progressBarsPanelHeight);", 
          "type": "InsertBefore", 
          "seed": "gasLabel.setText(\"gas pedal\");"
        }
      ]
    }
  ]
}