[{"bug_id": "451155169-455669767", "tool": "ARJA", "nb_patch": 1796, "benchmark": "Bears", "project": "albfernandez-GDS-PMD-Security-Rules", "result": {"repair_end": "2018-12-26 19:58:36.167008", "repair_begin": "2018-12-26 18:42:30.730649", "patches": [{"edits": [{"path": "src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java", "line": 153, "faulty": "this.generatorAnnotations=getConfig(this.generatorAnnotationsDescriptor);", "type": "Delete", "seed": "NULL"}, {"path": "src/main/java/com/gdssecurity/pmd/rules/BaseSecurityRule.java", "line": 111, "faulty": "this.unsafeTypes=getConfig(this.unsafeTypesDescriptor);", "type": "Delete", "seed": "NULL"}, {"path": "src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java", "line": 151, "faulty": "this.sanitizers=getConfig(this.sanitizerDescriptor);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/src/main/java/com/gdssecurity/pmd/rules/BaseSecurityRule.java\t2018-12-26 12:42:04.669139482 -0500\n+++ /tmp/Arja_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/patches_bdow/Patch_409/patched/tmp/Arja_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/src/main/java/com/gdssecurity/pmd/rules/BaseSecurityRule.java\t2018-12-26 12:51:25.937970401 -0500\n@@ -108,7 +108,6 @@\n \tprotected void init() {\n \t\tif (!this.initialized) {\n \t\t\tthis.sources = getConfig(this.sourceDescriptor);\n-\t\t\tthis.unsafeTypes = getConfig(this.unsafeTypesDescriptor);\n \t\t\tthis.safeTypes = getConfig(this.safeTypesDescriptor);\n \t\t\tthis.initialized = true;\n \t\t}\n\n\n--- /tmp/Arja_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java\t2018-12-26 12:42:04.669139482 -0500\n+++ /tmp/Arja_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/patches_bdow/Patch_409/patched/tmp/Arja_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java\t2018-12-26 12:51:25.941970410 -0500\n@@ -148,9 +148,7 @@\n \t}\n \tprivate void init2() {\n \t\tthis.sinks = getConfig(this.sinkDescriptor);\n-\t\tthis.sanitizers = getConfig(this.sanitizerDescriptor);\n \t\tthis.sinkAnnotations = getConfig(this.sinkAnnotationsDescriptor);\n-\t\tthis.generatorAnnotations = getConfig(this.generatorAnnotationsDescriptor);\n \t\tthis.searchAnnotationsInPackages = getConfig(this.annotationsPackagesDescriptor);\n \t\tthis.searchAnnotationsInPackagesArray = this.searchAnnotationsInPackages.toArray(new String[0]);\n \t\ttry {\n\n\n"}]}}, {"bug_id": "451155169-455669767", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "albfernandez-GDS-PMD-Security-Rules", "result": {"repair_end": "2018-12-27 11:19:28.980966", "repair_begin": "2018-12-27 11:19:13.404236", "patches": [{"edits": [{"path": "src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java", "line": 144, "faulty": "if (!this.initialized) {\n  init2();\n  this.initialized=true;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java\t2018-12-27 05:18:44.500188912 -0500\n+++ /tmp/Kali_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/patches_f7jx/Patch_1/patched/tmp/Kali_Bears_albfernandez-GDS-PMD-Security-Rules_451155169-455669767/src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java\t2018-12-27 05:19:28.616669864 -0500\n@@ -141,7 +141,7 @@\n \t@Override\n \tprotected void init() {\n \t\tsuper.init();\n-\t\tif (!this.initialized) {\n+\t\tif (true) {\n \t\t\tinit2();\n \t\t\tthis.initialized = true;\n \t\t}\n\n\n"}]}}, {"bug_id": "329355311-329773929", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "apache-incubator-dubbo", "result": {"repair_end": "2018-12-28 00:10:35.400847", "repair_begin": "2018-12-28 00:08:31.303687", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/alibaba\\/dubbo\\/rpc\\/cluster\\/router\\/condition\\/ConditionRouter.java\\n+++ com\\/alibaba\\/dubbo\\/rpc\\/cluster\\/router\\/condition\\/ConditionRouter.java\\n@@ -213,7 +213,7 @@\\n \\t\\t\\t\\t}\\n \\t\\t\\t}else {\\n \\n-\\t\\t\\t\\tif ((matchPair.getValue().matches.size()) > 0) {\\n+\\t\\t\\t\\tif (matchWhen(url, invocation)) {\\n \\t\\t\\t\\t\\treturn false;\\n \\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\tresult = true;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(matchPair.getValue().matches.size()) > 0", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "matchWhen(url, invocation)", "INGREDIENT_PARENT": "(matchWhen(_URL_0, _Invocation_1))", "LOCATION": "com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_apache-incubator-dubbo_329355311-329773929\\/.\\/output_astor\\/AstorMain-apache-incubator-dubbo-329355311-329773929\\/\\/src\\/\\/variant-180_f\\/com\\/alibaba\\/dubbo\\/rpc\\/cluster\\/router\\/condition\\/ConditionRouter.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_apache-incubator-dubbo_329355311-329773929\\/output_astor\\/AstorMain-apache-incubator-dubbo-329355311-329773929\\/src\\/default\\/com\\/alibaba\\/dubbo\\/rpc\\/cluster\\/router\\/condition\\/ConditionRouter.java", "LINE": "216", "MP_RANKING": "3", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtIfImpl"}], "GENERATION": "90", "VARIANT_ID": "180", "TIME": "101", "VALIDATION": "|true|0|90|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_apache-incubator-dubbo_329355311-329773929\\/.\\/output_astor\\/AstorMain-apache-incubator-dubbo-329355311-329773929\\/\\/bin\\/\\/variant-180"}]}}, {"bug_id": "329355311-329773929", "tool": "NPEFix", "nb_patch": 37, "benchmark": "Bears", "project": "apache-incubator-dubbo", "result": {"repair_end": "2018-12-27 08:31:42.258726", "repair_begin": "2018-12-27 08:31:22.625065", "patches": [{"locations": [{"executionCount": 0, "line": 197, "class": "com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter", "sourceStart": 8940, "sourceEnd": 8942}], "patch": "--- router/condition/ConditionRouter.java\n+++ router/condition/ConditionRouter.java\n@@ -196,3 +196,8 @@\n     private boolean matchCondition(Map<String, MatchPair> condition, URL url, URL param, Invocation invocation) {\n-        Map<String, String> sample = url.toMap();\n+        Map<String, String> sample;\n+        if (url == null) {\n+            sample = param.toMap();\n+        } else {\n+            sample = url.toMap();\n+        }\n         boolean result = false;\n"}]}}, {"bug_id": "445988164-446994292", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "danfickle-openhtmltopdf", "result": {"repair_end": "2018-12-27 23:42:46.379245", "repair_begin": "2018-12-27 23:38:53.764332", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/openhtmltopdf\\/visualtest\\/VisualTester.java\\n+++ com\\/openhtmltopdf\\/visualtest\\/VisualTester.java\\n@@ -126,7 +126,7 @@\\n \\tpublic boolean runTest(java.lang.String resource, com.openhtmltopdf.visualtest.VisualTester.BuilderConfig additionalBuilderConfiguration) throws java.io.IOException {\\n \\t\\tjava.lang.String absResPath = ((this.resourcePath) + resource) + \\\".html\\\";\\n \\n-\\t\\tjava.io.File override = new java.io.File(this.overridePath, (resource + \\\".pdf\\\"));\\n+\\t\\tjava.io.File override = new java.io.File(outputPath, (resource + \\\".pdf\\\"));\\n \\t\\tjava.io.File primary = new java.io.File(this.primaryPath, (resource + \\\".pdf\\\"));\\n \\n \\t\\tjava.io.File testFile = (override.exists()) ? override : primary;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtConstructorCallImpl|CtLocalVariableImpl", "ORIGINAL_CODE": "new java.io.File(this.overridePath, (resource + \\\".pdf\\\"))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "new java.io.File(outputPath, (resource + \\\".pdf\\\"))", "INGREDIENT_PARENT": "new java.io.File(this._File_0, (_String_1 + \\\".pdf\\\"))", "LOCATION": "com.openhtmltopdf.visualtest.VisualTester", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_danfickle-openhtmltopdf_445988164-446994292\\/.\\/output_astor\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\/\\/src\\/\\/variant-80_f\\/com\\/openhtmltopdf\\/visualtest\\/VisualTester.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_danfickle-openhtmltopdf_445988164-446994292\\/output_astor\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\/src\\/default\\/com\\/openhtmltopdf\\/visualtest\\/VisualTester.java", "LINE": "129", "MP_RANKING": "28", "SUSPICIOUNESS": "0.983", "PATCH_HUNK_TYPE": "CtConstructorCallImpl|CtLocalVariableImpl"}], "GENERATION": "40", "VARIANT_ID": "80", "TIME": "152", "VALIDATION": "|true|0|71|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_danfickle-openhtmltopdf_445988164-446994292\\/.\\/output_astor\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\/\\/bin\\/\\/variant-80"}]}}, {"bug_id": "445988164-446994292", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "danfickle-openhtmltopdf", "result": {"repair_end": "2018-12-27 02:20:48.919244", "repair_begin": "2018-12-27 01:50:49.636176", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/openhtmltopdf\\/visualtest\\/VisualTester.java\\n+++ com\\/openhtmltopdf\\/visualtest\\/VisualTester.java\\n@@ -150,53 +150,53 @@\\n \\t\\t\\tjava.lang.System.err.println(\\\"Writing generated PDF to file instead in output directory.\\\");\\n \\t\\t\\tjava.io.File output = new java.io.File(this.outputPath, (resource + \\\".pdf\\\"));\\n \\t\\t\\torg.apache.commons.io.FileUtils.writeByteArrayToFile(output, actualPdfBytes);\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n \\n-\\t\\torg.apache.pdfbox.pdmodel.PDDocument docActual = org.apache.pdfbox.pdmodel.PDDocument.load(actualPdfBytes);\\n-\\t\\torg.apache.pdfbox.pdmodel.PDDocument docExpected = org.apache.pdfbox.pdmodel.PDDocument.load(testFile);\\n \\n-\\t\\torg.apache.pdfbox.rendering.PDFRenderer rendActual = new org.apache.pdfbox.rendering.PDFRenderer(docActual);\\n-\\t\\torg.apache.pdfbox.rendering.PDFRenderer rendExpected = new org.apache.pdfbox.rendering.PDFRenderer(docExpected);\\n \\n-\\t\\tboolean problems = false;\\n \\n-\\t\\tfor (int i = 0; i < (docActual.getNumberOfPages()); i++) {\\n-\\t\\t\\tjava.awt.image.BufferedImage imgActual = (i >= (docActual.getNumberOfPages())) ? com.openhtmltopdf.visualtest.VisualTester.ONE_PX_IMAGE : rendActual.renderImageWithDPI(i, 96.0F, org.apache.pdfbox.rendering.ImageType.RGB);\\n-\\t\\t\\tjava.awt.image.BufferedImage imgExpected = (i >= (docExpected.getNumberOfPages())) ? com.openhtmltopdf.visualtest.VisualTester.ONE_PX_IMAGE : rendExpected.renderImageWithDPI(i, 96.0F, org.apache.pdfbox.rendering.ImageType.RGB);\\n-\\n-\\t\\t\\tif (((imgActual.getWidth()) != (imgExpected.getWidth())) || \\n-\\t\\t\\t((imgActual.getHeight()) != (imgExpected.getHeight()))) {\\n-\\t\\t\\t\\tjava.lang.System.err.println(((\\\"When running test (\\\" + resource) + \\\"), page sizes were different. Please check diff image in output directory.\\\"));\\n-\\t\\t\\t\\tproblems = true;\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tjava.awt.image.BufferedImage diff = compareImages(imgActual, imgExpected);\\n \\n-\\t\\t\\tif (diff != null) {\\n-\\t\\t\\t\\tjava.lang.System.err.println(((\\\"When running test (\\\" + resource) + \\\"), differences were found. Please check diff images in output directory.\\\"));\\n-\\t\\t\\t\\tjava.io.File output = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---diff.png\\\"));\\n-\\t\\t\\t\\tjavax.imageio.ImageIO.write(diff, \\\"png\\\", output);\\n-\\n-\\t\\t\\t\\toutput = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---actual.png\\\"));\\n-\\t\\t\\t\\tjavax.imageio.ImageIO.write(imgActual, \\\"png\\\", output);\\n-\\n-\\t\\t\\t\\toutput = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---expected.png\\\"));\\n-\\t\\t\\t\\tjavax.imageio.ImageIO.write(imgExpected, \\\"png\\\", output);\\n-\\t\\t\\t\\tproblems = true;\\n-\\t\\t\\t}\\n-\\t\\t}\\n \\n-\\t\\tdocActual.close();\\n-\\t\\tdocExpected.close();\\n \\n-\\t\\tif (problems) {\\n-\\t\\t\\tjava.io.File outPdf = new java.io.File(this.outputPath, (resource + \\\".pdf\\\"));\\n-\\t\\t\\torg.apache.commons.io.FileUtils.writeByteArrayToFile(outPdf, actualPdfBytes);\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n \\n-\\t\\treturn true;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn true;} \\t\\torg.apache.pdfbox.pdmodel.PDDocument docActual = org.apache.pdfbox.pdmodel.PDDocument.load(actualPdfBytes); \\t\\torg.apache.pdfbox.pdmodel.PDDocument docExpected = org.apache.pdfbox.pdmodel.PDDocument.load(testFile); \\t\\torg.apache.pdfbox.rendering.PDFRenderer rendActual = new org.apache.pdfbox.rendering.PDFRenderer(docActual); \\t\\torg.apache.pdfbox.rendering.PDFRenderer rendExpected = new org.apache.pdfbox.rendering.PDFRenderer(docExpected); \\t\\tboolean problems = false; \\t\\tfor (int i = 0; i < (docActual.getNumberOfPages()); i++) { \\t\\t\\tjava.awt.image.BufferedImage imgActual = (i >= (docActual.getNumberOfPages())) ? com.openhtmltopdf.visualtest.VisualTester.ONE_PX_IMAGE : rendActual.renderImageWithDPI(i, 96.0F, org.apache.pdfbox.rendering.ImageType.RGB); \\t\\t\\tjava.awt.image.BufferedImage imgExpected = (i >= (docExpected.getNumberOfPages())) ? com.openhtmltopdf.visualtest.VisualTester.ONE_PX_IMAGE : rendExpected.renderImageWithDPI(i, 96.0F, org.apache.pdfbox.rendering.ImageType.RGB); \\t\\t\\tif (((imgActual.getWidth()) != (imgExpected.getWidth())) || ((imgActual.getHeight()) != (imgExpected.getHeight()))) { \\t\\t\\t\\tjava.lang.System.err.println(((\\\"When running test (\\\" + resource) + \\\"), page sizes were different. Please check diff image in output directory.\\\")); \\t\\t\\t\\tproblems = true;} \\t\\t\\tjava.awt.image.BufferedImage diff = compareImages(imgActual, imgExpected); \\t\\t\\tif (diff != null) { \\t\\t\\t\\tjava.lang.System.err.println(((\\\"When running test (\\\" + resource) + \\\"), differences were found. Please check diff images in output directory.\\\")); \\t\\t\\t\\tjava.io.File output = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---diff.png\\\")); \\t\\t\\t\\tjavax.imageio.ImageIO.write(diff, \\\"png\\\", output); \\t\\t\\t\\toutput = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---actual.png\\\")); \\t\\t\\t\\tjavax.imageio.ImageIO.write(imgActual, \\\"png\\\", output); \\t\\t\\t\\toutput = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---expected.png\\\")); \\t\\t\\t\\tjavax.imageio.ImageIO.write(imgExpected, \\\"png\\\", output); \\t\\t\\t\\tproblems = true;}} \\t\\tdocActual.close(); \\t\\tdocExpected.close(); \\t\\tif (problems) { \\t\\t\\tjava.io.File outPdf = new java.io.File(this.outputPath, (resource + \\\".pdf\\\")); \\t\\t\\torg.apache.commons.io.FileUtils.writeByteArrayToFile(outPdf, actualPdfBytes); \\t\\t\\treturn false;} \\t\\treturn true;\\n \\t}\\n \\n \\tpublic java.awt.image.BufferedImage compareImages(java.awt.image.BufferedImage img1, java.awt.image.BufferedImage img2) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return false", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return true", "INGREDIENT_PARENT": "return true", "LOCATION": "com.openhtmltopdf.visualtest.VisualTester", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_danfickle-openhtmltopdf_445988164-446994292\\/.\\/output_astor\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\/\\/src\\/\\/variant-1866_f\\/com\\/openhtmltopdf\\/visualtest\\/VisualTester.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bears_danfickle-openhtmltopdf_445988164-446994292\\/output_astor\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\/src\\/default\\/com\\/openhtmltopdf\\/visualtest\\/VisualTester.java", "LINE": "153", "MP_RANKING": "29", "SUSPICIOUNESS": "0.983", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "933", "VARIANT_ID": "1866", "TIME": "1725", "VALIDATION": "|true|0|71|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_danfickle-openhtmltopdf_445988164-446994292\\/.\\/output_astor\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\/\\/bin\\/\\/variant-1866"}]}}, {"bug_id": "445988164-446994292", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "danfickle-openhtmltopdf", "result": {"repair_end": "2018-12-27 11:14:01.070354", "repair_begin": "2018-12-27 11:12:50.295593", "patches": [{"edits": [{"path": "openhtmltopdf-examples/src/main/java/com/openhtmltopdf/visualtest/VisualTester.java", "line": 141, "faulty": "if (actualPdfBytes == null) {\n  System.err.println(\"When running test (\" + resource + \"), rendering failed, writing log to failure file.\");\n  File output=new File(this.outputPath,resource + \".failure.txt\");\n  FileUtils.writeByteArrayToFile(output,sb.toString().getBytes(Charsets.UTF_8));\n  return false;\n}", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Bears_danfickle-openhtmltopdf_445988164-446994292/openhtmltopdf-examples/src/main/java/com/openhtmltopdf/visualtest/VisualTester.java\t2018-12-27 05:11:59.813430354 -0500\n+++ /tmp/Kali_Bears_danfickle-openhtmltopdf_445988164-446994292/patches_9iw1/Patch_19/patched/tmp/Kali_Bears_danfickle-openhtmltopdf_445988164-446994292/openhtmltopdf-examples/src/main/java/com/openhtmltopdf/visualtest/VisualTester.java\t2018-12-27 05:14:00.683026790 -0500\n@@ -138,6 +138,8 @@\n \t\tStringBuilder sb = logToStringBuilder();\n \t\tbyte[] actualPdfBytes = runRenderer(resourcePath, html, additionalBuilderConfiguration);\n \t\t\n+\t\tif (true)\n+\t\t\treturn true;\n \t\tif (actualPdfBytes == null) {\n \t\t    System.err.println(\"When running test (\" + resource + \"), rendering failed, writing log to failure file.\");\n \t\t\tFile output = new File(this.outputPath, resource + \".failure.txt\");\n\n\n"}]}}, {"bug_id": "436514153-436524727", "tool": "ARJA", "nb_patch": 966, "benchmark": "Bears", "project": "dungba88-libra", "result": {"repair_end": "2018-12-26 19:01:57.207475", "repair_begin": "2018-12-26 18:41:23.137517", "patches": [{"edits": [{"path": "src/main/java/org/joo/libra/sql/node/VariableExpressionNode.java", "line": 30, "faulty": "if (value == null) {\n  value=getValueNoCache(context);\n  cachedValues.put(variableName,value);\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_dungba88-libra_436514153-436524727/src/main/java/org/joo/libra/sql/node/VariableExpressionNode.java\t2018-12-26 12:41:02.000000000 -0500\n+++ /tmp/Arja_Bears_dungba88-libra_436514153-436524727/patches_yzr2/Patch_235/patched/tmp/Arja_Bears_dungba88-libra_436514153-436524727/src/main/java/org/joo/libra/sql/node/VariableExpressionNode.java\t2018-12-26 12:44:19.520179551 -0500\n@@ -27,10 +27,6 @@\n             return null;\n         Map<String, Object> cachedValues = context.getCachedValues();\n         Object value = cachedValues.get(variableName);\n-        if (value == null) {\n-            value = getValueNoCache(context);\n-            cachedValues.put(variableName, value);\n-        }\n         return value;\n     }\n \n\n\n"}]}}, {"bug_id": "436514153-436524727", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "dungba88-libra", "result": {"repair_end": "2018-12-27 11:12:53.404889", "repair_begin": "2018-12-27 11:12:09.104052", "patches": [{"edits": [{"path": "src/main/java/org/joo/libra/pointer/VariablePredicate.java", "line": 34, "faulty": "if (rawValue instanceof Boolean) return Boolean.TRUE.equals(rawValue);", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bears_dungba88-libra_436514153-436524727/src/main/java/org/joo/libra/pointer/VariablePredicate.java\t2018-12-27 05:11:46.000000000 -0500\n+++ /tmp/Kali_Bears_dungba88-libra_436514153-436524727/patches_9ixz/Patch_1/patched/tmp/Kali_Bears_dungba88-libra_436514153-436524727/src/main/java/org/joo/libra/pointer/VariablePredicate.java\t2018-12-27 05:12:53.027335858 -0500\n@@ -31,7 +31,7 @@\n         \treturn !((String)rawValue).isEmpty();\n         if (rawValue instanceof Number)\n         \treturn ((Number) rawValue).doubleValue() != 0.0;\n-        if (rawValue instanceof Boolean)\n+        if (true)\n         \treturn Boolean.TRUE.equals(rawValue);\n         return true;\n     }\n\n\n"}]}}, {"bug_id": "441307573-461240331", "tool": "ARJA", "nb_patch": 39, "benchmark": "Bears", "project": "julianps-modelmapper-module-vavr", "result": {"repair_end": "2018-12-26 18:40:44.535604", "repair_begin": "2018-12-26 18:40:14.306691", "patches": [{"edits": [{"path": "src/main/java/com/github/julianps/modelmapper/VavrModule.java", "line": 34, "faulty": "modelMapper.getConfiguration().getConverters().add(INDEX_ZERO,new ValueConverter());", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_julianps-modelmapper-module-vavr_441307573-461240331/src/main/java/com/github/julianps/modelmapper/VavrModule.java\t2018-12-26 12:40:00.320557833 -0500\n+++ /tmp/Arja_Bears_julianps-modelmapper-module-vavr_441307573-461240331/patches_mlz0/Patch_55/patched/tmp/Arja_Bears_julianps-modelmapper-module-vavr_441307573-461240331/src/main/java/com/github/julianps/modelmapper/VavrModule.java\t2018-12-26 12:40:37.685010609 -0500\n@@ -31,6 +31,5 @@\n \n \t@Override\n \tpublic void setupModule(ModelMapper modelMapper) {\n-\t\tmodelMapper.getConfiguration().getConverters().add(INDEX_ZERO, new ValueConverter());\n \t}\n }\n\n\n"}]}}, {"bug_id": "441307573-461240331", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "julianps-modelmapper-module-vavr", "result": {"repair_end": "2018-12-27 11:11:29.806026", "repair_begin": "2018-12-27 11:11:23.859664", "patches": [{"edits": [{"path": "src/main/java/com/github/julianps/modelmapper/VavrModule.java", "line": 34, "faulty": "modelMapper.getConfiguration().getConverters().add(INDEX_ZERO,new ValueConverter());", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Bears_julianps-modelmapper-module-vavr_441307573-461240331/src/main/java/com/github/julianps/modelmapper/VavrModule.java\t2018-12-27 05:11:13.286411133 -0500\n+++ /tmp/Kali_Bears_julianps-modelmapper-module-vavr_441307573-461240331/patches_1ts5/Patch_1/patched/tmp/Kali_Bears_julianps-modelmapper-module-vavr_441307573-461240331/src/main/java/com/github/julianps/modelmapper/VavrModule.java\t2018-12-27 05:11:29.466369648 -0500\n@@ -31,6 +31,8 @@\n \n \t@Override\n \tpublic void setupModule(ModelMapper modelMapper) {\n+\t\tif (true)\n+\t\t\treturn;\n \t\tmodelMapper.getConfiguration().getConverters().add(INDEX_ZERO, new ValueConverter());\n \t}\n }\n\n\n"}]}}, {"bug_id": "390188323-431527545", "tool": "ARJA", "nb_patch": 1147, "benchmark": "Bears", "project": "opentracing-contrib-java-p6spy", "result": {"repair_end": "2018-12-26 19:20:38.847181", "repair_begin": "2018-12-26 18:39:19.523130", "patches": [{"edits": [{"path": "src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java", "line": 101, "faulty": "decorate(scope.span(),statementInformation);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_opentracing-contrib-java-p6spy_390188323-431527545/src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java\t2018-12-26 12:39:08.189749101 -0500\n+++ /tmp/Arja_Bears_opentracing-contrib-java-p6spy_390188323-431527545/patches_wl1t/Patch_2853/patched/tmp/Arja_Bears_opentracing-contrib-java-p6spy_390188323-431527545/src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java\t2018-12-26 13:18:31.004062132 -0500\n@@ -98,7 +98,6 @@\n         spanBuilder.asChildOf(activeScope.span());\n       }\n       final Scope scope = spanBuilder.startActive(true);\n-      decorate(scope.span(), statementInformation);\n       return scope;\n     } catch (SQLException e) {\n       return NoopScopeManager.NoopScope.INSTANCE;\n\n\n"}]}}, {"bug_id": "442009574-442015798", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "rkonovalov-jsonignore", "result": {"repair_end": "2018-12-27 01:51:50.143826", "repair_begin": "2018-12-27 01:49:36.326521", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/json\\/ignore\\/JsonIgnoreFields.java\\n+++ com\\/json\\/ignore\\/JsonIgnoreFields.java\\n@@ -129,8 +129,8 @@\\n \\n \\t}\\n \\n-\\tprivate boolean fieldAcceptable(java.lang.reflect.Field field) {\\n-\\t\\treturn ((field.getType().isPrimitive()) || (field.getType().isArray())) || (com.json.ignore.JsonIgnoreFields.ignoredNames.contains(field.getName()));\\n+\\tprivate boolean fieldAcceptable(java.lang.reflect.Field field) { \\t\\treturn false;\\n+\\n \\t}\\n \\n \\tpublic void ignoreFields(java.lang.Object object) throws java.lang.IllegalAccessException {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return ((field.getType().isPrimitive()) || (field.getType().isArray())) || (com.json.ignore.JsonIgnoreFields.ignoredNames.contains(field.getName()))", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return false", "INGREDIENT_PARENT": "return false", "LOCATION": "com.json.ignore.JsonIgnoreFields", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_rkonovalov-jsonignore_442009574-442015798\\/.\\/output_astor\\/AstorMain-rkonovalov-jsonignore-442009574-442015798\\/\\/src\\/\\/variant-534_f\\/com\\/json\\/ignore\\/JsonIgnoreFields.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bears_rkonovalov-jsonignore_442009574-442015798\\/output_astor\\/AstorMain-rkonovalov-jsonignore-442009574-442015798\\/src\\/default\\/com\\/json\\/ignore\\/JsonIgnoreFields.java", "LINE": "133", "MP_RANKING": "15", "SUSPICIOUNESS": "0.632", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "267", "VARIANT_ID": "534", "TIME": "123", "VALIDATION": "|true|0|9|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_rkonovalov-jsonignore_442009574-442015798\\/.\\/output_astor\\/AstorMain-rkonovalov-jsonignore-442009574-442015798\\/\\/bin\\/\\/variant-534"}]}}, {"bug_id": "185852074-193313389", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "spring-projects-spring-data-commons", "result": {"repair_end": "2018-12-27 11:28:40.680006", "repair_begin": "2018-12-27 11:28:11.446942", "patches": [{"edits": [{"path": "src/main/java/org/springframework/data/auditing/IsNewAwareAuditingHandler.java", "line": 76, "faulty": "if (object == null) {\n  return;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bears_spring-projects-spring-data-commons_185852074-193313389/src/main/java/org/springframework/data/auditing/IsNewAwareAuditingHandler.java\t2018-12-27 05:27:40.459907048 -0500\n+++ /tmp/Kali_Bears_spring-projects-spring-data-commons_185852074-193313389/patches_9tau/Patch_3/patched/tmp/Kali_Bears_spring-projects-spring-data-commons_185852074-193313389/src/main/java/org/springframework/data/auditing/IsNewAwareAuditingHandler.java\t2018-12-27 05:28:40.303908413 -0500\n@@ -73,7 +73,7 @@\n \t */\n \tpublic void markAudited(Object object) {\n \n-\t\tif (object == null) {\n+\t\tif (true) {\n \t\t\treturn;\n \t\t}\n \n\n\n"}]}}, {"bug_id": "263410130-263513297", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "spring-projects-spring-data-commons", "result": {"repair_end": "2018-12-27 11:28:32.092362", "repair_begin": "2018-12-27 11:27:51.121134", "patches": [{"edits": [{"path": "src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java", "line": 190, "faulty": "if (obj == this) {\n  return true;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bears_spring-projects-spring-data-commons_263410130-263513297/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java\t2018-12-27 05:27:10.445484644 -0500\n+++ /tmp/Kali_Bears_spring-projects-spring-data-commons_263410130-263513297/patches_fekm/Patch_11/patched/tmp/Kali_Bears_spring-projects-spring-data-commons_263410130-263513297/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java\t2018-12-27 05:28:31.705082974 -0500\n@@ -187,7 +187,7 @@\n \t@Override\n \tpublic boolean equals(Object obj) {\n \n-\t\tif (obj == this) {\n+\t\tif (true) {\n \t\t\treturn true;\n \t\t}\n \n\n\n"}]}}, {"bug_id": "351742666-351759763", "tool": "ARJA", "nb_patch": 555, "benchmark": "Bears", "project": "SzFMV2018-Tavasz-AutomatedCar", "result": {"repair_end": "2018-12-26 19:00:16.207378", "repair_begin": "2018-12-26 18:44:58.498358", "patches": [{"edits": [{"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Replace", "seed": "add(progressBarsPanel);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 138, "faulty": "final int minSpeedValue=0;", "type": "InsertBefore", "seed": "progressBarsPanel.add(gasProgressBar);"}], "patch": "--- /tmp/Arja_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java\t2018-12-26 12:44:43.911927988 -0500\n+++ /tmp/Arja_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_ezo9/Patch_686/patched/tmp/Arja_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java\t2018-12-26 12:49:10.668510536 -0500\n@@ -56,7 +56,7 @@\n         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());\n         speedAngle = calculateSpeedometer(0);\n         rpmAngle = calculateTachometer(0);\n-        paintComponent(getGraphics());\n+        add(progressBarsPanel);\n     }\n \n     /**\n@@ -135,7 +135,8 @@\n      * @return          The mapped value between [-75, 255] interval.\n      */\n     private int calculateSpeedometer(int speed) {\n-        final int minSpeedValue = 0;\n+        progressBarsPanel.add(gasProgressBar);\n+\t\tfinal int minSpeedValue = 0;\n         final int maxSpeedValue = 500;\n         final int minSpeedMeter = -75;\n         final int maxSpeedMeter = 255;\n\n\n"}]}}, {"bug_id": "351742666-351759763", "tool": "GenProg-A", "nb_patch": 664, "benchmark": "Bears", "project": "SzFMV2018-Tavasz-AutomatedCar", "result": {"repair_end": "2018-12-27 18:34:52.305567", "repair_begin": "2018-12-27 18:26:52.593706", "patches": [{"edits": [{"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Replace", "seed": "setLayout(null);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Replace", "seed": "setLayout(null);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 139, "faulty": "final int maxSpeedValue=500;", "type": "InsertBefore", "seed": "gasProgressBar.setStringPainted(true);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 78, "faulty": "progressBarsPanel.setBackground(new Color(backgroundColor));", "type": "Replace", "seed": "setLayout(null);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 71, "faulty": "initializeProgressBars();", "type": "Delete", "seed": "final int maxSpeedMeter=255;"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 58, "faulty": "rpmAngle=calculateTachometer(0);", "type": "Replace", "seed": "initializeDashboard();"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 69, "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", "type": "InsertBefore", "seed": "progressBarsPanel.add(breakProgressBar);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 90, "faulty": "add(progressBarsPanel);", "type": "InsertBefore", "seed": "breakLabel.setText(\"break pedal\");"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 88, "faulty": "breakProgressBar.setStringPainted(true);", "type": "InsertBefore", "seed": "progressBarsPanel.setBackground(new Color(backgroundColor));"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 91, "faulty": "progressBarsPanel.add(gasLabel);", "type": "Replace", "seed": "progressBarsPanel.add(gasProgressBar);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Replace", "seed": "setLayout(null);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Replace", "seed": "setLayout(null);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 71, "faulty": "initializeProgressBars();", "type": "InsertBefore", "seed": "progressBarsPanel.add(breakLabel);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 71, "faulty": "initializeProgressBars();", "type": "InsertBefore", "seed": "progressBarsPanel.add(breakLabel);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 56, "faulty": "breakProgressBar.setValue(inputPacket.getBreakPedalPosition());", "type": "InsertBefore", "seed": "setLayout(null);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 93, "faulty": "progressBarsPanel.add(breakLabel);", "type": "Delete", "seed": "final int maxRpmMeter=255;"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 92, "faulty": "progressBarsPanel.add(gasProgressBar);", "type": "InsertBefore", "seed": "final int maxSpeedMeter=255;"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Delete", "seed": "gasProgressBar.setStringPainted(true);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 69, "faulty": "setBounds(dashboardBoundsX,dashboardBoundsY,width,height);", "type": "Delete", "seed": "final int minRpmMeter=-75;"}], "patch": "--- /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java\t2018-12-27 12:26:42.320452816 -0500\n+++ /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_jeau/Patch_370/patched/tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java\t2018-12-27 12:28:54.713340031 -0500\n@@ -53,10 +53,10 @@\n      */\n     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {\n         gasProgressBar.setValue(inputPacket.getGasPedalPosition());\n-        breakProgressBar.setValue(inputPacket.getBreakPedalPosition());\n+        setLayout(null);\n+\t\tbreakProgressBar.setValue(inputPacket.getBreakPedalPosition());\n         speedAngle = calculateSpeedometer(0);\n-        rpmAngle = calculateTachometer(0);\n-        paintComponent(getGraphics());\n+        initializeDashboard();\n     }\n \n     /**\n@@ -66,16 +66,16 @@\n         // Not using any layout manager, but fixed coordinates\n         setLayout(null);\n         setBackground(new Color(backgroundColor));\n-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);\n-\n-        initializeProgressBars();\n+        progressBarsPanel.add(breakProgressBar);\n+\t\tprogressBarsPanel.add(breakLabel);\n+\t\tprogressBarsPanel.add(breakLabel);\n     }\n \n     /**\n      * Initializes the progress bars on the dashboard\n      */\n     private void initializeProgressBars() {\n-        progressBarsPanel.setBackground(new Color(backgroundColor));\n+        setLayout(null);\n         progressBarsPanel.setBounds(\n                 progressBarsPanelX,\n                 progressBarsPanelY,\n@@ -85,12 +85,14 @@\n         gasLabel.setText(\"gas pedal\");\n         breakLabel.setText(\"break pedal\");\n         gasProgressBar.setStringPainted(true);\n-        breakProgressBar.setStringPainted(true);\n+        progressBarsPanel.setBackground(new Color(backgroundColor));\n+\t\tbreakProgressBar.setStringPainted(true);\n \n-        add(progressBarsPanel);\n-        progressBarsPanel.add(gasLabel);\n+        breakLabel.setText(\"break pedal\");\n+\t\tadd(progressBarsPanel);\n         progressBarsPanel.add(gasProgressBar);\n-        progressBarsPanel.add(breakLabel);\n+        final int maxSpeedMeter = 255;\n+\t\tprogressBarsPanel.add(gasProgressBar);\n         progressBarsPanel.add(breakProgressBar);\n     }\n \n@@ -136,7 +138,8 @@\n      */\n     private int calculateSpeedometer(int speed) {\n         final int minSpeedValue = 0;\n-        final int maxSpeedValue = 500;\n+        gasProgressBar.setStringPainted(true);\n+\t\tfinal int maxSpeedValue = 500;\n         final int minSpeedMeter = -75;\n         final int maxSpeedMeter = 255;\n         int newspeed = maxSpeedValue - speed;\n\n\n"}]}}, {"bug_id": "351742666-351759763", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "SzFMV2018-Tavasz-AutomatedCar", "result": {"repair_end": "2018-12-27 11:20:45.074112", "repair_begin": "2018-12-27 11:20:34.201058", "patches": [{"edits": [{"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 57, "faulty": "speedAngle=calculateSpeedometer(0);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java\t2018-12-27 05:20:20.579869080 -0500\n+++ /tmp/Kali_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_atwn/Patch_5/patched/tmp/Kali_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java\t2018-12-27 05:20:44.691989848 -0500\n@@ -54,7 +54,9 @@\n     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {\n         gasProgressBar.setValue(inputPacket.getGasPedalPosition());\n         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());\n-        speedAngle = calculateSpeedometer(0);\n+        if (true)\n+\t\t\treturn;\n+\t\tspeedAngle = calculateSpeedometer(0);\n         rpmAngle = calculateTachometer(0);\n         paintComponent(getGraphics());\n     }\n\n\n"}]}}, {"bug_id": "351742666-351759763", "tool": "RSRepair-A", "nb_patch": 38, "benchmark": "Bears", "project": "SzFMV2018-Tavasz-AutomatedCar", "result": {"repair_end": "2018-12-27 16:07:42.091221", "repair_begin": "2018-12-27 15:59:22.172269", "patches": [{"edits": [{"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 57, "faulty": "speedAngle=calculateSpeedometer(0);", "type": "Delete", "seed": "final int minSpeedValue=0;"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Delete", "seed": "speedAngle=calculateSpeedometer(0);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 103, "faulty": "super.paintComponent(g);", "type": "Replace", "seed": "final int minRpmValue=0;"}], "patch": "--- /tmp/RSRepair_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java\t2018-12-27 09:59:09.243523423 -0500\n+++ /tmp/RSRepair_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_vatz/Patch_1108/patched/tmp/RSRepair_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java\t2018-12-27 10:07:39.699677371 -0500\n@@ -54,9 +54,7 @@\n     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {\n         gasProgressBar.setValue(inputPacket.getGasPedalPosition());\n         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());\n-        speedAngle = calculateSpeedometer(0);\n         rpmAngle = calculateTachometer(0);\n-        paintComponent(getGraphics());\n     }\n \n     /**\n@@ -100,7 +98,7 @@\n      * @param g {@link Graphics} object that can draw to the canvas\n      */\n     protected void paintComponent(Graphics g) {\n-        super.paintComponent(g);\n+        final int minRpmValue = 0;\n         g.setColor(Color.BLACK);\n         g.drawOval(speedMeterX, speedMeterY, meterWidth, meterHeight);\n         g.drawOval(tachoMeterX, tachoMeterY, meterWidth, meterHeight);\n\n\n"}]}}, {"bug_id": "188473748-188474474", "tool": "ARJA", "nb_patch": 1030, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-26 19:54:15.611465", "repair_begin": "2018-12-26 19:27:52.694086", "patches": [{"edits": [{"path": "src/org/traccar/protocol/GoSafeProtocolDecoder.java", "line": 179, "faulty": "if (parser.hasNext()) {\n  position.set(\"eventData\",parser.next());\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/org/traccar/protocol/GoSafeProtocolDecoder.java", "line": 169, "faulty": "if (parser.hasNext(6)) {\n  long status=parser.nextLong(16);\n  position.set(Position.KEY_IGNITION,BitUtil.check(status,13));\n  position.set(Position.KEY_STATUS,status);\n  position.set(\"ioStatus\",parser.next());\n  position.set(Position.KEY_GEOFENCE,parser.next() + parser.next());\n  position.set(\"eventStatus\",parser.next());\n  position.set(\"packetType\",parser.next());\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/org/traccar/protocol/GoSafeProtocolDecoder.java", "line": 173, "faulty": "position.set(\"ioStatus\",parser.next());", "type": "Delete", "seed": "NULL"}, {"path": "src/org/traccar/protocol/GoSafeProtocolDecoder.java", "line": 198, "faulty": "if (channel != null) {\n  channel.write(\"1234\");\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_traccar-traccar_188473748-188474474/src/org/traccar/protocol/GoSafeProtocolDecoder.java\t2018-12-26 13:27:11.351724557 -0500\n+++ /tmp/Arja_Bears_traccar-traccar_188473748-188474474/patches_bm8u/Patch_842/patched/tmp/Arja_Bears_traccar-traccar_188473748-188474474/src/org/traccar/protocol/GoSafeProtocolDecoder.java\t2018-12-26 13:36:11.562937382 -0500\n@@ -166,20 +166,6 @@\n         position.set(Position.KEY_POWER, parser.next());\n         position.set(Position.KEY_BATTERY, parser.next());\n \n-        if (parser.hasNext(6)) {\n-            long status = parser.nextLong(16);\n-            position.set(Position.KEY_IGNITION, BitUtil.check(status, 13));\n-            position.set(Position.KEY_STATUS, status);\n-            position.set(\"ioStatus\", parser.next());\n-            position.set(Position.KEY_GEOFENCE, parser.next() + parser.next());\n-            position.set(\"eventStatus\", parser.next());\n-            position.set(\"packetType\", parser.next());\n-        }\n-\n-        if (parser.hasNext()) {\n-            position.set(\"eventData\", parser.next());\n-        }\n-\n         if (parser.hasNext()) {\n             position.set(\"obd\", parser.next());\n         }\n@@ -195,10 +181,6 @@\n     protected Object decode(\n             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n \n-        if (channel != null) {\n-            channel.write(\"1234\");\n-        }\n-\n         String sentence = (String) msg;\n         Pattern pattern = PATTERN;\n         if (sentence.startsWith(\"*GS02\")) {\n\n\n"}]}}, {"bug_id": "188473748-188474474", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:31:23.366939", "repair_begin": "2018-12-28 00:28:36.376414", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java\\n@@ -167,7 +167,7 @@\\n \\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, parser.next());\\n \\n \\t\\tif (parser.hasNext(6)) {\\n-\\t\\t\\tlong status = parser.nextLong(16);\\n+\\t\\t\\tlong status = deviceSession.getDeviceId();\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(status, 13));\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_STATUS, status);\\n \\t\\t\\tposition.set(\\\"ioStatus\\\", parser.next());\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtLocalVariableImpl", "ORIGINAL_CODE": "parser.nextLong(16)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "deviceSession.getDeviceId()", "INGREDIENT_PARENT": "_DeviceSession_0.getDeviceId()", "LOCATION": "org.traccar.protocol.GoSafeProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_188473748-188474474\\/.\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/\\/src\\/\\/variant-310_f\\/org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_188473748-188474474\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/src\\/default\\/org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java", "LINE": "170", "MP_RANKING": "39", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtLocalVariableImpl"}], "GENERATION": "155", "VARIANT_ID": "310", "TIME": "147", "VALIDATION": "|true|0|224|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_188473748-188474474\\/.\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/\\/bin\\/\\/variant-310"}]}}, {"bug_id": "188473748-188474474", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 03:57:56.480029", "repair_begin": "2018-12-27 03:56:50.114242", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java\\n@@ -156,37 +156,37 @@\\n \\n \\t\\tposition.set(org.traccar.model.Position.KEY_HDOP, parser.next());\\n \\n-\\t\\tif (parser.hasNext(4)) {\\n-\\t\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n-\\t\\t\\tparser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));\\n-\\t\\t}\\n-\\t\\tif (parser.hasNext()) {\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, parser.nextInt());\\n-\\t\\t}\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_POWER, parser.next());\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, parser.next());\\n \\n-\\t\\tif (parser.hasNext(6)) {\\n-\\t\\t\\tlong status = parser.nextLong(16);\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(status, 13));\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_STATUS, status);\\n-\\t\\t\\tposition.set(\\\"ioStatus\\\", parser.next());\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_GEOFENCE, ((parser.next()) + (parser.next())));\\n-\\t\\t\\tposition.set(\\\"eventStatus\\\", parser.next());\\n-\\t\\t\\tposition.set(\\\"packetType\\\", parser.next());\\n-\\t\\t}\\n \\n-\\t\\tif (parser.hasNext()) {\\n-\\t\\t\\tposition.set(\\\"eventData\\\", parser.next());\\n-\\t\\t}\\n \\n-\\t\\tif (parser.hasNext()) {\\n-\\t\\t\\tposition.set(\\\"obd\\\", parser.next());\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\t\\tif (parser.hasNext()) {\\n \\t\\t\\tposition.set(\\\"tagData\\\", parser.next());\\n-\\t\\t}\\n+\\t\\t} \\t\\tif (parser.hasNext()) { \\t\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, parser.nextInt());} \\t\\tposition.set(org.traccar.model.Position.KEY_POWER, parser.next()); \\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, parser.next()); \\t\\tif (parser.hasNext(6)) { \\t\\t\\tlong status = parser.nextLong(16); \\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(status, 13)); \\t\\t\\tposition.set(org.traccar.model.Position.KEY_STATUS, status); \\t\\t\\tposition.set(\\\"ioStatus\\\", parser.next()); \\t\\t\\tposition.set(org.traccar.model.Position.KEY_GEOFENCE, ((parser.next()) + (parser.next()))); \\t\\t\\tposition.set(\\\"eventStatus\\\", parser.next()); \\t\\t\\tposition.set(\\\"packetType\\\", parser.next());} \\t\\tif (parser.hasNext()) { \\t\\t\\tposition.set(\\\"eventData\\\", parser.next());} \\t\\tif (parser.hasNext()) { \\t\\t\\tposition.set(\\\"obd\\\", parser.next());} \\t\\tif (parser.hasNext()) { \\t\\t\\tposition.set(\\\"tagData\\\", parser.next());}\\n \\n \\t\\treturn position;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (parser.hasNext(4)) {\\n\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n\\tparser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (parser.hasNext()) {\\n\\tposition.set(\\\"tagData\\\", parser.next());\\n}", "INGREDIENT_PARENT": "if (parser.hasNext()) {\\n\\tposition.set(\\\"tagData\\\", parser.next());\\n}", "LOCATION": "org.traccar.protocol.GoSafeProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_188473748-188474474\\/.\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/\\/src\\/\\/variant-100_f\\/org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_188473748-188474474\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/src\\/default\\/org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java", "LINE": "159", "MP_RANKING": "14", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "50", "VARIANT_ID": "100", "TIME": "45", "VALIDATION": "|true|0|224|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_188473748-188474474\\/.\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/\\/bin\\/\\/variant-100"}]}}, {"bug_id": "188473748-188474474", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:14:26.363654", "repair_begin": "2018-12-28 00:13:53.432930", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java\\n@@ -156,7 +156,7 @@\\n \\n \\t\\tposition.set(org.traccar.model.Position.KEY_HDOP, parser.next());\\n \\n-\\t\\tif (parser.hasNext(4)) {\\n+\\t\\tif (false) {\\n \\t\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n \\t\\t\\tparser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (parser.hasNext(4)) {\\n\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n\\tparser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n\\tparser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));\\n}", "LOCATION": "org.traccar.protocol.GoSafeProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_188473748-188474474\\/.\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/\\/src\\/\\/variant-18_f\\/org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_188473748-188474474\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/src\\/default\\/org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java", "LINE": "159", "MP_RANKING": "14", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "18", "TIME": "16", "VALIDATION": "|true|0|224|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_188473748-188474474\\/.\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/\\/bin\\/\\/variant-18"}]}}, {"bug_id": "188473748-188474474", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 11:27:22.421518", "repair_begin": "2018-12-27 11:26:54.810438", "patches": [{"edits": [{"path": "src/org/traccar/protocol/GoSafeProtocolDecoder.java", "line": 159, "faulty": "if (parser.hasNext(4)) {\n  position.setNetwork(new Network(CellTower.from(parser.nextInt(),parser.nextInt(),parser.nextInt(16),parser.nextInt(16),parser.nextInt())));\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bears_traccar-traccar_188473748-188474474/src/org/traccar/protocol/GoSafeProtocolDecoder.java\t2018-12-27 05:26:15.279650406 -0500\n+++ /tmp/Kali_Bears_traccar-traccar_188473748-188474474/patches_4qgi/Patch_14/patched/tmp/Kali_Bears_traccar-traccar_188473748-188474474/src/org/traccar/protocol/GoSafeProtocolDecoder.java\t2018-12-27 05:27:22.039651929 -0500\n@@ -156,7 +156,7 @@\n \n         position.set(Position.KEY_HDOP, parser.next());\n \n-        if (parser.hasNext(4)) {\n+        if (false) {\n             position.setNetwork(new Network(CellTower.from(\n                     parser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));\n         }\n\n\n"}]}}, {"bug_id": "195128524-195455832", "tool": "ARJA", "nb_patch": 1702, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-26 19:51:25.118294", "repair_begin": "2018-12-26 19:25:51.151504", "patches": [{"edits": [{"path": "src/org/traccar/events/IgnitionEventHandler.java", "line": 50, "faulty": "if (ignition && !oldIgnition) {\n  result=Collections.singleton(new Event(Event.TYPE_IGNITION_ON,position.getDeviceId(),position.getId()));\n}\n else if (!ignition && oldIgnition) {\n  result=Collections.singleton(new Event(Event.TYPE_IGNITION_OFF,position.getDeviceId(),position.getId()));\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_traccar-traccar_195128524-195455832/src/org/traccar/events/IgnitionEventHandler.java\t2018-12-26 13:25:11.252547388 -0500\n+++ /tmp/Arja_Bears_traccar-traccar_195128524-195455832/patches_dh8j/Patch_1576/patched/tmp/Arja_Bears_traccar-traccar_195128524-195455832/src/org/traccar/events/IgnitionEventHandler.java\t2018-12-26 13:37:23.115857645 -0500\n@@ -47,13 +47,6 @@\n             oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION);\n         }\n \n-        if (ignition && !oldIgnition) {\n-            result = Collections.singleton(\n-                    new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId()));\n-        } else if (!ignition && oldIgnition) {\n-            result = Collections.singleton(\n-                    new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));\n-        }\n         return result;\n     }\n \n\n\n"}]}}, {"bug_id": "195128524-195455832", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:28:14.509897", "repair_begin": "2018-12-28 00:27:46.032626", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/events\\/IgnitionEventHandler.java\\n+++ org\\/traccar\\/events\\/IgnitionEventHandler.java\\n@@ -33,7 +33,7 @@\\n \\t\\tif (device == null) {\\n \\t\\t\\treturn null;\\n \\t\\t}\\n-\\t\\tif ((!(org.traccar.Context.getIdentityManager().isLatestPosition(position))) || (!(position.getValid()))) {\\n+\\t\\tif ((!(org.traccar.Context.getIdentityManager().isLatestPosition(position))) || (org.traccar.Context.getIdentityManager().isLatestPosition(position))) {\\n \\t\\t\\treturn null;\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(!(position.getValid()))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(org.traccar.Context.getIdentityManager().isLatestPosition(position))", "INGREDIENT_PARENT": "(org.traccar.Context.getIdentityManager().isLatestPosition(_Position_0))", "LOCATION": "org.traccar.events.IgnitionEventHandler", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/src\\/\\/variant-4_f\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_195128524-195455832\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/src\\/default\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "LINE": "36", "MP_RANKING": "8", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl"}], "GENERATION": "2", "VARIANT_ID": "4", "TIME": "7", "VALIDATION": "|true|0|227|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "195128524-195455832", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 03:56:28.378339", "repair_begin": "2018-12-27 03:56:05.151832", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/events\\/IgnitionEventHandler.java\\n+++ org\\/traccar\\/events\\/IgnitionEventHandler.java\\n@@ -53,6 +53,6 @@\\n \\t\\t}else \\t\\t\\tif ((!ignition) && oldIgnition) {\\n \\t\\t\\t\\tresult = java.util.Collections.singleton(\\n \\t\\t\\t\\tnew org.traccar.model.Event(org.traccar.model.Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));\\n-\\t\\t\\t}\\n-\\t\\treturn result;\\n+\\t\\t\\t} \\t\\treturn null;\\n+\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return result", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return null", "INGREDIENT_PARENT": "return null", "LOCATION": "org.traccar.events.IgnitionEventHandler", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/src\\/\\/variant-2_f\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_195128524-195455832\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/src\\/default\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "LINE": "57", "MP_RANKING": "10", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "3", "VALIDATION": "|true|0|227|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "195128524-195455832", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:14:06.762078", "repair_begin": "2018-12-28 00:13:50.253829", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/events\\/IgnitionEventHandler.java\\n+++ org\\/traccar\\/events\\/IgnitionEventHandler.java\\n@@ -30,7 +30,7 @@\\n \\t@java.lang.Override\\n \\tprotected java.util.Collection<org.traccar.model.Event> analyzePosition(org.traccar.model.Position position) {\\n \\t\\torg.traccar.model.Device device = org.traccar.Context.getIdentityManager().getDeviceById(position.getDeviceId());\\n-\\t\\tif (device == null) {\\n+\\t\\tif (true) {\\n \\t\\t\\treturn null;\\n \\t\\t}\\n \\t\\tif ((!(org.traccar.Context.getIdentityManager().isLatestPosition(position))) || (!(position.getValid()))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (device == null) {\\n\\treturn null;\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\treturn null;\\n}", "LOCATION": "org.traccar.events.IgnitionEventHandler", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/src\\/\\/variant-2_f\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_195128524-195455832\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/src\\/default\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "LINE": "33", "MP_RANKING": "1", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|227|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "195128524-195455832", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 09:10:38.808756", "repair_begin": "2018-12-27 09:10:16.164362", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/events\\/IgnitionEventHandler.java\\n+++ org\\/traccar\\/events\\/IgnitionEventHandler.java\\n@@ -30,7 +30,7 @@\\n \\t@java.lang.Override\\n \\tprotected java.util.Collection<org.traccar.model.Event> analyzePosition(org.traccar.model.Position position) {\\n \\t\\torg.traccar.model.Device device = org.traccar.Context.getIdentityManager().getDeviceById(position.getDeviceId());\\n-\\t\\tif (device == null) {\\n+\\t\\tif (device != null) {\\n \\t\\t\\treturn null;\\n \\t\\t}\\n \\t\\tif ((!(org.traccar.Context.getIdentityManager().isLatestPosition(position))) || (!(position.getValid()))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "device == null", "PATCH_HUNK_CODE": "device != null", "LOCATION": "org.traccar.events.IgnitionEventHandler", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/src\\/\\/variant-2_f\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_195128524-195455832\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/src\\/default\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "LINE": "33", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|227|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "195128524-195455832", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 11:27:05.363976", "repair_begin": "2018-12-27 11:26:48.607913", "patches": [{"edits": [{"path": "src/org/traccar/events/IgnitionEventHandler.java", "line": 33, "faulty": "if (device == null) {\n  return null;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bears_traccar-traccar_195128524-195455832/src/org/traccar/events/IgnitionEventHandler.java\t2018-12-27 05:26:06.387698574 -0500\n+++ /tmp/Kali_Bears_traccar-traccar_195128524-195455832/patches_99wa/Patch_1/patched/tmp/Kali_Bears_traccar-traccar_195128524-195455832/src/org/traccar/events/IgnitionEventHandler.java\t2018-12-27 05:27:04.980625153 -0500\n@@ -30,7 +30,7 @@\n     @Override\n     protected Collection<Event> analyzePosition(Position position) {\n         Device device = Context.getIdentityManager().getDeviceById(position.getDeviceId());\n-        if (device == null) {\n+        if (true) {\n             return null;\n         }\n         if (!Context.getIdentityManager().isLatestPosition(position) || !position.getValid()) {\n\n\n"}]}}, {"bug_id": "198464113-198488474", "tool": "ARJA", "nb_patch": 1340, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-26 19:53:05.158784", "repair_begin": "2018-12-26 19:25:33.885306", "patches": [{"edits": [{"path": "src/org/traccar/protocol/Gl200ProtocolDecoder.java", "line": 624, "faulty": "for (int i=0; i < count; i++) {\n  String mac=parser.next().replaceAll(\"(..)\",\"$1:\");\n  network.addWifiAccessPoint(WifiAccessPoint.from(mac.substring(0,mac.length() - 1),parser.nextInt()));\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_traccar-traccar_198464113-198488474/src/org/traccar/protocol/Gl200ProtocolDecoder.java\t2018-12-26 13:24:52.382457453 -0500\n+++ /tmp/Arja_Bears_traccar-traccar_198464113-198488474/patches_vzjn/Patch_1223/patched/tmp/Arja_Bears_traccar-traccar_198464113-198488474/src/org/traccar/protocol/Gl200ProtocolDecoder.java\t2018-12-26 13:37:11.142579741 -0500\n@@ -621,11 +621,6 @@\n         Network network = new Network();\n \n         int count = parser.nextInt();\n-        for (int i = 0; i < count; i++) {\n-            String mac = parser.next().replaceAll(\"(..)\", \"$1:\");\n-            network.addWifiAccessPoint(WifiAccessPoint.from(mac.substring(0, mac.length() - 1), parser.nextInt()));\n-        }\n-\n         return position;\n     }\n \n\n\n"}]}}, {"bug_id": "198464113-198488474", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:29:32.001760", "repair_begin": "2018-12-28 00:27:53.322141", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java\\n@@ -621,7 +621,7 @@\\n \\t\\torg.traccar.model.Network network = new org.traccar.model.Network();\\n \\n \\t\\tint count = parser.nextInt();\\n-\\t\\tfor (int i = 0; i < count; i++) {\\n+\\t\\tfor (int i = 0; parser.find(); i++) {\\n \\t\\t\\tjava.lang.String mac = parser.next().replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n \\t\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(mac.substring(0, ((mac.length()) - 1)), parser.nextInt()));\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtForImpl", "ORIGINAL_CODE": "i < count", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "parser.find()", "INGREDIENT_PARENT": "_Parser_0.find()", "LOCATION": "org.traccar.protocol.Gl200ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_198464113-198488474\\/.\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/\\/src\\/\\/variant-60_f\\/org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_198464113-198488474\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/src\\/default\\/org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java", "LINE": "624", "MP_RANKING": "14", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtForImpl"}], "GENERATION": "30", "VARIANT_ID": "60", "TIME": "40", "VALIDATION": "|true|0|228|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_198464113-198488474\\/.\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/\\/bin\\/\\/variant-60"}]}}, {"bug_id": "198464113-198488474", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 03:56:26.687218", "repair_begin": "2018-12-27 03:55:48.755590", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java\\n@@ -621,10 +621,10 @@\\n \\t\\torg.traccar.model.Network network = new org.traccar.model.Network();\\n \\n \\t\\tint count = parser.nextInt();\\n-\\t\\tfor (int i = 0; i < count; i++) {\\n-\\t\\t\\tjava.lang.String mac = parser.next().replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n-\\t\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(mac.substring(0, ((mac.length()) - 1)), parser.nextInt()));\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n \\n \\t\\treturn position;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", "ORIGINAL_CODE": "for (int i = 0; i < count; i++) {\\n\\tjava.lang.String mac = parser.next().replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(mac.substring(0, ((mac.length()) - 1)), parser.nextInt()));\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.protocol.Gl200ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_198464113-198488474\\/.\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/\\/src\\/\\/variant-28_f\\/org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_198464113-198488474\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/src\\/default\\/org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java", "LINE": "624", "MP_RANKING": "10", "SUSPICIOUNESS": "1"}], "GENERATION": "14", "VARIANT_ID": "28", "TIME": "14", "VALIDATION": "|true|0|228|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_198464113-198488474\\/.\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/\\/bin\\/\\/variant-28"}]}}, {"bug_id": "198464113-198488474", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:11:47.401052", "repair_begin": "2018-12-28 00:11:20.852226", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java\\n@@ -621,10 +621,10 @@\\n \\t\\torg.traccar.model.Network network = new org.traccar.model.Network();\\n \\n \\t\\tint count = parser.nextInt();\\n-\\t\\tfor (int i = 0; i < count; i++) {\\n-\\t\\t\\tjava.lang.String mac = parser.next().replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n-\\t\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(mac.substring(0, ((mac.length()) - 1)), parser.nextInt()));\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n \\n \\t\\treturn position;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", "ORIGINAL_CODE": "for (int i = 0; i < count; i++) {\\n\\tjava.lang.String mac = parser.next().replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(mac.substring(0, ((mac.length()) - 1)), parser.nextInt()));\\n}", "LOCATION": "org.traccar.protocol.Gl200ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_198464113-198488474\\/.\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/\\/src\\/\\/variant-11_f\\/org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_198464113-198488474\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/src\\/default\\/org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java", "LINE": "624", "MP_RANKING": "10", "SUSPICIOUNESS": "1"}], "GENERATION": "1", "VARIANT_ID": "11", "TIME": "9", "VALIDATION": "|true|0|228|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_198464113-198488474\\/.\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/\\/bin\\/\\/variant-11"}]}}, {"bug_id": "212058933-212061222", "tool": "ARJA", "nb_patch": 953, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-26 19:50:57.649007", "repair_begin": "2018-12-26 19:24:45.061360", "patches": [{"edits": [{"path": "src/org/traccar/protocol/SuntechProtocolDecoder.java", "line": 147, "faulty": "if (index < values.length) {\n  position.set(Position.KEY_HOURS,Integer.parseInt(values[index++]));\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_traccar-traccar_212058933-212061222/src/org/traccar/protocol/SuntechProtocolDecoder.java\t2018-12-26 13:24:02.202494680 -0500\n+++ /tmp/Arja_Bears_traccar-traccar_212058933-212061222/patches_7b3l/Patch_1446/patched/tmp/Arja_Bears_traccar-traccar_212058933-212061222/src/org/traccar/protocol/SuntechProtocolDecoder.java\t2018-12-26 13:38:42.913909532 -0500\n@@ -145,10 +145,6 @@\n         }\n \n         if (index < values.length) {\n-            position.set(Position.KEY_HOURS, Integer.parseInt(values[index++]));\n-        }\n-\n-        if (index < values.length) {\n             position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n         }\n \n\n\n"}]}}, {"bug_id": "212058933-212061222", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:27:51.743048", "repair_begin": "2018-12-28 00:27:23.887861", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n@@ -136,7 +136,7 @@\\n \\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, java.lang.Integer.parseInt(values[(index++)]));\\n \\t\\tposition.set(org.traccar.model.Position.KEY_POWER, java.lang.Double.parseDouble(values[(index++)]));\\n \\n-\\t\\tposition.set(((org.traccar.model.Position.PREFIX_IO) + 1), values[(index++)]);\\n+\\t\\tposition.set(((org.traccar.model.Position.PREFIX_IO) + 1), values[((protocolType)++)]);\\n \\n \\t\\tindex += 1;\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtArrayReadImpl", "ORIGINAL_CODE": "(index++)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "((protocolType)++)", "INGREDIENT_PARENT": "(_int_0++)", "LOCATION": "org.traccar.protocol.SuntechProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/src\\/\\/variant-18_f\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_212058933-212061222\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/src\\/default\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "LINE": "139", "MP_RANKING": "72", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtUnaryOperatorImpl|CtArrayReadImpl"}], "GENERATION": "9", "VARIANT_ID": "18", "TIME": "12", "VALIDATION": "|true|0|234|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/bin\\/\\/variant-18"}]}}, {"bug_id": "212058933-212061222", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 03:55:05.846979", "repair_begin": "2018-12-27 03:54:41.090688", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n@@ -144,9 +144,9 @@\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_INDEX, java.lang.Integer.parseInt(values[(index++)]));\\n \\t\\t}\\n \\n-\\t\\tif (index < (values.length)) {\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_HOURS, java.lang.Integer.parseInt(values[(index++)]));\\n-\\t\\t}\\n+\\n+\\n+\\n \\n \\t\\tif (index < (values.length)) {\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (index < (values.length)) {\\n\\tposition.set(org.traccar.model.Position.KEY_HOURS, java.lang.Integer.parseInt(values[(index++)]));\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.protocol.SuntechProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/src\\/\\/variant-2_f\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_212058933-212061222\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/src\\/default\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "LINE": "147", "MP_RANKING": "28", "SUSPICIOUNESS": "1"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "3", "VALIDATION": "|true|0|234|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "212058933-212061222", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:10:11.438378", "repair_begin": "2018-12-28 00:09:30.798345", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n@@ -133,7 +133,7 @@\\n \\n \\t\\tposition.setValid(values[(index++)].equals(\\\"1\\\"));\\n \\n-\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, java.lang.Integer.parseInt(values[(index++)]));\\n+\\n \\t\\tposition.set(org.traccar.model.Position.KEY_POWER, java.lang.Double.parseDouble(values[(index++)]));\\n \\n \\t\\tposition.set(((org.traccar.model.Position.PREFIX_IO) + 1), values[(index++)]);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "position.set(org.traccar.model.Position.KEY_ODOMETER, java.lang.Integer.parseInt(values[(index++)]))", "LOCATION": "org.traccar.protocol.SuntechProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/src\\/\\/variant-27_f\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_212058933-212061222\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/src\\/default\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "LINE": "136", "MP_RANKING": "22", "SUSPICIOUNESS": "1"}], "GENERATION": "1", "VARIANT_ID": "27", "TIME": "24", "VALIDATION": "|true|0|234|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/bin\\/\\/variant-27"}]}}, {"bug_id": "212058933-212061222", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 09:10:56.413967", "repair_begin": "2018-12-27 09:10:07.763298", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n@@ -144,7 +144,7 @@\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_INDEX, java.lang.Integer.parseInt(values[(index++)]));\\n \\t\\t}\\n \\n-\\t\\tif (index < (values.length)) {\\n+\\t\\tif (index > (values.length)) {\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_HOURS, java.lang.Integer.parseInt(values[(index++)]));\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "index < (values.length)", "PATCH_HUNK_CODE": "index > (values.length)", "LOCATION": "org.traccar.protocol.SuntechProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/src\\/\\/variant-27_f\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_212058933-212061222\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/src\\/default\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "LINE": "147", "MP_RANKING": "5", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "27", "TIME": "23", "VALIDATION": "|true|0|234|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/bin\\/\\/variant-27"}]}}, {"bug_id": "212058933-212061222", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 11:26:43.370247", "repair_begin": "2018-12-27 11:26:22.914320", "patches": [{"edits": [{"path": "src/org/traccar/protocol/SuntechProtocolDecoder.java", "line": 143, "faulty": "if (type.equals(\"STT\")) {\n  position.set(Position.KEY_INDEX,Integer.parseInt(values[index++]));\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bears_traccar-traccar_212058933-212061222/src/org/traccar/protocol/SuntechProtocolDecoder.java\t2018-12-27 05:25:40.226772305 -0500\n+++ /tmp/Kali_Bears_traccar-traccar_212058933-212061222/patches_rl36/Patch_4/patched/tmp/Kali_Bears_traccar-traccar_212058933-212061222/src/org/traccar/protocol/SuntechProtocolDecoder.java\t2018-12-27 05:26:42.978773737 -0500\n@@ -140,7 +140,7 @@\n \n         index += 1; // mode\n \n-        if (type.equals(\"STT\")) {\n+        if (false) {\n             position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n         }\n \n\n\n"}]}}, {"bug_id": "216100740-216167822", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 04:17:36.703036", "repair_begin": "2018-12-27 03:53:26.033236", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/helper\\/PatternBuilder.java\\n+++ org\\/traccar\\/helper\\/PatternBuilder.java\\n@@ -74,7 +74,7 @@\\n \\t\\treturn expression(\\\"(?:\\\");\\n \\t}\\n \\n-\\tpublic org.traccar.helper.PatternBuilder groupEnd() {\\n+\\tpublic org.traccar.helper.PatternBuilder groupEnd() { \\t\\tfragments.add(\\\".*?\\\");\\n \\t\\treturn expression(\\\")\\\");\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return expression(\\\")\\\")", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "fragments.add(\\\".*?\\\")", "INGREDIENT_PARENT": "fragments.add(\\\".*?\\\")", "LOCATION": "org.traccar.helper.PatternBuilder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_216100740-216167822\\/.\\/output_astor\\/AstorMain-traccar-traccar-216100740-216167822\\/\\/src\\/\\/variant-3430_f\\/org\\/traccar\\/helper\\/PatternBuilder.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_216100740-216167822\\/output_astor\\/AstorMain-traccar-traccar-216100740-216167822\\/src\\/default\\/org\\/traccar\\/helper\\/PatternBuilder.java", "LINE": "78", "MP_RANKING": "3", "SUSPICIOUNESS": "0.289", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "1715", "VARIANT_ID": "3430", "TIME": "1435", "VALIDATION": "|true|0|234|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_216100740-216167822\\/.\\/output_astor\\/AstorMain-traccar-traccar-216100740-216167822\\/\\/bin\\/\\/variant-3430"}]}}, {"bug_id": "237845618-237846623", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:42:59.993056", "repair_begin": "2018-12-28 00:25:57.959761", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/WatchProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/WatchProtocolDecoder.java\\n@@ -160,63 +160,63 @@\\n \\n \\t\\t\\t\\t\\tgetLastLocation(position, null);\\n \\n-\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY_LEVEL, java.lang.Integer.parseInt(values[3]));\\n \\n-\\t\\t\\t\\t\\treturn position;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n \\n-\\t\\t}else \\t\\t\\tif (((((type.equals(\\\"UD\\\")) || (type.equals(\\\"UD2\\\"))) || (type.equals(\\\"UD3\\\"))) || \\n-\\t\\t\\t(type.equals(\\\"AL\\\"))) || (type.equals(\\\"WT\\\"))) {\\n \\n-\\t\\t\\t\\tif (type.equals(\\\"AL\\\")) {\\n-\\t\\t\\t\\t\\tsendResponse(channel, manufacturer, id, \\\"AL\\\");\\n-\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\tparser = new org.traccar.helper.Parser(org.traccar.protocol.WatchProtocolDecoder.PATTERN_POSITION, content);\\n-\\t\\t\\t\\tif (!(parser.matches())) {\\n-\\t\\t\\t\\t\\treturn null;\\n-\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\torg.traccar.model.Position position = new org.traccar.model.Position();\\n-\\t\\t\\t\\tposition.setProtocol(getProtocolName());\\n-\\t\\t\\t\\tposition.setDeviceId(deviceSession.getDeviceId());\\n \\n-\\t\\t\\t\\tposition.setTime(parser.nextDateTime(org.traccar.helper.Parser.DateTimeFormat.DMY_HMS));\\n \\n-\\t\\t\\t\\tposition.setValid(parser.next().equals(\\\"A\\\"));\\n-\\t\\t\\t\\tposition.setLatitude(parser.nextCoordinate(org.traccar.helper.Parser.CoordinateFormat.DEG_HEM));\\n-\\t\\t\\t\\tposition.setLongitude(parser.nextCoordinate(org.traccar.helper.Parser.CoordinateFormat.DEG_HEM));\\n-\\t\\t\\t\\tposition.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(parser.nextDouble(0)));\\n-\\t\\t\\t\\tposition.setCourse(parser.nextDouble(0));\\n-\\t\\t\\t\\tposition.setAltitude(parser.nextDouble(0));\\n \\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_SATELLITES, parser.nextInt(0));\\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RSSI, parser.nextInt(0));\\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\\n \\n-\\t\\t\\t\\tposition.set(\\\"steps\\\", parser.nextInt(0));\\n \\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, decodeAlarm(parser.nextHexInt(0)));\\n \\n-\\t\\t\\t\\tdecodeTail(position, parser.next());\\n \\n-\\t\\t\\t\\treturn position;\\n \\n-\\t\\t\\t}else \\t\\t\\t\\tif (type.equals(\\\"TKQ\\\")) {\\n \\n-\\t\\t\\t\\t\\tsendResponse(channel, manufacturer, id, \\\"TKQ\\\");\\n \\n-\\t\\t\\t\\t}else \\t\\t\\t\\t\\tif ((type.equals(\\\"PULSE\\\")) || (type.equals(\\\"heart\\\"))) {\\n \\n-\\t\\t\\t\\t\\t\\torg.traccar.model.Position position = new org.traccar.model.Position();\\n-\\t\\t\\t\\t\\t\\tposition.setProtocol(getProtocolName());\\n-\\t\\t\\t\\t\\t\\tposition.setDeviceId(deviceSession.getDeviceId());\\n-\\t\\t\\t\\t\\t\\tgetLastLocation(position, new java.util.Date());\\n-\\t\\t\\t\\t\\t\\tposition.setValid(false);\\n-\\t\\t\\t\\t\\t\\tjava.lang.String pulse = content.substring(1);\\n-\\t\\t\\t\\t\\t\\tposition.set(\\\"pulse\\\", pulse);\\n-\\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RESULT, pulse);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RESULT, type); \\t\\t\\t\\t\\treturn position;}}}else \\t\\t\\tif (((((type.equals(\\\"UD\\\")) || (type.equals(\\\"UD2\\\"))) || (type.equals(\\\"UD3\\\"))) || (type.equals(\\\"AL\\\"))) || (type.equals(\\\"WT\\\"))) { \\t\\t\\t\\tif (type.equals(\\\"AL\\\")) { \\t\\t\\t\\t\\tsendResponse(channel, manufacturer, id, \\\"AL\\\");} \\t\\t\\t\\tparser = new org.traccar.helper.Parser(org.traccar.protocol.WatchProtocolDecoder.PATTERN_POSITION, content); \\t\\t\\t\\tif (!(parser.matches())) { \\t\\t\\t\\t\\treturn null;} \\t\\t\\t\\torg.traccar.model.Position position = new org.traccar.model.Position(); \\t\\t\\t\\tposition.setProtocol(getProtocolName()); \\t\\t\\t\\tposition.setDeviceId(deviceSession.getDeviceId()); \\t\\t\\t\\tposition.setTime(parser.nextDateTime(org.traccar.helper.Parser.DateTimeFormat.DMY_HMS)); \\t\\t\\t\\tposition.setValid(parser.next().equals(\\\"A\\\")); \\t\\t\\t\\tposition.setLatitude(parser.nextCoordinate(org.traccar.helper.Parser.CoordinateFormat.DEG_HEM)); \\t\\t\\t\\tposition.setLongitude(parser.nextCoordinate(org.traccar.helper.Parser.CoordinateFormat.DEG_HEM)); \\t\\t\\t\\tposition.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(parser.nextDouble(0))); \\t\\t\\t\\tposition.setCourse(parser.nextDouble(0)); \\t\\t\\t\\tposition.setAltitude(parser.nextDouble(0)); \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_SATELLITES, parser.nextInt(0)); \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RSSI, parser.nextInt(0)); \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY_LEVEL, parser.nextInt(0)); \\t\\t\\t\\tposition.set(\\\"steps\\\", parser.nextInt(0)); \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, decodeAlarm(parser.nextHexInt(0))); \\t\\t\\t\\tdecodeTail(position, parser.next()); \\t\\t\\t\\treturn position;}else \\t\\t\\t\\tif (type.equals(\\\"TKQ\\\")) { \\t\\t\\t\\t\\tsendResponse(channel, manufacturer, id, \\\"TKQ\\\");}else \\t\\t\\t\\t\\tif ((type.equals(\\\"PULSE\\\")) || (type.equals(\\\"heart\\\"))) { \\t\\t\\t\\t\\t\\torg.traccar.model.Position position = new org.traccar.model.Position(); \\t\\t\\t\\t\\t\\tposition.setProtocol(getProtocolName()); \\t\\t\\t\\t\\t\\tposition.setDeviceId(deviceSession.getDeviceId()); \\t\\t\\t\\t\\t\\tgetLastLocation(position, new java.util.Date()); \\t\\t\\t\\t\\t\\tposition.setValid(false); \\t\\t\\t\\t\\t\\tjava.lang.String pulse = content.substring(1); \\t\\t\\t\\t\\t\\tposition.set(\\\"pulse\\\", pulse); \\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RESULT, pulse);\\n \\t\\t\\t\\t\\t\\treturn position;\\n \\n \\t\\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "position.set(org.traccar.model.Position.KEY_BATTERY_LEVEL, java.lang.Integer.parseInt(values[3]))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "position.set(org.traccar.model.Position.KEY_RESULT, type)", "INGREDIENT_PARENT": "_Position_0.set(org.traccar.model.Position.KEY_RESULT, _String_1)", "LOCATION": "org.traccar.protocol.WatchProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_237845618-237846623\\/.\\/output_astor\\/AstorMain-traccar-traccar-237845618-237846623\\/\\/src\\/\\/variant-1938_f\\/org\\/traccar\\/protocol\\/WatchProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_237845618-237846623\\/output_astor\\/AstorMain-traccar-traccar-237845618-237846623\\/src\\/default\\/org\\/traccar\\/protocol\\/WatchProtocolDecoder.java", "LINE": "163", "MP_RANKING": "74", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "969", "VARIANT_ID": "1938", "TIME": "1001", "VALIDATION": "|true|0|242|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_237845618-237846623\\/.\\/output_astor\\/AstorMain-traccar-traccar-237845618-237846623\\/\\/bin\\/\\/variant-1938"}]}}, {"bug_id": "255051210-255052458", "tool": "ARJA", "nb_patch": 857, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-26 19:50:06.287490", "repair_begin": "2018-12-26 19:03:47.114214", "patches": [{"edits": [{"path": "src/org/traccar/BaseProtocolDecoder.java", "line": 109, "faulty": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n  long deviceId=findDeviceId(remoteAddress,uniqueIds);\n  if (deviceId != 0) {\n    if (Context.getConnectionManager() != null) {\n      Context.getConnectionManager().addActiveDevice(deviceId,protocol,channel,remoteAddress);\n    }\n    return new DeviceSession(deviceId);\n  }\n else {\n    return null;\n  }\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_traccar-traccar_255051210-255052458/src/org/traccar/BaseProtocolDecoder.java\t2018-12-26 13:03:03.464521938 -0500\n+++ /tmp/Arja_Bears_traccar-traccar_255051210-255052458/patches_gske/Patch_484/patched/tmp/Arja_Bears_traccar-traccar_255051210-255052458/src/org/traccar/BaseProtocolDecoder.java\t2018-12-26 13:12:57.836848926 -0500\n@@ -106,18 +106,6 @@\n     }\n \n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n-                }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n-            }\n-        }\n         if (channel instanceof DatagramChannel) {\n             long deviceId = findDeviceId(remoteAddress, uniqueIds);\n             DeviceSession deviceSession = addressDeviceSessions.get(remoteAddress);\n\n\n"}]}}, {"bug_id": "255051210-255052458", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:20:38.634990", "repair_begin": "2018-12-28 00:20:05.665484", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/BaseProtocolDecoder.java\\n+++ org\\/traccar\\/BaseProtocolDecoder.java\\n@@ -106,19 +106,19 @@\\n \\t}\\n \\n \\tpublic org.traccar.DeviceSession getDeviceSession(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.String... uniqueIds) {\\n-\\t\\tif (((channel.getPipeline().get(org.jboss.netty.handler.codec.http.HttpRequestDecoder.class)) != null) || \\n-\\t\\t(org.traccar.Context.getConfig().getBoolean(\\\"decoder.ignoreSessionCache\\\"))) {\\n-\\t\\t\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds);\\n-\\t\\t\\tif (deviceId != 0) {\\n-\\t\\t\\t\\tif ((org.traccar.Context.getConnectionManager()) != null) {\\n-\\t\\t\\t\\t\\torg.traccar.Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\treturn new org.traccar.DeviceSession(deviceId);\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\treturn null;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tif (channel instanceof org.jboss.netty.channel.socket.DatagramChannel) {\\n+\\t\\tif (\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\tchannel instanceof org.jboss.netty.channel.socket.DatagramChannel) { \\t\\t\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds); \\t\\t\\tif (deviceId != 0) { \\t\\t\\t\\tif ((org.traccar.Context.getConnectionManager()) != null) { \\t\\t\\t\\t\\torg.traccar.Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);} \\t\\t\\t\\treturn new org.traccar.DeviceSession(deviceId);}else { \\t\\t\\t\\treturn null;}} \\t\\tif (channel instanceof org.jboss.netty.channel.socket.DatagramChannel) {\\n \\t\\t\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds);\\n \\t\\t\\torg.traccar.DeviceSession deviceSession = addressDeviceSessions.get(remoteAddress);\\n \\t\\t\\tif ((deviceSession != null) && (((deviceSession.getDeviceId()) == deviceId) || ((uniqueIds.length) == 0))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((channel.getPipeline().get(org.jboss.netty.handler.codec.http.HttpRequestDecoder.class)) != null) || \\n(org.traccar.Context.getConfig().getBoolean(\\\"decoder.ignoreSessionCache\\\"))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "channel instanceof org.jboss.netty.channel.socket.DatagramChannel", "INGREDIENT_PARENT": "_Channel_0 instanceof org.jboss.netty.channel.socket.DatagramChannel", "LOCATION": "org.traccar.BaseProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_255051210-255052458\\/.\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/\\/src\\/\\/variant-10_f\\/org\\/traccar\\/BaseProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_255051210-255052458\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/src\\/default\\/org\\/traccar\\/BaseProtocolDecoder.java", "LINE": "109", "MP_RANKING": "3", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "5", "VARIANT_ID": "10", "TIME": "10", "VALIDATION": "|true|0|265|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_255051210-255052458\\/.\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/\\/bin\\/\\/variant-10"}]}}, {"bug_id": "255051210-255052458", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 02:18:00.067921", "repair_begin": "2018-12-27 02:15:57.829261", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/BaseProtocolDecoder.java\\n+++ org\\/traccar\\/BaseProtocolDecoder.java\\n@@ -106,18 +106,18 @@\\n \\t}\\n \\n \\tpublic org.traccar.DeviceSession getDeviceSession(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.String... uniqueIds) {\\n-\\t\\tif (((channel.getPipeline().get(org.jboss.netty.handler.codec.http.HttpRequestDecoder.class)) != null) || \\n-\\t\\t(org.traccar.Context.getConfig().getBoolean(\\\"decoder.ignoreSessionCache\\\"))) {\\n-\\t\\t\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds);\\n-\\t\\t\\tif (deviceId != 0) {\\n-\\t\\t\\t\\tif ((org.traccar.Context.getConnectionManager()) != null) {\\n-\\t\\t\\t\\t\\torg.traccar.Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\treturn new org.traccar.DeviceSession(deviceId);\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\treturn null;\\n-\\t\\t\\t}\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\tif (channel instanceof org.jboss.netty.channel.socket.DatagramChannel) {\\n \\t\\t\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds);\\n \\t\\t\\torg.traccar.DeviceSession deviceSession = addressDeviceSessions.get(remoteAddress);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (((channel.getPipeline().get(org.jboss.netty.handler.codec.http.HttpRequestDecoder.class)) != null) || \\n(org.traccar.Context.getConfig().getBoolean(\\\"decoder.ignoreSessionCache\\\"))) {\\n\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds);\\n\\tif (deviceId != 0) {\\n\\t\\tif ((org.traccar.Context.getConnectionManager()) != null) {\\n\\t\\t\\torg.traccar.Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\\n\\t\\t}\\n\\t\\treturn new org.traccar.DeviceSession(deviceId);\\n\\t}else {\\n\\t\\treturn null;\\n\\t}\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.BaseProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_255051210-255052458\\/.\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/\\/src\\/\\/variant-214_f\\/org\\/traccar\\/BaseProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_255051210-255052458\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/src\\/default\\/org\\/traccar\\/BaseProtocolDecoder.java", "LINE": "109", "MP_RANKING": "0", "SUSPICIOUNESS": "1"}], "GENERATION": "107", "VARIANT_ID": "214", "TIME": "96", "VALIDATION": "|true|0|265|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_255051210-255052458\\/.\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/\\/bin\\/\\/variant-214"}]}}, {"bug_id": "255051210-255052458", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:04:13.842861", "repair_begin": "2018-12-28 00:03:42.949958", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/BaseProtocolDecoder.java\\n+++ org\\/traccar\\/BaseProtocolDecoder.java\\n@@ -106,12 +106,12 @@\\n \\t}\\n \\n \\tpublic org.traccar.DeviceSession getDeviceSession(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, java.lang.String... uniqueIds) {\\n-\\t\\tif (((channel.getPipeline().get(org.jboss.netty.handler.codec.http.HttpRequestDecoder.class)) != null) || \\n-\\t\\t(org.traccar.Context.getConfig().getBoolean(\\\"decoder.ignoreSessionCache\\\"))) {\\n+\\t\\tif (false) \\n+\\t\\t{\\n \\t\\t\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds);\\n \\t\\t\\tif (deviceId != 0) {\\n \\t\\t\\t\\tif ((org.traccar.Context.getConnectionManager()) != null) {\\n-\\t\\t\\t\\t\\torg.traccar.Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\\n+\\t\\t\\t\\t\\torg.traccar.Context.getConnectionManager().addActiveDevice(deviceId, this.protocol, channel, remoteAddress);\\n \\t\\t\\t\\t}\\n \\t\\t\\t\\treturn new org.traccar.DeviceSession(deviceId);\\n \\t\\t\\t}else {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (((channel.getPipeline().get(org.jboss.netty.handler.codec.http.HttpRequestDecoder.class)) != null) || \\n(org.traccar.Context.getConfig().getBoolean(\\\"decoder.ignoreSessionCache\\\"))) {\\n\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds);\\n\\tif (deviceId != 0) {\\n\\t\\tif ((org.traccar.Context.getConnectionManager()) != null) {\\n\\t\\t\\torg.traccar.Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\\n\\t\\t}\\n\\t\\treturn new org.traccar.DeviceSession(deviceId);\\n\\t}else {\\n\\t\\treturn null;\\n\\t}\\n}", "PATCH_HUNK_CODE": "if (false) \\n{\\n\\tlong deviceId = findDeviceId(remoteAddress, uniqueIds);\\n\\tif (deviceId != 0) {\\n\\t\\tif ((org.traccar.Context.getConnectionManager()) != null) {\\n\\t\\t\\torg.traccar.Context.getConnectionManager().addActiveDevice(deviceId, this.protocol, channel, remoteAddress);\\n\\t\\t}\\n\\t\\treturn new org.traccar.DeviceSession(deviceId);\\n\\t}else {\\n\\t\\treturn null;\\n\\t}\\n}", "LOCATION": "org.traccar.BaseProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_255051210-255052458\\/.\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/\\/src\\/\\/variant-3_f\\/org\\/traccar\\/BaseProtocolDecoder.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_255051210-255052458\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/src\\/default\\/org\\/traccar\\/BaseProtocolDecoder.java", "LINE": "109", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "3", "TIME": "4", "VALIDATION": "|true|0|265|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_255051210-255052458\\/.\\/output_astor\\/AstorMain-traccar-traccar-255051210-255052458\\/\\/bin\\/\\/variant-3"}]}}, {"bug_id": "255051210-255052458", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 11:25:55.721796", "repair_begin": "2018-12-27 11:25:35.313474", "patches": [{"edits": [{"path": "src/org/traccar/BaseProtocolDecoder.java", "line": 109, "faulty": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n  long deviceId=findDeviceId(remoteAddress,uniqueIds);\n  if (deviceId != 0) {\n    if (Context.getConnectionManager() != null) {\n      Context.getConnectionManager().addActiveDevice(deviceId,protocol,channel,remoteAddress);\n    }\n    return new DeviceSession(deviceId);\n  }\n else {\n    return null;\n  }\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bears_traccar-traccar_255051210-255052458/src/org/traccar/BaseProtocolDecoder.java\t2018-12-27 05:24:51.725490787 -0500\n+++ /tmp/Kali_Bears_traccar-traccar_255051210-255052458/patches_f7yb/Patch_2/patched/tmp/Kali_Bears_traccar-traccar_255051210-255052458/src/org/traccar/BaseProtocolDecoder.java\t2018-12-27 05:25:55.326511244 -0500\n@@ -106,8 +106,7 @@\n     }\n \n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+        if (false) {\n             long deviceId = findDeviceId(remoteAddress, uniqueIds);\n             if (deviceId != 0) {\n                 if (Context.getConnectionManager() != null) {\n\n\n"}]}}, {"bug_id": "267371558-268530427", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:19:43.765094", "repair_begin": "2018-12-28 00:18:53.227379", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java\\n@@ -611,8 +611,8 @@\\n \\t\\t\\tint deviceType = java.lang.Integer.parseInt(data[(index++)]);\\n \\t\\t\\tif (deviceType == 2) {\\n \\t\\t\\t\\tint deviceCount = java.lang.Integer.parseInt(data[(index++)]);\\n-\\t\\t\\t\\tfor (int i = 1; i <= deviceCount; i++) {\\n-\\t\\t\\t\\t\\tindex++;\\n+\\t\\t\\t\\tfor (int i = 1; i <= deviceCount; i++) { \\t\\t\\t\\t\\tparser.nextHexInt(0);\\n+\\n \\t\\t\\t\\t\\tindex++;\\n \\t\\t\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_TEMP) + i), ((java.lang.Short.parseShort(data[(index++)], 16)) * 0.0625));\\n \\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "index++", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "parser.nextHexInt(0)", "INGREDIENT_PARENT": "_Parser_0.nextHexInt(0)", "LOCATION": "org.traccar.protocol.Gl200TextProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_267371558-268530427\\/.\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/\\/src\\/\\/variant-2_f\\/org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_267371558-268530427\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/src\\/default\\/org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java", "LINE": "615", "MP_RANKING": "79", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "5", "VALIDATION": "|true|0|275|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_267371558-268530427\\/.\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "267371558-268530427", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 02:08:20.584428", "repair_begin": "2018-12-27 02:07:30.903524", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java\\n@@ -614,7 +614,7 @@\\n \\t\\t\\t\\tfor (int i = 1; i <= deviceCount; i++) {\\n \\t\\t\\t\\t\\tindex++;\\n \\t\\t\\t\\t\\tindex++;\\n-\\t\\t\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_TEMP) + i), ((java.lang.Short.parseShort(data[(index++)], 16)) * 0.0625));\\n+\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "position.set(((org.traccar.model.Position.PREFIX_TEMP) + i), ((java.lang.Short.parseShort(data[(index++)], 16)) * 0.0625))", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.protocol.Gl200TextProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_267371558-268530427\\/.\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/\\/src\\/\\/variant-34_f\\/org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_267371558-268530427\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/src\\/default\\/org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java", "LINE": "617", "MP_RANKING": "51", "SUSPICIOUNESS": "1"}], "GENERATION": "17", "VARIANT_ID": "34", "TIME": "23", "VALIDATION": "|true|0|275|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_267371558-268530427\\/.\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/\\/bin\\/\\/variant-34"}]}}, {"bug_id": "267371558-268530427", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:04:16.315173", "repair_begin": "2018-12-28 00:03:08.947501", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java\\n@@ -607,7 +607,7 @@\\n \\n \\t\\tint index = 0;\\n \\t\\tjava.lang.String[] data = parser.next().split(\\\",\\\");\\n-\\t\\tif ((data.length) > 1) {\\n+\\t\\tif (false) {\\n \\t\\t\\tint deviceType = java.lang.Integer.parseInt(data[(index++)]);\\n \\t\\t\\tif (deviceType == 2) {\\n \\t\\t\\t\\tint deviceCount = java.lang.Integer.parseInt(data[(index++)]);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((data.length) > 1) {\\n\\tint deviceType = java.lang.Integer.parseInt(data[(index++)]);\\n\\tif (deviceType == 2) {\\n\\t\\tint deviceCount = java.lang.Integer.parseInt(data[(index++)]);\\n\\t\\tfor (int i = 1; i <= deviceCount; i++) {\\n\\t\\t\\tindex++;\\n\\t\\t\\tindex++;\\n\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_TEMP) + i), ((java.lang.Short.parseShort(data[(index++)], 16)) * 0.0625));\\n\\t\\t}\\n\\t}\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tint deviceType = java.lang.Integer.parseInt(data[(index++)]);\\n\\tif (deviceType == 2) {\\n\\t\\tint deviceCount = java.lang.Integer.parseInt(data[(index++)]);\\n\\t\\tfor (int i = 1; i <= deviceCount; i++) {\\n\\t\\t\\tindex++;\\n\\t\\t\\tindex++;\\n\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_TEMP) + i), ((java.lang.Short.parseShort(data[(index++)], 16)) * 0.0625));\\n\\t\\t}\\n\\t}\\n}", "LOCATION": "org.traccar.protocol.Gl200TextProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_267371558-268530427\\/.\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/\\/src\\/\\/variant-50_f\\/org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_267371558-268530427\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/src\\/default\\/org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java", "LINE": "610", "MP_RANKING": "44", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "50", "TIME": "48", "VALIDATION": "|true|0|275|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_267371558-268530427\\/.\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/\\/bin\\/\\/variant-50"}]}}, {"bug_id": "267371558-268530427", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 09:09:50.240890", "repair_begin": "2018-12-27 09:09:09.141869", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java\\n@@ -607,7 +607,7 @@\\n \\n \\t\\tint index = 0;\\n \\t\\tjava.lang.String[] data = parser.next().split(\\\",\\\");\\n-\\t\\tif ((data.length) > 1) {\\n+\\t\\tif ((data.length) < 1) {\\n \\t\\t\\tint deviceType = java.lang.Integer.parseInt(data[(index++)]);\\n \\t\\t\\tif (deviceType == 2) {\\n \\t\\t\\t\\tint deviceCount = java.lang.Integer.parseInt(data[(index++)]);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(data.length) > 1", "PATCH_HUNK_CODE": "(data.length) < 1", "LOCATION": "org.traccar.protocol.Gl200TextProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_267371558-268530427\\/.\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/\\/src\\/\\/variant-18_f\\/org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_267371558-268530427\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/src\\/default\\/org\\/traccar\\/protocol\\/Gl200TextProtocolDecoder.java", "LINE": "610", "MP_RANKING": "7", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "18", "TIME": "16", "VALIDATION": "|true|0|275|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_267371558-268530427\\/.\\/output_astor\\/AstorMain-traccar-traccar-267371558-268530427\\/\\/bin\\/\\/variant-18"}]}}, {"bug_id": "269449386-269490884", "tool": "ARJA", "nb_patch": 1030, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-26 19:29:12.130944", "repair_begin": "2018-12-26 19:00:40.013508", "patches": [{"edits": [{"path": "src/org/traccar/protocol/Gt06ProtocolDecoder.java", "line": 184, "faulty": "if (length > 0) {\n  buf.skipBytes(length - 12);\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_traccar-traccar_269449386-269490884/src/org/traccar/protocol/Gt06ProtocolDecoder.java\t2018-12-26 12:59:55.417117909 -0500\n+++ /tmp/Arja_Bears_traccar-traccar_269449386-269490884/patches_7puj/Patch_427/patched/tmp/Arja_Bears_traccar-traccar_269449386-269490884/src/org/traccar/protocol/Gt06ProtocolDecoder.java\t2018-12-26 13:05:37.164494770 -0500\n@@ -181,10 +181,6 @@\n             position.set(Position.KEY_IGNITION, BitUtil.check(flags, 15));\n         }\n \n-        if (length > 0) {\n-            buf.skipBytes(length - 12); // skip reserved\n-        }\n-\n         return true;\n     }\n \n\n\n"}]}}, {"bug_id": "269449386-269490884", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:19:30.906400", "repair_begin": "2018-12-28 00:18:37.542325", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n@@ -181,8 +181,8 @@\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(flags, 15));\\n \\t\\t}\\n \\n-\\t\\tif (length > 0) {\\n-\\t\\t\\tbuf.skipBytes((length - 12));\\n+\\t\\tif (length > 0) { \\t\\t\\tposition.setLatitude(latitude);\\n+\\n \\t\\t}\\n \\n \\t\\treturn true;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "buf.skipBytes((length - 12))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "position.setLatitude(latitude)", "INGREDIENT_PARENT": "_Position_0.setLatitude(_double_1)", "LOCATION": "org.traccar.protocol.Gt06ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_269449386-269490884\\/.\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/\\/src\\/\\/variant-40_f\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_269449386-269490884\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/src\\/default\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "LINE": "185", "MP_RANKING": "73", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "20", "VARIANT_ID": "40", "TIME": "27", "VALIDATION": "|true|0|275|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_269449386-269490884\\/.\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/\\/bin\\/\\/variant-40"}]}}, {"bug_id": "269449386-269490884", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 02:13:54.501249", "repair_begin": "2018-12-27 02:07:07.129455", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n@@ -182,364 +182,364 @@\\n \\t\\t}\\n \\n \\t\\tif (length > 0) {\\n-\\t\\t\\tbuf.skipBytes((length - 12));\\n-\\t\\t}\\n \\n-\\t\\treturn true;\\n-\\t}\\n \\n-\\tprivate boolean decodeLbs(org.traccar.model.Position position, org.jboss.netty.buffer.ChannelBuffer buf, boolean hasLength) {\\n \\n-\\t\\tint length = 0;\\n-\\t\\tif (hasLength) {\\n-\\t\\t\\tlength = buf.readUnsignedByte();\\n-\\t\\t\\tif (length == 0) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n \\n-\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n-\\t\\tbuf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedMedium())));\\n \\n-\\t\\tif (length > 0) {\\n-\\t\\t\\tbuf.skipBytes((length - 8));\\n-\\t\\t}\\n \\n-\\t\\treturn true;\\n-\\t}\\n \\n-\\tprivate boolean decodeStatus(org.traccar.model.Position position, org.jboss.netty.buffer.ChannelBuffer buf) {\\n \\n-\\t\\tint status = buf.readUnsignedByte();\\n \\n-\\t\\tposition.set(org.traccar.model.Position.KEY_STATUS, status);\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(status, 1));\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_CHARGE, org.traccar.helper.BitUtil.check(status, 2));\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_BLOCKED, org.traccar.helper.BitUtil.check(status, 7));\\n-\\n-\\t\\tswitch (org.traccar.helper.BitUtil.between(status, 3, 6)) {\\n-\\t\\t\\tcase 1 :\\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, org.traccar.model.Position.ALARM_SHOCK);\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase 2 :\\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, org.traccar.model.Position.ALARM_POWER_CUT);\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase 3 :\\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, org.traccar.model.Position.ALARM_LOW_BATTERY);\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase 4 :\\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, org.traccar.model.Position.ALARM_SOS);\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tdefault :\\n-\\t\\t\\t\\tbreak;}\\n-\\n-\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, buf.readUnsignedByte());\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_RSSI, buf.readUnsignedByte());\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\\n \\n-\\t\\treturn true;\\n-\\t}\\n \\n-\\tprivate java.lang.String decodeAlarm(short value) {\\n-\\t\\tswitch (value) {\\n-\\t\\t\\tcase 1 :\\n-\\t\\t\\t\\treturn org.traccar.model.Position.ALARM_SOS;\\n-\\t\\t\\tcase 2 :\\n-\\t\\t\\t\\treturn org.traccar.model.Position.ALARM_POWER_CUT;\\n-\\t\\t\\tcase 3 :\\n-\\t\\t\\tcase 9 :\\n-\\t\\t\\t\\treturn org.traccar.model.Position.ALARM_VIBRATION;\\n-\\t\\t\\tcase 4 :\\n-\\t\\t\\t\\treturn org.traccar.model.Position.ALARM_GEOFENCE_ENTER;\\n-\\t\\t\\tcase 5 :\\n-\\t\\t\\t\\treturn org.traccar.model.Position.ALARM_GEOFENCE_EXIT;\\n-\\t\\t\\tcase 6 :\\n-\\t\\t\\t\\treturn org.traccar.model.Position.ALARM_OVERSPEED;\\n-\\t\\t\\tcase 14 :\\n-\\t\\t\\tcase 15 :\\n-\\t\\t\\t\\treturn org.traccar.model.Position.ALARM_LOW_BATTERY;\\n-\\t\\t\\tcase 17 :\\n-\\t\\t\\t\\treturn org.traccar.model.Position.ALARM_POWER_OFF;\\n-\\t\\t\\tdefault :\\n-\\t\\t\\t\\treturn null;}\\n \\n-\\t}\\n \\n-\\tprivate static final java.util.regex.Pattern PATTERN_FUEL = new org.traccar.helper.PatternBuilder().text(\\n-\\t\\\"!AIOIL,\\\").number(\\n-\\t\\\"d+,\\\").number(\\n-\\t\\\"d+.d+,\\\").number(\\n-\\t\\\"(d+.d+),\\\").expression(\\n-\\t\\\"[^,]+,\\\").number(\\n-\\t\\\"dd\\\").number(\\n-\\t\\\"d\\\").number(\\n-\\t\\\"d,\\\").number(\\n-\\t\\\"(d+.d+),\\\").expression(\\n-\\t\\\"[01],\\\").number(\\n-\\t\\\"d+,\\\").number(\\n-\\t\\\"xx\\\").compile();\\n-\\n-\\n-\\tprivate org.traccar.model.Position decodeFuelData(org.traccar.model.Position position, java.lang.String sentence) {\\n-\\t\\torg.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.Gt06ProtocolDecoder.PATTERN_FUEL, sentence);\\n-\\t\\tif (!(parser.matches())) {\\n-\\t\\t\\treturn null;\\n-\\t\\t}\\n \\n-\\t\\tposition.set(((org.traccar.model.Position.PREFIX_TEMP) + 1), parser.nextDouble(0));\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\\n \\n-\\t\\treturn position;\\n-\\t}\\n \\n-\\tprivate static final java.util.regex.Pattern PATTERN_LOCATION = new org.traccar.helper.PatternBuilder().text(\\n-\\t\\\"Current position!\\\").number(\\n-\\t\\\"Lat:([NS])(d+.d+),\\\").number(\\n-\\t\\\"Lon:([EW])(d+.d+),\\\").text(\\n-\\t\\\"Course:\\\").number(\\\"(d+.d+),\\\").text(\\n-\\t\\\"Speed:\\\").number(\\\"(d+.d+),\\\").text(\\n-\\t\\\"DateTime:\\\").number(\\n-\\t\\\"(dddd)-(dd)-(dd)  \\\").number(\\n-\\t\\\"(dd):(dd):(dd)\\\").compile();\\n \\n \\n-\\tprivate org.traccar.model.Position decodeLocationString(org.traccar.model.Position position, java.lang.String sentence) {\\n-\\t\\torg.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.Gt06ProtocolDecoder.PATTERN_LOCATION, sentence);\\n-\\t\\tif (!(parser.matches())) {\\n-\\t\\t\\treturn null;\\n-\\t\\t}\\n \\n-\\t\\tposition.setValid(true);\\n-\\t\\tposition.setLatitude(parser.nextCoordinate(org.traccar.helper.Parser.CoordinateFormat.HEM_DEG));\\n-\\t\\tposition.setLongitude(parser.nextCoordinate(org.traccar.helper.Parser.CoordinateFormat.HEM_DEG));\\n-\\t\\tposition.setCourse(parser.nextDouble());\\n-\\t\\tposition.setSpeed(parser.nextDouble());\\n-\\t\\tposition.setTime(parser.nextDateTime(org.traccar.helper.Parser.DateTimeFormat.YMD_HMS));\\n \\n-\\t\\treturn position;\\n-\\t}\\n \\n-\\tprivate java.lang.Object decodeBasic(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, org.jboss.netty.buffer.ChannelBuffer buf) throws java.lang.Exception {\\n \\n-\\t\\tint length = buf.readUnsignedByte();\\n-\\t\\tint dataLength = length - 5;\\n-\\t\\tint type = buf.readUnsignedByte();\\n-\\n-\\t\\torg.traccar.DeviceSession deviceSession = null;\\n-\\t\\tif (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LOGIN)) {\\n-\\t\\t\\tdeviceSession = getDeviceSession(channel, remoteAddress);\\n-\\t\\t\\tif (deviceSession == null) {\\n-\\t\\t\\t\\treturn null;\\n-\\t\\t\\t}\\n-\\t\\t}\\n \\n-\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LOGIN)) {\\n \\n-\\t\\t\\tjava.lang.String imei = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(8)).substring(1);\\n-\\t\\t\\tbuf.readUnsignedShort();\\n \\n-\\t\\t\\tif (dataLength > 10) {\\n-\\t\\t\\t\\tint extensionBits = buf.readUnsignedShort();\\n-\\t\\t\\t\\tint hours = (extensionBits >> 4) \\/ 100;\\n-\\t\\t\\t\\tint minutes = (extensionBits >> 4) % 100;\\n-\\t\\t\\t\\tint offset = ((hours * 60) + minutes) * 60;\\n-\\t\\t\\t\\tif ((extensionBits & 8) != 0) {\\n-\\t\\t\\t\\t\\toffset = -offset;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tif (!(forceTimeZone)) {\\n-\\t\\t\\t\\t\\ttimeZone.setRawOffset((offset * 1000));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tif ((getDeviceSession(channel, remoteAddress, imei)) != null) {\\n-\\t\\t\\t\\tsendResponse(channel, false, type);\\n-\\t\\t\\t}\\n \\n-\\t\\t}else \\t\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_X1_GPS)) {\\n \\n-\\t\\t\\t\\torg.traccar.model.Position position = new org.traccar.model.Position();\\n-\\t\\t\\t\\tposition.setDeviceId(deviceSession.getDeviceId());\\n-\\t\\t\\t\\tposition.setProtocol(getProtocolName());\\n \\n-\\t\\t\\t\\tbuf.readUnsignedInt();\\n \\n-\\t\\t\\t\\tdecodeGps(position, buf, false);\\n \\n-\\t\\t\\t\\tbuf.readUnsignedShort();\\n \\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, buf.readUnsignedInt());\\n \\n-\\t\\t\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n-\\t\\t\\t\\tbuf.readUnsignedShort(), buf.readUnsignedByte(), \\n-\\t\\t\\t\\tbuf.readUnsignedShort(), buf.readUnsignedInt())));\\n \\n-\\t\\t\\t\\treturn position;\\n \\n-\\t\\t\\t}else \\t\\t\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_X1_PHOTO_INFO)) {\\n \\n-\\t\\t\\t\\t\\tbuf.skipBytes(6);\\n-\\t\\t\\t\\t\\tbuf.readUnsignedByte();\\n-\\t\\t\\t\\t\\tbuf.readUnsignedInt();\\n-\\t\\t\\t\\t\\tbuf.readUnsignedInt();\\n-\\t\\t\\t\\t\\tbuf.readUnsignedByte();\\n-\\t\\t\\t\\t\\tbuf.readUnsignedByte();\\n-\\t\\t\\t\\t\\tbuf.readUnsignedByte();\\n-\\n-\\t\\t\\t\\t\\torg.jboss.netty.buffer.ChannelBuffer photo = org.jboss.netty.buffer.ChannelBuffers.buffer(buf.readInt());\\n-\\t\\t\\t\\t\\tint pictureId = buf.readInt();\\n-\\t\\t\\t\\t\\tphotos.put(pictureId, photo);\\n-\\t\\t\\t\\t\\tsendPhotoRequest(channel, pictureId);\\n \\n-\\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\treturn decodeBasicOther(channel, buf, deviceSession, type, dataLength);\\n \\n-\\t\\t\\t\\t}\\n \\n-\\t\\treturn null;\\n-\\t}\\n \\n-\\tprivate java.lang.Object decodeBasicOther(org.jboss.netty.channel.Channel channel, org.jboss.netty.buffer.ChannelBuffer buf, \\n-\\torg.traccar.DeviceSession deviceSession, int type, int dataLength) throws java.lang.Exception {\\n \\n-\\t\\torg.traccar.model.Position position = new org.traccar.model.Position();\\n-\\t\\tposition.setDeviceId(deviceSession.getDeviceId());\\n-\\t\\tposition.setProtocol(getProtocolName());\\n-\\n-\\t\\tif (((type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) || (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_EXTEND))) || (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_WIFI))) {\\n-\\n-\\t\\t\\torg.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder(timeZone).setDate(\\n-\\t\\t\\tbuf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()).setTime(\\n-\\t\\t\\tbuf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\\n-\\n-\\t\\t\\tgetLastLocation(position, dateBuilder.getDate());\\n-\\n-\\t\\t\\tint mcc = buf.readUnsignedShort();\\n-\\t\\t\\tint mnc = buf.readUnsignedByte();\\n-\\t\\t\\torg.traccar.model.Network network = new org.traccar.model.Network();\\n-\\t\\t\\tfor (int i = 0; i < 7; i++) {\\n-\\t\\t\\t\\tint lac = buf.readUnsignedShort();\\n-\\t\\t\\t\\tint cid = buf.readUnsignedMedium();\\n-\\t\\t\\t\\tint rssi = -(buf.readUnsignedByte());\\n-\\t\\t\\t\\tif (lac > 0) {\\n-\\t\\t\\t\\t\\tnetwork.addCellTower(org.traccar.model.CellTower.from(mcc, mnc, lac, cid, rssi));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tbuf.readUnsignedByte();\\n \\n-\\t\\t\\tif (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) {\\n-\\t\\t\\t\\tint wifiCount = buf.readUnsignedByte();\\n-\\t\\t\\t\\tfor (int i = 0; i < wifiCount; i++) {\\n-\\t\\t\\t\\t\\tjava.lang.String mac = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(6)).replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n-\\t\\t\\t\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(\\n-\\t\\t\\t\\t\\tmac.substring(0, ((mac.length()) - 1)), buf.readUnsignedByte()));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tposition.setNetwork(network);\\n \\n-\\t\\t}else \\t\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_STRING)) {\\n \\n-\\t\\t\\t\\tgetLastLocation(position, null);\\n \\n-\\t\\t\\t\\tint commandLength = buf.readUnsignedByte();\\n \\n-\\t\\t\\t\\tif (commandLength > 0) {\\n-\\t\\t\\t\\t\\tbuf.readUnsignedByte();\\n-\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RESULT, \\n-\\t\\t\\t\\t\\tbuf.readBytes((commandLength - 1)).toString(java.nio.charset.StandardCharsets.US_ASCII));\\n-\\t\\t\\t\\t}\\n \\n-\\t\\t\\t}else \\t\\t\\t\\tif (org.traccar.protocol.Gt06ProtocolDecoder.isSupported(type)) {\\n \\n-\\t\\t\\t\\t\\tif (org.traccar.protocol.Gt06ProtocolDecoder.hasGps(type)) {\\n-\\t\\t\\t\\t\\t\\tdecodeGps(position, buf, false);\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tgetLastLocation(position, null);\\n-\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\tif (org.traccar.protocol.Gt06ProtocolDecoder.hasLbs(type)) {\\n-\\t\\t\\t\\t\\t\\tdecodeLbs(position, buf, org.traccar.protocol.Gt06ProtocolDecoder.hasStatus(type));\\n-\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\tif (org.traccar.protocol.Gt06ProtocolDecoder.hasStatus(type)) {\\n-\\t\\t\\t\\t\\t\\tdecodeStatus(position, buf);\\n-\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\tif ((type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_GPS_LBS_1)) && ((buf.readableBytes()) >= (4 + 6))) {\\n-\\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, buf.readUnsignedInt());\\n-\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\tif ((type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_GPS_LBS_2)) && ((buf.readableBytes()) >= (3 + 6))) {\\n-\\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, ((buf.readUnsignedByte()) > 0));\\n-\\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_EVENT, buf.readUnsignedByte());\\n-\\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ARCHIVE, ((buf.readUnsignedByte()) > 0));\\n-\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\tbuf.skipBytes(dataLength);\\n-\\t\\t\\t\\t\\tif (((type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_COMMAND_0)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_COMMAND_1))) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_COMMAND_2))) {\\n-\\t\\t\\t\\t\\t\\tsendResponse(channel, false, type);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\treturn null;\\n \\n-\\t\\t\\t\\t}\\n \\n-\\t\\tsendResponse(channel, false, type);\\n \\n-\\t\\treturn position;\\n-\\t}\\n \\n-\\tprivate java.lang.Object decodeExtended(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, org.jboss.netty.buffer.ChannelBuffer buf) throws java.lang.Exception {\\n \\n-\\t\\torg.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\\n-\\t\\tif (deviceSession == null) {\\n-\\t\\t\\treturn null;\\n-\\t\\t}\\n \\n-\\t\\torg.traccar.model.Position position = new org.traccar.model.Position();\\n-\\t\\tposition.setDeviceId(deviceSession.getDeviceId());\\n-\\t\\tposition.setProtocol(getProtocolName());\\n-\\n-\\t\\tbuf.readUnsignedShort();\\n-\\t\\tint type = buf.readUnsignedByte();\\n-\\n-\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_STRING_INFO)) {\\n-\\n-\\t\\t\\tbuf.readUnsignedInt();\\n-\\t\\t\\tjava.lang.String data;\\n-\\t\\t\\tif ((buf.readUnsignedByte()) == 1) {\\n-\\t\\t\\t\\tdata = buf.readBytes(((buf.readableBytes()) - 6)).toString(java.nio.charset.StandardCharsets.US_ASCII);\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tdata = buf.readBytes(((buf.readableBytes()) - 6)).toString(java.nio.charset.StandardCharsets.UTF_16BE);\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tif ((decodeLocationString(position, data)) == null) {\\n-\\t\\t\\t\\tgetLastLocation(position, null);\\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RESULT, data);\\n-\\t\\t\\t}\\n \\n-\\t\\t\\treturn position;\\n \\n-\\t\\t}else \\t\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_INFO)) {\\n \\n-\\t\\t\\t\\tint subType = buf.readUnsignedByte();\\n \\n-\\t\\t\\t\\tgetLastLocation(position, null);\\n \\n-\\t\\t\\t\\tif (subType == 0) {\\n \\n-\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_POWER, ((buf.readUnsignedShort()) * 0.01));\\n-\\t\\t\\t\\t\\treturn position;\\n \\n-\\t\\t\\t\\t}else \\t\\t\\t\\t\\tif (subType == 5) {\\n \\n-\\t\\t\\t\\t\\t\\tint flags = buf.readUnsignedByte();\\n-\\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_DOOR, org.traccar.helper.BitUtil.check(flags, 0));\\n-\\t\\t\\t\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_IO) + 1), org.traccar.helper.BitUtil.check(flags, 2));\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_IO) + 1), org.traccar.helper.BitUtil.check(flags, 2));} \\t\\treturn true;} \\tprivate boolean decodeLbs(org.traccar.model.Position position, org.jboss.netty.buffer.ChannelBuffer buf, boolean hasLength) { \\t\\tint length = 0; \\t\\tif (hasLength) { \\t\\t\\tlength = buf.readUnsignedByte(); \\t\\t\\tif (length == 0) { \\t\\t\\t\\treturn false;}} \\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedMedium()))); \\t\\tif (length > 0) { \\t\\t\\tbuf.skipBytes((length - 8));} \\t\\treturn true;} \\tprivate boolean decodeStatus(org.traccar.model.Position position, org.jboss.netty.buffer.ChannelBuffer buf) { \\t\\tint status = buf.readUnsignedByte(); \\t\\tposition.set(org.traccar.model.Position.KEY_STATUS, status); \\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(status, 1)); \\t\\tposition.set(org.traccar.model.Position.KEY_CHARGE, org.traccar.helper.BitUtil.check(status, 2)); \\t\\tposition.set(org.traccar.model.Position.KEY_BLOCKED, org.traccar.helper.BitUtil.check(status, 7)); \\t\\tswitch (org.traccar.helper.BitUtil.between(status, 3, 6)) { \\t\\t\\tcase 1 : \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, org.traccar.model.Position.ALARM_SHOCK); \\t\\t\\t\\tbreak; \\t\\t\\tcase 2 : \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, org.traccar.model.Position.ALARM_POWER_CUT); \\t\\t\\t\\tbreak; \\t\\t\\tcase 3 : \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, org.traccar.model.Position.ALARM_LOW_BATTERY); \\t\\t\\t\\tbreak; \\t\\t\\tcase 4 : \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, org.traccar.model.Position.ALARM_SOS); \\t\\t\\t\\tbreak; \\t\\t\\tdefault : \\t\\t\\t\\tbreak;} \\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, buf.readUnsignedByte()); \\t\\tposition.set(org.traccar.model.Position.KEY_RSSI, buf.readUnsignedByte()); \\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte())); \\t\\treturn true;} \\tprivate java.lang.String decodeAlarm(short value) { \\t\\tswitch (value) { \\t\\t\\tcase 1 : \\t\\t\\t\\treturn org.traccar.model.Position.ALARM_SOS; \\t\\t\\tcase 2 : \\t\\t\\t\\treturn org.traccar.model.Position.ALARM_POWER_CUT; \\t\\t\\tcase 3 : \\t\\t\\tcase 9 : \\t\\t\\t\\treturn org.traccar.model.Position.ALARM_VIBRATION; \\t\\t\\tcase 4 : \\t\\t\\t\\treturn org.traccar.model.Position.ALARM_GEOFENCE_ENTER; \\t\\t\\tcase 5 : \\t\\t\\t\\treturn org.traccar.model.Position.ALARM_GEOFENCE_EXIT; \\t\\t\\tcase 6 : \\t\\t\\t\\treturn org.traccar.model.Position.ALARM_OVERSPEED; \\t\\t\\tcase 14 : \\t\\t\\tcase 15 : \\t\\t\\t\\treturn org.traccar.model.Position.ALARM_LOW_BATTERY; \\t\\t\\tcase 17 : \\t\\t\\t\\treturn org.traccar.model.Position.ALARM_POWER_OFF; \\t\\t\\tdefault : \\t\\t\\t\\treturn null;}} \\tprivate static final java.util.regex.Pattern PATTERN_FUEL = new org.traccar.helper.PatternBuilder().text(\\\"!AIOIL,\\\").number(\\\"d+,\\\").number(\\\"d+.d+,\\\").number(\\\"(d+.d+),\\\").expression(\\\"[^,]+,\\\").number(\\\"dd\\\").number(\\\"d\\\").number(\\\"d,\\\").number(\\\"(d+.d+),\\\").expression(\\\"[01],\\\").number(\\\"d+,\\\").number(\\\"xx\\\").compile(); \\tprivate org.traccar.model.Position decodeFuelData(org.traccar.model.Position position, java.lang.String sentence) { \\t\\torg.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.Gt06ProtocolDecoder.PATTERN_FUEL, sentence); \\t\\tif (!(parser.matches())) { \\t\\t\\treturn null;} \\t\\tposition.set(((org.traccar.model.Position.PREFIX_TEMP) + 1), parser.nextDouble(0)); \\t\\tposition.set(org.traccar.model.Position.KEY_FUEL_LEVEL, parser.nextDouble(0)); \\t\\treturn position;} \\tprivate static final java.util.regex.Pattern PATTERN_LOCATION = new org.traccar.helper.PatternBuilder().text(\\\"Current position!\\\").number(\\\"Lat:([NS])(d+.d+),\\\").number(\\\"Lon:([EW])(d+.d+),\\\").text(\\\"Course:\\\").number(\\\"(d+.d+),\\\").text(\\\"Speed:\\\").number(\\\"(d+.d+),\\\").text(\\\"DateTime:\\\").number(\\\"(dddd)-(dd)-(dd)  \\\").number(\\\"(dd):(dd):(dd)\\\").compile(); \\tprivate org.traccar.model.Position decodeLocationString(org.traccar.model.Position position, java.lang.String sentence) { \\t\\torg.traccar.helper.Parser parser = new org.traccar.helper.Parser(org.traccar.protocol.Gt06ProtocolDecoder.PATTERN_LOCATION, sentence); \\t\\tif (!(parser.matches())) { \\t\\t\\treturn null;} \\t\\tposition.setValid(true); \\t\\tposition.setLatitude(parser.nextCoordinate(org.traccar.helper.Parser.CoordinateFormat.HEM_DEG)); \\t\\tposition.setLongitude(parser.nextCoordinate(org.traccar.helper.Parser.CoordinateFormat.HEM_DEG)); \\t\\tposition.setCourse(parser.nextDouble()); \\t\\tposition.setSpeed(parser.nextDouble()); \\t\\tposition.setTime(parser.nextDateTime(org.traccar.helper.Parser.DateTimeFormat.YMD_HMS)); \\t\\treturn position;} \\tprivate java.lang.Object decodeBasic(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, org.jboss.netty.buffer.ChannelBuffer buf) throws java.lang.Exception { \\t\\tint length = buf.readUnsignedByte(); \\t\\tint dataLength = length - 5; \\t\\tint type = buf.readUnsignedByte(); \\t\\torg.traccar.DeviceSession deviceSession = null; \\t\\tif (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LOGIN)) { \\t\\t\\tdeviceSession = getDeviceSession(channel, remoteAddress); \\t\\t\\tif (deviceSession == null) { \\t\\t\\t\\treturn null;}} \\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LOGIN)) { \\t\\t\\tjava.lang.String imei = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(8)).substring(1); \\t\\t\\tbuf.readUnsignedShort(); \\t\\t\\tif (dataLength > 10) { \\t\\t\\t\\tint extensionBits = buf.readUnsignedShort(); \\t\\t\\t\\tint hours = (extensionBits >> 4) \\/ 100; \\t\\t\\t\\tint minutes = (extensionBits >> 4) % 100; \\t\\t\\t\\tint offset = ((hours * 60) + minutes) * 60; \\t\\t\\t\\tif ((extensionBits & 8) != 0) { \\t\\t\\t\\t\\toffset = -offset;} \\t\\t\\t\\tif (!(forceTimeZone)) { \\t\\t\\t\\t\\ttimeZone.setRawOffset((offset * 1000));}} \\t\\t\\tif ((getDeviceSession(channel, remoteAddress, imei)) != null) { \\t\\t\\t\\tsendResponse(channel, false, type);}}else \\t\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_X1_GPS)) { \\t\\t\\t\\torg.traccar.model.Position position = new org.traccar.model.Position(); \\t\\t\\t\\tposition.setDeviceId(deviceSession.getDeviceId()); \\t\\t\\t\\tposition.setProtocol(getProtocolName()); \\t\\t\\t\\tbuf.readUnsignedInt(); \\t\\t\\t\\tdecodeGps(position, buf, false); \\t\\t\\t\\tbuf.readUnsignedShort(); \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, buf.readUnsignedInt()); \\t\\t\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt()))); \\t\\t\\t\\treturn position;}else \\t\\t\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_X1_PHOTO_INFO)) { \\t\\t\\t\\t\\tbuf.skipBytes(6); \\t\\t\\t\\t\\tbuf.readUnsignedByte(); \\t\\t\\t\\t\\tbuf.readUnsignedInt(); \\t\\t\\t\\t\\tbuf.readUnsignedInt(); \\t\\t\\t\\t\\tbuf.readUnsignedByte(); \\t\\t\\t\\t\\tbuf.readUnsignedByte(); \\t\\t\\t\\t\\tbuf.readUnsignedByte(); \\t\\t\\t\\t\\torg.jboss.netty.buffer.ChannelBuffer photo = org.jboss.netty.buffer.ChannelBuffers.buffer(buf.readInt()); \\t\\t\\t\\t\\tint pictureId = buf.readInt(); \\t\\t\\t\\t\\tphotos.put(pictureId, photo); \\t\\t\\t\\t\\tsendPhotoRequest(channel, pictureId);}else { \\t\\t\\t\\t\\treturn decodeBasicOther(channel, buf, deviceSession, type, dataLength);} \\t\\treturn null;} \\tprivate java.lang.Object decodeBasicOther(org.jboss.netty.channel.Channel channel, org.jboss.netty.buffer.ChannelBuffer buf, org.traccar.DeviceSession deviceSession, int type, int dataLength) throws java.lang.Exception { \\t\\torg.traccar.model.Position position = new org.traccar.model.Position(); \\t\\tposition.setDeviceId(deviceSession.getDeviceId()); \\t\\tposition.setProtocol(getProtocolName()); \\t\\tif (((type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) || (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_EXTEND))) || (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_WIFI))) { \\t\\t\\torg.traccar.helper.DateBuilder dateBuilder = new org.traccar.helper.DateBuilder(timeZone).setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()).setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()); \\t\\t\\tgetLastLocation(position, dateBuilder.getDate()); \\t\\t\\tint mcc = buf.readUnsignedShort(); \\t\\t\\tint mnc = buf.readUnsignedByte(); \\t\\t\\torg.traccar.model.Network network = new org.traccar.model.Network(); \\t\\t\\tfor (int i = 0; i < 7; i++) { \\t\\t\\t\\tint lac = buf.readUnsignedShort(); \\t\\t\\t\\tint cid = buf.readUnsignedMedium(); \\t\\t\\t\\tint rssi = -(buf.readUnsignedByte()); \\t\\t\\t\\tif (lac > 0) { \\t\\t\\t\\t\\tnetwork.addCellTower(org.traccar.model.CellTower.from(mcc, mnc, lac, cid, rssi));}} \\t\\t\\tbuf.readUnsignedByte(); \\t\\t\\tif (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) { \\t\\t\\t\\tint wifiCount = buf.readUnsignedByte(); \\t\\t\\t\\tfor (int i = 0; i < wifiCount; i++) { \\t\\t\\t\\t\\tjava.lang.String mac = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(6)).replaceAll(\\\"(..)\\\", \\\"$1:\\\"); \\t\\t\\t\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(mac.substring(0, ((mac.length()) - 1)), buf.readUnsignedByte()));}} \\t\\t\\tposition.setNetwork(network);}else \\t\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_STRING)) { \\t\\t\\t\\tgetLastLocation(position, null); \\t\\t\\t\\tint commandLength = buf.readUnsignedByte(); \\t\\t\\t\\tif (commandLength > 0) { \\t\\t\\t\\t\\tbuf.readUnsignedByte(); \\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RESULT, buf.readBytes((commandLength - 1)).toString(java.nio.charset.StandardCharsets.US_ASCII));}}else \\t\\t\\t\\tif (org.traccar.protocol.Gt06ProtocolDecoder.isSupported(type)) { \\t\\t\\t\\t\\tif (org.traccar.protocol.Gt06ProtocolDecoder.hasGps(type)) { \\t\\t\\t\\t\\t\\tdecodeGps(position, buf, false);}else { \\t\\t\\t\\t\\t\\tgetLastLocation(position, null);} \\t\\t\\t\\t\\tif (org.traccar.protocol.Gt06ProtocolDecoder.hasLbs(type)) { \\t\\t\\t\\t\\t\\tdecodeLbs(position, buf, org.traccar.protocol.Gt06ProtocolDecoder.hasStatus(type));} \\t\\t\\t\\t\\tif (org.traccar.protocol.Gt06ProtocolDecoder.hasStatus(type)) { \\t\\t\\t\\t\\t\\tdecodeStatus(position, buf);} \\t\\t\\t\\t\\tif ((type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_GPS_LBS_1)) && ((buf.readableBytes()) >= (4 + 6))) { \\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, buf.readUnsignedInt());} \\t\\t\\t\\t\\tif ((type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_GPS_LBS_2)) && ((buf.readableBytes()) >= (3 + 6))) { \\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, ((buf.readUnsignedByte()) > 0)); \\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_EVENT, buf.readUnsignedByte()); \\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ARCHIVE, ((buf.readUnsignedByte()) > 0));}}else { \\t\\t\\t\\t\\tbuf.skipBytes(dataLength); \\t\\t\\t\\t\\tif (((type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_COMMAND_0)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_COMMAND_1))) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_COMMAND_2))) { \\t\\t\\t\\t\\t\\tsendResponse(channel, false, type);} \\t\\t\\t\\t\\treturn null;} \\t\\tsendResponse(channel, false, type); \\t\\treturn position;} \\tprivate java.lang.Object decodeExtended(org.jboss.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, org.jboss.netty.buffer.ChannelBuffer buf) throws java.lang.Exception { \\t\\torg.traccar.DeviceSession deviceSession = getDeviceSession(channel, remoteAddress); \\t\\tif (deviceSession == null) { \\t\\t\\treturn null;} \\t\\torg.traccar.model.Position position = new org.traccar.model.Position(); \\t\\tposition.setDeviceId(deviceSession.getDeviceId()); \\t\\tposition.setProtocol(getProtocolName()); \\t\\tbuf.readUnsignedShort(); \\t\\tint type = buf.readUnsignedByte(); \\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_STRING_INFO)) { \\t\\t\\tbuf.readUnsignedInt(); \\t\\t\\tjava.lang.String data; \\t\\t\\tif ((buf.readUnsignedByte()) == 1) { \\t\\t\\t\\tdata = buf.readBytes(((buf.readableBytes()) - 6)).toString(java.nio.charset.StandardCharsets.US_ASCII);}else { \\t\\t\\t\\tdata = buf.readBytes(((buf.readableBytes()) - 6)).toString(java.nio.charset.StandardCharsets.UTF_16BE);} \\t\\t\\tif ((decodeLocationString(position, data)) == null) { \\t\\t\\t\\tgetLastLocation(position, null); \\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RESULT, data);} \\t\\t\\treturn position;}else \\t\\t\\tif (type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_INFO)) { \\t\\t\\t\\tint subType = buf.readUnsignedByte(); \\t\\t\\t\\tgetLastLocation(position, null); \\t\\t\\t\\tif (subType == 0) { \\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_POWER, ((buf.readUnsignedShort()) * 0.01)); \\t\\t\\t\\t\\treturn position;}else \\t\\t\\t\\t\\tif (subType == 5) { \\t\\t\\t\\t\\t\\tint flags = buf.readUnsignedByte(); \\t\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_DOOR, org.traccar.helper.BitUtil.check(flags, 0)); \\t\\t\\t\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_IO) + 1), org.traccar.helper.BitUtil.check(flags, 2));\\n \\t\\t\\t\\t\\t\\treturn position;\\n \\n \\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\tif (subType == 13) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "buf.skipBytes((length - 12))", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "position.set(((org.traccar.model.Position.PREFIX_IO) + 1), org.traccar.helper.BitUtil.check(flags, 2))", "INGREDIENT_PARENT": "position.set(((org.traccar.model.Position.PREFIX_IO) + 1), org.traccar.helper.BitUtil.check(flags, 2))", "LOCATION": "org.traccar.protocol.Gt06ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_269449386-269490884\\/.\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/\\/src\\/\\/variant-764_f\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_269449386-269490884\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/src\\/default\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "LINE": "185", "MP_RANKING": "28", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "382", "VARIANT_ID": "764", "TIME": "374", "VALIDATION": "|true|0|275|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_269449386-269490884\\/.\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/\\/bin\\/\\/variant-764"}]}}, {"bug_id": "269449386-269490884", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:03:59.904681", "repair_begin": "2018-12-28 00:03:07.390549", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n@@ -181,7 +181,7 @@\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(flags, 15));\\n \\t\\t}\\n \\n-\\t\\tif (length > 0) {\\n+\\t\\tif (false) {\\n \\t\\t\\tbuf.skipBytes((length - 12));\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (length > 0) {\\n\\tbuf.skipBytes((length - 12));\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tbuf.skipBytes((length - 12));\\n}", "LOCATION": "org.traccar.protocol.Gt06ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_269449386-269490884\\/.\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/\\/src\\/\\/variant-33_f\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_269449386-269490884\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/src\\/default\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "LINE": "184", "MP_RANKING": "27", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "33", "TIME": "32", "VALIDATION": "|true|0|275|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_269449386-269490884\\/.\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/\\/bin\\/\\/variant-33"}]}}, {"bug_id": "269449386-269490884", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 09:08:37.035149", "repair_begin": "2018-12-27 09:07:44.634946", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n@@ -181,7 +181,7 @@\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(flags, 15));\\n \\t\\t}\\n \\n-\\t\\tif (length > 0) {\\n+\\t\\tif (length < 0) {\\n \\t\\t\\tbuf.skipBytes((length - 12));\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "length > 0", "PATCH_HUNK_CODE": "length < 0", "LOCATION": "org.traccar.protocol.Gt06ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_269449386-269490884\\/.\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/\\/src\\/\\/variant-30_f\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_269449386-269490884\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/src\\/default\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "LINE": "184", "MP_RANKING": "6", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "30", "TIME": "26", "VALIDATION": "|true|0|275|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_269449386-269490884\\/.\\/output_astor\\/AstorMain-traccar-traccar-269449386-269490884\\/\\/bin\\/\\/variant-30"}]}}, {"bug_id": "269449386-269490884", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 11:25:07.373032", "repair_begin": "2018-12-27 11:24:48.106998", "patches": [{"edits": [{"path": "src/org/traccar/protocol/Gt06ProtocolDecoder.java", "line": 184, "faulty": "if (length > 0) {\n  buf.skipBytes(length - 12);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bears_traccar-traccar_269449386-269490884/src/org/traccar/protocol/Gt06ProtocolDecoder.java\t2018-12-27 05:24:03.121192960 -0500\n+++ /tmp/Kali_Bears_traccar-traccar_269449386-269490884/patches_z7u0/Patch_2/patched/tmp/Kali_Bears_traccar-traccar_269449386-269490884/src/org/traccar/protocol/Gt06ProtocolDecoder.java\t2018-12-27 05:25:06.977196174 -0500\n@@ -181,7 +181,7 @@\n             position.set(Position.KEY_IGNITION, BitUtil.check(flags, 15));\n         }\n \n-        if (length > 0) {\n+        if (false) {\n             buf.skipBytes(length - 12); // skip reserved\n         }\n \n\n\n"}]}}, {"bug_id": "273118899-273136493", "tool": "ARJA", "nb_patch": 975, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-26 19:26:35.021936", "repair_begin": "2018-12-26 19:00:21.223082", "patches": [{"edits": [{"path": "src/org/traccar/protocol/EelinkProtocolDecoder.java", "line": 134, "faulty": "if (type == MSG_GPS) {\n  if (buf.readableBytes() >= 2) {\n    decodeStatus(position,buf.readUnsignedShort());\n  }\n  if (buf.readableBytes() >= 2 * 4) {\n    position.set(Position.KEY_BATTERY,buf.readUnsignedShort() * 0.001);\n    position.set(Position.KEY_RSSI,buf.readUnsignedShort());\n    position.set(Position.PREFIX_ADC + 1,buf.readUnsignedShort());\n    position.set(Position.PREFIX_ADC + 2,buf.readUnsignedShort());\n  }\n}\n else if (type == MSG_ALARM) {\n  position.set(Position.KEY_ALARM,decodeAlarm(buf.readUnsignedByte()));\n}\n else if (type == MSG_STATE) {\n  int statusType=buf.readUnsignedByte();\n  position.set(Position.KEY_EVENT,statusType);\n  if (statusType == 0x01 || statusType == 0x02 || statusType == 0x03) {\n    buf.readUnsignedInt();\n    decodeStatus(position,buf.readUnsignedShort());\n  }\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bears_traccar-traccar_273118899-273136493/src/org/traccar/protocol/EelinkProtocolDecoder.java\t2018-12-26 12:59:39.444574687 -0500\n+++ /tmp/Arja_Bears_traccar-traccar_273118899-273136493/patches_r2qe/Patch_367/patched/tmp/Arja_Bears_traccar-traccar_273118899-273136493/src/org/traccar/protocol/EelinkProtocolDecoder.java\t2018-12-26 13:04:25.484727398 -0500\n@@ -131,40 +131,6 @@\n \n         position.setValid((buf.readUnsignedByte() & 0x01) != 0);\n \n-        if (type == MSG_GPS) {\n-\n-            if (buf.readableBytes() >= 2) {\n-                decodeStatus(position, buf.readUnsignedShort());\n-            }\n-\n-            if (buf.readableBytes() >= 2 * 4) {\n-\n-                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n-\n-                position.set(Position.KEY_RSSI, buf.readUnsignedShort());\n-\n-                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n-                position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n-\n-            }\n-\n-        } else if (type == MSG_ALARM) {\n-\n-            position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n-\n-        } else if (type == MSG_STATE) {\n-\n-            int statusType = buf.readUnsignedByte();\n-\n-            position.set(Position.KEY_EVENT, statusType);\n-\n-            if (statusType == 0x01 || statusType == 0x02 || statusType == 0x03) {\n-                buf.readUnsignedInt(); // device time\n-                decodeStatus(position, buf.readUnsignedShort());\n-            }\n-\n-        }\n-\n         return position;\n     }\n \n\n\n"}]}}, {"bug_id": "273118899-273136493", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:16:27.377965", "repair_begin": "2018-12-28 00:16:01.148310", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java\\n@@ -158,60 +158,60 @@\\n \\n \\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_EVENT, statusType);\\n \\n-\\t\\t\\t\\t\\tif (((statusType == 1) || (statusType == 2)) || (statusType == 3)) {\\n-\\t\\t\\t\\t\\t\\tbuf.readUnsignedInt();\\n-\\t\\t\\t\\t\\t\\tdecodeStatus(position, buf.readUnsignedShort());\\n-\\t\\t\\t\\t\\t}\\n+\\t\\t\\t\\t\\tif ((\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n-\\t\\t\\t\\t}\\n \\n-\\t\\treturn position;\\n-\\t}\\n \\n-\\tprivate org.traccar.model.Position decodeNew(org.traccar.DeviceSession deviceSession, org.jboss.netty.buffer.ChannelBuffer buf, int index) {\\n \\n-\\t\\torg.traccar.model.Position position = new org.traccar.model.Position();\\n-\\t\\tposition.setDeviceId(deviceSession.getDeviceId());\\n-\\t\\tposition.setProtocol(getProtocolName());\\n \\n-\\t\\tposition.set(org.traccar.model.Position.KEY_INDEX, index);\\n \\n-\\t\\tposition.setTime(new java.util.Date(((buf.readUnsignedInt()) * 1000)));\\n \\n-\\t\\tint flags = buf.readUnsignedByte();\\n \\n-\\t\\tif (org.traccar.helper.BitUtil.check(flags, 0)) {\\n-\\t\\t\\tposition.setLatitude(((buf.readInt()) \\/ 1800000.0));\\n-\\t\\t\\tposition.setLongitude(((buf.readInt()) \\/ 1800000.0));\\n-\\t\\t\\tposition.setAltitude(buf.readShort());\\n-\\t\\t\\tposition.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\\n-\\t\\t\\tposition.setCourse(buf.readUnsignedShort());\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_SATELLITES, buf.readUnsignedByte());\\n-\\t\\t}\\n \\n-\\t\\tif (org.traccar.helper.BitUtil.check(flags, 1)) {\\n-\\t\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n-\\t\\t\\tbuf.readUnsignedShort(), buf.readUnsignedShort(), \\n-\\t\\t\\tbuf.readUnsignedShort(), buf.readUnsignedInt(), buf.readUnsignedByte())));\\n-\\t\\t}\\n \\n-\\t\\tif (org.traccar.helper.BitUtil.check(flags, 2)) {\\n-\\t\\t\\tbuf.skipBytes(7);\\n-\\t\\t}\\n \\n-\\t\\tif (org.traccar.helper.BitUtil.check(flags, 3)) {\\n-\\t\\t\\tbuf.skipBytes(7);\\n-\\t\\t}\\n \\n-\\t\\tif (org.traccar.helper.BitUtil.check(flags, 4)) {\\n-\\t\\t\\tbuf.skipBytes(7);\\n-\\t\\t}\\n \\n-\\t\\tif (org.traccar.helper.BitUtil.check(flags, 5)) {\\n-\\t\\t\\tbuf.skipBytes(7);\\n-\\t\\t}\\n \\n-\\t\\tif (org.traccar.helper.BitUtil.check(flags, 6)) {\\n+\\t\\t\\t\\t\\t(org.traccar.helper.BitUtil.check(type, 6)) || (statusType == 2)) || (statusType == 3)) { \\t\\t\\t\\t\\t\\tbuf.readUnsignedInt(); \\t\\t\\t\\t\\t\\tdecodeStatus(position, buf.readUnsignedShort());}} \\t\\treturn position;} \\tprivate org.traccar.model.Position decodeNew(org.traccar.DeviceSession deviceSession, org.jboss.netty.buffer.ChannelBuffer buf, int index) { \\t\\torg.traccar.model.Position position = new org.traccar.model.Position(); \\t\\tposition.setDeviceId(deviceSession.getDeviceId()); \\t\\tposition.setProtocol(getProtocolName()); \\t\\tposition.set(org.traccar.model.Position.KEY_INDEX, index); \\t\\tposition.setTime(new java.util.Date(((buf.readUnsignedInt()) * 1000))); \\t\\tint flags = buf.readUnsignedByte(); \\t\\tif (org.traccar.helper.BitUtil.check(flags, 0)) { \\t\\t\\tposition.setLatitude(((buf.readInt()) \\/ 1800000.0)); \\t\\t\\tposition.setLongitude(((buf.readInt()) \\/ 1800000.0)); \\t\\t\\tposition.setAltitude(buf.readShort()); \\t\\t\\tposition.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(buf.readUnsignedShort())); \\t\\t\\tposition.setCourse(buf.readUnsignedShort()); \\t\\t\\tposition.set(org.traccar.model.Position.KEY_SATELLITES, buf.readUnsignedByte());} \\t\\tif (org.traccar.helper.BitUtil.check(flags, 1)) { \\t\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedInt(), buf.readUnsignedByte())));} \\t\\tif (org.traccar.helper.BitUtil.check(flags, 2)) { \\t\\t\\tbuf.skipBytes(7);} \\t\\tif (org.traccar.helper.BitUtil.check(flags, 3)) { \\t\\t\\tbuf.skipBytes(7);} \\t\\tif (org.traccar.helper.BitUtil.check(flags, 4)) { \\t\\t\\tbuf.skipBytes(7);} \\t\\tif (org.traccar.helper.BitUtil.check(flags, 5)) { \\t\\t\\tbuf.skipBytes(7);} \\t\\tif (org.traccar.helper.BitUtil.check(flags, 6)) {\\n \\t\\t\\tbuf.skipBytes(7);\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(statusType == 1)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(org.traccar.helper.BitUtil.check(type, 6))", "INGREDIENT_PARENT": "org.traccar.helper.BitUtil.check(_int_0, 6)", "LOCATION": "org.traccar.protocol.EelinkProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_273118899-273136493\\/.\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/\\/src\\/\\/variant-10_f\\/org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_273118899-273136493\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/src\\/default\\/org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java", "LINE": "161", "MP_RANKING": "36", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl"}], "GENERATION": "5", "VARIANT_ID": "10", "TIME": "9", "VALIDATION": "|true|0|276|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_273118899-273136493\\/.\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/\\/bin\\/\\/variant-10"}]}}, {"bug_id": "273118899-273136493", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 02:06:11.370270", "repair_begin": "2018-12-27 02:05:36.891308", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java\\n@@ -131,39 +131,39 @@\\n \\n \\t\\tposition.setValid((((buf.readUnsignedByte()) & 1) != 0));\\n \\n-\\t\\tif (type == (org.traccar.protocol.EelinkProtocolDecoder.MSG_GPS)) {\\n \\n-\\t\\t\\tif ((buf.readableBytes()) >= 2) {\\n-\\t\\t\\t\\tdecodeStatus(position, buf.readUnsignedShort());\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tif ((buf.readableBytes()) >= (2 * 4)) {\\n \\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, ((buf.readUnsignedShort()) * 0.001));\\n \\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_RSSI, buf.readUnsignedShort());\\n \\n-\\t\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_ADC) + 1), buf.readUnsignedShort());\\n-\\t\\t\\t\\tposition.set(((org.traccar.model.Position.PREFIX_ADC) + 2), buf.readUnsignedShort());\\n \\n-\\t\\t\\t}\\n \\n-\\t\\t}else \\t\\t\\tif (type == (org.traccar.protocol.EelinkProtocolDecoder.MSG_ALARM)) {\\n \\n-\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\\n \\n-\\t\\t\\t}else \\t\\t\\t\\tif (type == (org.traccar.protocol.EelinkProtocolDecoder.MSG_STATE)) {\\n \\n-\\t\\t\\t\\t\\tint statusType = buf.readUnsignedByte();\\n \\n-\\t\\t\\t\\t\\tposition.set(org.traccar.model.Position.KEY_EVENT, statusType);\\n \\n-\\t\\t\\t\\t\\tif (((statusType == 1) || (statusType == 2)) || (statusType == 3)) {\\n-\\t\\t\\t\\t\\t\\tbuf.readUnsignedInt();\\n-\\t\\t\\t\\t\\t\\tdecodeStatus(position, buf.readUnsignedShort());\\n-\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\t\\treturn position;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (type == (org.traccar.protocol.EelinkProtocolDecoder.MSG_GPS)) {\\n\\n\\tif ((buf.readableBytes()) >= 2) {\\n\\t\\tdecodeStatus(position, buf.readUnsignedShort());\\n\\t}\\n\\n\\tif ((buf.readableBytes()) >= (2 * 4)) {\\n\\n\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, ((buf.readUnsignedShort()) * 0.001));\\n\\n\\t\\tposition.set(org.traccar.model.Position.KEY_RSSI, buf.readUnsignedShort());\\n\\n\\t\\tposition.set(((org.traccar.model.Position.PREFIX_ADC) + 1), buf.readUnsignedShort());\\n\\t\\tposition.set(((org.traccar.model.Position.PREFIX_ADC) + 2), buf.readUnsignedShort());\\n\\n\\t}\\n\\n}else \\tif (type == (org.traccar.protocol.EelinkProtocolDecoder.MSG_ALARM)) {\\n\\n\\t\\tposition.set(org.traccar.model.Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\\n\\n\\t}else \\t\\tif (type == (org.traccar.protocol.EelinkProtocolDecoder.MSG_STATE)) {\\n\\n\\t\\t\\tint statusType = buf.readUnsignedByte();\\n\\n\\t\\t\\tposition.set(org.traccar.model.Position.KEY_EVENT, statusType);\\n\\n\\t\\t\\tif (((statusType == 1) || (statusType == 2)) || (statusType == 3)) {\\n\\t\\t\\t\\tbuf.readUnsignedInt();\\n\\t\\t\\t\\tdecodeStatus(position, buf.readUnsignedShort());\\n\\t\\t\\t}\\n\\n\\t\\t}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.protocol.EelinkProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_273118899-273136493\\/.\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/\\/src\\/\\/variant-18_f\\/org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_273118899-273136493\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/src\\/default\\/org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java", "LINE": "134", "MP_RANKING": "12", "SUSPICIOUNESS": "1"}], "GENERATION": "9", "VARIANT_ID": "18", "TIME": "12", "VALIDATION": "|true|0|276|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_273118899-273136493\\/.\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/\\/bin\\/\\/variant-18"}]}}, {"bug_id": "273118899-273136493", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:03:46.768483", "repair_begin": "2018-12-28 00:03:17.546671", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java\\n@@ -126,8 +126,8 @@\\n \\t\\tposition.setSpeed(org.traccar.helper.UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\\n \\t\\tposition.setCourse(buf.readUnsignedShort());\\n \\n-\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n-\\t\\tbuf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedMedium())));\\n+\\n+\\n \\n \\t\\tposition.setValid((((buf.readUnsignedByte()) & 1) != 0));\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "position.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\nbuf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedMedium())))", "LOCATION": "org.traccar.protocol.EelinkProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_273118899-273136493\\/.\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/\\/src\\/\\/variant-13_f\\/org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_273118899-273136493\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/src\\/default\\/org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java", "LINE": "129", "MP_RANKING": "10", "SUSPICIOUNESS": "1"}], "GENERATION": "1", "VARIANT_ID": "13", "TIME": "11", "VALIDATION": "|true|0|276|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_273118899-273136493\\/.\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/\\/bin\\/\\/variant-13"}]}}, {"bug_id": "273118899-273136493", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 09:06:10.095462", "repair_begin": "2018-12-27 09:05:41.695084", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java\\n@@ -131,7 +131,7 @@\\n \\n \\t\\tposition.setValid((((buf.readUnsignedByte()) & 1) != 0));\\n \\n-\\t\\tif (type == (org.traccar.protocol.EelinkProtocolDecoder.MSG_GPS)) {\\n+\\t\\tif (type != (org.traccar.protocol.EelinkProtocolDecoder.MSG_GPS)) {\\n \\n \\t\\t\\tif ((buf.readableBytes()) >= 2) {\\n \\t\\t\\t\\tdecodeStatus(position, buf.readUnsignedShort());\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "type == (org.traccar.protocol.EelinkProtocolDecoder.MSG_GPS)", "PATCH_HUNK_CODE": "type != (org.traccar.protocol.EelinkProtocolDecoder.MSG_GPS)", "LOCATION": "org.traccar.protocol.EelinkProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_273118899-273136493\\/.\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/\\/src\\/\\/variant-8_f\\/org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_273118899-273136493\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/src\\/default\\/org\\/traccar\\/protocol\\/EelinkProtocolDecoder.java", "LINE": "134", "MP_RANKING": "1", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "8", "TIME": "4", "VALIDATION": "|true|0|276|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_273118899-273136493\\/.\\/output_astor\\/AstorMain-traccar-traccar-273118899-273136493\\/\\/bin\\/\\/variant-8"}]}}, {"bug_id": "273118899-273136493", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 11:24:37.569730", "repair_begin": "2018-12-27 11:24:17.291766", "patches": [{"edits": [{"path": "src/org/traccar/protocol/EelinkProtocolDecoder.java", "line": 155, "faulty": "if (type == MSG_STATE) {\n  int statusType=buf.readUnsignedByte();\n  position.set(Position.KEY_EVENT,statusType);\n  if (statusType == 0x01 || statusType == 0x02 || statusType == 0x03) {\n    buf.readUnsignedInt();\n    decodeStatus(position,buf.readUnsignedShort());\n  }\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bears_traccar-traccar_273118899-273136493/src/org/traccar/protocol/EelinkProtocolDecoder.java\t2018-12-27 05:23:34.379026669 -0500\n+++ /tmp/Kali_Bears_traccar-traccar_273118899-273136493/patches_2jnn/Patch_2/patched/tmp/Kali_Bears_traccar-traccar_273118899-273136493/src/org/traccar/protocol/EelinkProtocolDecoder.java\t2018-12-27 05:24:37.167028102 -0500\n@@ -152,7 +152,7 @@\n \n             position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n \n-        } else if (type == MSG_STATE) {\n+        } else if (false) {\n \n             int statusType = buf.readUnsignedByte();\n \n\n\n"}]}}, {"bug_id": "305623200-305713931", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 11:24:17.123837", "repair_begin": "2018-12-27 11:24:00.010614", "patches": [{"edits": [{"path": "src/org/traccar/protocol/Jt600FrameDecoder.java", "line": 40, "faulty": "if (length >= buf.readableBytes()) {\n  return buf.readBytes(length);\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bears_traccar-traccar_305623200-305713931/src/org/traccar/protocol/Jt600FrameDecoder.java\t2018-12-27 05:23:31.088338766 -0500\n+++ /tmp/Kali_Bears_traccar-traccar_305623200-305713931/patches_7a4z/Patch_5/patched/tmp/Kali_Bears_traccar-traccar_305623200-305713931/src/org/traccar/protocol/Jt600FrameDecoder.java\t2018-12-27 05:24:16.756530880 -0500\n@@ -37,7 +37,7 @@\n         if (type == '$') {\n             boolean longFormat = buf.getUnsignedByte(buf.readerIndex() + 1) == 0x75;\n             int length = buf.getUnsignedShort(buf.readerIndex() + (longFormat ? 8 : 7)) + 10;\n-            if (length >= buf.readableBytes()) {\n+            if (true) {\n                 return buf.readBytes(length);\n             }\n         } else if (type == '(') {\n\n\n"}]}}, {"bug_id": "308288525-308872339", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 11:23:34.932507", "repair_begin": "2018-12-27 11:23:16.603185", "patches": [{"edits": [{"path": "src/org/traccar/protocol/TmgFrameDecoder.java", "line": 50, "faulty": "if (beginIndex > 0) {\n  buf.readerIndex(beginIndex);\n  int endIndex=buf.indexOf(beginIndex,buf.writerIndex(),(byte)'\\n');\n  if (endIndex > 0) {\n    ChannelBuffer frame=buf.readBytes(endIndex - beginIndex);\n    buf.readByte();\n    return frame;\n  }\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bears_traccar-traccar_308288525-308872339/src/org/traccar/protocol/TmgFrameDecoder.java\t2018-12-27 05:22:34.315974644 -0500\n+++ /tmp/Kali_Bears_traccar-traccar_308288525-308872339/patches_ci6r/Patch_1/patched/tmp/Kali_Bears_traccar-traccar_308288525-308872339/src/org/traccar/protocol/TmgFrameDecoder.java\t2018-12-27 05:23:34.547976018 -0500\n@@ -47,7 +47,7 @@\n             }\n         });\n \n-        if (beginIndex > 0) {\n+        if (true) {\n \n             buf.readerIndex(beginIndex);\n \n\n\n"}]}}, {"bug_id": "316227226-316639485", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:14:03.117532", "repair_begin": "2018-12-28 00:13:27.657598", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n@@ -557,7 +557,7 @@\\n \\t\\t\\tint mnc = buf.readUnsignedByte();\\n \\t\\t\\torg.traccar.model.Network network = new org.traccar.model.Network();\\n \\t\\t\\tfor (int i = 0; i < 7; i++) {\\n-\\t\\t\\t\\tint lac = (longFormat) ? buf.readInt() : buf.readUnsignedShort();\\n+\\t\\t\\t\\tint lac = (longFormat) ? org.traccar.helper.BitUtil.to(type, 15) : buf.readUnsignedShort();\\n \\t\\t\\t\\tint cid = (longFormat) ? ((int) (buf.readLong())) : buf.readUnsignedMedium();\\n \\t\\t\\t\\tint rssi = -(buf.readUnsignedByte());\\n \\t\\t\\t\\tif (lac > 0) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtConditionalImpl", "ORIGINAL_CODE": "buf.readInt()", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "org.traccar.helper.BitUtil.to(type, 15)", "INGREDIENT_PARENT": "org.traccar.helper.BitUtil.to(_int_0, 15)", "LOCATION": "org.traccar.protocol.Gt06ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_316227226-316639485\\/.\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/\\/src\\/\\/variant-10_f\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_316227226-316639485\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/src\\/default\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "LINE": "560", "MP_RANKING": "66", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtConditionalImpl"}], "GENERATION": "5", "VARIANT_ID": "10", "TIME": "10", "VALIDATION": "|true|0|299|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_316227226-316639485\\/.\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/\\/bin\\/\\/variant-10"}]}}, {"bug_id": "316227226-316639485", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 02:03:29.957985", "repair_begin": "2018-12-27 02:02:40.195671", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n@@ -567,14 +567,14 @@\\n \\n \\t\\t\\tbuf.readUnsignedByte();\\n \\n-\\t\\t\\tif ((type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_2))) {\\n-\\t\\t\\t\\tint wifiCount = buf.readUnsignedByte();\\n-\\t\\t\\t\\tfor (int i = 0; i < wifiCount; i++) {\\n-\\t\\t\\t\\t\\tjava.lang.String mac = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(6)).replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n-\\t\\t\\t\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(\\n-\\t\\t\\t\\t\\tmac.substring(0, ((mac.length()) - 1)), buf.readUnsignedByte()));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\t\\t\\tposition.setNetwork(network);\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_2))) {\\n\\tint wifiCount = buf.readUnsignedByte();\\n\\tfor (int i = 0; i < wifiCount; i++) {\\n\\t\\tjava.lang.String mac = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(6)).replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(\\n\\t\\tmac.substring(0, ((mac.length()) - 1)), buf.readUnsignedByte()));\\n\\t}\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.protocol.Gt06ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_316227226-316639485\\/.\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/\\/src\\/\\/variant-24_f\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_316227226-316639485\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/src\\/default\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "LINE": "570", "MP_RANKING": "51", "SUSPICIOUNESS": "1"}], "GENERATION": "12", "VARIANT_ID": "24", "TIME": "16", "VALIDATION": "|true|0|299|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_316227226-316639485\\/.\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/\\/bin\\/\\/variant-24"}]}}, {"bug_id": "316227226-316639485", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:00:11.498645", "repair_begin": "2018-12-27 23:58:58.186967", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n@@ -567,7 +567,7 @@\\n \\n \\t\\t\\tbuf.readUnsignedByte();\\n \\n-\\t\\t\\tif ((type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_2))) {\\n+\\t\\t\\tif (false) {\\n \\t\\t\\t\\tint wifiCount = buf.readUnsignedByte();\\n \\t\\t\\t\\tfor (int i = 0; i < wifiCount; i++) {\\n \\t\\t\\t\\t\\tjava.lang.String mac = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(6)).replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_2))) {\\n\\tint wifiCount = buf.readUnsignedByte();\\n\\tfor (int i = 0; i < wifiCount; i++) {\\n\\t\\tjava.lang.String mac = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(6)).replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(\\n\\t\\tmac.substring(0, ((mac.length()) - 1)), buf.readUnsignedByte()));\\n\\t}\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tint wifiCount = buf.readUnsignedByte();\\n\\tfor (int i = 0; i < wifiCount; i++) {\\n\\t\\tjava.lang.String mac = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(6)).replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(\\n\\t\\tmac.substring(0, ((mac.length()) - 1)), buf.readUnsignedByte()));\\n\\t}\\n}", "LOCATION": "org.traccar.protocol.Gt06ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_316227226-316639485\\/.\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/\\/src\\/\\/variant-57_f\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_316227226-316639485\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/src\\/default\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "LINE": "570", "MP_RANKING": "51", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "57", "TIME": "52", "VALIDATION": "|true|0|299|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_316227226-316639485\\/.\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/\\/bin\\/\\/variant-57"}]}}, {"bug_id": "316227226-316639485", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 09:07:19.229436", "repair_begin": "2018-12-27 09:05:17.693778", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java\\n@@ -567,7 +567,7 @@\\n \\n \\t\\t\\tbuf.readUnsignedByte();\\n \\n-\\t\\t\\tif ((type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_2))) {\\n+\\t\\t\\tif ((type == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_2))) {\\n \\t\\t\\t\\tint wifiCount = buf.readUnsignedByte();\\n \\t\\t\\t\\tfor (int i = 0; i < wifiCount; i++) {\\n \\t\\t\\t\\t\\tjava.lang.String mac = org.jboss.netty.buffer.ChannelBuffers.hexDump(buf.readBytes(6)).replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_2))", "PATCH_HUNK_CODE": "(\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ntype == (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_MULTIPLE)) && (type != (org.traccar.protocol.Gt06ProtocolDecoder.MSG_LBS_2))", "LOCATION": "org.traccar.protocol.Gt06ProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_316227226-316639485\\/.\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/\\/src\\/\\/variant-100_f\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_316227226-316639485\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/src\\/default\\/org\\/traccar\\/protocol\\/Gt06ProtocolDecoder.java", "LINE": "570", "MP_RANKING": "11", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "100", "TIME": "95", "VALIDATION": "|true|0|299|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_316227226-316639485\\/.\\/output_astor\\/AstorMain-traccar-traccar-316227226-316639485\\/\\/bin\\/\\/variant-100"}]}}, {"bug_id": "322427143-322428590", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:14:41.787712", "repair_begin": "2018-12-28 00:13:57.848340", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java\\n@@ -241,7 +241,7 @@\\n \\t\\t\\t}\\n \\t\\t}\\n \\n-\\t\\tif (parser.hasNext(2)) {\\n+\\t\\tif (!(parser.matches())) {\\n \\t\\t\\tdecodeDataFields(position, parser.nextInt(), parser.next().split(\\\",\\\"));\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtIfImpl", "ORIGINAL_CODE": "parser.hasNext(2)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "!(parser.matches())", "INGREDIENT_PARENT": "!(_Parser_0.matches())", "LOCATION": "org.traccar.protocol.MeitrackProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_322427143-322428590\\/.\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/\\/src\\/\\/variant-26_f\\/org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bears_traccar-traccar_322427143-322428590\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/src\\/default\\/org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java", "LINE": "244", "MP_RANKING": "80", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtUnaryOperatorImpl|CtIfImpl"}], "GENERATION": "13", "VARIANT_ID": "26", "TIME": "18", "VALIDATION": "|true|0|300|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bears_traccar-traccar_322427143-322428590\\/.\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/\\/bin\\/\\/variant-26"}]}}, {"bug_id": "322427143-322428590", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 02:03:43.744731", "repair_begin": "2018-12-27 02:02:51.235938", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java\\n@@ -259,13 +259,13 @@\\n \\t\\t\\tboolean started = (data[0].charAt(0)) == '0';\\n \\t\\t\\tposition.set(\\\"taximeterOn\\\", started);\\n \\t\\t\\tposition.set(\\\"taximeterStart\\\", data[1]);\\n-\\t\\t\\tif (!started) {\\n-\\t\\t\\t\\tposition.set(\\\"taximeterEnd\\\", data[2]);\\n-\\t\\t\\t\\tposition.set(\\\"taximeterDistance\\\", java.lang.Integer.parseInt(data[3]));\\n-\\t\\t\\t\\tposition.set(\\\"taximeterFare\\\", java.lang.Integer.parseInt(data[4]));\\n-\\t\\t\\t\\tposition.set(\\\"taximeterTrip\\\", data[5]);\\n-\\t\\t\\t\\tposition.set(\\\"taximeterWait\\\", data[6]);\\n-\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t}\\n \\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (!started) {\\n\\tposition.set(\\\"taximeterEnd\\\", data[2]);\\n\\tposition.set(\\\"taximeterDistance\\\", java.lang.Integer.parseInt(data[3]));\\n\\tposition.set(\\\"taximeterFare\\\", java.lang.Integer.parseInt(data[4]));\\n\\tposition.set(\\\"taximeterTrip\\\", data[5]);\\n\\tposition.set(\\\"taximeterWait\\\", data[6]);\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.protocol.MeitrackProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_322427143-322428590\\/.\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/\\/src\\/\\/variant-38_f\\/org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_322427143-322428590\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/src\\/default\\/org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java", "LINE": "262", "MP_RANKING": "48", "SUSPICIOUNESS": "1"}], "GENERATION": "19", "VARIANT_ID": "38", "TIME": "25", "VALIDATION": "|true|0|300|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_322427143-322428590\\/.\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/\\/bin\\/\\/variant-38"}]}}, {"bug_id": "322427143-322428590", "tool": "jKali", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-28 00:00:09.692093", "repair_begin": "2018-12-27 23:59:06.800747", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java\\n@@ -241,7 +241,7 @@\\n \\t\\t\\t}\\n \\t\\t}\\n \\n-\\t\\tif (parser.hasNext(2)) {\\n+\\t\\tif (false) {\\n \\t\\t\\tdecodeDataFields(position, parser.nextInt(), parser.next().split(\\\",\\\"));\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (parser.hasNext(2)) {\\n\\tdecodeDataFields(position, parser.nextInt(), parser.next().split(\\\",\\\"));\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tdecodeDataFields(position, parser.nextInt(), parser.next().split(\\\",\\\"));\\n}", "LOCATION": "org.traccar.protocol.MeitrackProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_322427143-322428590\\/.\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/\\/src\\/\\/variant-47_f\\/org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bears_traccar-traccar_322427143-322428590\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/src\\/default\\/org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java", "LINE": "244", "MP_RANKING": "40", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "47", "TIME": "43", "VALIDATION": "|true|0|300|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bears_traccar-traccar_322427143-322428590\\/.\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/\\/bin\\/\\/variant-47"}]}}, {"bug_id": "322427143-322428590", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bears", "project": "traccar-traccar", "result": {"repair_end": "2018-12-27 09:03:11.386523", "repair_begin": "2018-12-27 09:02:14.766287", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java\\n@@ -254,7 +254,7 @@\\n \\t\\t\\tposition.set(\\\"tempData\\\", values[1]);\\n \\t\\t}\\n \\n-\\t\\tif (((values.length) > 5) && (!(values[5].isEmpty()))) {\\n+\\t\\tif (((values.length) == 5) && (!(values[5].isEmpty()))) {\\n \\t\\t\\tjava.lang.String[] data = values[5].split(\\\"\\\\\\\\|\\\");\\n \\t\\t\\tboolean started = (data[0].charAt(0)) == '0';\\n \\t\\t\\tposition.set(\\\"taximeterOn\\\", started);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((values.length) > 5) && (!(values[5].isEmpty()))", "PATCH_HUNK_CODE": "(\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(values.length) == 5) && (!(values[5].isEmpty()))", "LOCATION": "org.traccar.protocol.MeitrackProtocolDecoder", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_322427143-322428590\\/.\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/\\/src\\/\\/variant-37_f\\/org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_322427143-322428590\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/src\\/default\\/org\\/traccar\\/protocol\\/MeitrackProtocolDecoder.java", "LINE": "257", "MP_RANKING": "9", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "37", "TIME": "31", "VALIDATION": "|true|0|300|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bears_traccar-traccar_322427143-322428590\\/.\\/output_astor\\/AstorMain-traccar-traccar-322427143-322428590\\/\\/bin\\/\\/variant-37"}]}}, {"bug_id": "414793864-436911083", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bears", "project": "vkostyukov-la4j", "result": {"repair_end": "2018-12-26 22:30:37.319138", "repair_begin": "2018-12-26 22:23:52.790967", "patches": [{"nb_test_that_execute_statement": 123, "patchLocation": {"line": 810, "class": "org.la4j.Vector"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/la4j/Vector.java\n+++ b/src/main/java/org/la4j/Vector.java\n@@ -809,4 +809,6 @@\n             double diff = Math.abs(a - b);\n-            result = (a == b) ||\n-                    (diff < precision || diff / Math.max(Math.abs(a), Math.abs(b)) < precision);\n+            if ((org.la4j.Vector.DEFAULT_DELIMITER.length()==0) || (!(((that.length) != (1000)) && (3 <= org.la4j.Vector.this.length)))) {\n+                result = (a == b) ||\n+                (diff < precision || diff / Math.max(Math.abs(a), Math.abs(b)) < precision);\n+            }\n         }\n"}]}}, {"bug_id": "2fd7633f", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2019-02-13 22:54:38.507047", "repair_begin": "2019-02-13 22:53:35.593917", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 440, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -439,16 +439,18 @@\n     \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(new File(execFile), Constants.UTF8.name());\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(new File(execFile), Constants.UTF8.name());\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "3d55560a", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 23:57:12.329558", "repair_begin": "2018-12-29 23:24:29.149119", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java\\n+++ org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java\\n@@ -71,7 +71,7 @@\\n \\t\\t\\t\\tif ((count) < (other.count))\\n \\t\\t\\t\\t\\treturn -1;\\n \\t\\t\\t\\tif ((count) > (other.count)) \\n-\\t\\t\\t\\t{ \\t\\t\\t\\t\\treturn 1;}\\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\treturn -1;}\\n \\t\\t\\t}else {\\n \\t\\t\\t\\treturn 1;\\n \\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return 1", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return -1", "INGREDIENT_PARENT": "return -1", "LOCATION": "org.apache.accumulo.core.client.mock.MockTable", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Accumulo_3d55560a\\/.\\/output_astor\\/AstorMain-Accumulo-3d55560a\\/\\/src\\/\\/variant-1278_f\\/org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Accumulo_3d55560a\\/output_astor\\/AstorMain-Accumulo-3d55560a\\/src\\/default\\/org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java", "LINE": "74", "MP_RANKING": "1", "SUSPICIOUNESS": "0.5", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "639", "VARIANT_ID": "1278", "TIME": "1764", "VALIDATION": "|true|0|270|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Accumulo_3d55560a\\/.\\/output_astor\\/AstorMain-Accumulo-3d55560a\\/\\/bin\\/\\/variant-1278"}]}}, {"bug_id": "3d55560a", "tool": "jKali", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 23:19:22.086382", "repair_begin": "2018-12-29 23:17:28.132414", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java\\n+++ org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java\\n@@ -104,8 +104,8 @@\\n \\t\\t\\tif (u.isDeleted())\\n \\t\\t\\t\\tkey.setDeleted(true);\\n \\t\\t\\tif (!(u.hasTimestamp())) \\n-\\t\\t\\t{ \\t\\t\\t\\tif (timeType.equals(org.apache.accumulo.core.client.admin.TimeType.LOGICAL))\\n-\\t\\t\\t\\t\\tkey.setTimestamp(mutationCount);else\\n+\\t\\t\\t{ \\t\\t\\t\\tif (true)\\n+\\t\\t\\t\\t\\tkey.setTimestamp(this.mutationCount);else\\n \\n \\t\\t\\t\\t\\tkey.setTimestamp(now);}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (timeType.equals(org.apache.accumulo.core.client.admin.TimeType.LOGICAL))\\n\\tkey.setTimestamp(mutationCount);else\\n\\n\\tkey.setTimestamp(now);", "PATCH_HUNK_CODE": "if (true)\\n\\tkey.setTimestamp(this.mutationCount);else\\n\\n\\tkey.setTimestamp(now);", "LOCATION": "org.apache.accumulo.core.client.mock.MockTable", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bug_dot_jar_Accumulo_3d55560a\\/.\\/output_astor\\/AstorMain-Accumulo-3d55560a\\/\\/src\\/\\/variant-32_f\\/org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bug_dot_jar_Accumulo_3d55560a\\/output_astor\\/AstorMain-Accumulo-3d55560a\\/src\\/default\\/org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java", "LINE": "107", "MP_RANKING": "39", "SUSPICIOUNESS": "0.236", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "32", "TIME": "63", "VALIDATION": "|true|0|270|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bug_dot_jar_Accumulo_3d55560a\\/.\\/output_astor\\/AstorMain-Accumulo-3d55560a\\/\\/bin\\/\\/variant-32"}]}}, {"bug_id": "3d55560a", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2019-02-04 22:47:52.613750", "repair_begin": "2019-02-04 22:45:31.609654", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Accumulo_3d55560a\\/src\\/core\\/src\\/main\\/java\\/org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTablejava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Accumulo_3d55560a\\/src\\/core\\/src\\/main\\/java\\/org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTablejava\\n@@ -104,7 +104,7 @@\\n \\t\\t\\tif (u.isDeleted())\\n \\t\\t\\t\\tkey.setDeleted(true);\\n \\t\\t\\tif (!(u.hasTimestamp()))\\n-\\t\\t\\t\\tif (timeType.equals(org.apache.accumulo.core.client.admin.TimeType.LOGICAL))\\n+\\t\\t\\t\\tif (!(this.timeType.equals(org.apache.accumulo.core.client.admin.TimeType.LOGICAL)))\\n \\t\\t\\t\\t\\tkey.setTimestamp(mutationCount);else\\n \\n \\t\\t\\t\\t\\tkey.setTimestamp(now);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtIfImpl", "ORIGINAL_CODE": "timeType.equals(org.apache.accumulo.core.client.admin.TimeType.LOGICAL)", "PATCH_HUNK_CODE": "!\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(this.timeType.equals(org.apache.accumulo.core.client.admin.TimeType.LOGICAL))", "LOCATION": "org.apache.accumulo.core.client.mock.MockTable", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Accumulo_3d55560a\\/.\\/output_astor\\/AstorMain-Accumulo-3d55560a\\/\\/src\\/\\/variant-44\\/org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Accumulo_3d55560a\\/src\\/core\\/src\\/main\\/java\\/org\\/apache\\/accumulo\\/core\\/client\\/mock\\/MockTable.java", "LINE": "107", "MP_RANKING": "5", "SUSPICIOUNESS": "0.236", "PATCH_HUNK_TYPE": "CtUnaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "44", "TIME": "68", "VALIDATION": "|true|0|270|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Accumulo_3d55560a\\/.\\/output_astor\\/AstorMain-Accumulo-3d55560a\\/\\/bin\\/\\/variant-44"}]}}, {"bug_id": "3d55560a", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:18:36.954078", "repair_begin": "2018-12-29 11:17:41.892933", "patches": [{"edits": [{"path": "src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java", "line": 71, "faulty": "if (count < other.count) return -1;", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Accumulo_3d55560a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\t2018-12-29 05:16:50.000000000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Accumulo_3d55560a/patches_qq2b/Patch_3/patched/tmp/Kali_Bug_dot_jar_Accumulo_3d55560a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\t2018-12-29 05:18:36.577599406 -0500\n@@ -68,7 +68,7 @@\n         return compare;\n       if (o instanceof MockMemKey) {\n         MockMemKey other = (MockMemKey) o;\n-        if (count < other.count)\n+        if (true)\n           return -1;\n         if (count > other.count)\n           return 1;\n\n\n"}]}}, {"bug_id": "6dbbdc21", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:26:31.370355", "repair_begin": "2018-12-29 11:25:32.939139", "patches": [{"edits": [{"path": "src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java", "line": 42, "faulty": "result.rowMatcher=rowMatcher.pattern().matcher(\"\");", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Accumulo_6dbbdc21/src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java\t2018-12-29 05:24:41.000000000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Accumulo_6dbbdc21/patches_fro7/Patch_27/patched/tmp/Kali_Bug_dot_jar_Accumulo_6dbbdc21/src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java\t2018-12-29 05:26:30.961258720 -0500\n@@ -39,7 +39,9 @@\n   public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n     RegExFilter result = new RegExFilter();\n     result.setSource(getSource().deepCopy(env));\n-    result.rowMatcher = rowMatcher.pattern().matcher(\"\");\n+    if (true)\n+\t\treturn null;\n+\tresult.rowMatcher = rowMatcher.pattern().matcher(\"\");\n     result.colfMatcher = colfMatcher.pattern().matcher(\"\");\n     result.colqMatcher = colqMatcher.pattern().matcher(\"\");\n     result.valueMatcher = valueMatcher.pattern().matcher(\"\");\n\n\n"}]}}, {"bug_id": "023be574", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 17:32:03.226925", "repair_begin": "2018-12-30 17:31:01.793554", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 440, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -439,16 +439,18 @@\n     \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(new File(execFile), Constants.UTF8.name());\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(new File(execFile), Constants.UTF8.name());\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "72fd6bec", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2019-01-02 23:46:13.040020", "repair_begin": "2019-01-02 23:29:29.554319", "patches": [{"patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "builder.environment().put(\\\"ACCUMULO_HOME\\\", config.getDir().getAbsolutePath())", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(org.apache.accumulo.minicluster.MiniAccumuloCluster.INSTANCE_NAME) + (java.io.File.separator)", "INGREDIENT_PARENT": "(_String_0 + (java.io.File.separator))", "LOCATION": "org.apache.accumulo.minicluster.MiniAccumuloCluster", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Accumulo_72fd6bec\\/.\\/output_astor\\/AstorMain-Accumulo-72fd6bec\\/\\/src\\/\\/variant-242\\/org\\/apache\\/accumulo\\/minicluster\\/MiniAccumuloCluster.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Accumulo_72fd6bec\\/minicluster\\/src\\/main\\/java\\/org\\/apache\\/accumulo\\/minicluster\\/MiniAccumuloCluster.java", "LINE": "157", "MP_RANKING": "23", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtBlockImpl"}], "GENERATION": "121", "TIME": "942", "VARIANT_ID": "242", "VALIDATION": "|true|0|6|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Accumulo_72fd6bec\\/.\\/output_astor\\/AstorMain-Accumulo-72fd6bec\\/\\/bin\\/\\/variant-242"}]}}, {"bug_id": "73ce9cfb", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 16:15:25.378222", "repair_begin": "2018-12-30 16:14:30.950532", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 445, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -444,16 +444,18 @@\n \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(new File(execFile), UTF_8.name());\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(new File(execFile), UTF_8.name());\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "73ce9cfb", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:07:11.393218", "repair_begin": "2018-12-29 11:05:57.426101", "patches": [{"nb_test_that_execute_statement": 21, "patchLocation": {"line": 383, "class": "org.apache.accumulo.core.data.Mutation"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/data/Mutation.java\n+++ b/core/src/main/java/org/apache/accumulo/core/data/Mutation.java\n@@ -382,3 +382,5 @@\n   public void put(CharSequence columnFamily, CharSequence columnQualifier, CharSequence value) {\n-    put(columnFamily, columnQualifier, EMPTY_BYTES, false, 0l, false, value);\n+    if (org.apache.accumulo.core.data.Mutation.this.buffer!=null) {\n+      put(columnFamily, columnQualifier, EMPTY_BYTES, false, 0l, false, value);\n+    }\n   }\n"}]}}, {"bug_id": "94c2a31f", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 23:10:59.443060", "repair_begin": "2018-12-29 23:05:10.497618", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/accumulo\\/minicluster\\/MiniAccumuloCluster.java\\n+++ org\\/apache\\/accumulo\\/minicluster\\/MiniAccumuloCluster.java\\n@@ -368,16 +368,16 @@\\n \\n \\n \\n-\\tpublic void stop() throws java.io.IOException, java.lang.InterruptedException {\\n-\\t\\tif ((zooKeeperProcess) != null) {\\n-\\t\\t\\ttry {\\n-\\t\\t\\t\\tstopProcessWithTimeout(zooKeeperProcess, 30, java.util.concurrent.TimeUnit.SECONDS);\\n-\\t\\t\\t} catch (java.util.concurrent.ExecutionException e) {\\n-\\t\\t\\t\\torg.apache.accumulo.minicluster.MiniAccumuloCluster.log.warn(\\\"ZooKeeper did not fully stop after 30 seconds\\\", e);\\n-\\t\\t\\t} catch (java.util.concurrent.TimeoutException e) {\\n-\\t\\t\\t\\torg.apache.accumulo.minicluster.MiniAccumuloCluster.log.warn(\\\"ZooKeeper did not fully stop after 30 seconds\\\", e);\\n-\\t\\t\\t}\\n-\\t\\t}\\n+\\tpublic void stop() throws java.io.IOException, java.lang.InterruptedException { \\t\\tif (null == (executor)) { \\t\\t\\texecutor = java.util.concurrent.Executors.newSingleThreadExecutor();}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\tif ((masterProcess) != null) {\\n \\t\\t\\ttry {\\n \\t\\t\\t\\tstopProcessWithTimeout(masterProcess, 30, java.util.concurrent.TimeUnit.SECONDS);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((zooKeeperProcess) != null) {\\n\\ttry {\\n\\t\\tstopProcessWithTimeout(zooKeeperProcess, 30, java.util.concurrent.TimeUnit.SECONDS);\\n\\t} catch (java.util.concurrent.ExecutionException e) {\\n\\t\\torg.apache.accumulo.minicluster.MiniAccumuloCluster.log.warn(\\\"ZooKeeper did not fully stop after 30 seconds\\\", e);\\n\\t} catch (java.util.concurrent.TimeoutException e) {\\n\\t\\torg.apache.accumulo.minicluster.MiniAccumuloCluster.log.warn(\\\"ZooKeeper did not fully stop after 30 seconds\\\", e);\\n\\t}\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (null == (executor)) {\\n\\texecutor = java.util.concurrent.Executors.newSingleThreadExecutor();\\n}", "INGREDIENT_PARENT": "if (null == (executor)) {\\n\\texecutor = java.util.concurrent.Executors.newSingleThreadExecutor();\\n}", "LOCATION": "org.apache.accumulo.minicluster.MiniAccumuloCluster", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Accumulo_94c2a31f\\/.\\/output_astor\\/AstorMain-Accumulo-94c2a31f\\/\\/src\\/\\/variant-92_f\\/org\\/apache\\/accumulo\\/minicluster\\/MiniAccumuloCluster.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Accumulo_94c2a31f\\/output_astor\\/AstorMain-Accumulo-94c2a31f\\/src\\/default\\/org\\/apache\\/accumulo\\/minicluster\\/MiniAccumuloCluster.java", "LINE": "372", "MP_RANKING": "12", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "46", "VARIANT_ID": "92", "TIME": "297", "VALIDATION": "|true|0|5|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Accumulo_94c2a31f\\/.\\/output_astor\\/AstorMain-Accumulo-94c2a31f\\/\\/bin\\/\\/variant-92"}]}}, {"bug_id": "94c2a31f", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:57:20.153954", "repair_begin": "2018-12-29 11:55:48.774527", "patches": [{"edits": [{"path": "minicluster/src/main/java/org/apache/accumulo/minicluster/MiniAccumuloCluster.java", "line": 393, "faulty": "stopProcessWithTimeout(tserver,30,TimeUnit.SECONDS);", "type": "InsertReturn false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Accumulo_94c2a31f/minicluster/src/main/java/org/apache/accumulo/minicluster/MiniAccumuloCluster.java\t2018-12-29 05:54:52.773644000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Accumulo_94c2a31f/patches_uql5/Patch_12/patched/tmp/Kali_Bug_dot_jar_Accumulo_94c2a31f/minicluster/src/main/java/org/apache/accumulo/minicluster/MiniAccumuloCluster.java\t2018-12-29 05:57:19.772658573 -0500\n@@ -390,7 +390,9 @@\n     if (tabletServerProcesses != null) {\n       for (Process tserver : tabletServerProcesses) {\n         try {\n-          stopProcessWithTimeout(tserver, 30, TimeUnit.SECONDS);\n+          if (true)\n+\t\t\t\treturn;\n+\t\tstopProcessWithTimeout(tserver, 30, TimeUnit.SECONDS);\n         } catch (ExecutionException e) {\n           log.warn(\"TabletServer did not fully stop after 30 seconds\", e);\n         } catch (TimeoutException e) {\n\n\n"}]}}, {"bug_id": "872b6db3", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 16:40:45.219536", "repair_begin": "2018-12-30 16:39:43.766606", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 478, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -477,16 +477,18 @@\n     \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(execFile);\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(execFile);\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "994df698", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 15:29:33.451142", "repair_begin": "2018-12-30 15:27:43.989456", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 460, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -459,16 +459,18 @@\n     \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(execFile);\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(execFile);\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "994df698", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:19:46.192720", "repair_begin": "2018-12-29 11:17:06.535531", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 323, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -322,8 +322,10 @@\n     // decide whether to execute commands from a file and quit\n-    if (options.getExecFile() != null) {\n-      execFile = options.getExecFile();\n-      verbose = false;\n-    } else if (options.getExecFileVerbose() != null) {\n-      execFile = options.getExecFileVerbose();\n-      verbose = true;\n+    if (org.apache.accumulo.core.util.shell.Shell.this.principal.length()==0) {\n+      if (options.getExecFile() != null) {\n+        execFile = options.getExecFile();\n+        verbose = false;\n+      } else if (options.getExecFileVerbose() != null) {\n+        execFile = options.getExecFileVerbose();\n+        verbose = true;\n+      }\n     }\n"}]}}, {"bug_id": "7651b777", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 16:44:34.622059", "repair_begin": "2018-12-30 16:43:26.258847", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 442, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -441,16 +441,18 @@\n \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(new File(execFile), UTF_8.name());\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(new File(execFile), UTF_8.name());\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "9339ecf8", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:24:27.323642", "repair_begin": "2018-12-29 11:17:53.874733", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 97, "class": "org.apache.accumulo.server.security.delegation.AuthenticationTokenSecretManager"}, "patchType": "PRECONDITION", "patch": "--- a/server/base/src/main/java/org/apache/accumulo/server/security/delegation/AuthenticationTokenSecretManager.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/delegation/AuthenticationTokenSecretManager.java\n@@ -97,13 +97,15 @@\n       if (0 < requestedLifetime) {\n-        long requestedExpirationDate = identifier.getIssueDate() + requestedLifetime;\n-        // Catch overflow again\n-        if (requestedExpirationDate < identifier.getIssueDate()) {\n-          requestedExpirationDate = Long.MAX_VALUE;\n+        if (0 < requestedLifetime) {\n+          long requestedExpirationDate = identifier.getIssueDate() + requestedLifetime;\n+          // Catch overflow again\n+          if (requestedExpirationDate < identifier.getIssueDate()) {\n+            requestedExpirationDate = Long.MAX_VALUE;\n+          }\n+          // Ensure that the user doesn't try to extend the expiration date -- they may only limit it\n+          if (requestedExpirationDate > identifier.getExpirationDate()) {\n+            throw new RuntimeException(\"Requested token lifetime exceeds configured maximum\");\n+          }\n+          log.trace(\"Overriding token expiration date from {} to {}\", identifier.getExpirationDate(), requestedExpirationDate);\n+          identifier.setExpirationDate(requestedExpirationDate);\n         }\n-        // Ensure that the user doesn't try to extend the expiration date -- they may only limit it\n-        if (requestedExpirationDate > identifier.getExpirationDate()) {\n-          throw new RuntimeException(\"Requested token lifetime exceeds configured maximum\");\n-        }\n-        log.trace(\"Overriding token expiration date from {} to {}\", identifier.getExpirationDate(), requestedExpirationDate);\n-        identifier.setExpirationDate(requestedExpirationDate);\n       }\n"}]}}, {"bug_id": "15476a0d", "tool": "ARJA", "nb_patch": 1148, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 03:09:05.176480", "repair_begin": "2018-12-29 02:28:55.426941", "patches": [{"edits": [{"path": "src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java", "line": 74, "faulty": "return 1;", "type": "Delete", "seed": "NULL"}, {"path": "src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java", "line": 73, "faulty": "if (count > other.count) return 1;", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Accumulo_15476a0d/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\t2018-12-28 20:28:13.213481000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Accumulo_15476a0d/patches_5ben/Patch_1840/patched/tmp/Arja_Bug_dot_jar_Accumulo_15476a0d/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\t2018-12-28 20:54:04.547460036 -0500\n@@ -70,8 +70,6 @@\n         MockMemKey other = (MockMemKey) o;\n         if (count < other.count)\n           return -1;\n-        if (count > other.count)\n-          return 1;\n       } else {\n         return 1;\n       }\n\n\n"}]}}, {"bug_id": "15476a0d", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:10:56.874182", "repair_begin": "2018-12-29 11:10:01.881582", "patches": [{"edits": [{"path": "src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java", "line": 73, "faulty": "if (count > other.count) return 1;", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Accumulo_15476a0d/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\t2018-12-29 05:09:11.005548000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Accumulo_15476a0d/patches_pupe/Patch_2/patched/tmp/Kali_Bug_dot_jar_Accumulo_15476a0d/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\t2018-12-29 05:10:56.496610149 -0500\n@@ -70,7 +70,7 @@\n         MockMemKey other = (MockMemKey) o;\n         if (count < other.count)\n           return -1;\n-        if (count > other.count)\n+        if (false)\n           return 1;\n       } else {\n         return 1;\n\n\n"}]}}, {"bug_id": "813109d7", "tool": "ARJA", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 04:19:27.858543", "repair_begin": "2018-12-29 02:38:39.102518", "patches": [{"edits": [{"path": "proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java", "line": 418, "faulty": "if (result.ouch3 != null) {\n  throw result.ouch3;\n}", "type": "Delete", "seed": "NULL"}, {"path": "proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java", "line": 419, "faulty": "throw result.ouch3;", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Accumulo_813109d7/proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java\t2018-12-28 20:37:52.905822000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Accumulo_813109d7/patches_tpe6/Patch_327/patched/tmp/Arja_Bug_dot_jar_Accumulo_813109d7/proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java\t2018-12-28 21:16:15.327149812 -0500\n@@ -415,9 +415,6 @@\n       if (result.ouch2 != null) {\n         throw result.ouch2;\n       }\n-      if (result.ouch3 != null) {\n-        throw result.ouch3;\n-      }\n       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, \"addConstraint failed: unknown result\");\n     }\n \n\n\n"}]}}, {"bug_id": "a450ac2f", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 17:34:02.882497", "repair_begin": "2018-12-30 17:32:54.182110", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 64, "class": "org.apache.accumulo.core.client.mock.MockBatchScanner$RangesFilter"}, "patchType": "CONDITIONAL", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockBatchScanner.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockBatchScanner.java\n@@ -63,4 +63,4 @@\n       for (Range r : ranges) {\n-        if (r.contains(k))\n-          return true;\n+        if (true)\n+        return true;\n       }\n"}]}}, {"bug_id": "a450ac2f", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:17:16.562302", "repair_begin": "2018-12-29 11:16:42.235198", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 64, "class": "org.apache.accumulo.core.client.mock.MockBatchScanner$RangesFilter"}, "patchType": "CONDITIONAL", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockBatchScanner.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockBatchScanner.java\n@@ -63,4 +63,4 @@\n       for (Range r : ranges) {\n-        if (r.contains(k))\n-          return true;\n+        if (k!=null)\n+        return true;\n       }\n"}]}}, {"bug_id": "a64151e6", "tool": "ARJA", "nb_patch": 1510, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 03:53:15.877853", "repair_begin": "2018-12-29 03:24:53.494497", "patches": [{"edits": [{"path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java", "line": 114, "faulty": "for (String candidate : candidates) {\n  String relPath=makeRelative(candidate,0);\n  ret.put(relPath,candidate);\n}", "type": "Delete", "seed": "NULL"}, {"path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java", "line": 85, "faulty": "tokens=tmp.toArray(new String[tmp.size()]);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Accumulo_a64151e6/server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java\t2018-12-28 21:24:11.344985000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Accumulo_a64151e6/patches_p5ou/Patch_2617/patched/tmp/Arja_Bug_dot_jar_Accumulo_a64151e6/server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java\t2018-12-28 21:47:06.196146807 -0500\n@@ -81,8 +81,6 @@\n           tmp.add(token);\n         }\n       }\n-\n-      tokens = tmp.toArray(new String[tmp.size()]);\n     }\n \n     if (tokens.length > 3) {\n@@ -111,11 +109,6 @@\n \n     SortedMap<String,String> ret = new TreeMap<String,String>();\n \n-    for (String candidate : candidates) {\n-      String relPath = makeRelative(candidate, 0);\n-      ret.put(relPath, candidate);\n-    }\n-\n     return ret;\n   }\n \n\n\n"}]}}, {"bug_id": "a64151e6", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:20:17.308956", "repair_begin": "2018-12-29 11:19:51.944081", "patches": [{"edits": [{"path": "server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java", "line": 271, "faulty": "if (candidates.size() == 0) break;\n else lastCandidate=candidates.get(candidates.size() - 1);", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Accumulo_a64151e6/server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java\t2018-12-29 05:18:40.692737000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Accumulo_a64151e6/patches_hn3h/Patch_15/patched/tmp/Kali_Bug_dot_jar_Accumulo_a64151e6/server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectionAlgorithm.java\t2018-12-29 05:20:16.930683232 -0500\n@@ -268,7 +268,7 @@\n     while (true) {\n       List<String> candidates = getCandidates(gce, lastCandidate);\n \n-      if (candidates.size() == 0)\n+      if (true)\n         break;\n       else\n         lastCandidate = candidates.get(candidates.size() - 1);\n\n\n"}]}}, {"bug_id": "b007b22e", "tool": "ARJA", "nb_patch": 1200, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 02:13:52.300625", "repair_begin": "2018-12-29 02:02:47.503723", "patches": [{"edits": [{"path": "src/core/src/main/java/org/apache/accumulo/core/iterators/LongCombiner.java", "line": 169, "faulty": "if (Long.MAX_VALUE - a < b) return Long.MAX_VALUE;", "type": "Delete", "seed": "NULL"}, {"path": "src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java", "line": 166, "faulty": "topKey=workKey;", "type": "Delete", "seed": "NULL"}, {"path": "src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java", "line": 163, "faulty": "if (combiners.isEmpty() || combiners.contains(workKey)) {\n  if (workKey.isDeleted())   return;\n  topKey=workKey;\n  Iterator<Value> viter=new ValueIterator(getSource());\n  topValue=reduce(topKey,viter);\n  while (viter.hasNext())   viter.next();\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Accumulo_b007b22e/src/core/src/main/java/org/apache/accumulo/core/iterators/LongCombiner.java\t2018-12-28 20:02:27.432597000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Accumulo_b007b22e/patches_713s/Patch_1678/patched/tmp/Arja_Bug_dot_jar_Accumulo_b007b22e/src/core/src/main/java/org/apache/accumulo/core/iterators/LongCombiner.java\t2018-12-28 20:09:23.124666633 -0500\n@@ -166,8 +166,6 @@\n     long bSign = Long.signum(b);\n     if ((aSign != 0) && (bSign != 0) && (aSign == bSign)) {\n       if (aSign > 0) {\n-        if (Long.MAX_VALUE - a < b)\n-          return Long.MAX_VALUE;\n       } else {\n         if (Long.MIN_VALUE - a > b)\n           return Long.MIN_VALUE;\n\n\n--- /tmp/Arja_Bug_dot_jar_Accumulo_b007b22e/src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java\t2018-12-28 20:02:27.428597000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Accumulo_b007b22e/patches_713s/Patch_1678/patched/tmp/Arja_Bug_dot_jar_Accumulo_b007b22e/src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java\t2018-12-28 20:09:23.128666650 -0500\n@@ -160,15 +160,6 @@\n     // check if aggregation is needed\n     if (super.hasTop()) {\n       workKey.set(super.getTopKey());\n-      if (combiners.isEmpty() || combiners.contains(workKey)) {\n-        if (workKey.isDeleted())\n-          return;\n-        topKey = workKey;\n-        Iterator<Value> viter = new ValueIterator(getSource());\n-        topValue = reduce(topKey, viter);\n-        while (viter.hasNext())\n-          viter.next();\n-      }\n     }\n   }\n   \n\n\n"}]}}, {"bug_id": "b007b22e", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:05:18.978796", "repair_begin": "2018-12-29 11:04:23.544817", "patches": [{"edits": [{"path": "src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java", "line": 164, "faulty": "if (workKey.isDeleted()) return;", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Accumulo_b007b22e/src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java\t2018-12-29 05:03:47.838009000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Accumulo_b007b22e/patches_oql9/Patch_11/patched/tmp/Kali_Bug_dot_jar_Accumulo_b007b22e/src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java\t2018-12-29 05:05:18.587139136 -0500\n@@ -161,7 +161,7 @@\n     if (super.hasTop()) {\n       workKey.set(super.getTopKey());\n       if (combiners.isEmpty() || combiners.contains(workKey)) {\n-        if (workKey.isDeleted())\n+        if (true)\n           return;\n         topKey = workKey;\n         Iterator<Value> viter = new ValueIterator(getSource());\n\n\n"}]}}, {"bug_id": "cd7feb4d", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:28:59.197620", "repair_begin": "2018-12-29 11:27:53.060258", "patches": [{"edits": [{"path": "src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java", "line": 41, "faulty": "result.setSource(getSource().deepCopy(env));", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Accumulo_cd7feb4d/src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java\t2018-12-29 05:27:19.487998000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Accumulo_cd7feb4d/patches_xdmh/Patch_45/patched/tmp/Kali_Bug_dot_jar_Accumulo_cd7feb4d/src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java\t2018-12-29 05:28:58.771297974 -0500\n@@ -38,7 +38,9 @@\n   @Override\n   public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n     RegExFilter result = new RegExFilter();\n-    result.setSource(getSource().deepCopy(env));\n+    if (true)\n+\t\treturn null;\n+\tresult.setSource(getSource().deepCopy(env));\n     result.rowMatcher = rowMatcher.pattern().matcher(\"\");\n     result.colfMatcher = colfMatcher.pattern().matcher(\"\");\n     result.colqMatcher = colqMatcher.pattern().matcher(\"\");\n\n\n"}]}}, {"bug_id": "d9ab8449", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 17:41:27.290129", "repair_begin": "2018-12-30 17:39:48.960638", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 460, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -459,16 +459,18 @@\n     \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(execFile);\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(execFile);\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "df4b1985", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 17:23:10.593559", "repair_begin": "2018-12-30 17:21:35.054083", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 460, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -459,16 +459,18 @@\n     \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(execFile);\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(execFile);\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "df4b1985", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:26:25.921872", "repair_begin": "2018-12-29 11:23:45.413457", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 323, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -322,8 +322,10 @@\n     // decide whether to execute commands from a file and quit\n-    if (options.getExecFile() != null) {\n-      execFile = options.getExecFile();\n-      verbose = false;\n-    } else if (options.getExecFileVerbose() != null) {\n-      execFile = options.getExecFileVerbose();\n-      verbose = true;\n+    if (org.apache.accumulo.core.util.shell.Shell.this.principal.length()==0) {\n+      if (options.getExecFile() != null) {\n+        execFile = options.getExecFile();\n+        verbose = false;\n+      } else if (options.getExecFileVerbose() != null) {\n+        execFile = options.getExecFileVerbose();\n+        verbose = true;\n+      }\n     }\n"}]}}, {"bug_id": "f99b5654", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 16:14:08.071251", "repair_begin": "2018-12-30 16:13:15.532500", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 440, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -439,16 +439,18 @@\n     \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(new File(execFile), Constants.UTF8.name());\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(new File(execFile), Constants.UTF8.name());\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "f99b5654", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-29 11:07:06.292154", "repair_begin": "2018-12-29 11:05:11.713409", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 321, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -320,7 +320,9 @@\n     // decide whether to execute commands from a file and quit\n-    if (cl.hasOption(execfileOption.getOpt())) {\n-      execFile = cl.getOptionValue(execfileOption.getOpt());\n-      verbose = false;\n-    } else if (cl.hasOption(execfileVerboseOption.getOpt())) {\n-      execFile = cl.getOptionValue(execfileVerboseOption.getOpt());\n+    if (org.apache.accumulo.core.util.shell.Shell.this.principal.length()==0) {\n+      if (cl.hasOption(execfileOption.getOpt())) {\n+        execFile = cl.getOptionValue(execfileOption.getOpt());\n+        verbose = false;\n+      } else if (cl.hasOption(execfileVerboseOption.getOpt())) {\n+        execFile = cl.getOptionValue(execfileVerboseOption.getOpt());\n+      }\n     }\n"}]}}, {"bug_id": "f848178e", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Accumulo", "result": {"repair_end": "2018-12-30 15:19:48.289576", "repair_begin": "2018-12-30 15:18:55.214997", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 440, "class": "org.apache.accumulo.core.util.shell.Shell"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -439,16 +439,18 @@\n     \n-    if (execFile != null) {\n-      java.util.Scanner scanner = new java.util.Scanner(new File(execFile), Constants.UTF8.name());\n-      try {\n-        while (scanner.hasNextLine() && !hasExited()) {\n-          execCommand(scanner.nextLine(), true, isVerbose());\n+    if (false) {\n+      if (execFile != null) {\n+        java.util.Scanner scanner = new java.util.Scanner(new File(execFile), Constants.UTF8.name());\n+        try {\n+          while (scanner.hasNextLine() && !hasExited()) {\n+            execCommand(scanner.nextLine(), true, isVerbose());\n+          }\n+        } finally {\n+          scanner.close();\n         }\n-      } finally {\n-        scanner.close();\n+      } else if (execCommand != null) {\n+        for (String command : execCommand.split(\"\\n\")) {\n+          execCommand(command, true, isVerbose());\n+        }\n+        return exitCode;\n       }\n-    } else if (execCommand != null) {\n-      for (String command : execCommand.split(\"\\n\")) {\n-        execCommand(command, true, isVerbose());\n-      }\n-      return exitCode;\n     }\n"}]}}, {"bug_id": "0d057fc6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:24:17.808039", "repair_begin": "2018-12-31 00:09:00.856476", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 190, "class": "org.apache.commons.math3.distribution.DiscreteDistribution"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n@@ -189,3 +189,5 @@\n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            if (false) {\n+                out[i] = sample();\n+            }\n         }\n"}]}}, {"bug_id": "2a6c6409", "tool": "ARJA", "nb_patch": 64, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 12:00:55.479749", "repair_begin": "2018-12-29 11:27:06.930213", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java", "line": 161, "faulty": "cut=null;", "type": "InsertBefore", "seed": "plus=new BSPTree<S>();"}, {"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java", "line": 826, "faulty": "throw new MathInternalError();", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2018-12-29 05:26:39.406599000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_2a6c6409/patches_089n/Patch_989/patched/tmp/Arja_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2018-12-29 05:53:10.922015788 -0500\n@@ -823,7 +823,7 @@\n         }\n \n         if ((end == null) && !open) {\n-            throw new MathInternalError();\n+            return null;\n         }\n \n         return loop;\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java\t2018-12-29 05:26:39.418600000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_2a6c6409/patches_089n/Patch_989/patched/tmp/Arja_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java\t2018-12-29 05:53:10.922015788 -0500\n@@ -158,7 +158,8 @@\n \n         final SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane());\n         if (chopped == null || chopped.isEmpty()) {\n-            cut          = null;\n+            plus = new BSPTree<S>();\n+\t\t\tcut          = null;\n             plus         = null;\n             minus        = null;\n             return false;\n\n\n"}]}}, {"bug_id": "2a6c6409", "tool": "GenProg-A", "nb_patch": 104, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 03:14:24.610291", "repair_begin": "2018-12-31 02:39:30.889136", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java", "line": 262, "faulty": "ot.encode(offset);", "type": "Delete", "seed": "if (offset > ot.offset) {\n  ot.encode(offset);\n}"}, {"path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java", "line": 163, "faulty": "minus=null;", "type": "Delete", "seed": "final Sides sides=new Sides();"}, {"path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java", "line": 163, "faulty": "minus=null;", "type": "Delete", "seed": "final Sides sides=new Sides();"}, {"path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java", "line": 163, "faulty": "minus=null;", "type": "Delete", "seed": "final Sides sides=new Sides();"}, {"path": "src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java", "line": 163, "faulty": "minus=null;", "type": "Delete", "seed": "final Sides sides=new Sides();"}, {"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java", "line": 826, "faulty": "throw new MathInternalError();", "type": "Replace", "seed": "return null;"}, {"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java", "line": 826, "faulty": "throw new MathInternalError();", "type": "Replace", "seed": "return null;"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 128, "faulty": "return getMessage(Locale.US);", "type": "Replace", "seed": "return getMessage(Locale.getDefault());"}, {"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java", "line": 216, "faulty": "getTree(true).visit(new FacetsContributionVisitor());", "type": "InsertBefore", "seed": "int i=0;"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-30 20:38:43.677688000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/patches_s2wd/Patch_290/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-30 21:07:52.650536385 -0500\n@@ -125,7 +125,7 @@\n      * @return the message.\n      */\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2018-12-30 20:38:43.789688000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/patches_s2wd/Patch_290/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2018-12-30 21:07:52.654536445 -0500\n@@ -823,7 +823,7 @@\n         }\n \n         if ((end == null) && !open) {\n-            throw new MathInternalError();\n+            return null;\n         }\n \n         return loop;\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java\t2018-12-30 20:38:43.821688000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/patches_s2wd/Patch_290/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java\t2018-12-30 21:07:52.654536445 -0500\n@@ -259,7 +259,6 @@\n                 if (offset < ot.offset) {\n                     encode(ot.offset);\n                 } else if (offset > ot.offset) {\n-                    ot.encode(offset);\n                 }\n \n                 final int limit = FastMath.min(encoding.length, ot.encoding.length);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-30 20:38:43.773688000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/patches_s2wd/Patch_290/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-30 21:07:52.658536503 -0500\n@@ -212,7 +212,8 @@\n     @Override\n     protected void computeGeometricalProperties() {\n \n-        // compute the contribution of all boundary facets\n+        int i = 0;\n+\t\t// compute the contribution of all boundary facets\n         getTree(true).visit(new FacetsContributionVisitor());\n \n         if (getSize() < 0) {\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java\t2018-12-30 20:38:43.809688000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/patches_s2wd/Patch_290/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java\t2018-12-30 21:07:52.658536503 -0500\n@@ -160,7 +160,6 @@\n         if (chopped == null || chopped.isEmpty()) {\n             cut          = null;\n             plus         = null;\n-            minus        = null;\n             return false;\n         }\n \n\n\n"}]}}, {"bug_id": "2a6c6409", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 08:44:33.918740", "repair_begin": "2019-02-05 08:26:52.835324", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_2a6c6409\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/PolygonsSetjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_2a6c6409\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/PolygonsSetjava\\n@@ -817,7 +817,7 @@\\n \\n \\t\\t} \\n \\n-\\t\\tif (((loop.size()) == 2) && (!open)) {\\n+\\t\\tif (((loop.size()) <= 2) && (!open)) {\\n \\n \\t\\t\\treturn null;\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((loop.size()) == 2) && (!open)", "PATCH_HUNK_CODE": "(\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(loop.size()) <= 2) && (!open)", "LOCATION": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_2a6c6409\\/.\\/output_astor\\/AstorMain-Commons-Math-2a6c6409\\/\\/src\\/\\/variant-119\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/PolygonsSet.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_2a6c6409\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/PolygonsSet.java", "LINE": "820", "MP_RANKING": "21", "SUSPICIOUNESS": "0.123", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "119", "TIME": "138", "VALIDATION": "|true|0|5962|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_2a6c6409\\/.\\/output_astor\\/AstorMain-Commons-Math-2a6c6409\\/\\/bin\\/\\/variant-119"}]}}, {"bug_id": "2a6c6409", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 23:35:53.088679", "repair_begin": "2018-12-29 23:12:09.135352", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java", "line": 826, "faulty": "throw new MathInternalError();", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2018-12-29 17:11:23.896666000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Commons-Math_2a6c6409/patches_83da/Patch_3/patched/tmp/Kali_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2018-12-29 17:35:52.689698080 -0500\n@@ -823,7 +823,9 @@\n         }\n \n         if ((end == null) && !open) {\n-            throw new MathInternalError();\n+            if (true)\n+\t\t\t\treturn null;\n+\t\t\tthrow new MathInternalError();\n         }\n \n         return loop;\n\n\n"}]}}, {"bug_id": "2a6c6409", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:34:28.842431", "repair_begin": "2018-12-29 15:28:01.418886", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 56, "class": "org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenTrainingTask.java\n+++ b/src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenTrainingTask.java\n@@ -55,4 +55,6 @@\n     public void run() {\n-        while (featuresIterator.hasNext()) {\n-            updateAction.update(net, featuresIterator.next());\n+        if (org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask.this.featuresIterator.hasNext()) {\n+            while (featuresIterator.hasNext()) {\n+                updateAction.update(net, featuresIterator.next());\n+            }\n         }\n"}]}}, {"bug_id": "2a9cbbab", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:49:18.360826", "repair_begin": "2018-12-30 23:20:08.428184", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "2b852d79", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:36:29.458053", "repair_begin": "2018-12-30 21:10:23.192977", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "2c8a114f", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:38:29.998687", "repair_begin": "2018-12-30 23:08:24.805506", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 878, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -877,3 +877,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if (this.stepStart == interpolator.getInterpolatedTime()) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "3a08bfa6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:44:37.476266", "repair_begin": "2018-12-31 00:30:24.883924", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "3a08bfa6", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:13:41.296579", "repair_begin": "2018-12-29 14:52:44.026965", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "3a15d8ce", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:53:43.396857", "repair_begin": "2018-12-30 21:51:19.419366", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 410, "class": "org.apache.commons.math.random.RandomDataImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n@@ -409,3 +409,5 @@\n                 if (v < -t && a == 0) {\n-                    y = lambda + y;\n+                    if (true) {\n+                        y = lambda + y;\n+                    }\n                     break;\n"}]}}, {"bug_id": "3c4cb189", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:26:31.954979", "repair_begin": "2018-12-30 22:13:09.939483", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "3c4cb189", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:14:12.772720", "repair_begin": "2018-12-29 14:53:06.640795", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "3f645310", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:33:04.050378", "repair_begin": "2018-12-30 23:21:01.772251", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "3f645310", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 16:08:13.407359", "repair_begin": "2018-12-29 15:54:17.236857", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "4ebd967c", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:27:12.519372", "repair_begin": "2018-12-30 21:14:04.712714", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "5b9302d5", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:39:57.718437", "repair_begin": "2018-12-31 00:24:04.075869", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "5b9302d5", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:54:28.721090", "repair_begin": "2018-12-29 14:32:20.235571", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "5e638976", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:08:16.807692", "repair_begin": "2018-12-31 01:01:08.347162", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 887, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -886,3 +886,5 @@\n                     d__1 = HALF * delta;\n-                    delta = Math.max(d__1,dnorm);\n+                    if (false) {\n+                        delta = Math.max(d__1,dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "5fe9b36c", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 07:35:41.303696", "repair_begin": "2019-01-03 07:27:57.456566", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_5fe9b36c\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFractionjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_5fe9b36c\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFractionjava\\n@@ -160,7 +160,7 @@\\n \\t\\t\\t\\t\\tlastScaleFactor = scaleFactor;\\n \\t\\t\\t\\t\\tscaleFactor *= scale;\\n \\t\\t\\t\\t\\tif ((a != 0.0) && (a > b)) {\\n-\\t\\t\\t\\t\\t\\tp2 = (p1 \\/ lastScaleFactor) + ((b \\/ scaleFactor) * p0);\\n+\\t\\t\\t\\t\\t\\tp2 = (b \\/ b) + ((b \\/ b) * b);\\n \\t\\t\\t\\t\\t\\tq2 = (q1 \\/ lastScaleFactor) + ((b \\/ scaleFactor) * q0);\\n \\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\tif (b != 0) {\\n \\t\\t\\t\\t\\t\\t\\tp2 = ((a \\/ scaleFactor) * p1) + (p0 \\/ lastScaleFactor);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtAssignmentImpl", "ORIGINAL_CODE": "(p1 \\/ lastScaleFactor) + ((b \\/ scaleFactor) * p0)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(b \\/ b) + ((b \\/ b) * b)", "INGREDIENT_PARENT": "(_double_0 \\/ _double_1) + ((_double_2 \\/ _double_3) * _double_4)", "LOCATION": "org.apache.commons.math.util.ContinuedFraction", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_5fe9b36c\\/.\\/output_astor\\/AstorMain-Commons-Math-5fe9b36c\\/\\/src\\/\\/variant-292\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_5fe9b36c\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "LINE": "163", "MP_RANKING": "3", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtAssignmentImpl"}], "GENERATION": "146", "VARIANT_ID": "292", "TIME": "160", "VALIDATION": "|true|0|2218|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_5fe9b36c\\/.\\/output_astor\\/AstorMain-Commons-Math-5fe9b36c\\/\\/bin\\/\\/variant-292"}]}}, {"bug_id": "5fe9b36c", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 09:49:05.900446", "repair_begin": "2019-01-01 09:44:43.216956", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java\\n@@ -183,24 +183,24 @@\\n \\t\\t\\tdouble r = p2 \\/ q2;\\n \\n \\t\\t\\tif (java.lang.Double.isNaN(r)) {\\n-\\t\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, \\n-\\t\\t\\t\\tx);\\n-\\t\\t\\t}\\n-\\t\\t\\trelativeError = org.apache.commons.math.util.FastMath.abs(((r \\/ c) - 1.0));\\n \\n \\n-\\t\\t\\tc = p2 \\/ q2;\\n-\\t\\t\\tp0 = p1;\\n-\\t\\t\\tp1 = p2;\\n-\\t\\t\\tq0 = q1;\\n-\\t\\t\\tq1 = q2;\\n-\\t\\t} \\n \\n-\\t\\tif (n >= maxIterations) {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\tthrow new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\n \\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\n-\\t\\t\\tx);\\n+\\t\\t\\t\\tx);} \\t\\t\\trelativeError = org.apache.commons.math.util.FastMath.abs(((r \\/ c) - 1.0)); \\t\\t\\tc = p2 \\/ q2; \\t\\t\\tp0 = p1; \\t\\t\\tp1 = p2; \\t\\t\\tq0 = q1; \\t\\t\\tq1 = q2;} \\t\\tif (n >= maxIterations) { \\t\\t\\tthrow new org.apache.commons.math.MaxIterationsExceededException(maxIterations, org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, x);\\n \\t\\t}\\n \\n \\t\\treturn c;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtThrowImpl|CtBlockImpl", "ORIGINAL_CODE": "throw new org.apache.commons.math.ConvergenceException(\\norg.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, \\nx)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\norg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\nx)", "INGREDIENT_PARENT": "throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\norg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\nx)", "LOCATION": "org.apache.commons.math.util.ContinuedFraction", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_5fe9b36c\\/.\\/output_astor\\/AstorMain-Commons-Math-5fe9b36c\\/\\/src\\/\\/variant-72_f\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_5fe9b36c\\/output_astor\\/AstorMain-Commons-Math-5fe9b36c\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "LINE": "186", "MP_RANKING": "2", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtThrowImpl|CtBlockImpl"}], "GENERATION": "36", "VARIANT_ID": "72", "TIME": "55", "VALIDATION": "|true|0|2218|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_5fe9b36c\\/.\\/output_astor\\/AstorMain-Commons-Math-5fe9b36c\\/\\/bin\\/\\/variant-72"}]}}, {"bug_id": "6eb46555", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:13:54.186301", "repair_begin": "2018-12-31 00:45:41.412078", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "8a83581e", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:49:42.535958", "repair_begin": "2018-12-31 00:29:06.719242", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "8a83581e", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:37:00.174797", "repair_begin": "2018-12-29 15:15:57.474971", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "8dd22390", "tool": "RSRepair-A", "nb_patch": 3, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 23:39:11.715195", "repair_begin": "2018-12-29 22:53:26.348285", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java", "line": 256, "faulty": "System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);", "type": "InsertBefore", "seed": "setMaxGrowth(10.0);"}, {"path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java", "line": 266, "faulty": "final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);", "type": "InsertBefore", "seed": "lastStep=true;"}], "patch": "--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_8dd22390/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\t2018-12-29 16:53:11.546249000 -0500\n+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_8dd22390/patches_ju1d/Patch_559/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_8dd22390/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\t2018-12-29 17:22:16.202099939 -0500\n@@ -253,7 +253,8 @@\n                 // predict a first estimate of the state at step end (P in the PECE sequence)\n                 final double stepEnd = stepStart + stepSize;\n                 interpolator.setInterpolatedTime(stepEnd);\n-                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);\n+                setMaxGrowth(10.0);\n+\t\t\t\tSystem.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);\n \n                 // evaluate a first estimate of the derivative (first E in the PECE sequence)\n                 computeDerivatives(stepEnd, yTmp, yDot);\n@@ -263,7 +264,8 @@\n                 for (int j = 0; j < y0.length; ++j) {\n                     predictedScaled[j] = stepSize * yDot[j];\n                 }\n-                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);\n+                lastStep = true;\n+\t\t\t\tfinal Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);\n                 updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);\n \n                 // apply correction (C in the PECE sequence)\n\n\n"}]}}, {"bug_id": "8e5867ed", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 06:03:41.089982", "repair_begin": "2019-01-03 05:36:13.049028", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_8e5867ed\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/util\\/Precisionjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_8e5867ed\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/util\\/Precisionjava\\n@@ -516,7 +516,7 @@\\n \\t\\t\\t\\t}\\n \\t\\t\\t\\tbreak;\\n \\t\\t\\tcase java.math.BigDecimal.ROUND_UP :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n+\\t\\t\\t\\tunscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.ceil(unscaled));\\n \\t\\t\\t\\tbreak;\\n \\t\\t\\tdefault :\\n \\t\\t\\t\\tthrow new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtInvocationImpl", "ORIGINAL_CODE": "org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "org.apache.commons.math3.util.FastMath.ceil(unscaled)", "INGREDIENT_PARENT": "org.apache.commons.math3.util.FastMath.ceil(_double_0)", "LOCATION": "org.apache.commons.math3.util.Precision", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_8e5867ed\\/.\\/output_astor\\/AstorMain-Commons-Math-8e5867ed\\/\\/src\\/\\/variant-28\\/org\\/apache\\/commons\\/math3\\/util\\/Precision.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_8e5867ed\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/util\\/Precision.java", "LINE": "519", "MP_RANKING": "50", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtInvocationImpl"}], "GENERATION": "14", "VARIANT_ID": "28", "TIME": "268", "VALIDATION": "|true|0|5465|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_8e5867ed\\/.\\/output_astor\\/AstorMain-Commons-Math-8e5867ed\\/\\/bin\\/\\/variant-28"}]}}, {"bug_id": "8e5867ed", "tool": "GenProg-A", "nb_patch": 64, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:49:55.111917", "repair_begin": "2018-12-31 00:23:26.612573", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/util/Precision.java", "line": 519, "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", "type": "Replace", "seed": "unscaled=FastMath.ceil(unscaled);"}, {"path": "src/main/java/org/apache/commons/math3/util/Precision.java", "line": 519, "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", "type": "Replace", "seed": "unscaled=FastMath.ceil(unscaled);"}, {"path": "src/main/java/org/apache/commons/math3/util/Precision.java", "line": 519, "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", "type": "Replace", "seed": "unscaled=FastMath.ceil(unscaled);"}, {"path": "src/main/java/org/apache/commons/math3/util/Precision.java", "line": 479, "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", "type": "InsertBefore", "seed": "double resultLow=0;"}, {"path": "src/main/java/org/apache/commons/math3/util/Precision.java", "line": 475, "faulty": "break;", "type": "Delete", "seed": "double b=0;"}, {"path": "src/main/java/org/apache/commons/math3/util/Precision.java", "line": 505, "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", "type": "InsertBefore", "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"}, {"path": "src/main/java/org/apache/commons/math3/util/Precision.java", "line": 475, "faulty": "break;", "type": "Replace", "seed": "boolean negate=false;"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_397/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:19.895558544 -0500\n@@ -472,11 +472,12 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            boolean negate = false;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -502,7 +503,8 @@\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n"}]}}, {"bug_id": "9aabf587", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:16:38.900665", "repair_begin": "2018-12-31 00:51:19.252414", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "9e0c5ad4", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 03:45:26.996384", "repair_begin": "2019-01-03 03:14:26.299286", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_9e0c5ad4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/special\\/Gammajava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_9e0c5ad4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/special\\/Gammajava\\n@@ -709,7 +709,7 @@\\n \\n \\n \\n-\\t\\t\\t\\tret = (-(org.apache.commons.math4.util.FastMath.PI)) \\/ \\n+\\t\\t\\t\\tret = (org.apache.commons.math4.util.FastMath.abs(x)) \\/ \\n \\t\\t\\t\\t((x * (org.apache.commons.math4.util.FastMath.sin(((org.apache.commons.math4.util.FastMath.PI) * x)))) * gammaAbs);\\n \\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(-(org.apache.commons.math4.util.FastMath.PI))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(org.apache.commons.math4.util.FastMath.abs(x))", "INGREDIENT_PARENT": "org.apache.commons.math4.util.FastMath.abs(_double_0)", "LOCATION": "org.apache.commons.math4.special.Gamma", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_9e0c5ad4\\/.\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/\\/src\\/\\/variant-8\\/org\\/apache\\/commons\\/math4\\/special\\/Gamma.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_9e0c5ad4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/special\\/Gamma.java", "LINE": "712", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl"}], "GENERATION": "4", "VARIANT_ID": "8", "TIME": "149", "VALIDATION": "|true|0|5847|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_9e0c5ad4\\/.\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/\\/bin\\/\\/variant-8"}]}}, {"bug_id": "9e0c5ad4", "tool": "GenProg-A", "nb_patch": 153, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 20:48:18.914905", "repair_begin": "2018-12-30 19:29:49.105668", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 657, "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", "type": "InsertBefore", "seed": "int m=0;"}, {"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 697, "faulty": "final double y=absX + LANCZOS_G + 0.5;", "type": "InsertBefore", "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"}, {"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 701, "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", "type": "Delete", "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"}, {"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 701, "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", "type": "Delete", "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"}, {"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 712, "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", "type": "Replace", "seed": "int nstart=0;"}, {"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 712, "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", "type": "InsertBefore", "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"}, {"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 712, "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", "type": "InsertBefore", "seed": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1226/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:38:14.663243195 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"}]}}, {"bug_id": "9e0c5ad4", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 17:32:41.167197", "repair_begin": "2019-01-01 16:51:48.640520", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math4\\/special\\/Gamma.java\\n+++ org\\/apache\\/commons\\/math4\\/special\\/Gamma.java\\n@@ -697,10 +697,13 @@\\n \\t\\t\\tfinal double y = (absX + (org.apache.commons.math4.special.Gamma.LANCZOS_G)) + 0.5;\\n \\t\\t\\tfinal double gammaAbs = ((((org.apache.commons.math4.special.Gamma.SQRT_TWO_PI) \\/ x) * \\n \\t\\t\\t(org.apache.commons.math4.util.FastMath.pow(y, (absX + 0.5)))) * \\n-\\t\\t\\t(org.apache.commons.math4.util.FastMath.exp((-y)))) * (org.apache.commons.math4.special.Gamma.lanczos(absX));\\n-\\t\\t\\tif (x > 0.0) {\\n-\\t\\t\\t\\tret = gammaAbs;\\n-\\t\\t\\t}else {\\n+\\t\\t\\t(org.apache.commons.math4.util.FastMath.exp((-y)))) * (org.apache.commons.math4.special.Gamma.lanczos(absX)); \\t\\t\\tif (x >= 1.0) { \\t\\t\\t\\tdouble prod = 1.0; \\t\\t\\t\\tdouble t = x; \\t\\t\\t\\twhile (t > 2.5) { \\t\\t\\t\\t\\tt -= 1.0; \\t\\t\\t\\t\\tprod *= t;} \\t\\t\\t\\tret = prod \\/ (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1((t - 1.0))));}else { \\t\\t\\t\\tdouble prod = x; \\t\\t\\t\\tdouble t = x; \\t\\t\\t\\twhile (t < (-0.5)) { \\t\\t\\t\\t\\tt += 1.0; \\t\\t\\t\\t\\tprod *= t;} \\t\\t\\t\\tret = 1.0 \\/ (prod * (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1(t))));}\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n \\n@@ -709,9 +712,6 @@\\n \\n \\n \\n-\\t\\t\\t\\tret = (-(org.apache.commons.math4.util.FastMath.PI)) \\/ \\n-\\t\\t\\t\\t((x * (org.apache.commons.math4.util.FastMath.sin(((org.apache.commons.math4.util.FastMath.PI) * x)))) * gammaAbs);\\n-\\t\\t\\t}\\n \\t\\t}\\n \\t\\treturn ret;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (x > 0.0) {\\n\\tret = gammaAbs;\\n}else {\\n\\n\\n\\n\\n\\n\\n\\n\\n\\tret = (-(org.apache.commons.math4.util.FastMath.PI)) \\/ \\n\\t((x * (org.apache.commons.math4.util.FastMath.sin(((org.apache.commons.math4.util.FastMath.PI) * x)))) * gammaAbs);\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (x >= 1.0) {\\n\\n\\n\\n\\n\\n\\n\\n\\n\\tdouble prod = 1.0;\\n\\tdouble t = x;\\n\\twhile (t > 2.5) {\\n\\t\\tt -= 1.0;\\n\\t\\tprod *= t;\\n\\t} \\n\\tret = prod \\/ (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1((t - 1.0))));\\n}else {\\n\\n\\n\\n\\n\\n\\n\\n\\tdouble prod = x;\\n\\tdouble t = x;\\n\\twhile (t < (-0.5)) {\\n\\t\\tt += 1.0;\\n\\t\\tprod *= t;\\n\\t} \\n\\tret = 1.0 \\/ (prod * (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1(t))));\\n}", "INGREDIENT_PARENT": "if (x >= 1.0) {\\n\\n\\n\\n\\n\\n\\n\\n\\n\\tdouble prod = 1.0;\\n\\tdouble t = x;\\n\\twhile (t > 2.5) {\\n\\t\\tt -= 1.0;\\n\\t\\tprod *= t;\\n\\t} \\n\\tret = prod \\/ (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1((t - 1.0))));\\n}else {\\n\\n\\n\\n\\n\\n\\n\\n\\tdouble prod = x;\\n\\tdouble t = x;\\n\\twhile (t < (-0.5)) {\\n\\t\\tt += 1.0;\\n\\t\\tprod *= t;\\n\\t} \\n\\tret = 1.0 \\/ (prod * (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1(t))));\\n}", "LOCATION": "org.apache.commons.math4.special.Gamma", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_9e0c5ad4\\/.\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/\\/src\\/\\/variant-206_f\\/org\\/apache\\/commons\\/math4\\/special\\/Gamma.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_9e0c5ad4\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/src\\/default\\/org\\/apache\\/commons\\/math4\\/special\\/Gamma.java", "LINE": "701", "MP_RANKING": "5", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "103", "VARIANT_ID": "206", "TIME": "547", "VALIDATION": "|true|0|5847|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_9e0c5ad4\\/.\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/\\/bin\\/\\/variant-206"}]}}, {"bug_id": "9e0c5ad4", "tool": "jKali", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:57:10.724792", "repair_begin": "2018-12-30 22:47:56.045195", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math4\\/special\\/Gamma.java\\n+++ org\\/apache\\/commons\\/math4\\/special\\/Gamma.java\\n@@ -660,7 +660,7 @@\\n \\n \\t\\tfinal double ret;\\n \\t\\tfinal double absX = org.apache.commons.math4.util.FastMath.abs(x);\\n-\\t\\tif (absX <= 20.0) {\\n+\\t\\tif (true) {\\n \\t\\t\\tif (x >= 1.0) {\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (absX <= 20.0) {\\n\\tif (x >= 1.0) {\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\tdouble prod = 1.0;\\n\\t\\tdouble t = x;\\n\\t\\twhile (t > 2.5) {\\n\\t\\t\\tt -= 1.0;\\n\\t\\t\\tprod *= t;\\n\\t\\t} \\n\\t\\tret = prod \\/ (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1((t - 1.0))));\\n\\t}else {\\n\\n\\n\\n\\n\\n\\n\\n\\t\\tdouble prod = x;\\n\\t\\tdouble t = x;\\n\\t\\twhile (t < (-0.5)) {\\n\\t\\t\\tt += 1.0;\\n\\t\\t\\tprod *= t;\\n\\t\\t} \\n\\t\\tret = 1.0 \\/ (prod * (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1(t))));\\n\\t}\\n}else {\\n\\tfinal double y = (absX + (org.apache.commons.math4.special.Gamma.LANCZOS_G)) + 0.5;\\n\\tfinal double gammaAbs = ((((org.apache.commons.math4.special.Gamma.SQRT_TWO_PI) \\/ x) * \\n\\t(org.apache.commons.math4.util.FastMath.pow(y, (absX + 0.5)))) * \\n\\t(org.apache.commons.math4.util.FastMath.exp((-y)))) * (org.apache.commons.math4.special.Gamma.lanczos(absX));\\n\\tif (x > 0.0) {\\n\\t\\tret = gammaAbs;\\n\\t}else {\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\tret = (-(org.apache.commons.math4.util.FastMath.PI)) \\/ \\n\\t\\t((x * (org.apache.commons.math4.util.FastMath.sin(((org.apache.commons.math4.util.FastMath.PI) * x)))) * gammaAbs);\\n\\t}\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\tif (x >= 1.0) {\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\tdouble prod = 1.0;\\n\\t\\tdouble t = x;\\n\\t\\twhile (t > 2.5) {\\n\\t\\t\\tt -= 1.0;\\n\\t\\t\\tprod *= t;\\n\\t\\t} \\n\\t\\tret = prod \\/ (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1((t - 1.0))));\\n\\t}else {\\n\\n\\n\\n\\n\\n\\n\\n\\t\\tdouble prod = x;\\n\\t\\tdouble t = x;\\n\\t\\twhile (t < (-0.5)) {\\n\\t\\t\\tt += 1.0;\\n\\t\\t\\tprod *= t;\\n\\t\\t} \\n\\t\\tret = 1.0 \\/ (prod * (1.0 + (org.apache.commons.math4.special.Gamma.invGamma1pm1(t))));\\n\\t}\\n}else {\\n\\tfinal double y = (absX + (org.apache.commons.math4.special.Gamma.LANCZOS_G)) + 0.5;\\n\\tfinal double gammaAbs = ((((org.apache.commons.math4.special.Gamma.SQRT_TWO_PI) \\/ x) * \\n\\t(org.apache.commons.math4.util.FastMath.pow(y, (absX + 0.5)))) * \\n\\t(org.apache.commons.math4.util.FastMath.exp((-y)))) * (org.apache.commons.math4.special.Gamma.lanczos(absX));\\n\\tif (x > 0.0) {\\n\\t\\tret = gammaAbs;\\n\\t}else {\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\tret = (-(org.apache.commons.math4.util.FastMath.PI)) \\/ \\n\\t\\t((x * (org.apache.commons.math4.util.FastMath.sin(((org.apache.commons.math4.util.FastMath.PI) * x)))) * gammaAbs);\\n\\t}\\n}", "LOCATION": "org.apache.commons.math4.special.Gamma", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_9e0c5ad4\\/.\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/\\/src\\/\\/variant-8_f\\/org\\/apache\\/commons\\/math4\\/special\\/Gamma.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_9e0c5ad4\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/src\\/default\\/org\\/apache\\/commons\\/math4\\/special\\/Gamma.java", "LINE": "663", "MP_RANKING": "8", "SUSPICIOUNESS": "0.131", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "8", "TIME": "17", "VALIDATION": "|true|0|5847|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_9e0c5ad4\\/.\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/\\/bin\\/\\/variant-8"}]}}, {"bug_id": "9e0c5ad4", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 08:46:16.825645", "repair_begin": "2019-02-05 08:37:45.828362", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_9e0c5ad4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/special\\/Gammajava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_9e0c5ad4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/special\\/Gammajava\\n@@ -660,7 +660,7 @@\\n \\n \\t\\tfinal double ret;\\n \\t\\tfinal double absX = org.apache.commons.math4.util.FastMath.abs(x);\\n-\\t\\tif (absX <= 20.0) {\\n+\\t\\tif (absX != 20.0) {\\n \\t\\t\\tif (x >= 1.0) {\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "absX <= 20.0", "PATCH_HUNK_CODE": "absX != 20.0", "LOCATION": "org.apache.commons.math4.special.Gamma", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_9e0c5ad4\\/.\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/\\/src\\/\\/variant-9\\/org\\/apache\\/commons\\/math4\\/special\\/Gamma.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_9e0c5ad4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/special\\/Gamma.java", "LINE": "663", "MP_RANKING": "1", "SUSPICIOUNESS": "0.131", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "9", "TIME": "9", "VALIDATION": "|true|0|5847|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_9e0c5ad4\\/.\\/output_astor\\/AstorMain-Commons-Math-9e0c5ad4\\/\\/bin\\/\\/variant-9"}]}}, {"bug_id": "9e0c5ad4", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 18:48:12.402497", "repair_begin": "2018-12-29 18:32:13.394254", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 663, "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-29 12:31:19.182493000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_gitn/Patch_3/patched/tmp/Kali_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-29 12:48:12.003942732 -0500\n@@ -660,7 +660,7 @@\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n+        if (true) {\n             if (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n\n\n"}]}}, {"bug_id": "9e0c5ad4", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 00:57:10.420088", "repair_begin": "2018-12-30 00:27:11.072551", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 663, "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", "type": "Replace", "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"}, {"path": "src/main/java/org/apache/commons/math4/special/Gamma.java", "line": 697, "faulty": "final double y=absX + LANCZOS_G + 0.5;", "type": "Replace", "seed": "double prod=1.0;"}], "patch": "--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-29 18:26:42.277991000 -0500\n+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_nzxx/Patch_22/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-29 18:37:37.013792826 -0500\n@@ -660,59 +660,23 @@\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n-            if (x >= 1.0) {\n-                /*\n-                 * From the recurrence relation\n-                 * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n-                 * then\n-                 * Gamma(t) = 1 / [1 + invGamma1pm1(t - 1)],\n-                 * where t = x - n. This means that t must satisfy\n-                 * -0.5 <= t - 1 <= 1.5.\n-                 */\n-                double prod = 1.0;\n-                double t = x;\n-                while (t > 2.5) {\n-                    t -= 1.0;\n-                    prod *= t;\n-                }\n-                ret = prod / (1.0 + invGamma1pm1(t - 1.0));\n-            } else {\n-                /*\n-                 * From the recurrence relation\n-                 * Gamma(x) = Gamma(x + n + 1) / [x * (x + 1) * ... * (x + n)]\n-                 * then\n-                 * Gamma(x + n + 1) = 1 / [1 + invGamma1pm1(x + n)],\n-                 * which requires -0.5 <= x + n <= 1.5.\n-                 */\n-                double prod = x;\n-                double t = x;\n-                while (t < -0.5) {\n-                    t += 1.0;\n-                    prod *= t;\n-                }\n-                ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n-            }\n-        } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n-        }\n+        if (x >= 1.0) {\n+\t\t\tdouble prod = 1.0;\n+\t\t\tdouble t = x;\n+\t\t\twhile (t > 2.5) {\n+\t\t\t\tt -= 1.0;\n+\t\t\t\tprod *= t;\n+\t\t\t}\n+\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t} else {\n+\t\t\tdouble prod = x;\n+\t\t\tdouble t = x;\n+\t\t\twhile (t < -0.5) {\n+\t\t\t\tt += 1.0;\n+\t\t\t\tprod *= t;\n+\t\t\t}\n+\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t}\n         return ret;\n     }\n }\n\n\n"}]}}, {"bug_id": "19c1c3bb", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:05:32.898717", "repair_begin": "2018-12-30 21:59:16.848048", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 104, "class": "org.apache.commons.math3.geometry.enclosing.WelzlEncloser"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\n@@ -103,3 +103,5 @@\n                 // TODO: fix this, it should never happen but it does!\n-                throw new MathInternalError();\n+                if (false) {\n+                    throw new MathInternalError();\n+                }\n             }\n"}]}}, {"bug_id": "26a61077", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-13 22:16:44.268762", "repair_begin": "2019-02-13 22:04:48.540186", "patches": [{"nb_test_that_execute_statement": 19, "patchLocation": {"line": 605, "class": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -604,3 +604,5 @@\n             }\n-            sum2 = 0;\n+            if (this.costRelativeTolerance != this.orthoTolerance) {\n+                sum2 = 0;\n+            }\n             for (int j = 0; j < solvedCols; ++j) {\n"}]}}, {"bug_id": "26a61077", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 08:09:22.860310", "repair_begin": "2019-02-05 08:02:55.138913", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_26a61077\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/analysis\\/function\\/Gaussianjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_26a61077\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/analysis\\/function\\/Gaussianjava\\n@@ -179,7 +179,7 @@\\n \\t\\t\\tif ((param.length) != 3) {\\n \\t\\t\\t\\tthrow new org.apache.commons.math.exception.DimensionMismatchException(param.length, 3);\\n \\t\\t\\t}\\n-\\t\\t\\tif ((param[2]) <= 0) {\\n+\\t\\t\\tif ((param[2]) == 0) {\\n \\t\\t\\t\\tthrow new org.apache.commons.math.exception.NotStrictlyPositiveException(param[2]);\\n \\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(param[2]) <= 0", "PATCH_HUNK_CODE": "(param[2]) == 0", "LOCATION": "org.apache.commons.math.analysis.function.Gaussian", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_26a61077\\/.\\/output_astor\\/AstorMain-Commons-Math-26a61077\\/\\/src\\/\\/variant-77\\/org\\/apache\\/commons\\/math\\/analysis\\/function\\/Gaussian.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_26a61077\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/analysis\\/function\\/Gaussian.java", "LINE": "182", "MP_RANKING": "12", "SUSPICIOUNESS": "0.224", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "77", "TIME": "27", "VALIDATION": "|true|0|2354|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_26a61077\\/.\\/output_astor\\/AstorMain-Commons-Math-26a61077\\/\\/bin\\/\\/variant-77"}]}}, {"bug_id": "26a61077", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:00:27.743799", "repair_begin": "2018-12-29 14:57:29.776721", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 182, "class": "org.apache.commons.math.analysis.function.Gaussian$Parametric"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n@@ -181,4 +181,6 @@\n             }\n-            if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+            if ((param[2]) == 0) {\n+                if (param[2] <= 0) {\n+                    throw new NotStrictlyPositiveException(param[2]);\n+                }\n             }\n"}]}}, {"bug_id": "32b0f733", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:40:12.738073", "repair_begin": "2018-12-31 01:33:10.323605", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 887, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -886,3 +886,5 @@\n                     d__1 = HALF * delta;\n-                    delta = Math.max(d__1,dnorm);\n+                    if (false) {\n+                        delta = Math.max(d__1,dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "48dde378", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:59:44.572089", "repair_begin": "2018-12-31 01:34:40.804521", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "59a0da9c", "tool": "ARJA", "nb_patch": 3, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 13:20:32.188144", "repair_begin": "2018-12-29 12:30:38.368367", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", "line": 697, "faulty": "reject=true;", "type": "InsertBefore", "seed": "if ((targetIter > 1) && (costPerTimeUnit[targetIter - 1] < orderControl1 * costPerTimeUnit[targetIter])) {\n  --targetIter;\n}"}, {"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 89, "faulty": "minRatioPositions.add(i);", "type": "InsertBefore", "seed": "minRatioPositions=new ArrayList<Integer>();"}, {"path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", "line": 803, "faulty": "break;", "type": "Delete", "seed": "this.scalAbsoluteTolerance=scalAbsoluteTolerance;"}, {"path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", "line": 754, "faulty": "reject=true;", "type": "Replace", "seed": "if (newStep) {\n  interpolator.shift();\n  if (!firstStepAlreadyComputed) {\n    computeDerivatives(stepStart,y,yDot0);\n  }\n  if (firstTime) {\n    hNew=initializeStep(equations,forward,2 * targetIter + 1,scale,stepStart,y,yDot0,yTmp,yTmpDot);\n    if (!forward) {\n      hNew=-hNew;\n    }\n  }\n  newStep=false;\n}"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-29 06:30:16.966620000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/patches_un30/Patch_1433/patched/tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-29 07:19:12.808350018 -0500\n@@ -86,7 +86,8 @@\n             if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (MathUtils.equals(ratio, minRatio, epsilon)) {\n-                    minRatioPositions.add(i);\n+                    minRatioPositions = new ArrayList<Integer>();\n+\t\t\t\t\tminRatioPositions.add(i);\n                 } else if (ratio < minRatio) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\t2018-12-29 06:30:16.902618000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/patches_un30/Patch_1433/patched/tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\t2018-12-29 07:19:12.812350042 -0500\n@@ -694,7 +694,12 @@\n \n           // the stability check failed, we reduce the global step\n           hNew   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));\n-          reject = true;\n+          if ((targetIter > 1)\n+\t\t\t\t&& (costPerTimeUnit[targetIter - 1] < orderControl1\n+\t\t\t\t\t\t* costPerTimeUnit[targetIter])) {\n+\t\t\t--targetIter;\n+\t\t}\n+\t\treject = true;\n           loop   = false;\n \n         } else {\n@@ -749,9 +754,21 @@\n                     final double ratio = ((double) sequence [k] * sequence[k+1]) /\n                                          (sequence[0] * sequence[0]);\n                     if (error > ratio * ratio) {\n-                      // we don't expect to converge on next iteration\n-                      // we reject the step immediately and reduce order\n-                      reject = true;\n+                      if (newStep) {\n+\t\t\t\t\t\tinterpolator.shift();\n+\t\t\t\t\t\tif (!firstStepAlreadyComputed) {\n+\t\t\t\t\t\t\tcomputeDerivatives(stepStart, y, yDot0);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (firstTime) {\n+\t\t\t\t\t\t\thNew = initializeStep(equations, forward,\n+\t\t\t\t\t\t\t\t\t2 * targetIter + 1, scale, stepStart, y,\n+\t\t\t\t\t\t\t\t\tyDot0, yTmp, yTmpDot);\n+\t\t\t\t\t\t\tif (!forward) {\n+\t\t\t\t\t\t\t\thNew = -hNew;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnewStep = false;\n+\t\t\t\t\t}\n                       loop   = false;\n                       targetIter = k;\n                       if ((targetIter > 1) &&\n@@ -800,7 +817,7 @@\n                   hNew = optimalStep[targetIter];\n                 }\n                 loop = false;\n-                break;\n+                ;\n \n               default :\n                 if ((firstTime || lastStep) && (error <= 1.0)) {\n\n\n"}]}}, {"bug_id": "59a0da9c", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:11:07.208072", "repair_begin": "2018-12-30 22:10:09.166186", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 878, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -877,3 +877,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if (this.stepStart == interpolator.getInterpolatedTime()) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "59a0da9c", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:57:42.999806", "repair_begin": "2018-12-29 15:51:53.564830", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 878, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -877,3 +877,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if ((!((org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.this.stepControl3 <= hInt) && (18 < interpError))) || (previousRejected)) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "061f5017", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:31:16.530200", "repair_begin": "2018-12-30 21:23:30.025282", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 211, "class": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n@@ -210,3 +210,5 @@\n       // use the user provided value\n-      return forward ? initialStep : -initialStep;\n+      if (false) {\n+        return forward ? initialStep : -initialStep;\n+      }\n     }\n"}]}}, {"bug_id": "63a48705", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:58:07.926330", "repair_begin": "2018-12-30 21:43:01.005649", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "63a48705", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:47:03.920591", "repair_begin": "2018-12-29 14:25:20.523345", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "66dece12", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:12:05.229990", "repair_begin": "2018-12-30 22:52:49.628744", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "66dece12", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:13:59.063253", "repair_begin": "2018-12-29 14:52:13.197440", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "83f18d52", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:32:25.466972", "repair_begin": "2018-12-30 23:31:49.252527", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 1139, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1138,3 +1138,5 @@\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n+                    if (false) {\n+                        work[i + k] = work[j - k];\n+                    }\n                     work[j - k] = tmp;\n"}]}}, {"bug_id": "83f18d52", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:53:04.097989", "repair_begin": "2018-12-29 14:52:28.369540", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 1139, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1138,3 +1138,5 @@\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n+                    if (org.apache.commons.math.linear.EigenDecompositionImpl.this.cachedV!=null) {\n+                        work[i + k] = work[j - k];\n+                    }\n                     work[j - k] = tmp;\n"}]}}, {"bug_id": "91d280b7", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:33:05.018826", "repair_begin": "2018-12-31 01:21:19.898849", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "95d15eff", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:57:05.114660", "repair_begin": "2018-12-30 23:41:46.452387", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "95d15eff", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:37:58.507499", "repair_begin": "2018-12-29 15:15:49.913958", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "97b440fc", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:18:23.272757", "repair_begin": "2018-12-31 01:10:06.849902", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 887, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -886,3 +886,5 @@\n                     d__1 = HALF * delta;\n-                    delta = Math.max(d__1,dnorm);\n+                    if (false) {\n+                        delta = Math.max(d__1,dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "118e94b5", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:56:53.654025", "repair_begin": "2018-12-31 00:41:36.841645", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "118e94b5", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:05:56.008696", "repair_begin": "2018-12-29 14:44:46.516173", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "118f0cc0", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:28:04.923834", "repair_begin": "2018-12-30 22:20:18.884645", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "118f0cc0", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:31:06.604775", "repair_begin": "2018-12-29 15:17:10.492873", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "185e3033", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:12:04.215855", "repair_begin": "2018-12-31 00:47:23.454906", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "334c01e6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:01:49.263793", "repair_begin": "2018-12-30 23:52:31.055896", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 932, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -931,3 +931,5 @@\n                     d__1 = HALF * delta;\n-                    delta = Math.max(d__1,dnorm);\n+                    if (false) {\n+                        delta = Math.max(d__1,dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "350f726c", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:34:31.177227", "repair_begin": "2018-12-31 00:19:55.712284", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "350f726c", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 16:01:55.377907", "repair_begin": "2018-12-29 15:40:46.080848", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "424cbd20", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:22:44.853892", "repair_begin": "2018-12-31 00:50:17.436859", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "495f04bc", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 06:00:49.087562", "repair_begin": "2019-01-03 05:59:23.355359", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_495f04bc\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/util\\/MathUtilsjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_495f04bc\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/util\\/MathUtilsjava\\n@@ -420,8 +420,439 @@\\n \\n \\n \\tpublic static boolean equals(double x, double y) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);\\n-\\t}\\n+\\t\\treturn (\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n \\n@@ -431,9 +862,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));\\n-\\t}\\n \\n \\n \\n@@ -444,9 +872,6 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double x, double y, double eps) {\\n-\\t\\treturn (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);\\n-\\t}\\n \\n \\n \\n@@ -458,9 +883,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) {\\n-\\t\\treturn (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);\\n-\\t}\\n \\n \\n \\n@@ -479,26 +901,13 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double x, double y, int maxUlps) {\\n \\n \\n-\\t\\tassert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));\\n \\n-\\t\\tlong xInt = java.lang.Double.doubleToLongBits(x);\\n-\\t\\tlong yInt = java.lang.Double.doubleToLongBits(y);\\n \\n \\n-\\t\\tif (xInt < 0) {\\n-\\t\\t\\txInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;\\n-\\t\\t}\\n-\\t\\tif (yInt < 0) {\\n-\\t\\t\\tyInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;\\n-\\t\\t}\\n \\n-\\t\\tfinal boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;\\n \\n-\\t\\treturn (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));\\n-\\t}\\n \\n \\n \\n@@ -511,9 +920,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));\\n-\\t}\\n \\n \\n \\n@@ -531,20 +937,6 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double[] x, double[] y) {\\n-\\t\\tif ((x == null) || (y == null)) {\\n-\\t\\t\\treturn !((x == null) ^ (y == null));\\n-\\t\\t}\\n-\\t\\tif ((x.length) != (y.length)) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < (x.length); ++i) {\\n-\\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}\\n \\n \\n \\n@@ -556,20 +948,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) {\\n-\\t\\tif ((x == null) || (y == null)) {\\n-\\t\\t\\treturn !((x == null) ^ (y == null));\\n-\\t\\t}\\n-\\t\\tif ((x.length) != (y.length)) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < (x.length); ++i) {\\n-\\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}\\n \\n \\n \\n@@ -593,18 +971,6 @@\\n \\n \\n \\n-\\tpublic static long factorial(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n > 20) {\\n-\\t\\t\\tthrow new java.lang.ArithmeticException(\\n-\\t\\t\\t\\\"factorial value is too large to fit in a long\\\");\\n-\\t\\t}\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];\\n-\\t}\\n \\n \\n \\n@@ -626,17 +992,6 @@\\n \\n \\n \\n-\\tpublic static double factorialDouble(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n < 21) {\\n-\\t\\t\\treturn org.apache.commons.math.util.MathUtils.factorial(n);\\n-\\t\\t}\\n-\\t\\treturn org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));\\n-\\t}\\n \\n \\n \\n@@ -651,21 +1006,6 @@\\n \\n \\n \\n-\\tpublic static double factorialLog(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n < 21) {\\n-\\t\\t\\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));\\n-\\t\\t}\\n-\\t\\tdouble logSum = 0;\\n-\\t\\tfor (int i = 2; i <= n; i++) {\\n-\\t\\t\\tlogSum += org.apache.commons.math.util.FastMath.log(i);\\n-\\t\\t}\\n-\\t\\treturn logSum;\\n-\\t}\\n \\n \\n \\n@@ -696,65 +1036,23 @@\\n \\n \\n \\n-\\tpublic static int gcd(final int p, final int q) {\\n-\\t\\tint u = p;\\n-\\t\\tint v = q;\\n-\\t\\tif ((u == 0) || (v == 0)) {\\n-\\t\\t\\tif ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \\n-\\t\\t\\t\\tp, q);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));\\n-\\t\\t}\\n \\n \\n \\n \\n \\n-\\t\\tif (u > 0) {\\n-\\t\\t\\tu = -u;\\n-\\t\\t}\\n-\\t\\tif (v > 0) {\\n-\\t\\t\\tv = -v;\\n-\\t\\t}\\n \\n-\\t\\tint k = 0;\\n-\\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\\n \\n-\\t\\t\\tu \\/= 2;\\n-\\t\\t\\tv \\/= 2;\\n-\\t\\t\\tk++;\\n-\\t\\t} \\n-\\t\\tif (k == 31) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \\n-\\t\\t\\tp, q);\\n-\\t\\t}\\n \\n \\n-\\t\\tint t = ((u & 1) == 1) ? v : -(u \\/ 2);\\n \\n \\n-\\t\\tdo {\\n \\n \\n-\\t\\t\\twhile ((t & 1) == 0) {\\n-\\t\\t\\t\\tt \\/= 2;\\n-\\t\\t\\t} \\n \\n-\\t\\t\\tif (t > 0) {\\n-\\t\\t\\t\\tu = -t;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tv = t;\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tt = (v - u) \\/ 2;\\n \\n \\n-\\t\\t} while (t != 0 );\\n-\\t\\treturn (-u) * (1 << k);\\n-\\t}\\n \\n \\n \\n@@ -785,65 +1083,23 @@\\n \\n \\n \\n-\\tpublic static long gcd(final long p, final long q) {\\n-\\t\\tlong u = p;\\n-\\t\\tlong v = q;\\n-\\t\\tif ((u == 0) || (v == 0)) {\\n-\\t\\t\\tif ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \\n-\\t\\t\\t\\tp, q);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));\\n-\\t\\t}\\n \\n \\n \\n \\n \\n-\\t\\tif (u > 0) {\\n-\\t\\t\\tu = -u;\\n-\\t\\t}\\n-\\t\\tif (v > 0) {\\n-\\t\\t\\tv = -v;\\n-\\t\\t}\\n \\n-\\t\\tint k = 0;\\n-\\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {\\n \\n-\\t\\t\\tu \\/= 2;\\n-\\t\\t\\tv \\/= 2;\\n-\\t\\t\\tk++;\\n-\\t\\t} \\n-\\t\\tif (k == 63) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \\n-\\t\\t\\tp, q);\\n-\\t\\t}\\n \\n \\n-\\t\\tlong t = ((u & 1) == 1) ? v : -(u \\/ 2);\\n \\n \\n-\\t\\tdo {\\n \\n \\n-\\t\\t\\twhile ((t & 1) == 0) {\\n-\\t\\t\\t\\tt \\/= 2;\\n-\\t\\t\\t} \\n \\n-\\t\\t\\tif (t > 0) {\\n-\\t\\t\\t\\tu = -t;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tv = t;\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tt = (v - u) \\/ 2;\\n \\n \\n-\\t\\t} while (t != 0 );\\n-\\t\\treturn (-u) * (1L << k);\\n-\\t}\\n \\n \\n \\n@@ -851,9 +1107,6 @@\\n \\n \\n \\n-\\tpublic static int hash(double value) {\\n-\\t\\treturn new java.lang.Double(value).hashCode();\\n-\\t}\\n \\n \\n \\n@@ -862,9 +1115,6 @@\\n \\n \\n \\n-\\tpublic static int hash(double[] value) {\\n-\\t\\treturn java.util.Arrays.hashCode(value);\\n-\\t}\\n \\n \\n \\n@@ -873,9 +1123,6 @@\\n \\n \\n \\n-\\tpublic static byte indicator(final byte x) {\\n-\\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n-\\t}\\n \\n \\n \\n@@ -885,12 +1132,6 @@\\n \\n \\n \\n-\\tpublic static double indicator(final double x) {\\n-\\t\\tif (java.lang.Double.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t}\\n-\\t\\treturn x >= 0.0 ? 1.0 : -1.0;\\n-\\t}\\n \\n \\n \\n@@ -899,12 +1140,6 @@\\n \\n \\n \\n-\\tpublic static float indicator(final float x) {\\n-\\t\\tif (java.lang.Float.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Float.NaN;\\n-\\t\\t}\\n-\\t\\treturn x >= 0.0F ? 1.0F : -1.0F;\\n-\\t}\\n \\n \\n \\n@@ -912,9 +1147,6 @@\\n \\n \\n \\n-\\tpublic static int indicator(final int x) {\\n-\\t\\treturn x >= 0 ? 1 : -1;\\n-\\t}\\n \\n \\n \\n@@ -922,9 +1154,6 @@\\n \\n \\n \\n-\\tpublic static long indicator(final long x) {\\n-\\t\\treturn x >= 0L ? 1L : -1L;\\n-\\t}\\n \\n \\n \\n@@ -933,9 +1162,6 @@\\n \\n \\n \\n-\\tpublic static short indicator(final short x) {\\n-\\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\\n-\\t}\\n \\n \\n \\n@@ -960,18 +1186,6 @@\\n \\n \\n \\n-\\tpublic static int lcm(int a, int b) {\\n-\\t\\tif ((a == 0) || (b == 0)) {\\n-\\t\\t\\treturn 0;\\n-\\t\\t}\\n-\\t\\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));\\n-\\t\\tif (lcm == (java.lang.Integer.MIN_VALUE)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, \\n-\\t\\t\\ta, b);\\n-\\t\\t}\\n-\\t\\treturn lcm;\\n-\\t}\\n \\n \\n \\n@@ -995,18 +1209,6 @@\\n \\n \\n \\n-\\tpublic static long lcm(long a, long b) {\\n-\\t\\tif ((a == 0) || (b == 0)) {\\n-\\t\\t\\treturn 0;\\n-\\t\\t}\\n-\\t\\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));\\n-\\t\\tif (lcm == (java.lang.Long.MIN_VALUE)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, \\n-\\t\\t\\ta, b);\\n-\\t\\t}\\n-\\t\\treturn lcm;\\n-\\t}\\n \\n \\n \\n@@ -1024,9 +1226,6 @@\\n \\n \\n \\n-\\tpublic static double log(double base, double x) {\\n-\\t\\treturn (org.apache.commons.math.util.FastMath.log(x)) \\/ (org.apache.commons.math.util.FastMath.log(base));\\n-\\t}\\n \\n \\n \\n@@ -1038,13 +1237,6 @@\\n \\n \\n \\n-\\tpublic static int mulAndCheck(int x, int y) {\\n-\\t\\tlong m = ((long) (x)) * ((long) (y));\\n-\\t\\tif ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {\\n-\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"overflow: mul\\\");\\n-\\t\\t}\\n-\\t\\treturn ((int) (m));\\n-\\t}\\n \\n \\n \\n@@ -1056,50 +1248,14 @@\\n \\n \\n \\n-\\tpublic static long mulAndCheck(long a, long b) {\\n-\\t\\tlong ret;\\n-\\t\\tjava.lang.String msg = \\\"overflow: multiply\\\";\\n-\\t\\tif (a > b) {\\n-\\n-\\t\\t\\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);\\n-\\t\\t}else {\\n-\\t\\t\\tif (a < 0) {\\n-\\t\\t\\t\\tif (b < 0) {\\n-\\n-\\t\\t\\t\\t\\tif (a >= ((java.lang.Long.MAX_VALUE) \\/ b)) {\\n-\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else \\t\\t\\t\\t\\tif (b > 0) {\\n \\n-\\t\\t\\t\\t\\t\\tif (((java.lang.Long.MIN_VALUE) \\/ b) <= a) {\\n-\\t\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n \\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\t\\tret = 0;\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}else \\t\\t\\t\\tif (a > 0) {\\n \\n \\n \\n \\n-\\t\\t\\t\\t\\tif (a <= ((java.lang.Long.MAX_VALUE) \\/ b)) {\\n-\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\tret = 0;\\n-\\t\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn ret;\\n-\\t}\\n \\n \\n \\n@@ -1119,10 +1275,6 @@\\n \\n \\n \\n-\\t@java.lang.Deprecated\\n-\\tpublic static double nextAfter(double d, double direction) {\\n-\\t\\treturn org.apache.commons.math.util.FastMath.nextAfter(d, direction);\\n-\\t}\\n \\n \\n \\n@@ -1133,23 +1285,13 @@\\n \\n \\n \\n-\\tpublic static double scalb(final double d, final int scaleFactor) {\\n \\n \\n-\\t\\tif (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {\\n-\\t\\t\\treturn d;\\n-\\t\\t}\\n \\n \\n-\\t\\tfinal long bits = java.lang.Double.doubleToLongBits(d);\\n-\\t\\tfinal long exponent = bits & 9218868437227405312L;\\n-\\t\\tfinal long rest = bits & -9218868437227405313L;\\n \\n \\n-\\t\\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));\\n-\\t\\treturn java.lang.Double.longBitsToDouble(newBits);\\n \\n-\\t}\\n \\n \\n \\n@@ -1170,9 +1312,6 @@\\n \\n \\n \\n-\\tpublic static double normalizeAngle(double a, double center) {\\n-\\t\\treturn a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) \\/ (org.apache.commons.math.util.MathUtils.TWO_PI)))));\\n-\\t}\\n \\n \\n \\n@@ -1195,40 +1334,6 @@\\n \\n \\n \\n-\\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws \\n-\\tjava.lang.ArithmeticException, java.lang.IllegalArgumentException {\\n-\\t\\tif (java.lang.Double.isInfinite(normalizedSum)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);\\n-\\t\\t}\\n-\\t\\tif (java.lang.Double.isNaN(normalizedSum)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);\\n-\\t\\t}\\n-\\t\\tdouble sum = 0.0;\\n-\\t\\tfinal int len = values.length;\\n-\\t\\tdouble[] out = new double[len];\\n-\\t\\tfor (int i = 0; i < len; i++) {\\n-\\t\\t\\tif (java.lang.Double.isInfinite(values[i])) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\\n-\\t\\t\\t}\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(values[i]))) {\\n-\\t\\t\\t\\tsum += values[i];\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tif (sum == 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < len; i++) {\\n-\\t\\t\\tif (java.lang.Double.isNaN(values[i])) {\\n-\\t\\t\\t\\tout[i] = java.lang.Double.NaN;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tout[i] = ((values[i]) * normalizedSum) \\/ sum;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn out;\\n-\\t}\\n \\n \\n \\n@@ -1239,9 +1344,6 @@\\n \\n \\n \\n-\\tpublic static double round(double x, int scale) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\\n-\\t}\\n \\n \\n \\n@@ -1255,20 +1357,6 @@\\n \\n \\n \\n-\\tpublic static double round(double x, int scale, int roundingMethod) {\\n-\\t\\ttry {\\n-\\t\\t\\treturn new java.math.BigDecimal(\\n-\\t\\t\\tjava.lang.Double.toString(x)).setScale(\\n-\\t\\t\\tscale, roundingMethod).doubleValue();\\n-\\n-\\t\\t} catch (java.lang.NumberFormatException ex) {\\n-\\t\\t\\tif (java.lang.Double.isInfinite(x)) {\\n-\\t\\t\\t\\treturn x;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -1279,9 +1367,6 @@\\n \\n \\n \\n-\\tpublic static float round(float x, int scale) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\\n-\\t}\\n \\n \\n \\n@@ -1295,11 +1380,6 @@\\n \\n \\n \\n-\\tpublic static float round(float x, int scale, int roundingMethod) {\\n-\\t\\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x);\\n-\\t\\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;\\n-\\t\\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) \\/ factor;\\n-\\t}\\n \\n \\n \\n@@ -1313,86 +1393,7 @@\\n \\n \\n \\n-\\tprivate static double roundUnscaled(double unscaled, double sign, \\n-\\tint roundingMethod) {\\n-\\t\\tswitch (roundingMethod) {\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_CEILING :\\n-\\t\\t\\t\\tif (sign == (-1)) {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_DOWN :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_FLOOR :\\n-\\t\\t\\t\\tif (sign == (-1)) {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction > 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction > 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\tif (fraction < 0.5) {\\n-\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\n-\\t\\t\\t\\t\\t\\t\\tif (((org.apache.commons.math.util.FastMath.floor(unscaled)) \\/ 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(\\n-\\t\\t\\t\\t\\t\\t\\tunscaled)) \\/ 2.0)))) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_UP : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction >= 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_UNNECESSARY :\\n-\\t\\t\\t\\tif (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) {\\n-\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"Inexact result from rounding\\\");\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_UP :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tdefault :\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, \\n-\\t\\t\\t\\troundingMethod, \\n-\\t\\t\\t\\t\\\"ROUND_CEILING\\\", java.math.BigDecimal.ROUND_CEILING, \\n-\\t\\t\\t\\t\\\"ROUND_DOWN\\\", java.math.BigDecimal.ROUND_DOWN, \\n-\\t\\t\\t\\t\\\"ROUND_FLOOR\\\", java.math.BigDecimal.ROUND_FLOOR, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_DOWN\\\", java.math.BigDecimal.ROUND_HALF_DOWN, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_EVEN\\\", java.math.BigDecimal.ROUND_HALF_EVEN, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_UP\\\", java.math.BigDecimal.ROUND_HALF_UP, \\n-\\t\\t\\t\\t\\\"ROUND_UNNECESSARY\\\", java.math.BigDecimal.ROUND_UNNECESSARY, \\n-\\t\\t\\t\\t\\\"ROUND_UP\\\", java.math.BigDecimal.ROUND_UP);}\\n \\n-\\t\\treturn unscaled;\\n-\\t}\\n \\n \\n \\n@@ -1404,8 +1405,7 @@\\n \\n \\n \\n-\\tpublic static byte sign(final byte x) {\\n-\\t\\treturn x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n+\\t\\t((NB) == (org.apache.commons.math.util.MathUtils.ZB)) && (java.lang.Double.isNaN(y))) || (x == y);} \\tpublic static boolean equalsIncludingNaN(double x, double y) { \\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));} \\tpublic static boolean equals(double x, double y, double eps) { \\t\\treturn (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} \\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) { \\t\\treturn (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} \\tpublic static boolean equals(double x, double y, int maxUlps) { \\t\\tassert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP)); \\t\\tlong xInt = java.lang.Double.doubleToLongBits(x); \\t\\tlong yInt = java.lang.Double.doubleToLongBits(y); \\t\\tif (xInt < 0) { \\t\\t\\txInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;} \\t\\tif (yInt < 0) { \\t\\t\\tyInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;} \\t\\tfinal boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps; \\t\\treturn (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));} \\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) { \\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));} \\tpublic static boolean equals(double[] x, double[] y) { \\t\\tif ((x == null) || (y == null)) { \\t\\t\\treturn !((x == null) ^ (y == null));} \\t\\tif ((x.length) != (y.length)) { \\t\\t\\treturn false;} \\t\\tfor (int i = 0; i < (x.length); ++i) { \\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) { \\t\\t\\t\\treturn false;}} \\t\\treturn true;} \\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) { \\t\\tif ((x == null) || (y == null)) { \\t\\t\\treturn !((x == null) ^ (y == null));} \\t\\tif ((x.length) != (y.length)) { \\t\\t\\treturn false;} \\t\\tfor (int i = 0; i < (x.length); ++i) { \\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) { \\t\\t\\t\\treturn false;}} \\t\\treturn true;} \\tpublic static long factorial(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n > 20) { \\t\\t\\tthrow new java.lang.ArithmeticException(\\\"factorial value is too large to fit in a long\\\");} \\t\\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];} \\tpublic static double factorialDouble(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n < 21) { \\t\\t\\treturn org.apache.commons.math.util.MathUtils.factorial(n);} \\t\\treturn org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));} \\tpublic static double factorialLog(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n < 21) { \\t\\t\\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} \\t\\tdouble logSum = 0; \\t\\tfor (int i = 2; i <= n; i++) { \\t\\t\\tlogSum += org.apache.commons.math.util.FastMath.log(i);} \\t\\treturn logSum;} \\tpublic static int gcd(final int p, final int q) { \\t\\tint u = p; \\t\\tint v = q; \\t\\tif ((u == 0) || (v == 0)) { \\t\\t\\tif ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} \\t\\tif (u > 0) { \\t\\t\\tu = -u;} \\t\\tif (v > 0) { \\t\\t\\tv = -v;} \\t\\tint k = 0; \\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { \\t\\t\\tu \\/= 2; \\t\\t\\tv \\/= 2; \\t\\t\\tk++;} \\t\\tif (k == 31) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \\t\\tint t = ((u & 1) == 1) ? v : -(u \\/ 2); \\t\\tdo { \\t\\t\\twhile ((t & 1) == 0) { \\t\\t\\t\\tt \\/= 2;} \\t\\t\\tif (t > 0) { \\t\\t\\t\\tu = -t;}else { \\t\\t\\t\\tv = t;} \\t\\t\\tt = (v - u) \\/ 2;} while (t != 0 ); \\t\\treturn (-u) * (1 << k);} \\tpublic static long gcd(final long p, final long q) { \\t\\tlong u = p; \\t\\tlong v = q; \\t\\tif ((u == 0) || (v == 0)) { \\t\\t\\tif ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} \\t\\tif (u > 0) { \\t\\t\\tu = -u;} \\t\\tif (v > 0) { \\t\\t\\tv = -v;} \\t\\tint k = 0; \\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { \\t\\t\\tu \\/= 2; \\t\\t\\tv \\/= 2; \\t\\t\\tk++;} \\t\\tif (k == 63) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \\t\\tlong t = ((u & 1) == 1) ? v : -(u \\/ 2); \\t\\tdo { \\t\\t\\twhile ((t & 1) == 0) { \\t\\t\\t\\tt \\/= 2;} \\t\\t\\tif (t > 0) { \\t\\t\\t\\tu = -t;}else { \\t\\t\\t\\tv = t;} \\t\\t\\tt = (v - u) \\/ 2;} while (t != 0 ); \\t\\treturn (-u) * (1L << k);} \\tpublic static int hash(double value) { \\t\\treturn new java.lang.Double(value).hashCode();} \\tpublic static int hash(double[] value) { \\t\\treturn java.util.Arrays.hashCode(value);} \\tpublic static byte indicator(final byte x) { \\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} \\tpublic static double indicator(final double x) { \\t\\tif (java.lang.Double.isNaN(x)) { \\t\\t\\treturn java.lang.Double.NaN;} \\t\\treturn x >= 0.0 ? 1.0 : -1.0;} \\tpublic static float indicator(final float x) { \\t\\tif (java.lang.Float.isNaN(x)) { \\t\\t\\treturn java.lang.Float.NaN;} \\t\\treturn x >= 0.0F ? 1.0F : -1.0F;} \\tpublic static int indicator(final int x) { \\t\\treturn x >= 0 ? 1 : -1;} \\tpublic static long indicator(final long x) { \\t\\treturn x >= 0L ? 1L : -1L;} \\tpublic static short indicator(final short x) { \\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} \\tpublic static int lcm(int a, int b) { \\t\\tif ((a == 0) || (b == 0)) { \\t\\t\\treturn 0;} \\t\\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); \\t\\tif (lcm == (java.lang.Integer.MIN_VALUE)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} \\t\\treturn lcm;} \\tpublic static long lcm(long a, long b) { \\t\\tif ((a == 0) || (b == 0)) { \\t\\t\\treturn 0;} \\t\\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); \\t\\tif (lcm == (java.lang.Long.MIN_VALUE)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} \\t\\treturn lcm;} \\tpublic static double log(double base, double x) { \\t\\treturn (org.apache.commons.math.util.FastMath.log(x)) \\/ (org.apache.commons.math.util.FastMath.log(base));} \\tpublic static int mulAndCheck(int x, int y) { \\t\\tlong m = ((long) (x)) * ((long) (y)); \\t\\tif ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) { \\t\\t\\tthrow new java.lang.ArithmeticException(\\\"overflow: mul\\\");} \\t\\treturn ((int) (m));} \\tpublic static long mulAndCheck(long a, long b) { \\t\\tlong ret; \\t\\tjava.lang.String msg = \\\"overflow: multiply\\\"; \\t\\tif (a > b) { \\t\\t\\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);}else { \\t\\t\\tif (a < 0) { \\t\\t\\t\\tif (b < 0) { \\t\\t\\t\\t\\tif (a >= ((java.lang.Long.MAX_VALUE) \\/ b)) { \\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else \\t\\t\\t\\t\\tif (b > 0) { \\t\\t\\t\\t\\t\\tif (((java.lang.Long.MIN_VALUE) \\/ b) <= a) { \\t\\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else { \\t\\t\\t\\t\\t\\tret = 0;}}else \\t\\t\\t\\tif (a > 0) { \\t\\t\\t\\t\\tif (a <= ((java.lang.Long.MAX_VALUE) \\/ b)) { \\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else { \\t\\t\\t\\t\\tret = 0;}} \\t\\treturn ret;} \\t@java.lang.Deprecated \\tpublic static double nextAfter(double d, double direction) { \\t\\treturn org.apache.commons.math.util.FastMath.nextAfter(d, direction);} \\tpublic static double scalb(final double d, final int scaleFactor) { \\t\\tif (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) { \\t\\t\\treturn d;} \\t\\tfinal long bits = java.lang.Double.doubleToLongBits(d); \\t\\tfinal long exponent = bits & 9218868437227405312L; \\t\\tfinal long rest = bits & -9218868437227405313L; \\t\\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); \\t\\treturn java.lang.Double.longBitsToDouble(newBits);} \\tpublic static double normalizeAngle(double a, double center) { \\t\\treturn a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) \\/ (org.apache.commons.math.util.MathUtils.TWO_PI)))));} \\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { \\t\\tif (java.lang.Double.isInfinite(normalizedSum)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} \\t\\tif (java.lang.Double.isNaN(normalizedSum)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} \\t\\tdouble sum = 0.0; \\t\\tfinal int len = values.length; \\t\\tdouble[] out = new double[len]; \\t\\tfor (int i = 0; i < len; i++) { \\t\\t\\tif (java.lang.Double.isInfinite(values[i])) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} \\t\\t\\tif (!(java.lang.Double.isNaN(values[i]))) { \\t\\t\\t\\tsum += values[i];}} \\t\\tif (sum == 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} \\t\\tfor (int i = 0; i < len; i++) { \\t\\t\\tif (java.lang.Double.isNaN(values[i])) { \\t\\t\\t\\tout[i] = java.lang.Double.NaN;}else { \\t\\t\\t\\tout[i] = ((values[i]) * normalizedSum) \\/ sum;}} \\t\\treturn out;} \\tpublic static double round(double x, int scale) { \\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \\tpublic static double round(double x, int scale, int roundingMethod) { \\t\\ttry { \\t\\t\\treturn new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { \\t\\t\\tif (java.lang.Double.isInfinite(x)) { \\t\\t\\t\\treturn x;}else { \\t\\t\\t\\treturn java.lang.Double.NaN;}}} \\tpublic static float round(float x, int scale) { \\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \\tpublic static float round(float x, int scale, int roundingMethod) { \\t\\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x); \\t\\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; \\t\\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) \\/ factor;} \\tprivate static double roundUnscaled(double unscaled, double sign, int roundingMethod) { \\t\\tswitch (roundingMethod) { \\t\\t\\tcase java.math.BigDecimal.ROUND_CEILING : \\t\\t\\t\\tif (sign == (-1)) { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));}else { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_DOWN : \\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_FLOOR : \\t\\t\\t\\tif (sign == (-1)) { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));}else { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction > 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction > 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else \\t\\t\\t\\t\\t\\tif (fraction < 0.5) { \\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { \\t\\t\\t\\t\\t\\t\\tif (((org.apache.commons.math.util.FastMath.floor(unscaled)) \\/ 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(unscaled)) \\/ 2.0)))) { \\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { \\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_UP : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY); \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction >= 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_UNNECESSARY : \\t\\t\\t\\tif (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) { \\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"Inexact result from rounding\\\");} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_UP : \\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.MathUtils.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)); \\t\\t\\t\\tbreak; \\t\\t\\tdefault : \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, \\\"ROUND_CEILING\\\", java.math.BigDecimal.ROUND_CEILING, \\\"ROUND_DOWN\\\", java.math.BigDecimal.ROUND_DOWN, \\\"ROUND_FLOOR\\\", java.math.BigDecimal.ROUND_FLOOR, \\\"ROUND_HALF_DOWN\\\", java.math.BigDecimal.ROUND_HALF_DOWN, \\\"ROUND_HALF_EVEN\\\", java.math.BigDecimal.ROUND_HALF_EVEN, \\\"ROUND_HALF_UP\\\", java.math.BigDecimal.ROUND_HALF_UP, \\\"ROUND_UNNECESSARY\\\", java.math.BigDecimal.ROUND_UNNECESSARY, \\\"ROUND_UP\\\", java.math.BigDecimal.ROUND_UP);} \\t\\treturn unscaled;} \\tpublic static byte sign(final byte x) { \\t\\treturn x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(java.lang.Double.isNaN(x))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "((org.apache.commons.math.util.MathUtils.NB) == (org.apache.commons.math.util.MathUtils.ZB))", "INGREDIENT_PARENT": "_byte_0 == (org.apache.commons.math.util.MathUtils.ZB)", "LOCATION": "org.apache.commons.math.util.MathUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_495f04bc\\/.\\/output_astor\\/AstorMain-Commons-Math-495f04bc\\/\\/src\\/\\/variant-10\\/org\\/apache\\/commons\\/math\\/util\\/MathUtils.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_495f04bc\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/util\\/MathUtils.java", "LINE": "423", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtBinaryOperatorImpl"}], "GENERATION": "5", "VARIANT_ID": "10", "TIME": "21", "VALIDATION": "|true|0|2282|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_495f04bc\\/.\\/output_astor\\/AstorMain-Commons-Math-495f04bc\\/\\/bin\\/\\/variant-10"}]}}, {"bug_id": "596ccd59", "tool": "ARJA", "nb_patch": 151, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 10:51:25.222863", "repair_begin": "2018-12-29 10:18:26.356791", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 329, "faulty": "arr[idx]+=u * pointArr[idx];", "type": "Delete", "seed": "continue;"}, {"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 322, "faulty": "int i=0;", "type": "InsertBefore", "seed": "clusters=new ArrayList<CentroidCluster<T>>();"}, {"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 306, "faulty": "updateClusterCenters();", "type": "Delete", "seed": "updateClusterCenters();"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-29 04:17:44.059193000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_596ccd59/patches_34b6/Patch_770/patched/tmp/Arja_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-29 04:45:51.604773241 -0500\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,14 +318,14 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n                 for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n                 }\n                 sum += u;\n                 i++;\n\n\n"}]}}, {"bug_id": "596ccd59", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 03:51:11.307202", "repair_begin": "2019-01-03 03:09:46.085008", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_596ccd59\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClustererjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_596ccd59\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClustererjava\\n@@ -354,7 +354,7 @@\\n \\n \\t\\t\\t\\tfor (final org.apache.commons.math3.ml.clustering.CentroidCluster<T> c : clusters) {\\n \\t\\t\\t\\t\\tfinal double distB = org.apache.commons.math3.util.FastMath.abs(distance(point, c.getCenter()));\\n-\\t\\t\\t\\t\\tsum += org.apache.commons.math3.util.FastMath.pow((distA \\/ distB), (2.0 \\/ ((fuzziness) - 1.0)));\\n+\\t\\t\\t\\t\\tsum += org.apache.commons.math3.util.FastMath.pow((2.0 \\/ ((fuzziness) - 1.0)), (2.0 \\/ ((fuzziness) - 1.0)));\\n \\t\\t\\t\\t}\\n \\n \\t\\t\\t\\tmembershipMatrix[i][j] = 1.0 \\/ sum;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtInvocationImpl", "ORIGINAL_CODE": "(distA \\/ distB)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(2.0 \\/ ((fuzziness) - 1.0))", "INGREDIENT_PARENT": "(2.0 \\/ ((_double_0) - 1.0))", "LOCATION": "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_596ccd59\\/.\\/output_astor\\/AstorMain-Commons-Math-596ccd59\\/\\/src\\/\\/variant-38\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClusterer.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_596ccd59\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClusterer.java", "LINE": "357", "MP_RANKING": "54", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtInvocationImpl"}], "GENERATION": "19", "VARIANT_ID": "38", "TIME": "428", "VALIDATION": "|true|0|6169|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_596ccd59\\/.\\/output_astor\\/AstorMain-Commons-Math-596ccd59\\/\\/bin\\/\\/variant-38"}]}}, {"bug_id": "596ccd59", "tool": "GenProg-A", "nb_patch": 300, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 18:44:06.016601", "repair_begin": "2018-12-30 18:13:23.949582", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 328, "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", "type": "Replace", "seed": "int nextPointIndex=-1;"}, {"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 328, "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", "type": "Replace", "seed": "int nextPointIndex=-1;"}, {"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 328, "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", "type": "Delete", "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"}, {"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 336, "faulty": "j++;", "type": "Delete", "seed": "double distSqSum=0.0;"}, {"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 328, "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", "type": "Replace", "seed": "int nextPointIndex=-1;"}, {"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 336, "faulty": "j++;", "type": "Delete", "seed": "double distSqSum=0.0;"}, {"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 322, "faulty": "int i=0;", "type": "InsertBefore", "seed": "int newCluster=-1;"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_287/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:26.982406948 -0500\n@@ -319,21 +319,19 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n"}]}}, {"bug_id": "596ccd59", "tool": "jKali", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:55:10.774035", "repair_begin": "2018-12-30 21:41:30.113665", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClusterer.java\\n+++ org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClusterer.java\\n@@ -303,7 +303,7 @@\\n \\n \\t\\tdo {\\n \\t\\t\\tsaveMembershipMatrix(oldMatrix);\\n-\\t\\t\\tupdateClusterCenters();\\n+\\n \\t\\t\\tupdateMembershipMatrix();\\n \\t\\t\\tdifference = calculateMaxMembershipChange(oldMatrix);\\n \\t\\t} while ((difference > (epsilon)) && ((++iteration) < max) );\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "updateClusterCenters()", "LOCATION": "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_596ccd59\\/.\\/output_astor\\/AstorMain-Commons-Math-596ccd59\\/\\/src\\/\\/variant-15_f\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClusterer.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_596ccd59\\/output_astor\\/AstorMain-Commons-Math-596ccd59\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClusterer.java", "LINE": "306", "MP_RANKING": "15", "SUSPICIOUNESS": "0.816"}], "GENERATION": "1", "VARIANT_ID": "15", "TIME": "20", "VALIDATION": "|true|0|6169|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_596ccd59\\/.\\/output_astor\\/AstorMain-Commons-Math-596ccd59\\/\\/bin\\/\\/variant-15"}]}}, {"bug_id": "596ccd59", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 08:22:33.316304", "repair_begin": "2019-02-05 08:06:33.210107", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_596ccd59\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClustererjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_596ccd59\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClustererjava\\n@@ -359,7 +359,7 @@\\n \\n \\t\\t\\t\\tmembershipMatrix[i][j] = 1.0 \\/ sum;\\n \\n-\\t\\t\\t\\tif ((membershipMatrix[i][j]) > maxMembership) {\\n+\\t\\t\\t\\tif ((this.membershipMatrix[i][j]) != maxMembership) {\\n \\t\\t\\t\\t\\tmaxMembership = membershipMatrix[i][j];\\n \\t\\t\\t\\t\\tnewCluster = j;\\n \\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(membershipMatrix[i][j]) > maxMembership", "PATCH_HUNK_CODE": "(this.membershipMatrix[i][j]) != maxMembership", "LOCATION": "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_596ccd59\\/.\\/output_astor\\/AstorMain-Commons-Math-596ccd59\\/\\/src\\/\\/variant-15\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClusterer.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_596ccd59\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/ml\\/clustering\\/FuzzyKMeansClusterer.java", "LINE": "362", "MP_RANKING": "2", "SUSPICIOUNESS": "0.408", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "15", "TIME": "16", "VALIDATION": "|true|0|6169|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_596ccd59\\/.\\/output_astor\\/AstorMain-Commons-Math-596ccd59\\/\\/bin\\/\\/variant-15"}]}}, {"bug_id": "596ccd59", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 18:09:07.957675", "repair_begin": "2018-12-29 17:44:04.542846", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 319, "faulty": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-29 11:43:15.170007000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Commons-Math_596ccd59/patches_q2y6/Patch_5/patched/tmp/Kali_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-29 12:09:07.536264839 -0500\n@@ -316,7 +316,9 @@\n      */\n     private void updateClusterCenters() {\n         int j = 0;\n-        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n+        if (true)\n+\t\t\treturn;\n+\t\tfinal List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n\n\n"}]}}, {"bug_id": "596ccd59", "tool": "RSRepair-A", "nb_patch": 34, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 22:06:25.490211", "repair_begin": "2018-12-29 21:44:37.128513", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", "line": 328, "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", "type": "Delete", "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"}], "patch": "--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-29 15:44:10.490149000 -0500\n+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_596ccd59/patches_0bp6/Patch_46/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-29 16:00:55.503854316 -0500\n@@ -325,9 +325,6 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n\n\n"}]}}, {"bug_id": "0596e314", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:05:03.322452", "repair_begin": "2018-12-30 23:03:46.502595", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 878, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -877,3 +877,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if (this.stepStart == interpolator.getInterpolatedTime()) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "0596e314", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:22:34.394296", "repair_begin": "2018-12-29 15:16:30.153352", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 878, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -877,3 +877,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if ((!((org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.this.stepControl3 <= hInt) && (18 < interpError))) || (previousRejected)) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "607c9ec6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:34:43.088069", "repair_begin": "2018-12-31 01:19:26.263553", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "607c9ec6", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:04:07.271043", "repair_begin": "2018-12-29 14:42:59.822705", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "621bbb8f", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:26:05.672472", "repair_begin": "2018-12-31 01:11:49.009087", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "621bbb8f", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:13:36.990981", "repair_begin": "2018-12-29 14:51:57.295173", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "645d642b", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:38:36.723933", "repair_begin": "2018-12-31 00:31:27.115393", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 880, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "645d642b", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:49:34.798645", "repair_begin": "2018-12-29 15:34:29.109587", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 880, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "784e4f69", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 15:29:56.604083", "repair_begin": "2019-01-01 14:55:26.261672", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java\\n@@ -444,7 +444,7 @@\\n \\t\\t\\t\\t\\tif (((((java.lang.Math.abs(actRed)) <= (costRelativeTolerance)) && \\n \\t\\t\\t\\t\\t(preRed <= (costRelativeTolerance))) && \\n \\t\\t\\t\\t\\t(ratio <= 2.0)) || \\n-\\t\\t\\t\\t\\t(delta <= ((parRelativeTolerance) * xNorm))) {\\n+\\t\\t\\t\\t\\t(delta <= ((parRelativeTolerance) * xNorm))) { \\t\\t\\t\\t\\t\\tcurrent = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\\n \\t\\t\\t\\t\\t\\treturn current;\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return current", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)", "INGREDIENT_PARENT": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)", "LOCATION": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_784e4f69\\/.\\/output_astor\\/AstorMain-Commons-Math-784e4f69\\/\\/src\\/\\/variant-8734_f\\/org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_784e4f69\\/output_astor\\/AstorMain-Commons-Math-784e4f69\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java", "LINE": "448", "MP_RANKING": "125", "SUSPICIOUNESS": "0.229", "PATCH_HUNK_TYPE": "CtAssignmentImpl|CtBlockImpl"}], "GENERATION": "4367", "VARIANT_ID": "8734", "TIME": "2007", "VALIDATION": "|true|0|2274|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_784e4f69\\/.\\/output_astor\\/AstorMain-Commons-Math-784e4f69\\/\\/bin\\/\\/variant-8734"}]}}, {"bug_id": "1352a70f", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:47:49.751928", "repair_begin": "2018-12-31 01:37:09.361150", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "1352a70f", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:51:09.637813", "repair_begin": "2018-12-29 15:36:55.479284", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "2123f780", "tool": "ARJA", "nb_patch": 15, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 11:43:11.400423", "repair_begin": "2018-12-29 11:14:10.664971", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/complex/Complex.java", "line": 152, "faulty": "MathUtils.checkNotNull(rhs);", "type": "Replace", "seed": "if (isNaN || rhs.isNaN) {\n  return NaN;\n}"}, {"path": "src/main/java/org/apache/commons/math/complex/Complex.java", "line": 319, "faulty": "return isNaN;", "type": "Replace", "seed": "return isNaN;"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_2123f780/src/main/java/org/apache/commons/math/complex/Complex.java\t2018-12-29 05:13:52.230427000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_2123f780/patches_nzc2/Patch_255/patched/tmp/Arja_Bug_dot_jar_Commons-Math_2123f780/src/main/java/org/apache/commons/math/complex/Complex.java\t2018-12-29 05:26:30.582999021 -0500\n@@ -149,7 +149,9 @@\n      */\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n+        if (isNaN || rhs.isNaN) {\n+\t\t\treturn NaN;\n+\t\t}\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n\n\n"}]}}, {"bug_id": "2123f780", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 15:00:45.068033", "repair_begin": "2019-01-01 14:53:25.240160", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/complex\\/Complex.java\\n+++ org\\/apache\\/commons\\/math\\/complex\\/Complex.java\\n@@ -149,10 +149,6 @@\\n \\n \\tpublic org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex rhs) throws \\n \\torg.apache.commons.math.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs);\\n-\\t\\treturn createComplex(((real) + (rhs.getReal())), \\n-\\t\\t((imaginary) + (rhs.getImaginary())));\\n-\\t}\\n \\n \\n \\n@@ -168,12 +164,6 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math.complex.Complex conjugate() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real, (-(imaginary)));\\n-\\t}\\n \\n \\n \\n@@ -210,12 +200,22 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex rhs) throws \\n-\\torg.apache.commons.math.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\tif ((isNaN) || (rhs.isNaN)) {\\n \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;\\n-\\t\\t}\\n+\\t\\t} \\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs); \\t\\treturn createComplex(((real) + (rhs.getReal())), ((imaginary) + (rhs.getImaginary())));} \\tpublic org.apache.commons.math.complex.Complex conjugate() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;} \\t\\treturn createComplex(real, (-(imaginary)));} \\tpublic org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex rhs) throws org.apache.commons.math.exception.NullArgumentException { \\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs); \\t\\tif ((isNaN) || (rhs.isNaN)) { \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;}\\n \\n \\t\\tdouble c = rhs.getReal();\\n \\t\\tdouble d = rhs.getImaginary();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "org.apache.commons.math.util.MathUtils.checkNotNull(rhs)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if ((isNaN) || (rhs.isNaN)) {\\n\\treturn org.apache.commons.math.complex.Complex.NaN;\\n}", "INGREDIENT_PARENT": "if ((isNaN) || (rhs.isNaN)) {\\n\\treturn org.apache.commons.math.complex.Complex.NaN;\\n}", "LOCATION": "org.apache.commons.math.complex.Complex", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_2123f780\\/.\\/output_astor\\/AstorMain-Commons-Math-2123f780\\/\\/src\\/\\/variant-660_f\\/org\\/apache\\/commons\\/math\\/complex\\/Complex.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_2123f780\\/output_astor\\/AstorMain-Commons-Math-2123f780\\/src\\/default\\/org\\/apache\\/commons\\/math\\/complex\\/Complex.java", "LINE": "152", "MP_RANKING": "0", "SUSPICIOUNESS": "0.158", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "330", "VARIANT_ID": "660", "TIME": "175", "VALIDATION": "|true|0|2525|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_2123f780\\/.\\/output_astor\\/AstorMain-Commons-Math-2123f780\\/\\/bin\\/\\/variant-660"}]}}, {"bug_id": "2836a6f9", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:43:12.210069", "repair_begin": "2018-12-31 01:19:13.117549", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "6844aba9", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:17:06.403862", "repair_begin": "2018-12-31 00:56:40.959424", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "6844aba9", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:25:02.266985", "repair_begin": "2018-12-29 15:03:03.931620", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "7980a242", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:44:13.276898", "repair_begin": "2018-12-30 21:32:20.498981", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 906, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -905,3 +905,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "7980a242", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:37:59.779921", "repair_begin": "2018-12-29 15:24:28.124605", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 906, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -905,3 +905,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "7994d3ee", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:59:54.315711", "repair_begin": "2018-12-30 22:38:28.220914", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "7994d3ee", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:41:46.503074", "repair_begin": "2018-12-29 15:19:58.640362", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "38983e82", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:48:20.972237", "repair_begin": "2018-12-31 01:47:24.466620", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 822, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -821,3 +821,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if (this.stepStart == interpolator.getInterpolatedTime()) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "38983e82", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:51:08.924710", "repair_begin": "2018-12-29 15:45:20.603075", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 822, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -821,3 +821,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if ((!((org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.this.stepControl3 <= hInt) && (18 < interpError))) || (previousRejected)) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "49444ee6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:21:06.759970", "repair_begin": "2018-12-30 23:57:23.799531", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 280, "class": "org.apache.commons.math3.stat.correlation.Covariance"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java\n+++ b/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java\n@@ -279,5 +279,7 @@\n         if (nRows < 2 || nCols < 2) {\n-            throw new MathIllegalArgumentException(\n-                    LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,\n-                    nRows, nCols);\n+            if (false) {\n+                throw new MathIllegalArgumentException(\n+                LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,\n+                nRows, nCols);\n+            }\n         }\n"}]}}, {"bug_id": "69273dca", "tool": "ARJA", "nb_patch": 86, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 13:41:13.132950", "repair_begin": "2018-12-29 12:16:04.756458", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", "line": 111, "faulty": "final double[] yTmp=y0.clone();", "type": "InsertBefore", "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"}, {"path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", "line": 115, "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", "type": "InsertBefore", "seed": "stepStart=Double.NaN;"}, {"path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", "line": 126, "faulty": "isLastStep=false;", "type": "InsertBefore", "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1554/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:33:52.902950574 -0500\n@@ -108,10 +108,14 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    stepStart = Double.NaN;\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -122,7 +126,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"}]}}, {"bug_id": "69273dca", "tool": "GenProg-A", "nb_patch": 2, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:05:19.011808", "repair_begin": "2018-12-30 21:36:40.738203", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/util/FastMath.java", "line": 3293, "faulty": "final long sign=bits & 0x8000000000000000L;", "type": "InsertBefore", "seed": "long result=1l;"}, {"path": "src/main/java/org/apache/commons/math3/util/FastMath.java", "line": 3294, "faulty": "if ((direction < d) ^ (sign == 0L)) {\n  return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n}\n else {\n  return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));\n}", "type": "Replace", "seed": "if ((direction < d) ^ (sign == 0L)) {\n  return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n}\n else {\n  return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));\n}"}, {"path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", "line": 126, "faulty": "isLastStep=false;", "type": "InsertBefore", "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-30 15:35:56.038638000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_69273dca/patches_ys4q/Patch_1524/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-30 17:03:40.164876038 -0500\n@@ -122,7 +122,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-30 15:35:56.326638000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_69273dca/patches_ys4q/Patch_1524/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-30 17:03:40.188876377 -0500\n@@ -3290,12 +3290,15 @@\n         // are handled just as normal numbers\n         // can use raw bits since already dealt with infinity and NaN\n         final long bits = Double.doubleToRawLongBits(d);\n-        final long sign = bits & 0x8000000000000000L;\n+        long result = 1l;\n+\t\tfinal long sign = bits & 0x8000000000000000L;\n         if ((direction < d) ^ (sign == 0L)) {\n-            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n-        } else {\n-            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));\n-        }\n+\t\t\treturn Double.longBitsToDouble(sign\n+\t\t\t\t\t| ((bits & 0x7fffffffffffffffL) + 1));\n+\t\t} else {\n+\t\t\treturn Double.longBitsToDouble(sign\n+\t\t\t\t\t| ((bits & 0x7fffffffffffffffL) - 1));\n+\t\t}\n \n     }\n \n\n\n"}]}}, {"bug_id": "69273dca", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 17:30:25.909872", "repair_begin": "2019-01-01 16:50:25.042735", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/ode\\/nonstiff\\/RungeKuttaIntegrator.java\\n+++ org\\/apache\\/commons\\/math3\\/ode\\/nonstiff\\/RungeKuttaIntegrator.java\\n@@ -135,31 +135,31 @@\\n \\t\\t\\tfor (int k = 1; k < stages; ++k) {\\n \\n \\t\\t\\t\\tfor (int j = 0; j < (y0.length); ++j) {\\n-\\t\\t\\t\\t\\tdouble sum = (a[(k - 1)][0]) * (yDotK[0][j]);\\n-\\t\\t\\t\\t\\tfor (int l = 1; l < k; ++l) {\\n-\\t\\t\\t\\t\\t\\tsum += (a[(k - 1)][l]) * (yDotK[l][j]);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tyTmp[j] = (y[j]) + ((stepSize) * sum);\\n-\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\tcomputeDerivatives(((stepStart) + ((c[(k - 1)]) * (stepSize))), yTmp, yDotK[k]);\\n \\n-\\t\\t\\t}\\n \\n \\n-\\t\\t\\tfor (int j = 0; j < (y0.length); ++j) {\\n-\\t\\t\\t\\tdouble sum = (b[0]) * (yDotK[0][j]);\\n-\\t\\t\\t\\tfor (int l = 1; l < stages; ++l) {\\n-\\t\\t\\t\\t\\tsum += (b[l]) * (yDotK[l][j]);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tyTmp[j] = (y[j]) + ((stepSize) * sum);\\n-\\t\\t\\t}\\n \\n \\n-\\t\\t\\tinterpolator.storeTime(((stepStart) + (stepSize)));\\n-\\t\\t\\tjava.lang.System.arraycopy(yTmp, 0, y, 0, y0.length);\\n-\\t\\t\\tjava.lang.System.arraycopy(yDotK[(stages - 1)], 0, yDotTmp, 0, y0.length);\\n-\\t\\t\\tstepStart = acceptStep(interpolator, y, yDotTmp, t);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\t\\t\\tif (!(isLastStep)) {\\n \\n@@ -172,7 +172,7 @@\\n \\t\\t\\t\\tif (nextIsLast) {\\n \\t\\t\\t\\t\\tstepSize = t - (stepStart);\\n \\t\\t\\t\\t}\\n-\\t\\t\\t}\\n+\\t\\t\\t\\t\\t} \\t\\t\\t\\t\\tdouble sum = (a[(k - 1)][0]) * (yDotK[0][j]); \\t\\t\\t\\t\\tfor (int l = 1; l < k; ++l) { \\t\\t\\t\\t\\t\\tsum += (a[(k - 1)][l]) * (yDotK[l][j]);} \\t\\t\\t\\t\\tyTmp[j] = (y[j]) + ((stepSize) * sum);} \\t\\t\\t\\tcomputeDerivatives(((stepStart) + ((c[(k - 1)]) * (stepSize))), yTmp, yDotK[k]);} \\t\\t\\tfor (int j = 0; j < (y0.length); ++j) { \\t\\t\\t\\tdouble sum = (b[0]) * (yDotK[0][j]); \\t\\t\\t\\tfor (int l = 1; l < stages; ++l) { \\t\\t\\t\\t\\tsum += (b[l]) * (yDotK[l][j]);} \\t\\t\\t\\tyTmp[j] = (y[j]) + ((stepSize) * sum);} \\t\\t\\tinterpolator.storeTime(((stepStart) + (stepSize))); \\t\\t\\tjava.lang.System.arraycopy(yTmp, 0, y, 0, y0.length); \\t\\t\\tjava.lang.System.arraycopy(yDotK[(stages - 1)], 0, yDotTmp, 0, y0.length); \\t\\t\\tstepStart = acceptStep(interpolator, y, yDotTmp, t); \\t\\t\\tif (!(isLastStep)) { \\t\\t\\t\\tinterpolator.storeTime(stepStart); \\t\\t\\t\\tfinal double nextT = (stepStart) + (stepSize); \\t\\t\\t\\tfinal boolean nextIsLast = (forward) ? nextT >= t : nextT <= t; \\t\\t\\t\\tif (nextIsLast) { \\t\\t\\t\\t\\tstepSize = t - (stepStart);}}\\n \\n \\t\\t} while (!(isLastStep) );\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtLocalVariableImpl|CtBlockImpl", "ORIGINAL_CODE": "double sum = (a[(k - 1)][0]) * (yDotK[0][j])", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (!(isLastStep)) {\\n\\n\\n\\tinterpolator.storeTime(stepStart);\\n\\n\\n\\tfinal double nextT = (stepStart) + (stepSize);\\n\\tfinal boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;\\n\\tif (nextIsLast) {\\n\\t\\tstepSize = t - (stepStart);\\n\\t}\\n}", "INGREDIENT_PARENT": "if (!(isLastStep)) {\\n\\n\\n\\tinterpolator.storeTime(stepStart);\\n\\n\\n\\tfinal double nextT = (stepStart) + (stepSize);\\n\\tfinal boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;\\n\\tif (nextIsLast) {\\n\\t\\tstepSize = t - (stepStart);\\n\\t}\\n}", "LOCATION": "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_69273dca\\/.\\/output_astor\\/AstorMain-Commons-Math-69273dca\\/\\/src\\/\\/variant-122_f\\/org\\/apache\\/commons\\/math3\\/ode\\/nonstiff\\/RungeKuttaIntegrator.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_69273dca\\/output_astor\\/AstorMain-Commons-Math-69273dca\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/ode\\/nonstiff\\/RungeKuttaIntegrator.java", "LINE": "138", "MP_RANKING": "11", "SUSPICIOUNESS": "0.147", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "61", "VARIANT_ID": "122", "TIME": "497", "VALIDATION": "|true|0|6155|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_69273dca\\/.\\/output_astor\\/AstorMain-Commons-Math-69273dca\\/\\/bin\\/\\/variant-122"}]}}, {"bug_id": "69273dca", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 05:16:16.315484", "repair_begin": "2018-12-30 04:39:33.971606", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", "line": 132, "faulty": "computeDerivatives(stepStart,y,yDotK[0]);", "type": "InsertBefore", "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"}], "patch": "--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 22:39:07.379252000 -0500\n+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_69273dca/patches_r00r/Patch_378/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 23:04:40.209866537 -0500\n@@ -128,7 +128,16 @@\n \n       interpolator.shift();\n \n-      // first stage\n+      if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n       // next stages\n\n\n"}]}}, {"bug_id": "86545dab", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:24:55.837176", "repair_begin": "2018-12-30 23:12:41.395253", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "328513f3", "tool": "ARJA", "nb_patch": 165, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 10:08:35.654253", "repair_begin": "2018-12-29 09:24:27.050412", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", "line": 450, "faulty": "break generationLoop;", "type": "Delete", "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"}, {"path": "src/main/java/org/apache/commons/math/util/MathUtils.java", "line": 1360, "faulty": "throw new MathRuntimeException(ex);", "type": "Replace", "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"}, {"path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", "line": 933, "faulty": "return repaired;", "type": "InsertBefore", "seed": "if (boundaries == null) return x;"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1445/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:59:57.587624690 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1445/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:59:57.587624690 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -930,7 +930,9 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\treturn repaired;\n         }\n \n         /**\n\n\n"}]}}, {"bug_id": "724795b5", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:44:57.454465", "repair_begin": "2018-12-31 00:22:22.117144", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "73605560", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:11:32.013542", "repair_begin": "2018-12-30 23:45:40.522206", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "a4ffd393", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:57:23.378498", "repair_begin": "2018-12-31 01:47:20.360945", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "a06a1584", "tool": "ARJA", "nb_patch": 314, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 12:27:04.307237", "repair_begin": "2018-12-29 11:57:07.700503", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 326, "faulty": "if ((attribute.getPlusOutside() != null) && (((SubPlane)attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n  return attribute.getPlusOutside();\n}", "type": "Delete", "seed": "getTree(true).visit(new FacetsContributionVisitor());"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 303, "faulty": "if (facet != null) {\n  return facet;\n}", "type": "Delete", "seed": "if (in) {\n  final SubHyperplane<Euclidean3D> facet=boundaryFacet(point,node);\n  if (facet != null) {\n    return facet;\n  }\n}"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-29 05:56:21.412109000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_a06a1584/patches_g2lc/Patch_132/patched/tmp/Arja_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-29 06:16:59.526461888 -0500\n@@ -300,9 +300,6 @@\n             final Vector3D hit3D = plane.intersection(line);\n             if (hit3D != null) {\n                 final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);\n-                if (facet != null) {\n-                    return facet;\n-                }\n             }\n         }\n \n@@ -323,10 +320,6 @@\n         @SuppressWarnings(\"unchecked\")\n         final BoundaryAttribute<Euclidean3D> attribute =\n             (BoundaryAttribute<Euclidean3D>) node.getAttribute();\n-        if ((attribute.getPlusOutside() != null) &&\n-            (((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n-            return attribute.getPlusOutside();\n-        }\n         if ((attribute.getPlusInside() != null) &&\n             (((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n             return attribute.getPlusInside();\n\n\n"}]}}, {"bug_id": "a06a1584", "tool": "GenProg-A", "nb_patch": 132, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 18:45:36.844569", "repair_begin": "2018-12-30 18:20:16.856532", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 272, "faulty": "final double offset=plane.getOffset((Point<Euclidean3D>)point);", "type": "InsertBefore", "seed": "final Vector3D p3D=(Vector3D)point;"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 298, "faulty": "if (!in) {\n  final Vector3D hit3D=plane.intersection(line);\n  if (hit3D != null) {\n    final SubHyperplane<Euclidean3D> facet=boundaryFacet(hit3D,node);\n    if (facet != null) {\n      return facet;\n    }\n  }\n}", "type": "Delete", "seed": "return this.isNaN();"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 295, "faulty": "return crossed;", "type": "Delete", "seed": "final Line reverted=new Line(this);"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 302, "faulty": "final SubHyperplane<Euclidean3D> facet=boundaryFacet(hit3D,node);", "type": "Replace", "seed": "return pointAt(((Vector1D)point).getX());"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 300, "faulty": "final Vector3D hit3D=plane.intersection(line);", "type": "InsertBefore", "seed": "return getInstance(Locale.getDefault());"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 263, "faulty": "final SubHyperplane<Euclidean3D> cut=node.getCut();", "type": "Replace", "seed": "final SubHyperplane<Euclidean3D> cut=node.getCut();"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 298, "faulty": "if (!in) {\n  final Vector3D hit3D=plane.intersection(line);\n  if (hit3D != null) {\n    final SubHyperplane<Euclidean3D> facet=boundaryFacet(hit3D,node);\n    if (facet != null) {\n      return facet;\n    }\n  }\n}", "type": "Delete", "seed": "return this.isNaN();"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 295, "faulty": "return crossed;", "type": "Delete", "seed": "final Line reverted=new Line(this);"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 304, "faulty": "return facet;", "type": "Delete", "seed": "if (isNaN()) {\n  return 409;\n}"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 328, "faulty": "return attribute.getPlusOutside();", "type": "Delete", "seed": "final SubHyperplane<Euclidean3D> cut=node.getCut();"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 301, "faulty": "if (hit3D != null) {\n  final SubHyperplane<Euclidean3D> facet=boundaryFacet(hit3D,node);\n  if (facet != null) {\n    return facet;\n  }\n}", "type": "Replace", "seed": "final SubHyperplane<Euclidean3D> facet=boundaryFacet(hit3D,node);"}, {"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 326, "faulty": "if ((attribute.getPlusOutside() != null) && (((SubPlane)attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n  return attribute.getPlusOutside();\n}", "type": "Replace", "seed": "final double[] quat=new double[4];"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-30 12:19:26.662809000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_a06a1584/patches_8s5f/Patch_146/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-30 12:43:40.164082789 -0500\n@@ -268,7 +268,8 @@\n         final BSPTree<Euclidean3D> plus  = node.getPlus();\n         final Plane               plane = (Plane) cut.getHyperplane();\n \n-        // establish search order\n+        final Vector3D p3D = (Vector3D) point;\n+\t\t// establish search order\n         final double offset = plane.getOffset((Point<Euclidean3D>) point);\n         final boolean in    = FastMath.abs(offset) < 1.0e-10;\n         final BSPTree<Euclidean3D> near;\n@@ -292,18 +293,6 @@\n         // search in the near branch\n         final SubHyperplane<Euclidean3D> crossed = recurseFirstIntersection(near, point, line);\n         if (crossed != null) {\n-            return crossed;\n-        }\n-\n-        if (!in) {\n-            // search in the cut hyperplane\n-            final Vector3D hit3D = plane.intersection(line);\n-            if (hit3D != null) {\n-                final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);\n-                if (facet != null) {\n-                    return facet;\n-                }\n-            }\n         }\n \n         // search in the far branch\n@@ -323,10 +312,7 @@\n         @SuppressWarnings(\"unchecked\")\n         final BoundaryAttribute<Euclidean3D> attribute =\n             (BoundaryAttribute<Euclidean3D>) node.getAttribute();\n-        if ((attribute.getPlusOutside() != null) &&\n-            (((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n-            return attribute.getPlusOutside();\n-        }\n+        final double[] quat = new double[4];\n         if ((attribute.getPlusInside() != null) &&\n             (((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n             return attribute.getPlusInside();\n\n\n"}]}}, {"bug_id": "a06a1584", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 17:52:12.543501", "repair_begin": "2019-01-01 16:51:54.119232", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java\\n+++ org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java\\n@@ -323,14 +323,14 @@\\n \\t\\t@java.lang.SuppressWarnings(\\\"unchecked\\\")\\n \\t\\tfinal org.apache.commons.math4.geometry.partitioning.BoundaryAttribute<org.apache.commons.math4.geometry.euclidean.threed.Euclidean3D> attribute = \\n \\t\\t((org.apache.commons.math4.geometry.partitioning.BoundaryAttribute<org.apache.commons.math4.geometry.euclidean.threed.Euclidean3D>) (node.getAttribute()));\\n-\\t\\tif (((attribute.getPlusOutside()) != null) && \\n-\\t\\t((((org.apache.commons.math4.geometry.euclidean.threed.SubPlane) (attribute.getPlusOutside())).getRemainingRegion().checkPoint(point2D)) == (org.apache.commons.math4.geometry.partitioning.Region.Location.INSIDE))) {\\n-\\t\\t\\treturn attribute.getPlusOutside();\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n \\t\\tif (((attribute.getPlusInside()) != null) && \\n \\t\\t((((org.apache.commons.math4.geometry.euclidean.threed.SubPlane) (attribute.getPlusInside())).getRemainingRegion().checkPoint(point2D)) == (org.apache.commons.math4.geometry.partitioning.Region.Location.INSIDE))) {\\n \\t\\t\\treturn attribute.getPlusInside();\\n-\\t\\t}\\n+\\t\\t} \\t\\tif (((attribute.getPlusInside()) != null) && ((((org.apache.commons.math4.geometry.euclidean.threed.SubPlane) (attribute.getPlusInside())).getRemainingRegion().checkPoint(point2D)) == (org.apache.commons.math4.geometry.partitioning.Region.Location.INSIDE))) { \\t\\t\\treturn attribute.getPlusInside();}\\n \\t\\treturn null;\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (((attribute.getPlusOutside()) != null) && \\n((((org.apache.commons.math4.geometry.euclidean.threed.SubPlane) (attribute.getPlusOutside())).getRemainingRegion().checkPoint(point2D)) == (org.apache.commons.math4.geometry.partitioning.Region.Location.INSIDE))) {\\n\\treturn attribute.getPlusOutside();\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (((attribute.getPlusInside()) != null) && \\n((((org.apache.commons.math4.geometry.euclidean.threed.SubPlane) (attribute.getPlusInside())).getRemainingRegion().checkPoint(point2D)) == (org.apache.commons.math4.geometry.partitioning.Region.Location.INSIDE))) {\\n\\treturn attribute.getPlusInside();\\n}", "INGREDIENT_PARENT": "if (((attribute.getPlusInside()) != null) && \\n((((org.apache.commons.math4.geometry.euclidean.threed.SubPlane) (attribute.getPlusInside())).getRemainingRegion().checkPoint(point2D)) == (org.apache.commons.math4.geometry.partitioning.Region.Location.INSIDE))) {\\n\\treturn attribute.getPlusInside();\\n}", "LOCATION": "org.apache.commons.math4.geometry.euclidean.threed.PolyhedronsSet", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_a06a1584\\/.\\/output_astor\\/AstorMain-Commons-Math-a06a1584\\/\\/src\\/\\/variant-300_f\\/org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_a06a1584\\/output_astor\\/AstorMain-Commons-Math-a06a1584\\/src\\/default\\/org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java", "LINE": "326", "MP_RANKING": "25", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "150", "VARIANT_ID": "300", "TIME": "1291", "VALIDATION": "|true|0|5859|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_a06a1584\\/.\\/output_astor\\/AstorMain-Commons-Math-a06a1584\\/\\/bin\\/\\/variant-300"}]}}, {"bug_id": "a06a1584", "tool": "jKali", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:56:22.708941", "repair_begin": "2018-12-30 22:42:53.786000", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java\\n+++ org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java\\n@@ -261,7 +261,7 @@\\n \\torg.apache.commons.math4.geometry.euclidean.threed.Line line) {\\n \\n \\t\\tfinal org.apache.commons.math4.geometry.partitioning.SubHyperplane<org.apache.commons.math4.geometry.euclidean.threed.Euclidean3D> cut = node.getCut();\\n-\\t\\tif (cut == null) {\\n+\\t\\tif (true) {\\n \\t\\t\\treturn null;\\n \\t\\t}\\n \\t\\tfinal org.apache.commons.math4.geometry.partitioning.BSPTree<org.apache.commons.math4.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (cut == null) {\\n\\treturn null;\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\treturn null;\\n}", "LOCATION": "org.apache.commons.math4.geometry.euclidean.threed.PolyhedronsSet", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_a06a1584\\/.\\/output_astor\\/AstorMain-Commons-Math-a06a1584\\/\\/src\\/\\/variant-2_f\\/org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_a06a1584\\/output_astor\\/AstorMain-Commons-Math-a06a1584\\/src\\/default\\/org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java", "LINE": "264", "MP_RANKING": "2", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|5859|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_a06a1584\\/.\\/output_astor\\/AstorMain-Commons-Math-a06a1584\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "a06a1584", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 08:48:33.903712", "repair_begin": "2019-02-05 08:35:12.549342", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a06a1584\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSetjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a06a1584\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSetjava\\n@@ -261,7 +261,7 @@\\n \\torg.apache.commons.math4.geometry.euclidean.threed.Line line) {\\n \\n \\t\\tfinal org.apache.commons.math4.geometry.partitioning.SubHyperplane<org.apache.commons.math4.geometry.euclidean.threed.Euclidean3D> cut = node.getCut();\\n-\\t\\tif (cut == null) {\\n+\\t\\tif (cut != null) {\\n \\t\\t\\treturn null;\\n \\t\\t}\\n \\t\\tfinal org.apache.commons.math4.geometry.partitioning.BSPTree<org.apache.commons.math4.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "cut == null", "PATCH_HUNK_CODE": "cut != null", "LOCATION": "org.apache.commons.math4.geometry.euclidean.threed.PolyhedronsSet", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a06a1584\\/.\\/output_astor\\/AstorMain-Commons-Math-a06a1584\\/\\/src\\/\\/variant-2\\/org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a06a1584\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/geometry\\/euclidean\\/threed\\/PolyhedronsSet.java", "LINE": "264", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|5859|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a06a1584\\/.\\/output_astor\\/AstorMain-Commons-Math-a06a1584\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "a06a1584", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 18:17:24.985333", "repair_begin": "2018-12-29 17:55:40.843528", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 264, "faulty": "if (cut == null) {\n  return null;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-29 11:54:46.549210000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Commons-Math_a06a1584/patches_bshc/Patch_3/patched/tmp/Kali_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-29 12:17:24.364582481 -0500\n@@ -261,7 +261,7 @@\n                                                                 final Line line) {\n \n         final SubHyperplane<Euclidean3D> cut = node.getCut();\n-        if (cut == null) {\n+        if (true) {\n             return null;\n         }\n         final BSPTree<Euclidean3D> minus = node.getMinus();\n\n\n"}]}}, {"bug_id": "a06a1584", "tool": "RSRepair-A", "nb_patch": 44, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 00:52:29.629998", "repair_begin": "2018-12-30 00:37:59.961504", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java", "line": 328, "faulty": "return attribute.getPlusOutside();", "type": "Replace", "seed": "final SubHyperplane<Euclidean3D> cut=node.getCut();"}], "patch": "--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-29 18:37:29.072755000 -0500\n+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_a06a1584/patches_0lgm/Patch_107/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\t2018-12-29 18:51:32.251989474 -0500\n@@ -325,7 +325,7 @@\n             (BoundaryAttribute<Euclidean3D>) node.getAttribute();\n         if ((attribute.getPlusOutside() != null) &&\n             (((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n-            return attribute.getPlusOutside();\n+            final SubHyperplane<Euclidean3D> cut = node.getCut();\n         }\n         if ((attribute.getPlusInside() != null) &&\n             (((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {\n\n\n"}]}}, {"bug_id": "a6f96306", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:03:25.281248", "repair_begin": "2018-12-29 14:53:03.537893", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 114, "class": "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenUpdateAction.java\n+++ b/src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenUpdateAction.java\n@@ -113,3 +113,5 @@\n             Collection<Neuron> neighbours = new HashSet<Neuron>();\n-            neighbours.add(best);\n+            if (org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction.this.learningFactor!=null) {\n+                neighbours.add(best);\n+            }\n             // Winning neuron must be excluded from the neighbours.\n"}]}}, {"bug_id": "a49e443c", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:01:08.448716", "repair_begin": "2018-12-30 21:39:18.066655", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "a56d4998", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 05:28:02.316262", "repair_begin": "2019-01-03 05:14:30.981433", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_a56d4998\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/analysis\\/solvers\\/UnivariateSolverUtilsjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_a56d4998\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/analysis\\/solvers\\/UnivariateSolverUtilsjava\\n@@ -314,7 +314,7 @@\\n \\t\\tdouble delta = 0;\\n \\n \\t\\tfor (int numIterations = 0; \\n-\\t\\t(numIterations < maximumIterations) && ((a > lowerBound) || (b > upperBound)); \\n+\\t\\t(numIterations < maximumIterations) && ((a > lowerBound) || (initial <= 0)); \\n \\t\\t++numIterations) {\\n \\n \\t\\t\\tfinal double previousA = a;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(b > upperBound)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(initial <= 0)", "INGREDIENT_PARENT": "_double_0 <= 0", "LOCATION": "org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_a56d4998\\/.\\/output_astor\\/AstorMain-Commons-Math-a56d4998\\/\\/src\\/\\/variant-34\\/org\\/apache\\/commons\\/math4\\/analysis\\/solvers\\/UnivariateSolverUtils.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_a56d4998\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math4\\/analysis\\/solvers\\/UnivariateSolverUtils.java", "LINE": "317", "MP_RANKING": "20", "SUSPICIOUNESS": "0.333", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtBinaryOperatorImpl"}], "GENERATION": "17", "VARIANT_ID": "34", "TIME": "266", "VALIDATION": "|true|0|6186|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_a56d4998\\/.\\/output_astor\\/AstorMain-Commons-Math-a56d4998\\/\\/bin\\/\\/variant-34"}]}}, {"bug_id": "a7363a2a", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:54:07.113251", "repair_begin": "2018-12-31 00:47:21.802099", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 161, "class": "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java\n@@ -160,3 +160,3 @@\n                 } else {\n-                    if (distanceToCurrent > distanceToLast) {\n+                    if (true) {\n                         hull.remove(size - 1);\n"}]}}, {"bug_id": "a7363a2a", "tool": "GenProg-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:52:20.157801", "repair_begin": "2018-12-31 00:12:08.052053", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 128, "faulty": "return getMessage(Locale.US);", "type": "Replace", "seed": "return getMessage(Locale.US);"}, {"path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", "line": 86, "faulty": "return context.getLocalizedMessage();", "type": "InsertBefore", "seed": "context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);"}, {"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java", "line": 161, "faulty": "if (distanceToCurrent > distanceToLast) {\n  hull.remove(size - 1);\n}", "type": "Replace", "seed": "hull.remove(size - 1);"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_a7363a2a/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-30 18:11:19.701994000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_a7363a2a/patches_qt9b/Patch_215/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_a7363a2a/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-30 18:41:51.941986498 -0500\n@@ -83,6 +83,7 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return context.getLocalizedMessage();\n+        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);\n+\t\treturn context.getLocalizedMessage();\n     }\n }\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_a7363a2a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java\t2018-12-30 18:11:19.841994000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_a7363a2a/patches_qt9b/Patch_215/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_a7363a2a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java\t2018-12-30 18:41:51.973986945 -0500\n@@ -158,9 +158,7 @@\n                     final int index = distanceToCurrent < distanceToLast ? size - 1 : size;\n                     hull.add(index, point);\n                 } else {\n-                    if (distanceToCurrent > distanceToLast) {\n-                        hull.remove(size - 1);\n-                    }\n+                    hull.remove(size - 1);\n                     hull.add(point);\n                 }\n                 return;\n\n\n\n\n"}]}}, {"bug_id": "a7363a2a", "tool": "jKali", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 20:52:50.409065", "repair_begin": "2018-12-30 20:39:18.019107", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/hull\\/MonotoneChain.java\\n+++ org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/hull\\/MonotoneChain.java\\n@@ -158,7 +158,7 @@\\n \\t\\t\\t\\t\\tfinal int index = (distanceToCurrent < distanceToLast) ? size - 1 : size;\\n \\t\\t\\t\\t\\thull.add(index, point);\\n \\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\tif (distanceToCurrent > distanceToLast) {\\n+\\t\\t\\t\\t\\tif (true) {\\n \\t\\t\\t\\t\\t\\thull.remove((size - 1));\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\thull.add(point);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (distanceToCurrent > distanceToLast) {\\n\\thull.remove((size - 1));\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\thull.remove((size - 1));\\n}", "LOCATION": "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_a7363a2a\\/.\\/output_astor\\/AstorMain-Commons-Math-a7363a2a\\/\\/src\\/\\/variant-10_f\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/hull\\/MonotoneChain.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_a7363a2a\\/output_astor\\/AstorMain-Commons-Math-a7363a2a\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/hull\\/MonotoneChain.java", "LINE": "161", "MP_RANKING": "17", "SUSPICIOUNESS": "0.365", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "10", "TIME": "9", "VALIDATION": "|true|0|6077|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_a7363a2a\\/.\\/output_astor\\/AstorMain-Commons-Math-a7363a2a\\/\\/bin\\/\\/variant-10"}]}}, {"bug_id": "a7363a2a", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 08:09:46.365391", "repair_begin": "2019-02-05 07:54:33.833701", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a7363a2a\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/hull\\/MonotoneChainjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a7363a2a\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/hull\\/MonotoneChainjava\\n@@ -158,7 +158,7 @@\\n \\t\\t\\t\\t\\tfinal int index = (distanceToCurrent < distanceToLast) ? size - 1 : size;\\n \\t\\t\\t\\t\\thull.add(index, point);\\n \\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\tif (distanceToCurrent > distanceToLast) {\\n+\\t\\t\\t\\t\\tif (distanceToCurrent != distanceToLast) {\\n \\t\\t\\t\\t\\t\\thull.remove((size - 1));\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\thull.add(point);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "distanceToCurrent > distanceToLast", "PATCH_HUNK_CODE": "distanceToCurrent != distanceToLast", "LOCATION": "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a7363a2a\\/.\\/output_astor\\/AstorMain-Commons-Math-a7363a2a\\/\\/src\\/\\/variant-9\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/hull\\/MonotoneChain.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a7363a2a\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/hull\\/MonotoneChain.java", "LINE": "161", "MP_RANKING": "1", "SUSPICIOUNESS": "0.365", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "9", "TIME": "12", "VALIDATION": "|true|0|6077|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_a7363a2a\\/.\\/output_astor\\/AstorMain-Commons-Math-a7363a2a\\/\\/bin\\/\\/variant-9"}]}}, {"bug_id": "a7363a2a", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 21:37:23.427461", "repair_begin": "2018-12-29 21:11:27.189926", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java", "line": 161, "faulty": "if (distanceToCurrent > distanceToLast) {\n  hull.remove(size - 1);\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Commons-Math_a7363a2a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java\t2018-12-29 15:10:40.965842000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Commons-Math_a7363a2a/patches_v08m/Patch_3/patched/tmp/Kali_Bug_dot_jar_Commons-Math_a7363a2a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java\t2018-12-29 15:37:22.999435564 -0500\n@@ -158,7 +158,7 @@\n                     final int index = distanceToCurrent < distanceToLast ? size - 1 : size;\n                     hull.add(index, point);\n                 } else {\n-                    if (distanceToCurrent > distanceToLast) {\n+                    if (true) {\n                         hull.remove(size - 1);\n                     }\n                     hull.add(point);\n\n\n"}]}}, {"bug_id": "a7363a2a", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:43:09.145549", "repair_begin": "2018-12-29 14:36:43.605732", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 161, "class": "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java\n@@ -160,3 +160,3 @@\n                 } else {\n-                    if (distanceToCurrent > distanceToLast) {\n+                    if (hull!=null) {\n                         hull.remove(size - 1);\n"}]}}, {"bug_id": "abe53a53", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:38:37.698359", "repair_begin": "2018-12-31 00:19:24.202741", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "abe53a53", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:33:54.062442", "repair_begin": "2018-12-29 15:11:46.598319", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "ac597cc1", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:01:10.993078", "repair_begin": "2018-12-30 22:47:19.045714", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "ad252a8c", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:35:57.673557", "repair_begin": "2018-12-30 21:10:30.572209", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "b01fcc31", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:32:47.647100", "repair_begin": "2018-12-30 22:32:23.494503", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 212, "class": "org.apache.commons.math.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -211,5 +211,7 @@\n         if (constraint.getValue() < 0) {\n-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n-                                        constraint.getRelationship().oppositeRelationship(),\n-                                        -1 * constraint.getValue());\n+            if (false) {\n+                return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n+                constraint.getRelationship().oppositeRelationship(),\n+                -1 * constraint.getValue());\n+            }\n         }\n"}]}}, {"bug_id": "b01fcc31", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:08:56.651574", "repair_begin": "2018-12-29 15:03:05.343250", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 822, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -821,3 +821,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if ((!((org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.this.stepControl3 <= hInt) && (18 < interpError))) || (previousRejected)) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "b2e24119", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:40:12.457221", "repair_begin": "2018-12-30 22:33:18.909677", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "b2e24119", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:43:10.292599", "repair_begin": "2018-12-29 15:29:06.262739", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "b6bf8f41", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 08:14:19.182164", "repair_begin": "2019-02-05 08:05:23.373274", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_b6bf8f41\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/stat\\/clustering\\/EuclideanIntegerPointjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_b6bf8f41\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/stat\\/clustering\\/EuclideanIntegerPointjava\\n@@ -82,7 +82,7 @@\\n \\t\\t\\treturn false;\\n \\t\\t}\\n \\t\\tfor (int i = 0; i < (point.length); i++) {\\n-\\t\\t\\tif ((point[i]) != (otherPoint[i])) {\\n+\\t\\t\\tif ((this.point[i]) > (otherPoint[i])) {\\n \\t\\t\\t\\treturn false;\\n \\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(point[i]) != (otherPoint[i])", "PATCH_HUNK_CODE": "(this.point[i]) > (otherPoint[i])", "LOCATION": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_b6bf8f41\\/.\\/output_astor\\/AstorMain-Commons-Math-b6bf8f41\\/\\/src\\/\\/variant-23\\/org\\/apache\\/commons\\/math\\/stat\\/clustering\\/EuclideanIntegerPoint.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_b6bf8f41\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/stat\\/clustering\\/EuclideanIntegerPoint.java", "LINE": "85", "MP_RANKING": "4", "SUSPICIOUNESS": "0.316", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "23", "TIME": "177", "VALIDATION": "|true|0|2383|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_b6bf8f41\\/.\\/output_astor\\/AstorMain-Commons-Math-b6bf8f41\\/\\/bin\\/\\/variant-23"}]}}, {"bug_id": "b07ecae3", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:43:31.005839", "repair_begin": "2018-12-30 21:10:36.698473", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "b9ca51f0", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:03:13.737860", "repair_begin": "2018-12-30 23:48:52.920164", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "b9ca51f0", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:36:17.293098", "repair_begin": "2018-12-29 15:15:13.260086", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "b55e0206", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:40:28.652182", "repair_begin": "2018-12-30 22:19:08.418479", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "b55e0206", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:38:53.808167", "repair_begin": "2018-12-29 15:17:37.327421", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "bda25b40", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:11:52.225485", "repair_begin": "2018-12-31 00:59:27.397500", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "bfbb156d", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:26:17.849359", "repair_begin": "2018-12-30 22:09:18.177234", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "bfbb156d", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:49:01.012628", "repair_begin": "2018-12-29 14:32:27.335495", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 529, "class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -528,24 +528,26 @@\n \n-            if (hasInfiniteBounds) {\n-                // If there is at least one finite bound, none can be infinite,\n-                // because mixed cases are not supported by the current code.\n-                throw new MathUnsupportedOperationException();\n-            } else {\n-                // Convert API to internal handling of boundaries.\n-                boundaries = new double[2][];\n-                boundaries[0] = lB;\n-                boundaries[1] = uB;\n-\n-                // Abort early if the normalization will overflow (cf. \"encode\" method).\n-                for (int i = 0; i < lB.length; i++) {\n-                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n-                        final double max = Double.MAX_VALUE + boundaries[0][i];\n-                        final NumberIsTooLargeException e\n+            if (!(((hasInfiniteBounds) && (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsDHistory!=null)) || (uB.length < org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.lambda))) {\n+                if (hasInfiniteBounds) {\n+                    // If there is at least one finite bound, none can be infinite,\n+                    // because mixed cases are not supported by the current code.\n+                    throw new MathUnsupportedOperationException();\n+                } else {\n+                    // Convert API to internal handling of boundaries.\n+                    boundaries = new double[2][];\n+                    boundaries[0] = lB;\n+                    boundaries[1] = uB;\n+                    \n+                    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                    for (int i = 0; i < lB.length; i++) {\n+                        if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n+                            final double max = Double.MAX_VALUE + boundaries[0][i];\n+                            final NumberIsTooLargeException e\n                             = new NumberIsTooLargeException(boundaries[1][i],\n-                                                            max,\n-                                                            true);\n-                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n-                        e.getContext().addMessage(LocalizedFormats.INDEX, i);\n-\n-                        throw e;\n+                            max,\n+                            true);\n+                            e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n+                            e.getContext().addMessage(LocalizedFormats.INDEX, i);\n+                            \n+                            throw e;\n+                        }\n                     }\n"}]}}, {"bug_id": "c0b49542", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 00:40:07.110321", "repair_begin": "2018-12-31 00:32:28.788285", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 887, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -886,3 +886,5 @@\n                     d__1 = HALF * delta;\n-                    delta = Math.max(d__1,dnorm);\n+                    if (false) {\n+                        delta = Math.max(d__1,dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "c44bfe00", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 18:00:19.721896", "repair_begin": "2019-01-01 16:42:55.322415", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math4\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java\\n+++ org\\/apache\\/commons\\/math4\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java\\n@@ -303,46 +303,46 @@\\n \\t\\t\\t\\tnbPoints = end - start;\\n \\t\\t\\t\\tjava.lang.System.arraycopy(x, start, x, 0, nbPoints);\\n \\t\\t\\t\\tjava.lang.System.arraycopy(y, start, y, 0, nbPoints);\\n-\\t\\t\\t\\tsignChangeIndex -= start;\\n \\n-\\t\\t\\t}else \\t\\t\\t\\tif (nbPoints == (x.length)) {\\n \\n \\n-\\t\\t\\t\\t\\tnbPoints--;\\n \\n \\n-\\t\\t\\t\\t\\tif (signChangeIndex >= (((x.length) + 1) \\/ 2)) {\\n \\n-\\t\\t\\t\\t\\t\\tjava.lang.System.arraycopy(x, 1, x, 0, nbPoints);\\n-\\t\\t\\t\\t\\t\\tjava.lang.System.arraycopy(y, 1, y, 0, nbPoints);\\n-\\t\\t\\t\\t\\t\\t--signChangeIndex;\\n-\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t}\\n \\n \\n \\n-\\t\\t\\tjava.lang.System.arraycopy(x, signChangeIndex, x, (signChangeIndex + 1), (nbPoints - signChangeIndex));\\n-\\t\\t\\tx[signChangeIndex] = nextX;\\n-\\t\\t\\tjava.lang.System.arraycopy(y, signChangeIndex, y, (signChangeIndex + 1), (nbPoints - signChangeIndex));\\n-\\t\\t\\ty[signChangeIndex] = nextY;\\n-\\t\\t\\t++nbPoints;\\n \\n \\n-\\t\\t\\tif ((nextY * yA) <= 0) {\\n \\n-\\t\\t\\t\\txB = nextX;\\n-\\t\\t\\t\\tyB = nextY;\\n-\\t\\t\\t\\tabsYB = org.apache.commons.math4.util.FastMath.abs(yB);\\n-\\t\\t\\t\\t++agingA;\\n-\\t\\t\\t\\tagingB = 0;\\n-\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\txA = nextX;\\n-\\t\\t\\t\\tyA = nextY;\\n-\\t\\t\\t\\tabsYA = org.apache.commons.math4.util.FastMath.abs(yA);\\n-\\t\\t\\t\\tagingA = 0;\\n-\\t\\t\\t\\t++agingB;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t++agingB; \\t\\t\\t\\tsignChangeIndex -= start;}else \\t\\t\\t\\tif (nbPoints == (x.length)) { \\t\\t\\t\\t\\tnbPoints--; \\t\\t\\t\\t\\tif (signChangeIndex >= (((x.length) + 1) \\/ 2)) { \\t\\t\\t\\t\\t\\tjava.lang.System.arraycopy(x, 1, x, 0, nbPoints); \\t\\t\\t\\t\\t\\tjava.lang.System.arraycopy(y, 1, y, 0, nbPoints); \\t\\t\\t\\t\\t\\t--signChangeIndex;}} \\t\\t\\tjava.lang.System.arraycopy(x, signChangeIndex, x, (signChangeIndex + 1), (nbPoints - signChangeIndex)); \\t\\t\\tx[signChangeIndex] = nextX; \\t\\t\\tjava.lang.System.arraycopy(y, signChangeIndex, y, (signChangeIndex + 1), (nbPoints - signChangeIndex)); \\t\\t\\ty[signChangeIndex] = nextY; \\t\\t\\t++nbPoints; \\t\\t\\tif ((nextY * yA) <= 0) { \\t\\t\\t\\txB = nextX; \\t\\t\\t\\tyB = nextY; \\t\\t\\t\\tabsYB = org.apache.commons.math4.util.FastMath.abs(yB); \\t\\t\\t\\t++agingA; \\t\\t\\t\\tagingB = 0;}else { \\t\\t\\t\\txA = nextX; \\t\\t\\t\\tyA = nextY; \\t\\t\\t\\tabsYA = org.apache.commons.math4.util.FastMath.abs(yA); \\t\\t\\t\\tagingA = 0; \\t\\t\\t\\t++agingB;\\n \\n \\n \\t\\t\\t\\tsignChangeIndex++;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "java.lang.System.arraycopy(y, start, y, 0, nbPoints)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "++agingB", "INGREDIENT_PARENT": "++agingB", "LOCATION": "org.apache.commons.math4.analysis.solvers.BracketingNthOrderBrentSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_c44bfe00\\/.\\/output_astor\\/AstorMain-Commons-Math-c44bfe00\\/\\/src\\/\\/variant-2542_f\\/org\\/apache\\/commons\\/math4\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_c44bfe00\\/output_astor\\/AstorMain-Commons-Math-c44bfe00\\/src\\/default\\/org\\/apache\\/commons\\/math4\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java", "LINE": "305", "MP_RANKING": "66", "SUSPICIOUNESS": "0.218", "PATCH_HUNK_TYPE": "CtUnaryOperatorImpl|CtBlockImpl"}], "GENERATION": "1271", "VARIANT_ID": "2542", "TIME": "4269", "VALIDATION": "|true|0|5791|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_c44bfe00\\/.\\/output_astor\\/AstorMain-Commons-Math-c44bfe00\\/\\/bin\\/\\/variant-2542"}]}}, {"bug_id": "c979a6f0", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:22:21.275543", "repair_begin": "2018-12-30 23:08:02.007920", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "cc4ab51e", "tool": "ARJA", "nb_patch": 40, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 13:13:21.625471", "repair_begin": "2018-12-29 11:48:29.255568", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java", "line": 163, "faulty": "ret=x * FastMath.log(x / mu) + mu - x;", "type": "InsertBefore", "seed": "if (x <= 0) {\n  return 0;\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java", "line": 180, "faulty": "if (x == 0) {\n  if (p < 0.1) {\n    ret=-getDeviancePart(n,n * q) - n * p;\n  }\n else {\n    ret=n * FastMath.log(q);\n  }\n}\n else if (x == n) {\n  if (q < 0.1) {\n    ret=-getDeviancePart(n,n * p) - n * q;\n  }\n else {\n    ret=n * FastMath.log(p);\n  }\n}\n else {\n  ret=getStirlingError(n) - getStirlingError(x) - getStirlingError(n - x)- getDeviancePart(x,n * p)- getDeviancePart(n - x,n * q);\n  double f=(MathUtils.TWO_PI * x * (n - x)) / n;\n  ret=-0.5 * FastMath.log(f) + ret;\n}", "type": "InsertBefore", "seed": "ret=getStirlingError(n) - getStirlingError(x) - getStirlingError(n - x)- getDeviancePart(x,n * p)- getDeviancePart(n - x,n * q);"}, {"path": "src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java", "line": 103, "faulty": "return logProbability == Double.NEGATIVE_INFINITY ? 0 : FastMath.exp(logProbability);", "type": "InsertBefore", "seed": "if (x < 0) {\n  return 0;\n}"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_cc4ab51e/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java\t2018-12-29 05:47:46.653285000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_cc4ab51e/patches_lhtt/Patch_1003/patched/tmp/Arja_Bug_dot_jar_Commons-Math_cc4ab51e/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java\t2018-12-29 06:54:05.888483791 -0500\n@@ -160,7 +160,10 @@\n             }\n             ret = s1;\n         } else {\n-            ret = x * FastMath.log(x / mu) + mu - x;\n+            if (x <= 0) {\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\t\t\tret = x * FastMath.log(x / mu) + mu - x;\n         }\n         return ret;\n     }\n@@ -177,7 +180,10 @@\n      */\n     static double logBinomialProbability(int x, int n, double p, double q) {\n         double ret;\n-        if (x == 0) {\n+        ret = getStirlingError(n) - getStirlingError(x)\n+\t\t\t\t- getStirlingError(n - x) - getDeviancePart(x, n * p)\n+\t\t\t\t- getDeviancePart(n - x, n * q);\n+\t\tif (x == 0) {\n             if (p < 0.1) {\n                 ret = -getDeviancePart(n, n * q) - n * p;\n             } else {\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_cc4ab51e/src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java\t2018-12-29 05:47:46.625284000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_cc4ab51e/patches_lhtt/Patch_1003/patched/tmp/Arja_Bug_dot_jar_Commons-Math_cc4ab51e/src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java\t2018-12-29 06:54:05.888483791 -0500\n@@ -100,7 +100,10 @@\n     /** {@inheritDoc} */\n     public double probability(int x) {\n         final double logProbability = logProbability(x);\n-        return logProbability == Double.NEGATIVE_INFINITY ? 0 : FastMath.exp(logProbability);\n+        if (x < 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\treturn logProbability == Double.NEGATIVE_INFINITY ? 0 : FastMath.exp(logProbability);\n     }\n \n     /** {@inheritDoc} **/\n\n\n"}]}}, {"bug_id": "cc4ab51e", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 07:03:47.026769", "repair_begin": "2019-01-03 06:21:19.462051", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_cc4ab51e\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansionjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_cc4ab51e\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansionjava\\n@@ -178,7 +178,7 @@\\n \\tstatic double logBinomialProbability(int x, int n, double p, double q) {\\n \\t\\tdouble ret;\\n \\t\\tif (x == 0) {\\n-\\t\\t\\tif (p < 0.1) {\\n+\\t\\t\\tif (q < 0.1) {\\n \\t\\t\\t\\tret = (-(org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(n, (n * q)))) - (n * p);\\n \\t\\t\\t}else {\\n \\t\\t\\t\\tret = n * (org.apache.commons.math3.util.FastMath.log(q));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "p < 0.1", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "q < 0.1", "INGREDIENT_PARENT": "_double_0 < 0.1", "LOCATION": "org.apache.commons.math3.distribution.SaddlePointExpansion", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_cc4ab51e\\/.\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/\\/src\\/\\/variant-562\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_cc4ab51e\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java", "LINE": "181", "MP_RANKING": "13", "SUSPICIOUNESS": "0.125", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "281", "VARIANT_ID": "562", "TIME": "1105", "VALIDATION": "|true|0|6078|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_cc4ab51e\\/.\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/\\/bin\\/\\/variant-562"}]}}, {"bug_id": "cc4ab51e", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:18:45.875897", "repair_begin": "2018-12-30 21:12:19.814934", "patches": [{"nb_test_that_execute_statement": 32, "patchLocation": {"line": 181, "class": "org.apache.commons.math3.distribution.SaddlePointExpansion"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java\n@@ -180,3 +180,3 @@\n         if (x == 0) {\n-            if (p < 0.1) {\n+            if (false) {\n                 ret = -getDeviancePart(n, n * q) - n * p;\n"}]}}, {"bug_id": "cc4ab51e", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 17:19:15.278690", "repair_begin": "2019-01-01 16:43:19.652160", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java\\n@@ -179,9 +179,9 @@\\n \\t\\tdouble ret;\\n \\t\\tif (x == 0) {\\n \\t\\t\\tif (p < 0.1) {\\n-\\t\\t\\t\\tret = (-(org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(n, (n * q)))) - (n * p);\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tret = n * (org.apache.commons.math3.util.FastMath.log(q));\\n+\\n+\\n+\\t\\t\\t\\tret = n * (org.apache.commons.math3.util.FastMath.log(q));}else { \\t\\t\\t\\tret = n * (org.apache.commons.math3.util.FastMath.log(q));\\n \\t\\t\\t}\\n \\t\\t}else \\t\\t\\tif (x == n) {\\n \\t\\t\\t\\tif (q < 0.1) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "ret = (-(org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(n, (n * q)))) - (n * p)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "ret = n * (org.apache.commons.math3.util.FastMath.log(q))", "INGREDIENT_PARENT": "ret = n * (org.apache.commons.math3.util.FastMath.log(q))", "LOCATION": "org.apache.commons.math3.distribution.SaddlePointExpansion", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_cc4ab51e\\/.\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/\\/src\\/\\/variant-42_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_cc4ab51e\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java", "LINE": "182", "MP_RANKING": "1", "SUSPICIOUNESS": "0.316", "PATCH_HUNK_TYPE": "CtAssignmentImpl|CtBlockImpl"}], "GENERATION": "21", "VARIANT_ID": "42", "TIME": "354", "VALIDATION": "|true|0|6078|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_cc4ab51e\\/.\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/\\/bin\\/\\/variant-42"}]}}, {"bug_id": "cc4ab51e", "tool": "jKali", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:53:49.778065", "repair_begin": "2018-12-30 22:40:24.918596", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java\\n@@ -178,7 +178,7 @@\\n \\tstatic double logBinomialProbability(int x, int n, double p, double q) {\\n \\t\\tdouble ret;\\n \\t\\tif (x == 0) {\\n-\\t\\t\\tif (p < 0.1) {\\n+\\t\\t\\tif (false) {\\n \\t\\t\\t\\tret = (-(org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(n, (n * q)))) - (n * p);\\n \\t\\t\\t}else {\\n \\t\\t\\t\\tret = n * (org.apache.commons.math3.util.FastMath.log(q));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (p < 0.1) {\\n\\tret = (-(org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(n, (n * q)))) - (n * p);\\n}else {\\n\\tret = n * (org.apache.commons.math3.util.FastMath.log(q));\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tret = (-(org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(n, (n * q)))) - (n * p);\\n}else {\\n\\tret = n * (org.apache.commons.math3.util.FastMath.log(q));\\n}", "LOCATION": "org.apache.commons.math3.distribution.SaddlePointExpansion", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_cc4ab51e\\/.\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/\\/src\\/\\/variant-9_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_cc4ab51e\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java", "LINE": "181", "MP_RANKING": "7", "SUSPICIOUNESS": "0.125", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "9", "TIME": "5", "VALIDATION": "|true|0|6078|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_cc4ab51e\\/.\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/\\/bin\\/\\/variant-9"}]}}, {"bug_id": "cc4ab51e", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 08:48:54.721631", "repair_begin": "2019-02-05 08:32:53.660971", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_cc4ab51e\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansionjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_cc4ab51e\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansionjava\\n@@ -178,7 +178,7 @@\\n \\tstatic double logBinomialProbability(int x, int n, double p, double q) {\\n \\t\\tdouble ret;\\n \\t\\tif (x == 0) {\\n-\\t\\t\\tif (p < 0.1) {\\n+\\t\\t\\tif (p == 0.1) {\\n \\t\\t\\t\\tret = (-(org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(n, (n * q)))) - (n * p);\\n \\t\\t\\t}else {\\n \\t\\t\\t\\tret = n * (org.apache.commons.math3.util.FastMath.log(q));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "p < 0.1", "PATCH_HUNK_CODE": "p == 0.1", "LOCATION": "org.apache.commons.math3.distribution.SaddlePointExpansion", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_cc4ab51e\\/.\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/\\/src\\/\\/variant-16\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_cc4ab51e\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/distribution\\/SaddlePointExpansion.java", "LINE": "181", "MP_RANKING": "1", "SUSPICIOUNESS": "0.125", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "16", "TIME": "15", "VALIDATION": "|true|0|6078|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_cc4ab51e\\/.\\/output_astor\\/AstorMain-Commons-Math-cc4ab51e\\/\\/bin\\/\\/variant-16"}]}}, {"bug_id": "cc4ab51e", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 22:59:56.845112", "repair_begin": "2018-12-29 22:33:58.464721", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java", "line": 181, "faulty": "if (p < 0.1) {\n  ret=-getDeviancePart(n,n * q) - n * p;\n}\n else {\n  ret=n * FastMath.log(q);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Commons-Math_cc4ab51e/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java\t2018-12-29 16:33:10.735668000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Commons-Math_cc4ab51e/patches_9qwc/Patch_4/patched/tmp/Kali_Bug_dot_jar_Commons-Math_cc4ab51e/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java\t2018-12-29 16:59:56.427339061 -0500\n@@ -178,7 +178,7 @@\n     static double logBinomialProbability(int x, int n, double p, double q) {\n         double ret;\n         if (x == 0) {\n-            if (p < 0.1) {\n+            if (false) {\n                 ret = -getDeviancePart(n, n * q) - n * p;\n             } else {\n                 ret = n * FastMath.log(q);\n\n\n"}]}}, {"bug_id": "cc4ab51e", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:44:50.719170", "repair_begin": "2018-12-29 15:38:31.435186", "patches": [{"nb_test_that_execute_statement": 32, "patchLocation": {"line": 181, "class": "org.apache.commons.math3.distribution.SaddlePointExpansion"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java\n@@ -180,3 +180,3 @@\n         if (x == 0) {\n-            if (p < 0.1) {\n+            if (0.1 <= x) {\n                 ret = -getDeviancePart(n, n * q) - n * p;\n"}]}}, {"bug_id": "ce126bdb", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:38:28.915321", "repair_begin": "2018-12-30 21:18:47.075838", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "ce126bdb", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:13:52.929693", "repair_begin": "2018-12-29 14:52:06.581136", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "cedf0d27", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 02:08:33.193190", "repair_begin": "2018-12-31 01:44:08.161841", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 883, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -882,3 +882,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "d4f978dd", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:59:09.678068", "repair_begin": "2018-12-29 15:52:44.121664", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 458, "class": "org.apache.commons.math3.util.ResizableDoubleArray"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n@@ -457,3 +457,5 @@\n         System.arraycopy(values, 0, tempArray, numElements, values.length);\n-        internalArray = tempArray;\n+        if (values.length <= 5) {\n+            internalArray = tempArray;\n+        }\n         startIndex = 0;\n"}]}}, {"bug_id": "d7c0f27e", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:09:37.747706", "repair_begin": "2018-12-30 21:46:38.820689", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "d7c0f27e", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:35:05.102054", "repair_begin": "2018-12-29 15:13:20.797364", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "d270055e", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:13:53.140272", "repair_begin": "2018-12-31 01:00:57.080641", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "d2777388", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:34:43.098827", "repair_begin": "2018-12-30 23:25:32.848504", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "d2777388", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:56:12.506893", "repair_begin": "2018-12-29 15:41:34.938544", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "dbdff075", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:51:37.560802", "repair_begin": "2018-12-30 22:50:55.759316", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 822, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -821,3 +821,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if (this.stepStart == interpolator.getInterpolatedTime()) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "dbdff075", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:32:34.911962", "repair_begin": "2018-12-29 14:26:45.990882", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 822, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -821,3 +821,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if ((!((org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.this.stepControl3 <= hInt) && (18 < interpError))) || (previousRejected)) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "dd6cefb0", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:22:49.677916", "repair_begin": "2018-12-30 21:13:46.672904", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 135, "class": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n@@ -134,3 +134,3 @@\n         if (v.length == 0) {\n-            if ((Boolean) getTree(false).getAttribute()) {\n+            if (false) {\n                 setSize(Double.POSITIVE_INFINITY);\n"}]}}, {"bug_id": "dd6cefb0", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:17:38.218103", "repair_begin": "2018-12-29 14:56:47.822329", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "e2dc384d", "tool": "ARJA", "nb_patch": 32, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 11:41:42.138017", "repair_begin": "2018-12-29 10:36:21.141153", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", "line": 325, "faulty": "double[] work3=new double[nC];", "type": "InsertBefore", "seed": "iterationCounter.incrementCount();"}, {"path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", "line": 333, "faulty": "double currentCost=current.getCost();", "type": "InsertBefore", "seed": "xNorm=FastMath.sqrt(xNorm);"}, {"path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", "line": 329, "faulty": "evaluationCounter.incrementCount();", "type": "Delete", "seed": "lmPar=0;"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_834/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:26:30.356700453 -0500\n@@ -322,15 +322,15 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n-        double currentCost = current.getCost();\n+        xNorm = FastMath.sqrt(xNorm);\n+\t\tdouble currentCost = current.getCost();\n \n         // Outer loop.\n         boolean firstIteration = true;\n\n\n"}]}}, {"bug_id": "ebadb558", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:13:14.779143", "repair_begin": "2018-12-30 22:58:39.504458", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "ebadb558", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:26:16.965074", "repair_begin": "2018-12-29 15:05:27.322473", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 880, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -879,3 +879,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "ebc61de9", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:44:08.562691", "repair_begin": "2018-12-30 22:40:15.584022", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 191, "class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -190,3 +190,5 @@\n                         // search interval.\n-                        x0 = 0.5 * (x0 + x1 - delta);\n+                        if (false) {\n+                            x0 = 0.5 * (x0 + x1 - delta);\n+                        }\n                         f0 = computeObjectiveValue(x0);\n"}]}}, {"bug_id": "ef9b639a", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:04:20.245021", "repair_begin": "2018-12-30 23:03:24.451124", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 878, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -877,3 +877,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if (this.stepStart == interpolator.getInterpolatedTime()) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "ef9b639a", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:51:11.633302", "repair_begin": "2018-12-29 14:45:17.687000", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 878, "class": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n@@ -877,3 +877,5 @@\n               hNew = hInt;\n-              reject = true;\n+              if ((!((org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.this.stepControl3 <= hInt) && (18 < interpError))) || (previousRejected)) {\n+                reject = true;\n+              }\n             }\n"}]}}, {"bug_id": "f4a4464b", "tool": "NPEFix", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 00:24:10.397423", "repair_begin": "2018-12-30 00:22:55.083172", "patches": [{"locations": [{"executionCount": 0, "line": 89, "class": "org.apache.commons.math.analysis.solvers.BisectionSolver", "sourceStart": 3098, "sourceEnd": 3098}, {"executionCount": 0, "line": 88, "class": "org.apache.commons.math.analysis.solvers.BisectionSolver", "sourceStart": 3068, "sourceEnd": 3068}], "patch": "--- analysis/solvers/BisectionSolver.java\n+++ analysis/solvers/BisectionSolver.java\n@@ -87,4 +87,12 @@\n             m = UnivariateRealSolverUtils.midpoint(min, max);\n-           fmin = f.value(min);\n-           fm = f.value(m);\n+           if (f == null) {\n+               fmin = new SinFunction().value(min);\n+           } else {\n+               fmin = f.value(min);\n+           }\n+           if (f == null) {\n+               fm = new SinFunction().value(m);\n+           } else {\n+               fm = f.value(m);\n+           }\n \n"}]}}, {"bug_id": "f6dd42b4", "tool": "ARJA", "nb_patch": 126, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 11:54:07.806079", "repair_begin": "2018-12-29 09:54:04.741243", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 121, "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifyInterval(min,max);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 132, "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", "type": "Replace", "seed": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 173, "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);\n}", "type": "InsertBefore", "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(min,0);\n  ret=min;\n}\n else if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);\n}"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-29 03:53:43.256758000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_f6dd42b4/patches_kjw0/Patch_1496/patched/tmp/Arja_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-29 05:38:30.910566534 -0500\n@@ -118,7 +118,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        verifyInterval(min, max);\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,8 +129,10 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        throw MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\"function values at endpoints do not have different signs.  \"\n+\t\t\t\t\t\t+ \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\", min,\n+\t\t\t\tmax, yMin, yMax);\n \n     }\n \n@@ -170,16 +173,31 @@\n             if (Math.abs(yMin) <= functionValueAccuracy) {\n                 setResult(min, 0);\n                 ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                        \"function values at endpoints do not have different signs.  \" +\n-                        \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n-                        min, max, yMin, yMax);\n-            }\n+\t\t\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\t\t\tsetResult(min, 0);\n+\t\t\t\t\tret = min;\n+\t\t\t\t} else if (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\t\t\tsetResult(max, 0);\n+\t\t\t\t\tret = max;\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t\t.createIllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"function values at endpoints do not have different signs.  \"\n+\t\t\t\t\t\t\t\t\t\t\t+ \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n+\t\t\t\t\t\t\t\t\tmin, max, yMin, yMax);\n+\t\t\t\t}\n+\t\t\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\t\t\tsetResult(max, 0);\n+\t\t\t\t\tret = max;\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t\t.createIllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"function values at endpoints do not have different signs.  \"\n+\t\t\t\t\t\t\t\t\t\t\t+ \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n+\t\t\t\t\t\t\t\t\tmin, max, yMin, yMax);\n+\t\t\t\t}\n+\t\t\t}\n         } else if (sign < 0){\n             // solve using only the first endpoint as initial guess\n             ret = solve(f, min, yMin, max, yMax, min, yMin);\n\n\n"}]}}, {"bug_id": "f6dd42b4", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 04:06:35.042512", "repair_begin": "2019-01-03 04:05:26.375907", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_f6dd42b4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolverjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_f6dd42b4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolverjava\\n@@ -129,7 +129,7 @@\\n \\t\\t}\\n \\n \\n-\\t\\treturn solve(f, min, yMin, max, yMax, initial, yInitial);\\n+\\t\\treturn solve(f, max, max);\\n \\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtReturnImpl", "ORIGINAL_CODE": "solve(f, min, yMin, max, yMax, initial, yInitial)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "solve(f, max, max)", "INGREDIENT_PARENT": "solve(_UnivariateRealFunction_0, _double_1, _double_2)", "LOCATION": "org.apache.commons.math.analysis.solvers.BrentSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_f6dd42b4\\/.\\/output_astor\\/AstorMain-Commons-Math-f6dd42b4\\/\\/src\\/\\/variant-314\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_f6dd42b4\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "LINE": "132", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtReturnImpl"}], "GENERATION": "157", "VARIANT_ID": "314", "TIME": "39", "VALIDATION": "|true|0|2140|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_f6dd42b4\\/.\\/output_astor\\/AstorMain-Commons-Math-f6dd42b4\\/\\/bin\\/\\/variant-314"}]}}, {"bug_id": "f6dd42b4", "tool": "GenProg-A", "nb_patch": 359, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:54:36.685810", "repair_begin": "2018-12-30 21:11:44.911661", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 209, "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", "type": "Replace", "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 121, "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", "type": "Replace", "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 109, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 209, "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", "type": "Replace", "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 108, "faulty": "double yMin=f.value(min);", "type": "InsertBefore", "seed": "double oldx=Double.POSITIVE_INFINITY;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 109, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", "type": "Delete", "seed": "return new BisectionSolver();"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_644/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:56:03.299801110 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_644/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:56:03.303801169 -0500\n@@ -104,24 +104,18 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n\n\n"}]}}, {"bug_id": "f6dd42b4", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-01 14:38:01.111662", "repair_begin": "2019-01-01 14:36:59.874871", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java\\n@@ -126,10 +126,10 @@\\n \\n \\t\\tif ((yInitial * yMax) < 0) {\\n \\t\\t\\treturn solve(f, initial, yInitial, max, yMax, initial, yInitial);\\n-\\t\\t}\\n+\\t\\t} \\t\\treturn solve(f, min, max);\\n+\\n \\n \\n-\\t\\treturn solve(f, min, yMin, max, yMax, initial, yInitial);\\n \\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return solve(f, min, yMin, max, yMax, initial, yInitial)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return solve(f, min, max)", "INGREDIENT_PARENT": "return solve(f, min, max)", "LOCATION": "org.apache.commons.math.analysis.solvers.BrentSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_f6dd42b4\\/.\\/output_astor\\/AstorMain-Commons-Math-f6dd42b4\\/\\/src\\/\\/variant-170_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_f6dd42b4\\/output_astor\\/AstorMain-Commons-Math-f6dd42b4\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "LINE": "132", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "85", "VARIANT_ID": "170", "TIME": "27", "VALIDATION": "|true|0|2140|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_f6dd42b4\\/.\\/output_astor\\/AstorMain-Commons-Math-f6dd42b4\\/\\/bin\\/\\/variant-170"}]}}, {"bug_id": "f6dd42b4", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:57:25.442139", "repair_begin": "2018-12-29 14:56:53.447318", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 225, "class": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n@@ -224,6 +224,6 @@\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        if ((!(lower < initial)) || ((org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.this.result <= lower) && (1 == lower))) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n-                    lower, initial, upper);\n+            \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n+            lower, initial, upper);\n         }\n"}]}}, {"bug_id": "f6dd42b4", "tool": "RSRepair-A", "nb_patch": 4, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 08:09:39.356451", "repair_begin": "2018-12-30 07:27:44.759236", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 127, "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}], "patch": "--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 01:27:28.893226000 -0500\n+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_f6dd42b4/patches_0m1a/Patch_300/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 01:42:23.740899533 -0500\n@@ -123,7 +123,8 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n\n\n"}]}}, {"bug_id": "f64b6a90", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:27:26.210378", "repair_begin": "2018-12-30 22:13:04.383613", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "f64b6a90", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 15:39:05.585215", "repair_begin": "2018-12-29 15:17:28.430566", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 881, "class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n@@ -880,3 +880,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (itest == biglsq) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "f656676e", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:18:33.094453", "repair_begin": "2018-12-30 23:11:27.596578", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "f656676e", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 16:06:06.409718", "repair_begin": "2018-12-29 15:51:46.026553", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "faa77857", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 22:30:35.085259", "repair_begin": "2018-12-30 22:20:50.218417", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (false) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "faa77857", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 16:08:53.496086", "repair_begin": "2018-12-29 15:54:25.457483", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 879, "class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -878,3 +878,5 @@\n                     // Computing MAX\n-                    delta = Math.max(hDelta, dnorm);\n+                    if (org.apache.commons.math.optimization.direct.BOBYQAOptimizer.HALF == cauchy) {\n+                        delta = Math.max(hDelta, dnorm);\n+                    }\n                 } else {\n"}]}}, {"bug_id": "faf99727", "tool": "ARJA", "nb_patch": 211, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 09:09:30.705681", "repair_begin": "2018-12-29 08:29:24.911751", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 103, "faulty": "support.clear();", "type": "InsertBefore", "seed": "for (int i=0; i < extreme.size(); ++i) {\n  final P pi=extreme.get(i);\n  if (!ball.contains(pi,tolerance)) {\n    support.add(pi);\n    ball=moveToFrontBall(extreme.subList(i + 1,extreme.size()),support);\n    for (int j=i; j > 1; --j) {\n      extreme.set(j,extreme.get(j - 1));\n    }\n    extreme.set(0,pi);\n  }\n}"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 90, "faulty": "extreme.add(points.get(0));", "type": "Delete", "seed": "extreme.add(points.get(0));"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\t2018-12-29 02:28:54.137653000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/patches_ryas/Patch_110/patched/tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\t2018-12-29 02:47:25.551117692 -0500\n@@ -86,8 +86,6 @@\n         List<P> extreme = new ArrayList<P>(max);\n         List<P> support = new ArrayList<P>(max);\n \n-        // start with only first point selected as a candidate support\n-        extreme.add(points.get(0));\n         EnclosingBall<S, P> ball = moveToFrontBall(extreme, support);\n \n         while (true) {\n@@ -99,7 +97,19 @@\n                 return ball;\n             }\n \n-            // recurse search, restricted to the small subset containing support and farthest point\n+            for (int i = 0; i < extreme.size(); ++i) {\n+\t\t\t\tfinal P pi = extreme.get(i);\n+\t\t\t\tif (!ball.contains(pi, tolerance)) {\n+\t\t\t\t\tsupport.add(pi);\n+\t\t\t\t\tball = moveToFrontBall(\n+\t\t\t\t\t\t\textreme.subList(i + 1, extreme.size()), support);\n+\t\t\t\t\tfor (int j = i; j > 1; --j) {\n+\t\t\t\t\t\textreme.set(j, extreme.get(j - 1));\n+\t\t\t\t\t}\n+\t\t\t\t\textreme.set(0, pi);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// recurse search, restricted to the small subset containing support and farthest point\n             support.clear();\n             support.add(farthest);\n             EnclosingBall<S, P> savedBall = ball;\n\n\n"}]}}, {"bug_id": "faf99727", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-31 01:04:54.815426", "repair_begin": "2018-12-31 00:56:35.094803", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 109, "class": "org.apache.commons.math3.geometry.enclosing.WelzlEncloser"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\n@@ -108,3 +108,5 @@\n                 // TODO: fix this, it should never happen but it does!\n-                throw new MathInternalError();\n+                if (false) {\n+                    throw new MathInternalError();\n+                }\n             }\n"}]}}, {"bug_id": "faf99727", "tool": "GenProg-A", "nb_patch": 170, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 17:28:42.800734", "repair_begin": "2018-12-30 16:52:25.951428", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 109, "faulty": "throw new MathInternalError();", "type": "Delete", "seed": "return ball;"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 147, "faulty": "extreme.set(j,extreme.get(j - 1));", "type": "InsertBefore", "seed": "extreme.set(j,extreme.get(j - 1));"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 109, "faulty": "throw new MathInternalError();", "type": "Replace", "seed": "return pivotingBall(points);"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 147, "faulty": "extreme.set(j,extreme.get(j - 1));", "type": "InsertBefore", "seed": "extreme.set(j,extreme.get(j - 1));"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 109, "faulty": "throw new MathInternalError();", "type": "Replace", "seed": "return pivotingBall(points);"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 137, "faulty": "return getMessage(Locale.getDefault());", "type": "Replace", "seed": "return getMessage(Locale.getDefault());"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 147, "faulty": "extreme.set(j,extreme.get(j - 1));", "type": "InsertBefore", "seed": "extreme.set(j,extreme.get(j - 1));"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 147, "faulty": "extreme.set(j,extreme.get(j - 1));", "type": "InsertBefore", "seed": "extreme.set(j,extreme.get(j - 1));"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 147, "faulty": "extreme.set(j,extreme.get(j - 1));", "type": "InsertBefore", "seed": "extreme.set(j,extreme.get(j - 1));"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 109, "faulty": "throw new MathInternalError();", "type": "Replace", "seed": "return pivotingBall(points);"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 137, "faulty": "return getMessage(Locale.getDefault());", "type": "Replace", "seed": "return getMessage(Locale.getDefault());"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 107, "faulty": "if (ball.getRadius() < savedBall.getRadius()) {\n  throw new MathInternalError();\n}", "type": "Delete", "seed": "throw new MathInternalError();"}, {"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 109, "faulty": "throw new MathInternalError();", "type": "Replace", "seed": "if (points == null || points.isEmpty()) {\n  return generator.ballOnSupport(new ArrayList<P>());\n}"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 137, "faulty": "return getMessage(Locale.getDefault());", "type": "InsertBefore", "seed": "final List<Object> list=new ArrayList<Object>();"}], "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\t2018-12-30 10:51:38.925758000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/patches_9tkz/Patch_715/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\t2018-12-30 11:27:35.335636286 -0500\n@@ -104,11 +104,6 @@\n             support.add(farthest);\n             EnclosingBall<S, P> savedBall = ball;\n             ball = moveToFrontBall(extreme, support);\n-            if (ball.getRadius() < savedBall.getRadius()) {\n-                // TODO: fix this, it should never happen but it does!\n-                throw new MathInternalError();\n-            }\n-\n             // it was an interesting point, move it to the front\n             // according to G\u00e4rtner's heuristic\n             extreme.add(0, farthest);\n@@ -145,6 +140,11 @@\n                     // according to Welzl's heuristic\n                     for (int j = i; j > 1; --j) {\n                         extreme.set(j, extreme.get(j - 1));\n+\t\t\t\t\t\textreme.set(j, extreme.get(j - 1));\n+\t\t\t\t\t\textreme.set(j, extreme.get(j - 1));\n+\t\t\t\t\t\textreme.set(j, extreme.get(j - 1));\n+\t\t\t\t\t\textreme.set(j, extreme.get(j - 1));\n+\t\t\t\t\t\textreme.set(j, extreme.get(j - 1));\n                     }\n                     extreme.set(0, pi);\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-30 10:51:38.849758000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/patches_9tkz/Patch_715/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-30 11:27:35.339636333 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "faf99727", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 23:01:07.251504", "repair_begin": "2018-12-30 22:48:02.384217", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java\\n+++ org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java\\n@@ -103,11 +103,11 @@\\n \\t\\t\\tsupport.clear();\\n \\t\\t\\tsupport.add(farthest);\\n \\t\\t\\torg.apache.commons.math3.geometry.enclosing.EnclosingBall<S, P> savedBall = ball;\\n-\\t\\t\\tball = moveToFrontBall(extreme, support);\\n-\\t\\t\\tif ((ball.getRadius()) < (savedBall.getRadius())) {\\n+\\t\\t\\tball = moveToFrontBall(extreme, support); \\t\\t\\tif ((points == null) || (points.isEmpty())) { \\t\\t\\t\\treturn generator.ballOnSupport(new java.util.ArrayList<P>());}\\n+\\n+\\n+\\n \\n-\\t\\t\\t\\tthrow new org.apache.commons.math3.exception.MathInternalError();\\n-\\t\\t\\t}\\n \\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((ball.getRadius()) < (savedBall.getRadius())) {\\n\\n\\tthrow new org.apache.commons.math3.exception.MathInternalError();\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if ((points == null) || (points.isEmpty())) {\\n\\n\\treturn generator.ballOnSupport(new java.util.ArrayList<P>());\\n}", "INGREDIENT_PARENT": "if ((points == null) || (points.isEmpty())) {\\n\\n\\treturn generator.ballOnSupport(new java.util.ArrayList<P>());\\n}", "LOCATION": "org.apache.commons.math3.geometry.enclosing.WelzlEncloser", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_faf99727\\/.\\/output_astor\\/AstorMain-Commons-Math-faf99727\\/\\/src\\/\\/variant-20_f\\/org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_faf99727\\/output_astor\\/AstorMain-Commons-Math-faf99727\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java", "LINE": "107", "MP_RANKING": "15", "SUSPICIOUNESS": "0.447", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "10", "VARIANT_ID": "20", "TIME": "257", "VALIDATION": "|true|0|5641|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Commons-Math_faf99727\\/.\\/output_astor\\/AstorMain-Commons-Math-faf99727\\/\\/bin\\/\\/variant-20"}]}}, {"bug_id": "faf99727", "tool": "jKali", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-30 21:54:44.903451", "repair_begin": "2018-12-30 21:42:35.792070", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java\\n+++ org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java\\n@@ -106,7 +106,7 @@\\n \\t\\t\\tball = moveToFrontBall(extreme, support);\\n \\t\\t\\tif ((ball.getRadius()) < (savedBall.getRadius())) {\\n \\n-\\t\\t\\t\\tthrow new org.apache.commons.math3.exception.MathInternalError();\\n+\\n \\t\\t\\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtThrowImpl|CtBlockImpl", "ORIGINAL_CODE": "throw new org.apache.commons.math3.exception.MathInternalError()", "LOCATION": "org.apache.commons.math3.geometry.enclosing.WelzlEncloser", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_faf99727\\/.\\/output_astor\\/AstorMain-Commons-Math-faf99727\\/\\/src\\/\\/variant-2_f\\/org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_faf99727\\/output_astor\\/AstorMain-Commons-Math-faf99727\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java", "LINE": "109", "MP_RANKING": "0", "SUSPICIOUNESS": "0.707"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|5641|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bug_dot_jar_Commons-Math_faf99727\\/.\\/output_astor\\/AstorMain-Commons-Math-faf99727\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "faf99727", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-02-05 07:59:02.071531", "repair_begin": "2019-02-05 07:44:47.596127", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_faf99727\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloserjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_faf99727\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloserjava\\n@@ -104,7 +104,7 @@\\n \\t\\t\\tsupport.add(farthest);\\n \\t\\t\\torg.apache.commons.math3.geometry.enclosing.EnclosingBall<S, P> savedBall = ball;\\n \\t\\t\\tball = moveToFrontBall(extreme, support);\\n-\\t\\t\\tif ((ball.getRadius()) < (savedBall.getRadius())) {\\n+\\t\\t\\tif ((ball.getRadius()) == (savedBall.getRadius())) {\\n \\n \\t\\t\\t\\tthrow new org.apache.commons.math3.exception.MathInternalError();\\n \\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(ball.getRadius()) < (savedBall.getRadius())", "PATCH_HUNK_CODE": "(ball.getRadius()) == (savedBall.getRadius())", "LOCATION": "org.apache.commons.math3.geometry.enclosing.WelzlEncloser", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_faf99727\\/.\\/output_astor\\/AstorMain-Commons-Math-faf99727\\/\\/src\\/\\/variant-3\\/org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_faf99727\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/geometry\\/enclosing\\/WelzlEncloser.java", "LINE": "107", "MP_RANKING": "1", "SUSPICIOUNESS": "0.447", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "3", "TIME": "1", "VALIDATION": "|true|0|5641|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Commons-Math_faf99727\\/.\\/output_astor\\/AstorMain-Commons-Math-faf99727\\/\\/bin\\/\\/variant-3"}]}}, {"bug_id": "faf99727", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 17:37:29.681282", "repair_begin": "2018-12-29 17:14:09.907233", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java", "line": 107, "faulty": "if (ball.getRadius() < savedBall.getRadius()) {\n  throw new MathInternalError();\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\t2018-12-29 11:13:23.656018000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Commons-Math_faf99727/patches_rc9r/Patch_6/patched/tmp/Kali_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\t2018-12-29 11:37:29.269692869 -0500\n@@ -104,7 +104,7 @@\n             support.add(farthest);\n             EnclosingBall<S, P> savedBall = ball;\n             ball = moveToFrontBall(extreme, support);\n-            if (ball.getRadius() < savedBall.getRadius()) {\n+            if (false) {\n                 // TODO: fix this, it should never happen but it does!\n                 throw new MathInternalError();\n             }\n\n\n"}]}}, {"bug_id": "faf99727", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2018-12-29 14:42:51.723830", "repair_begin": "2018-12-29 14:36:57.809003", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 109, "class": "org.apache.commons.math3.geometry.enclosing.WelzlEncloser"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java\n@@ -108,3 +108,5 @@\n                 // TODO: fix this, it should never happen but it does!\n-                throw new MathInternalError();\n+                if (points.isEmpty()) {\n+                    throw new MathInternalError();\n+                }\n             }\n"}]}}, {"bug_id": "fc409e88", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Commons-Math", "result": {"repair_end": "2019-01-03 05:52:05.790996", "repair_begin": "2019-01-03 05:30:15.204889", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/CMAESOptimizerjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/CMAESOptimizerjava\\n@@ -858,44 +858,44 @@\\n \\t\\t\\t\\treturn x;\\n \\t\\t\\tdouble[] res = new double[x.length];\\n \\t\\t\\tfor (int i = 0; i < (x.length); i++) {\\n-\\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]);\\n-\\t\\t\\t\\tres[i] = ((x[i]) - (boundaries[0][i])) \\/ diff;\\n-\\t\\t\\t}\\n-\\t\\t\\treturn res;\\n-\\t\\t}\\n+\\t\\t\\t\\tdouble diff = \\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n \\n \\n \\n \\n-\\t\\tpublic double[] decode(final double[] x) {\\n-\\t\\t\\tif ((boundaries) == null)\\n-\\t\\t\\t\\treturn x;\\n-\\t\\t\\tdouble[] res = new double[x.length];\\n-\\t\\t\\tfor (int i = 0; i < (x.length); i++) {\\n-\\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]);\\n-\\t\\t\\t\\tres[i] = (diff * (x[i])) + (boundaries[0][i]);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn res;\\n-\\t\\t}\\n \\n \\n \\n \\n \\n \\n-\\t\\tpublic double value(final double[] point) {\\n-\\t\\t\\tdouble value;\\n-\\t\\t\\tif (((boundaries) != null) && (isRepairMode)) {\\n-\\t\\t\\t\\tdouble[] repaired = repair(point);\\n-\\t\\t\\t\\tvalue = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(\\n-\\t\\t\\t\\tdecode(repaired))) + \\n-\\t\\t\\t\\t(penalty(point, repaired));\\n-\\t\\t\\t}else\\n-\\t\\t\\t\\tvalue = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(\\n-\\t\\t\\t\\tdecode(point));\\n-\\t\\t\\treturn isMinimize ? value : -value;\\n+\\t\\t\\t\\t-(valueRange); \\t\\t\\t\\tres[i] = ((x[i]) - (boundaries[0][i])) \\/ diff;} \\t\\t\\treturn res;} \\t\\tpublic double[] decode(final double[] x) { \\t\\t\\tif ((boundaries) == null) \\t\\t\\t\\treturn x; \\t\\t\\tdouble[] res = new double[x.length]; \\t\\t\\tfor (int i = 0; i < (x.length); i++) { \\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]); \\t\\t\\t\\tres[i] = (diff * (x[i])) + (boundaries[0][i]);} \\t\\t\\treturn res;} \\t\\tpublic double value(final double[] point) { \\t\\t\\tdouble value; \\t\\t\\tif (((boundaries) != null) && (isRepairMode)) { \\t\\t\\t\\tdouble[] repaired = repair(point); \\t\\t\\t\\tvalue = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(repaired))) + (penalty(point, repaired));}else \\t\\t\\t\\tvalue = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(point)); \\t\\t\\treturn isMinimize ? value : -value;\\n \\t\\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtLocalVariableImpl", "ORIGINAL_CODE": "(boundaries[1][i]) - (boundaries[0][i])", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "-(valueRange)", "INGREDIENT_PARENT": "-_double_0", "LOCATION": "org.apache.commons.math.optimization.direct.CMAESOptimizer", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\/.\\/output_astor\\/AstorMain-Commons-Math-fc409e88\\/\\/src\\/\\/variant-14\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/CMAESOptimizer.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/CMAESOptimizer.java", "LINE": "861", "MP_RANKING": "7", "SUSPICIOUNESS": "0.5", "PATCH_HUNK_TYPE": "CtUnaryOperatorImpl|CtLocalVariableImpl"}], "GENERATION": "7", "VARIANT_ID": "14", "TIME": "298", "VALIDATION": "|true|0|2407|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\/.\\/output_astor\\/AstorMain-Commons-Math-fc409e88\\/\\/bin\\/\\/variant-14"}]}}, {"bug_id": "0cfa43d7", "tool": "ARJA", "nb_patch": 1231, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-29 20:09:18.422069", "repair_begin": "2018-12-29 18:44:19.830122", "patches": [{"edits": [{"path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "line": 150, "faulty": "chainableOutputs.add(outEdge);", "type": "Delete", "seed": "NULL"}, {"path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "line": 156, "faulty": "operator.open(getTaskConfiguration());", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Flink_0cfa43d7/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java\t2018-12-29 12:37:22.120564000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Flink_0cfa43d7/patches_stp5/Patch_1096/patched/tmp/Arja_Bug_dot_jar_Flink_0cfa43d7/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java\t2018-12-29 13:16:54.275693171 -0500\n@@ -147,7 +147,6 @@\n \n \t\t\tfor (StreamEdge outEdge : streamGraph.getStreamNode(current).getOutEdges()) {\n \t\t\t\tif (isChainable(outEdge)) {\n-\t\t\t\t\tchainableOutputs.add(outEdge);\n \t\t\t\t} else {\n \t\t\t\t\tnonChainableOutputs.add(outEdge);\n \t\t\t\t}\n\n\n--- /tmp/Arja_Bug_dot_jar_Flink_0cfa43d7/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java\t2018-12-29 12:37:22.188565000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Flink_0cfa43d7/patches_stp5/Patch_1096/patched/tmp/Arja_Bug_dot_jar_Flink_0cfa43d7/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java\t2018-12-29 13:16:54.275693171 -0500\n@@ -153,7 +153,6 @@\n \t\tstreamOperator.open(getTaskConfiguration());\n \n \t\tfor (OneInputStreamOperator<?, ?> operator : outputHandler.chainedOperators) {\n-\t\t\toperator.open(getTaskConfiguration());\n \t\t}\n \t}\n \n\n\n"}]}}, {"bug_id": "5dfc897b", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-30 07:38:42.593558", "repair_begin": "2018-12-30 07:35:15.427616", "patches": [{"edits": [{"path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/FileMonitoringFunction.java", "line": 68, "faulty": "while (isRunning) {\n  List<String> files=listNewFiles(fileSystem);\n  for (  String filePath : files) {\n    if (watchType == WatchType.ONLY_NEW_FILES || watchType == WatchType.REPROCESS_WITH_APPENDED) {\n      ctx.collect(new Tuple3<String,Long,Long>(filePath,0L,-1L));\n      offsetOfFiles.put(filePath,-1L);\n    }\n else     if (watchType == WatchType.PROCESS_ONLY_APPENDED) {\n      long offset=0;\n      long fileSize=fileSystem.getFileStatus(new Path(filePath)).getLen();\n      if (offsetOfFiles.containsKey(filePath)) {\n        offset=offsetOfFiles.get(filePath);\n      }\n      ctx.collect(new Tuple3<String,Long,Long>(filePath,offset,fileSize));\n      offsetOfFiles.put(filePath,fileSize);\n      LOG.info(\"File processed: {}, {}, {}\",filePath,offset,fileSize);\n    }\n  }\n  Thread.sleep(interval);\n}", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Flink_5dfc897b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/FileMonitoringFunction.java\t2018-12-30 01:22:32.012199000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Flink_5dfc897b/patches_0w8l/Patch_5/patched/tmp/Kali_Bug_dot_jar_Flink_5dfc897b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/FileMonitoringFunction.java\t2018-12-30 01:38:42.200114497 -0500\n@@ -65,6 +65,8 @@\n \tpublic void run(SourceContext<Tuple3<String, Long, Long>> ctx) throws Exception {\n \t\tFileSystem fileSystem = FileSystem.get(new URI(path));\n \n+\t\tif (true)\n+\t\t\treturn;\n \t\twhile (isRunning) {\n \t\t\tList<String> files = listNewFiles(fileSystem);\n \t\t\tfor (String filePath : files) {\n\n\n"}]}}, {"bug_id": "5dfc897b", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-29 17:49:51.549240", "repair_begin": "2018-12-29 17:47:50.707004", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 98, "class": "org.apache.flink.streaming.api.functions.source.FileMonitoringFunction"}, "patchType": "PRECONDITION", "patch": "--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/FileMonitoringFunction.java\n+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/FileMonitoringFunction.java\n@@ -97,10 +97,12 @@\n \n-\t\tfor (FileStatus status : statuses) {\n-\t\t\tPath filePath = status.getPath();\n-\t\t\tString fileName = filePath.getName();\n-\t\t\tlong modificationTime = status.getModificationTime();\n-\n-\t\t\tif (!isFiltered(fileName, modificationTime)) {\n-\t\t\t\tfiles.add(filePath.toString());\n-\t\t\t\tmodificationTimes.put(fileName, modificationTime);\n+\t\tif (statuses!=null) {\n+\t\t\tfor (FileStatus status : statuses) {\n+\t\t\t\tPath filePath = status.getPath();\n+\t\t\t\tString fileName = filePath.getName();\n+\t\t\t\tlong modificationTime = status.getModificationTime();\n+\t\t\t\t\n+\t\t\t\tif (!isFiltered(fileName, modificationTime)) {\n+\t\t\t\t\tfiles.add(filePath.toString());\n+\t\t\t\t\tmodificationTimes.put(fileName, modificationTime);\n+\t\t\t\t}\n \t\t\t}\n"}]}}, {"bug_id": "6ecd0f82", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-31 02:00:50.217609", "repair_begin": "2018-12-31 01:59:26.611483", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 891, "class": "org.apache.flink.compiler.dag.OptimizerNode"}, "patchType": "PRECONDITION", "patch": "--- a/flink-compiler/src/main/java/org/apache/flink/compiler/dag/OptimizerNode.java\n+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/dag/OptimizerNode.java\n@@ -890,3 +890,5 @@\n \t\t\t\t\t\tn.setPruningMarker();\n-\t\t\t\t\t\tplans.add(n);\n+\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\tplans.add(n);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n"}]}}, {"bug_id": "8dc70f2e", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2019-01-01 20:06:31.930230", "repair_begin": "2019-01-01 19:56:37.082161", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((customPartitioner) == null) {\\n\\tprops.setAnyPartitioning(this.keys);\\n}else {\\n\\tprops.setCustomPartitioned(this.keys, this.customPartitioner);\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if ((customPartitioner) == null) {\\n\\tprops.setAnyPartitioning(this.keys);\\n}else {\\n\\tprops.setCustomPartitioned(this.keys, this.customPartitioner);\\n}", "INGREDIENT_PARENT": "if ((customPartitioner) == null) {\\n\\tprops.setAnyPartitioning(this.keys);\\n}else {\\n\\tprops.setCustomPartitioned(this.keys, this.customPartitioner);\\n}", "LOCATION": "org.apache.flink.optimizer.operators.GroupReduceWithCombineProperties", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Flink_8dc70f2e\\/.\\/output_astor\\/AstorMain-Flink-8dc70f2e\\/\\/src\\/\\/variant-354_f\\/org\\/apache\\/flink\\/optimizer\\/operators\\/GroupReduceWithCombineProperties.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Flink_8dc70f2e\\/output_astor\\/AstorMain-Flink-8dc70f2e\\/src\\/default\\/org\\/apache\\/flink\\/optimizer\\/operators\\/GroupReduceWithCombineProperties.java", "LINE": "135", "MP_RANKING": "237", "SUSPICIOUNESS": "0.271", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "177", "VARIANT_ID": "354", "TIME": "428", "VALIDATION": "|true|0|333|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Flink_8dc70f2e\\/.\\/output_astor\\/AstorMain-Flink-8dc70f2e\\/\\/bin\\/\\/variant-354"}]}}, {"bug_id": "8dc70f2e", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2019-02-05 23:17:12.907357", "repair_begin": "2019-02-05 22:53:08.906788", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/jMutRepair_Bug_dot_jar_Flink_8dc70f2e\\/flink-optimizer\\/src\\/main\\/java\\/org\\/apache\\/flink\\/optimizer\\/dataproperties\\/LocalPropertiesjava\\n+++ \\/tmp\\/jMutRepair_Bug_dot_jar_Flink_8dc70f2e\\/flink-optimizer\\/src\\/main\\/java\\/org\\/apache\\/flink\\/optimizer\\/dataproperties\\/LocalPropertiesjava\\n@@ -162,7 +162,7 @@\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\tif ((targetField.size()) > 1) {\\n+\\t\\t\\t\\t\\tif ((targetField.size()) == 1) {\\n \\t\\t\\t\\t\\t\\torg.apache.flink.optimizer.dataproperties.LocalProperties.LOG.warn((\\\"Found that a field is forwarded to more than one target field in \\\" + \\n \\t\\t\\t\\t\\t\\t\\\"semantic forwarded field information. Will only use the field with the lowest index.\\\"));\\n \\t\\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(targetField.size()) > 1", "PATCH_HUNK_CODE": "(targetField.size()) == 1", "LOCATION": "org.apache.flink.optimizer.dataproperties.LocalProperties", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Flink_8dc70f2e\\/.\\/output_astor\\/AstorMain-Flink-8dc70f2e\\/\\/src\\/\\/variant-753\\/org\\/apache\\/flink\\/optimizer\\/dataproperties\\/LocalProperties.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Bug_dot_jar_Flink_8dc70f2e\\/flink-optimizer\\/src\\/main\\/java\\/org\\/apache\\/flink\\/optimizer\\/dataproperties\\/LocalProperties.java", "LINE": "165", "MP_RANKING": "121", "SUSPICIOUNESS": "0.199", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "753", "TIME": "1386", "VALIDATION": "|true|0|333|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Bug_dot_jar_Flink_8dc70f2e\\/.\\/output_astor\\/AstorMain-Flink-8dc70f2e\\/\\/bin\\/\\/variant-753"}]}}, {"bug_id": "32a003d5", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-31 02:16:40.379880", "repair_begin": "2018-12-31 02:13:38.896247", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 564, "class": "eu.stratosphere.compiler.PactCompiler"}, "patchType": "PRECONDITION", "patch": "--- a/stratosphere-compiler/src/main/java/eu/stratosphere/compiler/PactCompiler.java\n+++ b/stratosphere-compiler/src/main/java/eu/stratosphere/compiler/PactCompiler.java\n@@ -563,3 +563,5 @@\n \t\t} else if (bestPlanRoot instanceof SinkJoinerPlanNode) {\n-\t\t\t((SinkJoinerPlanNode) bestPlanRoot).getDataSinks(bestPlanSinks);\n+\t\t\tif (defaultParallelism != program.getDefaultParallelism()) {\n+\t\t\t\t((SinkJoinerPlanNode) bestPlanRoot).getDataSinks(bestPlanSinks);\n+\t\t\t}\n \t\t}\n"}]}}, {"bug_id": "32a003d5", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-29 18:24:57.717213", "repair_begin": "2018-12-29 18:22:10.342405", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 564, "class": "eu.stratosphere.compiler.PactCompiler"}, "patchType": "PRECONDITION", "patch": "--- a/stratosphere-compiler/src/main/java/eu/stratosphere/compiler/PactCompiler.java\n+++ b/stratosphere-compiler/src/main/java/eu/stratosphere/compiler/PactCompiler.java\n@@ -563,3 +563,5 @@\n \t\t} else if (bestPlanRoot instanceof SinkJoinerPlanNode) {\n-\t\t\t((SinkJoinerPlanNode) bestPlanRoot).getDataSinks(bestPlanSinks);\n+\t\t\tif (defaultParallelism <= eu.stratosphere.compiler.PactCompiler.HINT_SHIP_STRATEGY_FIRST_INPUT.length()) {\n+\t\t\t\t((SinkJoinerPlanNode) bestPlanRoot).getDataSinks(bestPlanSinks);\n+\t\t\t}\n \t\t}\n"}]}}, {"bug_id": "45fb6d82", "tool": "ARJA", "nb_patch": 1224, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-29 18:41:31.717300", "repair_begin": "2018-12-29 18:19:02.718257", "patches": [{"edits": [{"path": "flink-compiler/src/main/java/org/apache/flink/compiler/dag/PartitionNode.java", "line": 118, "faulty": "rgps.setCustomPartitioned(this.keys,this.customPartitioner);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/dag/PartitionNode.java\t2018-12-29 12:17:32.019749000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/patches_dbhn/Patch_1143/patched/tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/dag/PartitionNode.java\t2018-12-29 12:27:49.662963183 -0500\n@@ -115,7 +115,7 @@\n \t\t\t\trgps.setForceRebalancing();\n \t\t\t\tbreak;\n \t\t\tcase CUSTOM:\n-\t\t\t\trgps.setCustomPartitioned(this.keys, this.customPartitioner);\n+\t\t\t\t;\n \t\t\t\tbreak;\n \t\t\tcase RANGE:\n \t\t\t\tthrow new UnsupportedOperationException(\"Not yet supported\");\n\n\n"}]}}, {"bug_id": "45fb6d82", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-31 01:55:46.883534", "repair_begin": "2018-12-31 01:52:42.872471", "patches": [{"nb_test_that_execute_statement": 33, "patchLocation": {"line": 229, "class": "org.apache.flink.compiler.dag.SingleInputNode"}, "patchType": "PRECONDITION", "patch": "--- a/flink-compiler/src/main/java/org/apache/flink/compiler/dag/SingleInputNode.java\n+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/dag/SingleInputNode.java\n@@ -228,3 +228,5 @@\n \t\t\t\t\t\tif (contained.getPartitioning() == gp.getPartitioning() && gp.getPartitionedFields().isValidSubset(contained.getPartitionedFields())) {\n-\t\t\t\t\t\t\tprops.getGlobalProperties().remove(contained);\n+\t\t\t\t\t\t\tif (this.getMaxDepth() == 1) {\n+\t\t\t\t\t\t\t\tprops.getGlobalProperties().remove(contained);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tbreak;\n"}]}}, {"bug_id": "259f10c0", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-31 02:41:51.734282", "repair_begin": "2018-12-31 02:39:09.937719", "patches": [{"nb_test_that_execute_statement": 19, "patchLocation": {"line": 793, "class": "org.apache.flink.compiler.plantranslate.NepheleJobGraphGenerator"}, "patchType": "PRECONDITION", "patch": "--- a/flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java\n+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java\n@@ -792,3 +792,5 @@\n \t\t// set the driver strategy\n-\t\tconfig.setDriver(ds.getDriverClass());\n+\t\tif (node.isPruneMarkerSet()) {\n+\t\t\tconfig.setDriver(ds.getDriverClass());\n+\t\t}\n \t\tconfig.setDriverStrategy(ds);\n"}]}}, {"bug_id": "259f10c0", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-29 17:48:24.463595", "repair_begin": "2018-12-29 17:46:34.192602", "patches": [{"nb_test_that_execute_statement": 19, "patchLocation": {"line": 793, "class": "org.apache.flink.compiler.plantranslate.NepheleJobGraphGenerator"}, "patchType": "PRECONDITION", "patch": "--- a/flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java\n+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java\n@@ -792,3 +792,5 @@\n \t\t// set the driver strategy\n-\t\tconfig.setDriver(ds.getDriverClass());\n+\t\tif ((org.apache.flink.compiler.plantranslate.NepheleJobGraphGenerator.this.chainedTasksInSequence.isEmpty()) && ((org.apache.flink.compiler.plantranslate.NepheleJobGraphGenerator.this.iterationIdEnumerator) != (org.apache.flink.compiler.plantranslate.NepheleJobGraphGenerator.this.vertices.size()))) {\n+\t\t\tconfig.setDriver(ds.getDriverClass());\n+\t\t}\n \t\tconfig.setDriverStrategy(ds);\n"}]}}, {"bug_id": "380ef878", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-31 03:30:13.326150", "repair_begin": "2018-12-31 02:52:59.148039", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 201, "class": "org.apache.flink.runtime.io.network.netty.PartitionRequestClientHandler"}, "patchType": "PRECONDITION", "patch": "--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientHandler.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientHandler.java\n@@ -200,3 +200,5 @@\n \t\t\t\t\t\tbuffer.setSize(bufferOrEvent.getSize());\n-\t\t\t\t\t\tbufferOrEvent.getNettyBuffer().readBytes(buffer.getNioBuffer());\n+\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\tbufferOrEvent.getNettyBuffer().readBytes(buffer.getNioBuffer());\n+\t\t\t\t\t\t}\n \n"}]}}, {"bug_id": "5308ac83", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-29 18:27:50.193496", "repair_begin": "2018-12-29 17:46:58.909562", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 141, "class": "org.apache.flink.runtime.instance.InstanceConnectionInfo"}, "patchType": "CONDITIONAL", "patch": "--- a/flink-runtime/src/main/java/org/apache/flink/runtime/instance/InstanceConnectionInfo.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/instance/InstanceConnectionInfo.java\n@@ -140,3 +140,3 @@\n \t\t\tString fqdn = getFQDNHostname();\n-\t\t\tif(this.fqdnHostNameIsIP) { // fqdn to hostname translation is pointless if FQDN is an ip address.\n+\t\t\tif(fqdn.length() <= 17) { // fqdn to hostname translation is pointless if FQDN is an ip address.\n \t\t\t\thostName = fqdn;\n"}]}}, {"bug_id": "adb321d6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-31 04:36:34.892753", "repair_begin": "2018-12-31 04:16:21.843685", "patches": [{"nb_test_that_execute_statement": 39, "patchLocation": {"line": 41, "class": "org.apache.flink.optimizer.traversals.BranchesVisitor"}, "patchType": "PRECONDITION", "patch": "--- a/flink-optimizer/src/main/java/org/apache/flink/optimizer/traversals/BranchesVisitor.java\n+++ b/flink-optimizer/src/main/java/org/apache/flink/optimizer/traversals/BranchesVisitor.java\n@@ -40,3 +40,5 @@\n \t\tif (node instanceof IterationNode) {\n-\t\t\t((IterationNode) node).acceptForStepFunction(this);\n+\t\t\tif (node.getCostWeight() != 1) {\n+\t\t\t\t((IterationNode) node).acceptForStepFunction(this);\n+\t\t\t}\n \t\t}\n"}]}}, {"bug_id": "adb321d6", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Flink", "result": {"repair_end": "2018-12-29 18:08:44.053721", "repair_begin": "2018-12-29 17:57:25.084965", "patches": [{"nb_test_that_execute_statement": 20, "patchLocation": {"line": 199, "class": "org.apache.flink.optimizer.dag.WorksetIterationNode"}, "patchType": "PRECONDITION", "patch": "--- a/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/WorksetIterationNode.java\n+++ b/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/WorksetIterationNode.java\n@@ -198,3 +198,5 @@\n \t\tsolutionSetDeltaUpdateAux.addOutgoingConnection(this.solutionSetDeltaRootConnection);\n-\t\tnextWorkset.addOutgoingConnection(this.nextWorksetRootConnection);\n+\t\tif (20 < org.apache.flink.optimizer.dag.WorksetIterationNode.this.costWeight) {\n+\t\t\tnextWorkset.addOutgoingConnection(this.nextWorksetRootConnection);\n+\t\t}\n \t}\n"}]}}, {"bug_id": "00df38d2", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 06:16:43.926785", "repair_begin": "2018-12-31 05:18:55.270441", "patches": [{"nb_test_that_execute_statement": 190, "patchLocation": {"line": 426, "class": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder"}, "patchType": "PRECONDITION", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java\n@@ -425,3 +425,5 @@\n                 && (writeState == null || !writeState.nodes.containsKey(name))) {\n-            return createChildBuilder(name);\n+            if (false) {\n+                return createChildBuilder(name);\n+            }\n         }\n"}]}}, {"bug_id": "0fa892b3", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-30 05:09:32.010936", "repair_begin": "2018-12-30 05:08:52.922593", "patches": [{"edits": [{"path": "oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java", "line": 257, "faulty": "if (c == '\\\"' || c == '\\\\' || c < ' ') {\n  StringBuilder buff=new StringBuilder(length + 2 + length / 8);\n  buff.append('\\\"');\n  escape(s,length,buff);\n  return buff.append('\\\"').toString();\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_0fa892b3/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java\t2018-12-29 23:05:40.711584000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_0fa892b3/patches_qpw0/Patch_15/patched/tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_0fa892b3/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java\t2018-12-29 23:09:31.615827044 -0500\n@@ -254,7 +254,7 @@\n         }\n         for (int i = 0; i < length; i++) {\n             char c = s.charAt(i);\n-            if (c == '\\\"' || c == '\\\\' || c < ' ') {\n+            if (true) {\n                 StringBuilder buff = new StringBuilder(length + 2 + length / 8);\n                 buff.append('\\\"');\n                 escape(s, length, buff);\n\n\n"}]}}, {"bug_id": "1bf5c550", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2019-01-13 19:30:55.484420", "repair_begin": "2019-01-13 19:00:13.205390", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_1bf5c550\\/oak-mk\\/src\\/main\\/java\\/org\\/apache\\/jackrabbit\\/mk\\/store\\/DefaultRevisionStorejava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_1bf5c550\\/oak-mk\\/src\\/main\\/java\\/org\\/apache\\/jackrabbit\\/mk\\/store\\/DefaultRevisionStorejava\\n@@ -444,7 +444,7 @@\\n \\t\\tpm.writeHead(id);\\n \\t\\thead = id;\\n \\n-\\t\\tlong counter = java.lang.Long.parseLong(id.toString(), 16);\\n+\\t\\tlong counter = commitCounter.incrementAndGet();\\n \\t\\tif (counter > (commitCounter.get())) {\\n \\t\\t\\tcommitCounter.set(counter);\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtLocalVariableImpl", "ORIGINAL_CODE": "java.lang.Long.parseLong(id.toString(), 16)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "commitCounter.incrementAndGet()", "INGREDIENT_PARENT": "_AtomicLong_0.incrementAndGet()", "LOCATION": "org.apache.jackrabbit.mk.store.DefaultRevisionStore", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_1bf5c550\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-1bf5c550\\/\\/src\\/\\/variant-914\\/org\\/apache\\/jackrabbit\\/mk\\/store\\/DefaultRevisionStore.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_1bf5c550\\/oak-mk\\/src\\/main\\/java\\/org\\/apache\\/jackrabbit\\/mk\\/store\\/DefaultRevisionStore.java", "LINE": "447", "MP_RANKING": "254", "SUSPICIOUNESS": "0.408", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtLocalVariableImpl"}], "GENERATION": "457", "VARIANT_ID": "914", "TIME": "1726", "VALIDATION": "|true|0|73|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_1bf5c550\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-1bf5c550\\/\\/bin\\/\\/variant-914"}]}}, {"bug_id": "1bf5c550", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 08:58:41.210645", "repair_begin": "2018-12-31 08:58:05.465488", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 648, "class": "org.apache.jackrabbit.mk.core.MicroKernelImpl"}, "patchType": "PRECONDITION", "patch": "--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n@@ -647,3 +647,5 @@\n                     if (depth > 0) {\n-                        toJson(builder, entry.getNode(), depth - 1, 0, maxChildNodes, inclVirtualProps, filter);\n+                        if (false) {\n+                            toJson(builder, entry.getNode(), depth - 1, 0, maxChildNodes, inclVirtualProps, filter);\n+                        }\n                     }\n"}]}}, {"bug_id": "1bf5c550", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 17:26:09.428339", "repair_begin": "2018-12-29 17:25:36.427964", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 646, "class": "org.apache.jackrabbit.mk.core.MicroKernelImpl"}, "patchType": "PRECONDITION", "patch": "--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n@@ -645,3 +645,5 @@\n                     }\n-                    builder.key(entry.getName()).object();\n+                    if (filter!=null) {\n+                        builder.key(entry.getName()).object();\n+                    }\n                     if (depth > 0) {\n"}]}}, {"bug_id": "01f5a26f", "tool": "NPEFix", "nb_patch": 10, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-30 03:19:48.825674", "repair_begin": "2018-12-30 03:19:24.148280", "patches": [{"locations": [{"executionCount": 0, "line": 128, "class": "org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityRef", "sourceStart": 4009, "sourceEnd": 4009}], "patch": "--- ExternalIdentityRef.java\n+++ ExternalIdentityRef.java\n@@ -127,3 +127,7 @@\n             // assuming that we never compare other types of classes\n-            return this == o || string.equals(((ExternalIdentityRef) o).string);\n+            if (o == null) {\n+                return this == o || string.equals(((ExternalIdentityRef) string).string);\n+            } else {\n+                return this == o || string.equals(((ExternalIdentityRef) o).string);\n+            }\n         } catch (Exception e) {\n"}]}}, {"bug_id": "3ce758b7", "tool": "ARJA", "nb_patch": 1334, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 17:28:34.189420", "repair_begin": "2018-12-29 16:50:08.483595", "patches": [{"edits": [{"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/store/DefaultRevisionStore.java", "line": 241, "faulty": "if (obj instanceof PutTokenImpl) {\n  return ((PutTokenImpl)obj).id == id;\n}", "type": "Delete", "seed": "NULL"}, {"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/store/DefaultRevisionStore.java", "line": 135, "faulty": "if (initialized) {\n  throw new IllegalStateException(\"already initialized\");\n}", "type": "Delete", "seed": "NULL"}, {"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/store/DefaultRevisionStore.java", "line": 201, "faulty": "cache.invalidateAll();", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_3ce758b7/oak-mk/src/main/java/org/apache/jackrabbit/mk/store/DefaultRevisionStore.java\t2018-12-29 10:48:57.960251000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_3ce758b7/patches_10w1/Patch_347/patched/tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_3ce758b7/oak-mk/src/main/java/org/apache/jackrabbit/mk/store/DefaultRevisionStore.java\t2018-12-29 10:55:41.990965586 -0500\n@@ -132,10 +132,6 @@\n     }\n \n     public void initialize() throws Exception {\n-        if (initialized) {\n-            throw new IllegalStateException(\"already initialized\");\n-        }\n-\n         initialCacheSize = determineInitialCacheSize();\n         \n         cache = CacheBuilder.newBuilder()\n@@ -198,8 +194,6 @@\n             gcExecutor.shutdown();\n         }\n \n-        cache.invalidateAll();\n-\n         IOUtils.closeQuietly(pm);\n \n         initialized = false;\n@@ -238,9 +232,6 @@\n \n         @Override\n         public boolean equals(Object obj) {\n-            if (obj instanceof PutTokenImpl) {\n-                return ((PutTokenImpl) obj).id == id;\n-            }\n             return super.equals(obj);\n         }\n \n\n\n"}]}}, {"bug_id": "3ce758b7", "tool": "jKali", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2019-01-01 04:07:32.033292", "repair_begin": "2019-01-01 03:59:35.828129", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/jackrabbit\\/mk\\/store\\/DefaultRevisionStore.java\\n+++ org\\/apache\\/jackrabbit\\/mk\\/store\\/DefaultRevisionStore.java\\n@@ -238,8 +238,8 @@\\n \\n \\t\\t@java.lang.Override\\n \\t\\tpublic boolean equals(java.lang.Object obj) {\\n-\\t\\t\\tif (obj instanceof org.apache.jackrabbit.mk.store.DefaultRevisionStore.PutTokenImpl) {\\n-\\t\\t\\t\\treturn (((org.apache.jackrabbit.mk.store.DefaultRevisionStore.PutTokenImpl) (obj)).id) == (id);\\n+\\t\\t\\tif (false) {\\n+\\t\\t\\t\\treturn (((org.apache.jackrabbit.mk.store.DefaultRevisionStore.PutTokenImpl) (obj)).id) == (this.id);\\n \\t\\t\\t}\\n \\t\\t\\treturn super.equals(obj);\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (obj instanceof org.apache.jackrabbit.mk.store.DefaultRevisionStore.PutTokenImpl) {\\n\\treturn (((org.apache.jackrabbit.mk.store.DefaultRevisionStore.PutTokenImpl) (obj)).id) == (id);\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\treturn (((org.apache.jackrabbit.mk.store.DefaultRevisionStore.PutTokenImpl) (obj)).id) == (this.id);\\n}", "LOCATION": "org.apache.jackrabbit.mk.store.DefaultRevisionStore", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Bug_dot_jar_Jackrabbit-Oak_3ce758b7\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-3ce758b7\\/\\/src\\/\\/variant-168_f\\/org\\/apache\\/jackrabbit\\/mk\\/store\\/DefaultRevisionStore.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Bug_dot_jar_Jackrabbit-Oak_3ce758b7\\/output_astor\\/AstorMain-Jackrabbit-Oak-3ce758b7\\/src\\/default\\/org\\/apache\\/jackrabbit\\/mk\\/store\\/DefaultRevisionStore.java", "LINE": "241", "MP_RANKING": "133", "SUSPICIOUNESS": "0.289", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "168", "TIME": "337", "VALIDATION": "|true|0|78|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Bug_dot_jar_Jackrabbit-Oak_3ce758b7\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-3ce758b7\\/\\/bin\\/\\/variant-168"}]}}, {"bug_id": "3ce758b7", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-30 02:51:42.542470", "repair_begin": "2018-12-30 02:50:58.112087", "patches": [{"edits": [{"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/store/DefaultRevisionStore.java", "line": 241, "faulty": "if (obj instanceof PutTokenImpl) {\n  return ((PutTokenImpl)obj).id == id;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_3ce758b7/oak-mk/src/main/java/org/apache/jackrabbit/mk/store/DefaultRevisionStore.java\t2018-12-29 20:49:38.021820000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_3ce758b7/patches_s5sy/Patch_2/patched/tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_3ce758b7/oak-mk/src/main/java/org/apache/jackrabbit/mk/store/DefaultRevisionStore.java\t2018-12-29 20:51:42.167323449 -0500\n@@ -238,7 +238,7 @@\n \n         @Override\n         public boolean equals(Object obj) {\n-            if (obj instanceof PutTokenImpl) {\n+            if (false) {\n                 return ((PutTokenImpl) obj).id == id;\n             }\n             return super.equals(obj);\n\n\n"}]}}, {"bug_id": "3f51fb09", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 16:21:42.538597", "repair_begin": "2018-12-29 16:19:55.677939", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 58, "class": "org.apache.jackrabbit.oak.namepath.LocalNameMapper"}, "patchType": "PRECONDITION", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/LocalNameMapper.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/LocalNameMapper.java\n@@ -57,3 +57,5 @@\n                         } else {\n-                            return jcrPrefix + oakName.substring(colon);\n+                            if ((oakPrefix.length()) != (jcrPrefix.length())) {\n+                                return jcrPrefix + oakName.substring(colon);\n+                            }\n                         }\n"}]}}, {"bug_id": "7c320b1e", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 12:05:12.382237", "repair_begin": "2018-12-31 12:04:46.174667", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 319, "class": "org.apache.jackrabbit.oak.commons.json.JsopBuilder"}, "patchType": "CONDITIONAL", "patch": "--- a/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java\n+++ b/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java\n@@ -318,3 +318,3 @@\n                     buff.append(hex);\n-                } else if (c >= 127) {\n+                } else if (false) {\n                     // ascii only mode\n"}]}}, {"bug_id": "7c320b1e", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-30 02:30:44.555100", "repair_begin": "2018-12-30 02:30:14.814660", "patches": [{"edits": [{"path": "oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java", "line": 319, "faulty": "if (c >= 127) {\n  buff.append(\"\\\\u\");\n  String hex=Integer.toHexString(c);\n  for (int len=hex.length(); len < 4; len++) {\n    buff.append('0');\n  }\n  buff.append(hex);\n}\n else {\n  buff.append(c);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_7c320b1e/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java\t2018-12-29 20:27:26.379559000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_7c320b1e/patches_kfwp/Patch_4/patched/tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_7c320b1e/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java\t2018-12-29 20:30:44.191926383 -0500\n@@ -316,7 +316,7 @@\n                         buff.append('0');\n                     }\n                     buff.append(hex);\n-                } else if (c >= 127) {\n+                } else if (false) {\n                     // ascii only mode\n                     buff.append(\"\\\\u\");\n                     String hex = Integer.toHexString(c);\n\n\n"}]}}, {"bug_id": "7c320b1e", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 17:19:34.501559", "repair_begin": "2018-12-29 17:19:07.471731", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 319, "class": "org.apache.jackrabbit.oak.commons.json.JsopBuilder"}, "patchType": "CONDITIONAL", "patch": "--- a/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java\n+++ b/oak-commons/src/main/java/org/apache/jackrabbit/oak/commons/json/JsopBuilder.java\n@@ -318,3 +318,3 @@\n                     buff.append(hex);\n-                } else if (c >= 127) {\n+                } else if (s.length()==0) {\n                     // ascii only mode\n"}]}}, {"bug_id": "36e70bd7", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 07:48:13.221869", "repair_begin": "2018-12-31 07:46:58.122190", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 268, "class": "org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder"}, "patchType": "PRECONDITION", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java\n@@ -267,3 +267,5 @@\n             writeState = new MutableNodeState(baseState);\n-            revision++;\n+            if (false) {\n+                revision++;\n+            }\n         } else {\n"}]}}, {"bug_id": "93c1aa40", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 12:26:17.398100", "repair_begin": "2018-12-31 12:20:28.622704", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 201, "class": "org.apache.jackrabbit.oak.plugins.index.AsyncIndexUpdate"}, "patchType": "PRECONDITION", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java\n@@ -200,3 +200,5 @@\n                         beforeCheckpoint, name);\n-                beforeCheckpoint = null;\n+                if (false) {\n+                    beforeCheckpoint = null;\n+                }\n                 before = MISSING_NODE;\n"}]}}, {"bug_id": "93c1aa40", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 16:34:36.606892", "repair_begin": "2018-12-29 16:27:21.504261", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 195, "class": "org.apache.jackrabbit.oak.plugins.index.AsyncIndexUpdate"}, "patchType": "CONDITIONAL", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java\n@@ -194,3 +194,3 @@\n         String beforeCheckpoint = async.getString(name);\n-        if (beforeCheckpoint != null) {\n+        if (org.apache.jackrabbit.oak.plugins.index.AsyncIndexUpdate.ASYNC.length() < org.apache.jackrabbit.oak.plugins.index.AsyncIndexUpdate.this.indexStats.getDone().length()) {\n             NodeState state = store.retrieve(beforeCheckpoint);\n@@ -198,4 +198,4 @@\n                 log.warn(\"Failed to retrieve previously indexed checkpoint {};\"\n-                        + \" re-running the initial {} index update\",\n-                        beforeCheckpoint, name);\n+                + \" re-running the initial {} index update\",\n+                beforeCheckpoint, name);\n                 beforeCheckpoint = null;\n@@ -204,3 +204,3 @@\n                 log.debug(\"No changes since last checkpoint;\"\n-                        + \" skipping the {} index update\", name);\n+                + \" skipping the {} index update\", name);\n                 return;\n"}]}}, {"bug_id": "591e4d4a", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 09:11:34.478739", "repair_begin": "2018-12-31 09:07:07.065410", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 231, "class": "org.apache.jackrabbit.oak.plugins.index.IndexUtils"}, "patchType": "PRECONDITION", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/IndexUtils.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/IndexUtils.java\n@@ -230,3 +230,5 @@\n             for (String k : properties.keySet()) {\n-                entry.setProperty(k, properties.get(k));\n+                if (false) {\n+                    entry.setProperty(k, properties.get(k));\n+                }\n             }\n"}]}}, {"bug_id": "668f08f2", "tool": "NPEFix", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-30 03:41:37.301376", "repair_begin": "2018-12-30 03:37:16.731430", "patches": [{"locations": [{"executionCount": 0, "line": 65, "class": "org.apache.jackrabbit.mk.store.DefaultRevisionStore", "sourceStart": 2513, "sourceEnd": 2516}], "patch": "--- store/DefaultRevisionStore.java\n+++ store/DefaultRevisionStore.java\n@@ -64,15 +64,32 @@\n         head = pm.readHead();\n-        if (head == null || head.getBytes().length == 0) {\n-            // assume virgin repository\n-            byte[] rawHead = longToBytes(++headCounter);\n-            head = new Id(rawHead);\n-            \n-            Id rootNodeId = pm.writeNode(new MutableNode(this, \"/\"));\n-            MutableCommit initialCommit = new MutableCommit();\n-            initialCommit.setCommitTS(System.currentTimeMillis());\n-            initialCommit.setRootNodeId(rootNodeId);\n-            pm.writeCommit(head, initialCommit);\n-            pm.writeHead(head);\n+        if (head == null) {\n+            if (head == null || new Id(new byte[100]).getBytes().length == 0) {\n+                // assume virgin repository\n+                byte[] rawHead = longToBytes(++headCounter);\n+                head = new Id(rawHead);\n+                \n+                Id rootNodeId = pm.writeNode(new MutableNode(this, \"/\"));\n+                MutableCommit initialCommit = new MutableCommit();\n+                initialCommit.setCommitTS(System.currentTimeMillis());\n+                initialCommit.setRootNodeId(rootNodeId);\n+                pm.writeCommit(head, initialCommit);\n+                pm.writeHead(head);\n+            } else {\n+                headCounter = Long.parseLong(head.toString(), 16);\n+            }\n         } else {\n-            headCounter = Long.parseLong(head.toString(), 16);\n+            if (head == null || head.getBytes().length == 0) {\n+                // assume virgin repository\n+                byte[] rawHead = longToBytes(++headCounter);\n+                head = new Id(rawHead);\n+                \n+                Id rootNodeId = pm.writeNode(new MutableNode(this, \"/\"));\n+                MutableCommit initialCommit = new MutableCommit();\n+                initialCommit.setCommitTS(System.currentTimeMillis());\n+                initialCommit.setRootNodeId(rootNodeId);\n+                pm.writeCommit(head, initialCommit);\n+                pm.writeHead(head);\n+            } else {\n+                headCounter = Long.parseLong(head.toString(), 16);\n+            }\n         }\n"}]}}, {"bug_id": "3270e761", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 13:53:30.720327", "repair_begin": "2018-12-31 13:48:00.450337", "patches": [{"nb_test_that_execute_statement": 161, "patchLocation": {"line": 505, "class": "org.apache.jackrabbit.oak.jcr.SessionDelegate"}, "patchType": "CONDITIONAL", "patch": "--- a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/SessionDelegate.java\n+++ b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/SessionDelegate.java\n@@ -504,3 +504,3 @@\n         if (userManager == null) {\n-            if (securityProvider != null) {\n+            if (false) {\n                 userManager = securityProvider.getUserConfiguration().getUserManager(root, getNamePathMapper(), session);\n"}]}}, {"bug_id": "5449bf39", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2019-01-13 20:20:35.409642", "repair_begin": "2019-01-13 20:20:07.577944", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- \\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/oak-commons\\/src\\/main\\/java\\/org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtilsjava\\n+++ \\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/oak-commons\\/src\\/main\\/java\\/org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtilsjava\\n@@ -285,7 +285,7 @@\\n \\tpublic static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {\\n \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);\\n \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);\\n-\\t\\tif ((ancestor.isEmpty()) || (path.isEmpty())) {\\n+\\t\\tif ((org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) || (path.isEmpty())) {\\n \\t\\t\\treturn false;\\n \\t\\t}\\n \\t\\tif (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(ancestor.isEmpty())", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))", "INGREDIENT_PARENT": "org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(_String_0)", "LOCATION": "org.apache.jackrabbit.oak.commons.PathUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-5449bf39\\/\\/src\\/\\/variant-16\\/org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/oak-commons\\/src\\/main\\/java\\/org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java", "LINE": "288", "MP_RANKING": "2", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl"}], "GENERATION": "8", "VARIANT_ID": "16", "TIME": "5", "VALIDATION": "|true|0|6|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-5449bf39\\/\\/bin\\/\\/variant-16"}]}}, {"bug_id": "5449bf39", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2019-01-01 19:28:05.190138", "repair_begin": "2019-01-01 19:26:02.442882", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java\\n+++ org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java\\n@@ -285,14 +285,6 @@\\n \\tpublic static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {\\n \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);\\n \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);\\n-\\t\\tif ((ancestor.isEmpty()) || (path.isEmpty())) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tif (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {\\n-\\t\\t\\tancestor += \\\"\\/\\\";\\n-\\t\\t}\\n-\\t\\treturn path.startsWith(ancestor);\\n-\\t}\\n \\n \\n \\n@@ -303,24 +295,9 @@\\n \\n \\n \\n-\\t@javax.annotation.Nonnull\\n-\\tpublic static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {\\n-\\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);\\n-\\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);\\n \\n-\\t\\tif (parentPath.equals(path)) {\\n-\\t\\t\\treturn \\\"\\\";\\n-\\t\\t}\\n \\n-\\t\\tjava.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? \\n-\\t\\tparentPath : \\n-\\t\\tparentPath + '\\/';\\n \\n-\\t\\tif (path.startsWith(prefix)) {\\n-\\t\\t\\treturn path.substring(prefix.length());\\n-\\t\\t}\\n-\\t\\tthrow new java.lang.IllegalArgumentException((((\\\"Cannot relativize \\\" + path) + \\\" wrt. \\\") + parentPath));\\n-\\t}\\n \\n \\n \\n@@ -330,11 +307,7 @@\\n \\n \\n \\n-\\tpublic static int getNextSlash(java.lang.String path, int index) {\\n-\\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);\\n \\n-\\t\\treturn path.indexOf('\\/', index);\\n-\\t}\\n \\n \\n \\n@@ -345,23 +318,6 @@\\n \\n \\n \\n-\\tpublic static void validate(java.lang.String path) {\\n-\\t\\tif ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {\\n-\\t\\t\\treturn;\\n-\\t\\t}else \\t\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') {\\n-\\t\\t\\t\\tthrow new java.lang.IllegalArgumentException((\\\"Path may not end with '\\/': \\\" + path));\\n-\\t\\t\\t}\\n-\\t\\tchar last = 0;\\n-\\t\\tfor (int index = 0, len = path.length(); index < len; index++) {\\n-\\t\\t\\tchar c = path.charAt(index);\\n-\\t\\t\\tif (c == '\\/') {\\n-\\t\\t\\t\\tif (last == '\\/') {\\n-\\t\\t\\t\\t\\tthrow new java.lang.IllegalArgumentException((\\\"Path may not contains '\\/\\/': \\\" + path));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t\\tlast = c;\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -372,12 +328,56 @@\\n \\n \\n \\n-\\tpublic static boolean isValid(java.lang.String path) {\\n-\\t\\tif ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}else \\t\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') {\\n \\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n+\\t\\t} \\t\\tif (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) { \\t\\t\\tancestor += \\\"\\/\\\";} \\t\\treturn path.startsWith(ancestor);} \\t@javax.annotation.Nonnull \\tpublic static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) { \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath); \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path); \\t\\tif (parentPath.equals(path)) { \\t\\t\\treturn \\\"\\\";} \\t\\tjava.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '\\/'; \\t\\tif (path.startsWith(prefix)) { \\t\\t\\treturn path.substring(prefix.length());} \\t\\tthrow new java.lang.IllegalArgumentException((((\\\"Cannot relativize \\\" + path) + \\\" wrt. \\\") + parentPath));} \\tpublic static int getNextSlash(java.lang.String path, int index) { \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path); \\t\\treturn path.indexOf('\\/', index);} \\tpublic static void validate(java.lang.String path) { \\t\\tif ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) { \\t\\t\\treturn;}else \\t\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') { \\t\\t\\t\\tthrow new java.lang.IllegalArgumentException((\\\"Path may not end with '\\/': \\\" + path));} \\t\\tchar last = 0; \\t\\tfor (int index = 0, len = path.length(); index < len; index++) { \\t\\t\\tchar c = path.charAt(index); \\t\\t\\tif (c == '\\/') { \\t\\t\\t\\tif (last == '\\/') { \\t\\t\\t\\t\\tthrow new java.lang.IllegalArgumentException((\\\"Path may not contains '\\/\\/': \\\" + path));}} \\t\\t\\tlast = c;}} \\tpublic static boolean isValid(java.lang.String path) { \\t\\tif ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) { \\t\\t\\treturn true;}else \\t\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') { \\t\\t\\t\\treturn false;}\\n \\t\\tchar last = 0;\\n \\t\\tfor (int index = 0, len = path.length(); index < len; index++) {\\n \\t\\t\\tchar c = path.charAt(index);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((ancestor.isEmpty()) || (path.isEmpty())) {\\n\\treturn false;\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if ((path.charAt(((path.length()) - 1))) == '\\/') {\\n\\treturn false;\\n}", "INGREDIENT_PARENT": "if ((path.charAt(((path.length()) - 1))) == '\\/') {\\n\\treturn false;\\n}", "LOCATION": "org.apache.jackrabbit.oak.commons.PathUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-5449bf39\\/\\/src\\/\\/variant-116_f\\/org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/output_astor\\/AstorMain-Jackrabbit-Oak-5449bf39\\/src\\/default\\/org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java", "LINE": "288", "MP_RANKING": "3", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "58", "VARIANT_ID": "116", "TIME": "86", "VALIDATION": "|true|0|6|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-5449bf39\\/\\/bin\\/\\/variant-116"}]}}, {"bug_id": "717186d6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 12:35:57.301122", "repair_begin": "2018-12-31 12:34:34.891471", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 658, "class": "org.apache.jackrabbit.mk.core.MicroKernelImpl"}, "patchType": "PRECONDITION", "patch": "--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n@@ -657,3 +657,5 @@\n                     if (depth > 0) {\n-                        toJson(builder, entry.getNode(), depth - 1, 0, maxChildNodes, inclVirtualProps, filter);\n+                        if (false) {\n+                            toJson(builder, entry.getNode(), depth - 1, 0, maxChildNodes, inclVirtualProps, filter);\n+                        }\n                     }\n"}]}}, {"bug_id": "717186d6", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 16:43:36.858513", "repair_begin": "2018-12-29 16:42:20.809094", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 656, "class": "org.apache.jackrabbit.mk.core.MicroKernelImpl"}, "patchType": "PRECONDITION", "patch": "--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n@@ -655,3 +655,5 @@\n                     }\n-                    builder.key(entry.getName()).object();\n+                    if (filter!=null) {\n+                        builder.key(entry.getName()).object();\n+                    }\n                     if (depth > 0) {\n"}]}}, {"bug_id": "5286861d", "tool": "ARJA", "nb_patch": 1140, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 14:20:00.651883", "repair_begin": "2018-12-29 13:28:12.392880", "patches": [{"edits": [{"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java", "line": 414, "faulty": "return getHeadRevision();", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_5286861d/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\t2018-12-29 07:26:38.072559000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_5286861d/patches_s7ag/Patch_993/patched/tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_5286861d/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\t2018-12-29 07:50:17.822787311 -0500\n@@ -411,7 +411,6 @@\n             throw new IllegalArgumentException(\"absolute path expected: \" + path);\n         }\n         if (jsonDiff == null || jsonDiff.length() == 0) {\n-            return getHeadRevision();\n         }\n \n         Id revId = revisionId == null ? getHeadRevisionId() : Id.fromString(revisionId);\n\n\n"}]}}, {"bug_id": "5286861d", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-30 04:40:34.418962", "repair_begin": "2018-12-30 04:39:35.449388", "patches": [{"edits": [{"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java", "line": 181, "faulty": "if (createBranch) {\n  newCommit.setBranchRootId(baseCommit.getId());\n}\n else {\n  newCommit.setBranchRootId(baseCommit.getBranchRootId());\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_5286861d/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java\t2018-12-29 22:37:55.629692000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_5286861d/patches_j01v/Patch_10/patched/tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_5286861d/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java\t2018-12-29 22:40:34.040843568 -0500\n@@ -178,7 +178,7 @@\n             }\n             newCommit.setChanges(diff.toString());\n             newCommit.setRootNodeId(rootNodeId);\n-            if (createBranch) {\n+            if (false) {\n                 newCommit.setBranchRootId(baseCommit.getId());\n             } else {\n                 newCommit.setBranchRootId(baseCommit.getBranchRootId());\n\n\n"}]}}, {"bug_id": "ba38c380", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 07:10:14.295279", "repair_begin": "2018-12-31 06:31:29.397517", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 413, "class": "org.apache.jackrabbit.oak.cache.CacheLIRS"}, "patchType": "PRECONDITION", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/cache/CacheLIRS.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/cache/CacheLIRS.java\n@@ -412,3 +412,5 @@\n         if (maxMemory <= 0) {\n-            throw new IllegalArgumentException(\"Max memory must be larger than 0\");\n+            if (false) {\n+                throw new IllegalArgumentException(\"Max memory must be larger than 0\");\n+            }\n         }\n"}]}}, {"bug_id": "c83755c3", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-30 02:30:36.688823", "repair_begin": "2018-12-30 02:29:25.041347", "patches": [{"edits": [{"path": "oak-auth-ldap/src/main/java/org/apache/jackrabbit/oak/security/authentication/ldap/impl/LdapIdentityProvider.java", "line": 666, "faulty": "if (response instanceof SearchResultEntry) {\n  Entry resultEntry=((SearchResultEntry)response).getEntry();\n  result.add(resultEntry);\n  if (log.isDebugEnabled()) {\n    log.debug(\"search below {} with {} found {}\",idConfig.getBaseDN(),searchFilter,resultEntry.getDn());\n  }\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_c83755c3/oak-auth-ldap/src/main/java/org/apache/jackrabbit/oak/security/authentication/ldap/impl/LdapIdentityProvider.java\t2018-12-29 20:25:52.355686000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_c83755c3/patches_dhye/Patch_2/patched/tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_c83755c3/oak-auth-ldap/src/main/java/org/apache/jackrabbit/oak/security/authentication/ldap/impl/LdapIdentityProvider.java\t2018-12-29 20:30:36.303945071 -0500\n@@ -663,7 +663,7 @@\n                     Response response = searchCursor.get();\n \n                     // process the SearchResultEntry\n-                    if (response instanceof SearchResultEntry) {\n+                    if (false) {\n                         Entry resultEntry = ((SearchResultEntry) response).getEntry();\n                         result.add(resultEntry);\n                         if (log.isDebugEnabled()) {\n\n\n"}]}}, {"bug_id": "e115fd90", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 16:42:00.011792", "repair_begin": "2018-12-29 16:40:41.660623", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 205, "class": "org.apache.jackrabbit.oak.namepath.NamePathMapperImpl"}, "patchType": "PRECONDITION", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\n@@ -204,3 +204,5 @@\n                 if (JcrPathParser.validate(jcrPath)) {\n-                    return jcrPath;\n+                    if (keepIndex) {\n+                        return jcrPath;\n+                    }\n                 }\n"}]}}, {"bug_id": "f2a2edec", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 16:37:34.597700", "repair_begin": "2018-12-29 16:35:37.163420", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 121, "class": "org.apache.jackrabbit.oak.namepath.JcrPathParser"}, "patchType": "CONDITIONAL", "patch": "--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java\n@@ -120,3 +120,3 @@\n                         state = STATE_PREFIX_START;\n-                    } else if (state == STATE_DOTDOT) {\n+                    } else if (((org.apache.jackrabbit.oak.namepath.JcrPathParser.STATE_INDEX_END < lastPos) || (3 == pos)) && (state == (org.apache.jackrabbit.oak.namepath.JcrPathParser.STATE_DOTDOT))) {\n                         if (!listener.parent()) {\n@@ -127,5 +127,5 @@\n                     } else if (state != STATE_URI\n-                            && !(state == STATE_PREFIX_START && c == EOF)) { // ignore trailing slash\n+                    && !(state == STATE_PREFIX_START && c == EOF)) { // ignore trailing slash\n                         listener.error('\\'' + jcrPath + \"' is not a valid path. '\" + c +\n-                                \"' not a valid name character.\");\n+                        \"' not a valid name character.\");\n                         return false;\n"}]}}, {"bug_id": "ffa818f3", "tool": "ARJA", "nb_patch": 23, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 17:51:28.271717", "repair_begin": "2018-12-29 16:32:45.576659", "patches": [{"edits": [{"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/util/StringUtils.java", "line": 55, "faulty": "len/=2;", "type": "InsertBefore", "seed": "if (len % 2 != 0) {\n  throw new IllegalArgumentException(s);\n}"}, {"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/util/StringUtils.java", "line": 60, "faulty": "return buff;", "type": "InsertBefore", "seed": "len/=2;"}, {"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Id.java", "line": 116, "faulty": "return raw[i] - other[i];", "type": "Replace", "seed": "return Arrays.hashCode(raw);"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Id.java\t2018-12-29 10:31:33.854329000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/patches_2hm4/Patch_668/patched/tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Id.java\t2018-12-29 11:01:40.893694526 -0500\n@@ -113,7 +113,7 @@\n         \n         for (int i = 0; i < len; i++) {\n             if (raw[i] != other[i]) {\n-                return raw[i] - other[i];\n+                return Arrays.hashCode(raw);\n             }\n         }\n         return raw.length - other.length;\n\n\n--- /tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/oak-mk/src/main/java/org/apache/jackrabbit/mk/util/StringUtils.java\t2018-12-29 10:30:50.817424000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/patches_2hm4/Patch_668/patched/tmp/Arja_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/oak-mk/src/main/java/org/apache/jackrabbit/mk/util/StringUtils.java\t2018-12-29 11:01:40.897694547 -0500\n@@ -52,12 +52,16 @@\n         if (len % 2 != 0) {\n             throw new IllegalArgumentException(s);\n         }\n-        len /= 2;\n+        if (len % 2 != 0) {\n+\t\t\tthrow new IllegalArgumentException(s);\n+\t\t}\n+\t\tlen /= 2;\n         byte[] buff = new byte[len];\n         for (int i = 0; i < len; i++) {\n             buff[i] = (byte) ((getHexDigit(s, i + i) << 4) | getHexDigit(s, i + i + 1));\n         }\n-        return buff;\n+        len /= 2;\n+\t\treturn buff;\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "ffa818f3", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-31 11:09:27.609663", "repair_begin": "2018-12-31 11:08:58.172891", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 658, "class": "org.apache.jackrabbit.mk.core.MicroKernelImpl"}, "patchType": "PRECONDITION", "patch": "--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n@@ -657,3 +657,5 @@\n                     if (depth > 0) {\n-                        toJson(builder, entry.getNode(), depth - 1, 0, maxChildNodes, inclVirtualProps, filter);\n+                        if (false) {\n+                            toJson(builder, entry.getNode(), depth - 1, 0, maxChildNodes, inclVirtualProps, filter);\n+                        }\n                     }\n"}]}}, {"bug_id": "ffa818f3", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-30 03:13:08.833665", "repair_begin": "2018-12-30 03:12:00.346529", "patches": [{"edits": [{"path": "oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Id.java", "line": 116, "faulty": "return raw[i] - other[i];", "type": "InsertReturn false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Id.java\t2018-12-29 21:10:39.860222000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/patches_ciuy/Patch_10/patched/tmp/Kali_Bug_dot_jar_Jackrabbit-Oak_ffa818f3/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Id.java\t2018-12-29 21:13:08.418553478 -0500\n@@ -113,7 +113,9 @@\n         \n         for (int i = 0; i < len; i++) {\n             if (raw[i] != other[i]) {\n-                return raw[i] - other[i];\n+                if (true)\n+\t\t\t\t\treturn -1;\n+\t\t\t\treturn raw[i] - other[i];\n             }\n         }\n         return raw.length - other.length;\n\n\n"}]}}, {"bug_id": "ffa818f3", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Jackrabbit-Oak", "result": {"repair_end": "2018-12-29 17:13:03.948468", "repair_begin": "2018-12-29 17:12:28.191354", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 656, "class": "org.apache.jackrabbit.mk.core.MicroKernelImpl"}, "patchType": "PRECONDITION", "patch": "--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n@@ -655,3 +655,5 @@\n                     }\n-                    builder.key(entry.getName()).object();\n+                    if (filter!=null) {\n+                        builder.key(entry.getName()).object();\n+                    }\n                     if (depth > 0) {\n"}]}}, {"bug_id": "0bea17d7", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 16:23:03.630441", "repair_begin": "2018-12-31 16:22:40.181028", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 125, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -124,3 +124,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return (Class<? extends ThreadContextMap>) clazz;\n+                if (false) {\n+                    return (Class<? extends ThreadContextMap>) clazz;\n+                }\n             }\n"}]}}, {"bug_id": "2afe3dff", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-29 19:10:38.593762", "repair_begin": "2018-12-29 19:10:15.872493", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 431, "class": "org.apache.logging.log4j.core.impl.ThrowableProxy"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java\n+++ b/core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java\n@@ -430,5 +430,7 @@\n                 int modifier = method.getModifiers();\n-                if (method.getName().equals(\"getCallerClass\") && Modifier.isStatic(modifier)) {\n-                    getCallerClass = method;\n-                    return;\n+                if (org.apache.logging.log4j.core.impl.ThrowableProxy.securityManager!=null) {\n+                    if (method.getName().equals(\"getCallerClass\") && Modifier.isStatic(modifier)) {\n+                        getCallerClass = method;\n+                        return;\n+                    }\n                 }\n"}]}}, {"bug_id": "3b4b370e", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 14:45:29.840614", "repair_begin": "2018-12-31 14:45:04.545947", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 231, "class": "org.apache.logging.log4j.ThreadContext"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/ThreadContext.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/ThreadContext.java\n@@ -230,3 +230,5 @@\n                         if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                            contextMap = (ThreadContextMap) clazz.newInstance();\n+                            if (false) {\n+                                contextMap = (ThreadContextMap) clazz.newInstance();\n+                            }\n                             break;\n"}]}}, {"bug_id": "3eb44094", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-29 18:32:57.168591", "repair_begin": "2018-12-29 18:32:39.627639", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 96, "class": "org.apache.logging.log4j.Level"}, "patchType": "CONDITIONAL", "patch": "--- a/log4j2-api/src/main/java/org/apache/logging/log4j/Level.java\n+++ b/log4j2-api/src/main/java/org/apache/logging/log4j/Level.java\n@@ -95,3 +95,3 @@\n     public static Level toLevel(String sArg, Level defaultLevel) {\n-        if (sArg == null) {\n+        if (2 == defaultLevel.intLevel) {\n             return defaultLevel;\n"}]}}, {"bug_id": "4cf831b6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 14:54:04.396400", "repair_begin": "2018-12-31 14:53:41.584310", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 123, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -122,3 +122,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return clazz.asSubclass(ThreadContextMap.class);\n+                if (false) {\n+                    return clazz.asSubclass(ThreadContextMap.class);\n+                }\n             }\n"}]}}, {"bug_id": "7bb1ad47", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 16:57:54.529105", "repair_begin": "2018-12-31 16:57:22.669848", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 125, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -124,3 +124,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return (Class<? extends ThreadContextMap>) clazz;\n+                if (false) {\n+                    return (Class<? extends ThreadContextMap>) clazz;\n+                }\n             }\n"}]}}, {"bug_id": "7bb1ad47", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-29 18:49:05.904317", "repair_begin": "2018-12-29 18:45:05.598340", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 157, "class": "org.apache.logging.log4j.simple.SimpleLogger"}, "patchType": "CONDITIONAL", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java\n@@ -156,3 +156,3 @@\n         Throwable t;\n-        if (throwable == null && params != null && params[params.length - 1] instanceof Throwable) {\n+        if (org.apache.logging.log4j.simple.SimpleLogger.this.dateFormatter!=null) {\n             t = (Throwable) params[params.length - 1];\n"}]}}, {"bug_id": "16ad8763", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 17:20:40.594434", "repair_begin": "2018-12-31 17:20:08.331756", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 123, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -122,3 +122,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return clazz.asSubclass(ThreadContextMap.class);\n+                if (false) {\n+                    return clazz.asSubclass(ThreadContextMap.class);\n+                }\n             }\n"}]}}, {"bug_id": "86d8944f", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 17:35:33.251650", "repair_begin": "2018-12-31 17:35:01.531044", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 123, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -122,3 +122,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return clazz.asSubclass(ThreadContextMap.class);\n+                if (false) {\n+                    return clazz.asSubclass(ThreadContextMap.class);\n+                }\n             }\n"}]}}, {"bug_id": "837dcd89", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 14:34:57.980307", "repair_begin": "2018-12-31 14:34:13.423383", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 278, "class": "org.apache.logging.log4j.message.LocalizedMessage"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessage.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessage.java\n@@ -277,3 +277,5 @@\n         for (int i = 0; i < length; ++i) {\n-            stringArgs[i] = in.readUTF();\n+            if (false) {\n+                stringArgs[i] = in.readUTF();\n+            }\n         }\n"}]}}, {"bug_id": "73400bfb", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 14:20:40.878396", "repair_begin": "2018-12-31 14:20:15.111831", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 125, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -124,3 +124,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return (Class<? extends ThreadContextMap>) clazz;\n+                if (false) {\n+                    return (Class<? extends ThreadContextMap>) clazz;\n+                }\n             }\n"}]}}, {"bug_id": "97203de8", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 17:02:40.418070", "repair_begin": "2018-12-31 17:02:01.911860", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 125, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -124,3 +124,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return (Class<? extends ThreadContextMap>) clazz;\n+                if (false) {\n+                    return (Class<? extends ThreadContextMap>) clazz;\n+                }\n             }\n"}]}}, {"bug_id": "a523dcd5", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 15:32:34.216377", "repair_begin": "2018-12-31 15:30:06.046525", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 131, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -130,3 +130,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return clazz.asSubclass(ThreadContextMap.class);\n+                if (false) {\n+                    return clazz.asSubclass(ThreadContextMap.class);\n+                }\n             }\n"}]}}, {"bug_id": "afcf92eb", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-29 18:59:37.600779", "repair_begin": "2018-12-29 18:59:23.281419", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 191, "class": "org.apache.logging.log4j.message.StructuredDataMessage"}, "patchType": "CONDITIONAL", "patch": "--- a/api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java\n+++ b/api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java\n@@ -190,5 +190,5 @@\n     protected void validate(String key, String value) {\n-        if (value.length() > MAX_LENGTH) {\n+        if (org.apache.logging.log4j.message.StructuredDataMessage.HASHVAL < key.length()) {\n             throw new IllegalArgumentException(\"Structured data values are limited to 32 characters. key: \" + key +\n-                \" value: \" + value);\n+            \" value: \" + value);\n         }\n"}]}}, {"bug_id": "b2ec5106", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 16:31:42.674799", "repair_begin": "2018-12-31 16:31:19.677886", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 125, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -124,3 +124,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return (Class<? extends ThreadContextMap>) clazz;\n+                if (false) {\n+                    return (Class<? extends ThreadContextMap>) clazz;\n+                }\n             }\n"}]}}, {"bug_id": "b2ec5106", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-29 18:40:34.427302", "repair_begin": "2018-12-29 18:36:15.001977", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 78, "class": "org.apache.logging.log4j.message.ObjectMessage"}, "patchType": "CONDITIONAL", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java\n@@ -77,3 +77,3 @@\n     public boolean equals(final Object o) {\n-        if (this == o) {\n+        if (o!=null) {\n             return true;\n"}]}}, {"bug_id": "c8fd3c53", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-31 15:03:12.095694", "repair_begin": "2018-12-31 15:02:49.075570", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 123, "class": "org.apache.logging.log4j.spi.Provider"}, "patchType": "PRECONDITION", "patch": "--- a/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java\n@@ -122,3 +122,5 @@\n             if (ThreadContextMap.class.isAssignableFrom(clazz)) {\n-                return clazz.asSubclass(ThreadContextMap.class);\n+                if (false) {\n+                    return clazz.asSubclass(ThreadContextMap.class);\n+                }\n             }\n"}]}}, {"bug_id": "d8af1c93", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Logging-Log4J2", "result": {"repair_end": "2018-12-29 18:37:06.654264", "repair_begin": "2018-12-29 18:36:36.142956", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 502, "class": "org.apache.logging.log4j.core.impl.ThrowableProxy"}, "patchType": "PRECONDITION", "patch": "--- a/core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java\n+++ b/core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java\n@@ -501,5 +501,7 @@\n                 int modifier = method.getModifiers();\n-                if (method.getName().equals(\"getCallerClass\") && Modifier.isStatic(modifier)) {\n-                    getCallerClass = method;\n-                    return;\n+                if (org.apache.logging.log4j.core.impl.ThrowableProxy.securityManager!=null) {\n+                    if (method.getName().equals(\"getCallerClass\") && Modifier.isStatic(modifier)) {\n+                        getCallerClass = method;\n+                        return;\n+                    }\n                 }\n"}]}}, {"bug_id": "c4002945", "tool": "ARJA", "nb_patch": 774, "benchmark": "Bugs.jar", "project": "Maven", "result": {"repair_end": "2018-12-29 08:39:56.162398", "repair_begin": "2018-12-29 08:30:39.108304", "patches": [{"edits": [{"path": "maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java", "line": 326, "faulty": "this.name=name;", "type": "Delete", "seed": "NULL"}, {"path": "maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java", "line": 71, "faulty": "if (inheritedByDefault != null) {\n  pluginDescriptor.setInheritedByDefault(Boolean.parseBoolean(inheritedByDefault));\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Bug_dot_jar_Maven_c4002945/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java\t2018-12-28 19:52:44.500203000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Maven_c4002945/patches_obrk/Patch_1314/patched/tmp/Arja_Bug_dot_jar_Maven_c4002945/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java\t2018-12-29 02:35:26.740918052 -0500\n@@ -323,7 +323,6 @@\n \n     public void setName( String name )\n     {\n-        this.name = name;\n     }\n \n     public String getName()\n\n\n--- /tmp/Arja_Bug_dot_jar_Maven_c4002945/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java\t2018-12-28 19:52:44.504203000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Maven_c4002945/patches_obrk/Patch_1314/patched/tmp/Arja_Bug_dot_jar_Maven_c4002945/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java\t2018-12-29 02:35:26.740918052 -0500\n@@ -68,10 +68,7 @@\n \n         String inheritedByDefault = c.getChild( \"inheritedByDefault\" ).getValue();\n \n-        if ( inheritedByDefault != null )\n-        {\n-            pluginDescriptor.setInheritedByDefault( Boolean.parseBoolean( inheritedByDefault ) );\n-        }\n+        \n \n         // ----------------------------------------------------------------------\n         // Components\n\n\n"}]}}, {"bug_id": "c4002945", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Maven", "result": {"repair_end": "2018-12-30 06:05:11.378570", "repair_begin": "2018-12-30 06:05:00.807425", "patches": [{"edits": [{"path": "maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java", "line": 64, "faulty": "if (isolatedRealm != null) {\n  pluginDescriptor.setIsolatedRealm(Boolean.parseBoolean(isolatedRealm));\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Maven_c4002945/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java\t2018-12-08 08:44:45.351577000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Maven_c4002945/patches_qg6i/Patch_1/patched/tmp/Kali_Bug_dot_jar_Maven_c4002945/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptorBuilder.java\t2018-12-30 00:05:11.013303845 -0500\n@@ -61,7 +61,7 @@\n \n         String isolatedRealm = c.getChild( \"isolatedRealm\" ).getValue();\n \n-        if ( isolatedRealm != null )\n+        if ( true )\n         {\n             pluginDescriptor.setIsolatedRealm( Boolean.parseBoolean( isolatedRealm ) );\n         }\n\n\n"}]}}, {"bug_id": "0f8a6d75", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 12:23:12.637647", "repair_begin": "2018-12-30 12:22:03.125540", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 291, "class": "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$1"}, "patchType": "PRECONDITION", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n@@ -290,3 +290,5 @@\n \t\t\t\t\t\t\t\t\tfiles = new ArrayList<>();\n-\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n"}]}}, {"bug_id": "2fc6a395", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 12:38:39.031894", "repair_begin": "2018-12-30 12:38:04.344338", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 680, "class": "org.apache.wicket.util.string.Strings"}, "patchType": "CONDITIONAL", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/string/Strings.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/string/Strings.java\n@@ -679,3 +679,3 @@\n \t\t\t\t\tboolean rhsClosed = fragment.startsWith(separator);\n-\t\t\t\t\tif (lhsClosed && rhsClosed)\n+\t\t\t\t\tif (false)\n \t\t\t\t\t{\n"}]}}, {"bug_id": "2fc6a395", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-29 16:53:03.934864", "repair_begin": "2018-12-29 16:52:25.713579", "patches": [{"edits": [{"path": "wicket-util/src/main/java/org/apache/wicket/util/string/Strings.java", "line": 680, "faulty": "if (lhsClosed && rhsClosed) {\n  buff.append(fragment.substring(1));\n}\n else if (!lhsClosed && !rhsClosed) {\n  if (!Strings.isEmpty(fragment)) {\n    buff.append(separator);\n  }\n  buff.append(fragment);\n}\n else {\n  buff.append(fragment);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Wicket_2fc6a395/wicket-util/src/main/java/org/apache/wicket/util/string/Strings.java\t2018-12-29 10:50:49.453423000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Wicket_2fc6a395/patches_nx3j/Patch_12/patched/tmp/Kali_Bug_dot_jar_Wicket_2fc6a395/wicket-util/src/main/java/org/apache/wicket/util/string/Strings.java\t2018-12-29 10:53:03.561109486 -0500\n@@ -677,7 +677,7 @@\n \t\t\t\t{\n \t\t\t\t\tboolean lhsClosed = fragments[i - 1].endsWith(separator);\n \t\t\t\t\tboolean rhsClosed = fragment.startsWith(separator);\n-\t\t\t\t\tif (lhsClosed && rhsClosed)\n+\t\t\t\t\tif (false)\n \t\t\t\t\t{\n \t\t\t\t\t\tbuff.append(fragment.substring(1));\n \t\t\t\t\t}\n\n\n"}]}}, {"bug_id": "2fc6a395", "tool": "Nopol", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-29 11:52:35.039994", "repair_begin": "2018-12-29 11:51:57.830735", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 680, "class": "org.apache.wicket.util.string.Strings"}, "patchType": "CONDITIONAL", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/string/Strings.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/string/Strings.java\n@@ -679,3 +679,3 @@\n \t\t\t\t\tboolean rhsClosed = fragment.startsWith(separator);\n-\t\t\t\t\tif (lhsClosed && rhsClosed)\n+\t\t\t\t\tif (buff.length()==0)\n \t\t\t\t\t{\n"}]}}, {"bug_id": "a4a3a9a6", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 14:38:12.625531", "repair_begin": "2018-12-30 14:34:55.836860", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 86, "class": "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$SuffixAndIgnoreFileFilter"}, "patchType": "PRECONDITION", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n@@ -85,3 +85,5 @@\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\taccept = true;\n+\t\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\t\taccept = true;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tbreak;\n"}]}}, {"bug_id": "a382917f", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 11:59:15.368295", "repair_begin": "2018-12-30 11:57:17.918614", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 291, "class": "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$1"}, "patchType": "PRECONDITION", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n@@ -290,3 +290,5 @@\n \t\t\t\t\t\t\t\t\tfiles = new ArrayList<>();\n-\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n"}]}}, {"bug_id": "b80f6640", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 13:38:45.110267", "repair_begin": "2018-12-30 13:36:45.850482", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 286, "class": "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$1"}, "patchType": "PRECONDITION", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n@@ -285,3 +285,5 @@\n \t\t\t\t\t\t\t\t\tfiles = new ArrayList<>();\n-\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n"}]}}, {"bug_id": "b672cb2d", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 12:43:15.744711", "repair_begin": "2018-12-30 12:42:37.593994", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 288, "class": "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$1"}, "patchType": "PRECONDITION", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n@@ -287,3 +287,5 @@\n \t\t\t\t\t\t\t\t\tfiles = new ArrayList<File>();\n-\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n"}]}}, {"bug_id": "bcea89fc", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 15:12:42.420317", "repair_begin": "2018-12-30 15:08:43.389329", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 286, "class": "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$1"}, "patchType": "PRECONDITION", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n@@ -285,3 +285,5 @@\n \t\t\t\t\t\t\t\t\tfiles = new ArrayList<>();\n-\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n"}]}}, {"bug_id": "e93fdd5a", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 12:04:34.852339", "repair_begin": "2018-12-30 12:03:23.559097", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 286, "class": "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$1"}, "patchType": "PRECONDITION", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n@@ -285,3 +285,5 @@\n \t\t\t\t\t\t\t\t\tfiles = new ArrayList<>();\n-\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n+\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n"}]}}, {"bug_id": "f3ec1503", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-30 12:23:16.986467", "repair_begin": "2018-12-30 12:18:59.274475", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 86, "class": "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$SuffixAndIgnoreFileFilter"}, "patchType": "PRECONDITION", "patch": "--- a/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java\n@@ -85,3 +85,5 @@\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\taccept = true;\n+\t\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\t\taccept = true;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tbreak;\n"}]}}, {"bug_id": "f539c18c", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Bugs.jar", "project": "Wicket", "result": {"repair_end": "2018-12-29 14:26:54.155964", "repair_begin": "2018-12-29 14:26:22.463341", "patches": [{"edits": [{"path": "wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java", "line": 211, "faulty": "if (constraint.groups().length == 0 && validatorGroups.isEmpty()) {\n  return true;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Bug_dot_jar_Wicket_f539c18c/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java\t2018-12-29 08:24:44.132043000 -0500\n+++ /tmp/Kali_Bug_dot_jar_Wicket_f539c18c/patches_efhy/Patch_9/patched/tmp/Kali_Bug_dot_jar_Wicket_f539c18c/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java\t2018-12-29 08:26:53.778474507 -0500\n@@ -208,7 +208,7 @@\n \n \t\tfor (NotNull constraint : constraints)\n \t\t{\n-\t\t\tif (constraint.groups().length == 0 && validatorGroups.isEmpty())\n+\t\t\tif (true)\n \t\t\t{\n \t\t\t\treturn true;\n \t\t\t}\n\n\n"}]}}, {"bug_id": "1", "tool": "ARJA", "nb_patch": 209, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 15:37:38.849917", "repair_begin": "2018-12-01 14:26:19.841438", "patches": [{"edits": [{"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1797, "faulty": "if (dataset != null) {\n  return result;\n}", "type": "Replace", "seed": "if (dataset != null) {\n  this.rowCount=dataset.getRowCount();\n  this.columnCount=dataset.getColumnCount();\n}\n else {\n  this.rowCount=0;\n  this.columnCount=0;\n}"}, {"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1796, "faulty": "CategoryDataset dataset=this.plot.getDataset(index);", "type": "InsertBefore", "seed": "this.urlGeneratorList=new ObjectList();"}], "patch": "--- /tmp/Arja_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-01 08:26:09.286817807 -0500\n+++ /tmp/Arja_Defects4J_Chart_1/patches_dw50/Patch_981/patched/tmp/Arja_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-01 09:01:08.973984563 -0500\n@@ -1793,10 +1793,15 @@\n             return result;\n         }\n         int index = this.plot.getIndexOf(this);\n-        CategoryDataset dataset = this.plot.getDataset(index);\n+        this.urlGeneratorList = new ObjectList();\n+\t\tCategoryDataset dataset = this.plot.getDataset(index);\n         if (dataset != null) {\n-            return result;\n-        }\n+\t\t\tthis.rowCount = dataset.getRowCount();\n+\t\t\tthis.columnCount = dataset.getColumnCount();\n+\t\t} else {\n+\t\t\tthis.rowCount = 0;\n+\t\t\tthis.columnCount = 0;\n+\t\t}\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {\n\n\n"}]}}, {"bug_id": "1", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-29 03:21:00.615010", "repair_begin": "2018-12-29 03:14:41.500721", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n+++ org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n@@ -1794,7 +1794,7 @@\\n \\t\\t}\\n \\t\\tint index = this.plot.getIndexOf(this);\\n \\t\\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\\n-\\t\\tif (dataset != null) {\\n+\\t\\tif (dataset == null) {\\n \\t\\t\\treturn result;\\n \\t\\t}\\n \\t\\tint seriesCount = dataset.getRowCount();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "dataset != null", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "dataset == null", "INGREDIENT_PARENT": "_CategoryDataset_0 == null", "LOCATION": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/src\\/\\/variant-336_f\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_1\\/output_astor\\/AstorMain-Chart-1\\/src\\/default\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "LINE": "1797", "MP_RANKING": "41", "SUSPICIOUNESS": "0.132", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "168", "VARIANT_ID": "336", "TIME": "136", "VALIDATION": "|true|0|4402|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/bin\\/\\/variant-336"}]}}, {"bug_id": "1", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 22:21:23.597543", "repair_begin": "2018-12-01 22:20:44.207855", "patches": [{"nb_test_that_execute_statement": 76, "patchLocation": {"line": 1798, "class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1797,3 +1797,5 @@\n         if (dataset != null) {\n-            return result;\n+            if (false) {\n+                return result;\n+            }\n         }\n"}]}}, {"bug_id": "1", "tool": "GenProg-A", "nb_patch": 208, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 10:10:21.275809", "repair_begin": "2018-12-02 08:47:09.965386", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1667, "faulty": "if (existing != null) {\n  existing.removeChangeListener(this);\n}", "type": "Delete", "seed": "int result=0;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1682, "faulty": "fireChangeEvent();", "type": "Delete", "seed": "if (this.foregroundRangeMarkers != null) {\n  Set keys=this.foregroundRangeMarkers.keySet();\n  Iterator iterator=keys.iterator();\n  while (iterator.hasNext()) {\n    Integer key=(Integer)iterator.next();\n    clearRangeMarkers(key.intValue());\n  }\n  this.foregroundRangeMarkers.clear();\n}"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1678, "faulty": "configureDomainAxes();", "type": "Replace", "seed": "CategoryAxis domainAxis=getDomainAxisForDataset(index);"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1682, "faulty": "fireChangeEvent();", "type": "Delete", "seed": "PlotRenderingInfo clone=(PlotRenderingInfo)super.clone();"}, {"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1797, "faulty": "if (dataset != null) {\n  return result;\n}", "type": "Replace", "seed": "Line2D line=null;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1353, "faulty": "if (existing != null) {\n  existing.removeChangeListener(this);\n}", "type": "Replace", "seed": "ValueAxis yAxis=(ValueAxis)this.rangeAxes.get(index);"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1665, "faulty": "CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);", "type": "InsertBefore", "seed": "this.rangeMinorGridlineStroke=DEFAULT_GRIDLINE_STROKE;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1665, "faulty": "CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);", "type": "InsertBefore", "seed": "CategoryAxis axis=getDomainAxisForDataset(index);"}], "patch": "--- /tmp/GenProg_Defects4J_Chart_1/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-02 02:46:48.869437844 -0500\n+++ /tmp/GenProg_Defects4J_Chart_1/patches_b2db/Patch_673/patched/tmp/GenProg_Defects4J_Chart_1/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-02 03:24:42.711854853 -0500\n@@ -1350,9 +1350,7 @@\n     public void setDataset(int index, CategoryDataset dataset) {\n \n         CategoryDataset existing = (CategoryDataset) this.datasets.get(index);\n-        if (existing != null) {\n-            existing.removeChangeListener(this);\n-        }\n+        ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index);\n         this.datasets.set(index, dataset);\n         if (dataset != null) {\n             dataset.addChangeListener(this);\n@@ -1661,13 +1659,11 @@\n     public void setRenderer(int index, CategoryItemRenderer renderer,\n                             boolean notify) {\n \n-        // stop listening to the existing renderer...\n+        this.rangeMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n+\t\t\t\t\t\t\t\tCategoryAxis axis = getDomainAxisForDataset(index);\n+\t\t// stop listening to the existing renderer...\n         CategoryItemRenderer existing\n             = (CategoryItemRenderer) this.renderers.get(index);\n-        if (existing != null) {\n-            existing.removeChangeListener(this);\n-        }\n-\n         // register the new renderer...\n         this.renderers.set(index, renderer);\n         if (renderer != null) {\n@@ -1675,11 +1671,10 @@\n             renderer.addChangeListener(this);\n         }\n \n-        configureDomainAxes();\n+        CategoryAxis domainAxis = getDomainAxisForDataset(index);\n         configureRangeAxes();\n \n         if (notify) {\n-            fireChangeEvent();\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-02 02:46:55.389437615 -0500\n+++ /tmp/GenProg_Defects4J_Chart_1/patches_b2db/Patch_673/patched/tmp/GenProg_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-02 03:24:42.715855025 -0500\n@@ -1794,9 +1794,7 @@\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n-            return result;\n-        }\n+        Line2D line = null;\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {\n\n\n"}]}}, {"bug_id": "1", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-30 22:38:57.221520", "repair_begin": "2018-11-30 22:30:40.228426", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n+++ org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n@@ -1794,9 +1794,9 @@\\n \\t\\t}\\n \\t\\tint index = this.plot.getIndexOf(this);\\n \\t\\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\\n-\\t\\tif (dataset != null) {\\n-\\t\\t\\treturn result;\\n-\\t\\t}\\n+\\n+\\n+\\n \\t\\tint seriesCount = dataset.getRowCount();\\n \\t\\tif (plot.getRowRenderingOrder().equals(org.jfree.chart.util.SortOrder.ASCENDING)) {\\n \\t\\t\\tfor (int i = 0; i < seriesCount; i++) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (dataset != null) {\\n\\treturn result;\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/src\\/\\/variant-242_f\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_1\\/output_astor\\/AstorMain-Chart-1\\/src\\/default\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "LINE": "1797", "MP_RANKING": "30", "SUSPICIOUNESS": "0.132"}], "GENERATION": "121", "VARIANT_ID": "242", "TIME": "108", "VALIDATION": "|true|0|4402|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/bin\\/\\/variant-242"}]}}, {"bug_id": "1", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-07 02:01:58.393875", "repair_begin": "2018-12-07 02:00:29.228275", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n+++ org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n@@ -1794,7 +1794,7 @@\\n \\t\\t}\\n \\t\\tint index = this.plot.getIndexOf(this);\\n \\t\\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\\n-\\t\\tif (dataset != null) {\\n+\\t\\tif (false) {\\n \\t\\t\\treturn result;\\n \\t\\t}\\n \\t\\tint seriesCount = dataset.getRowCount();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (dataset != null) {\\n\\treturn result;\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\treturn result;\\n}", "LOCATION": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/src\\/\\/variant-38_f\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Chart_1\\/output_astor\\/AstorMain-Chart-1\\/src\\/default\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "LINE": "1797", "MP_RANKING": "30", "SUSPICIOUNESS": "0.132", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "38", "TIME": "22", "VALIDATION": "|true|0|4402|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/bin\\/\\/variant-38"}]}}, {"bug_id": "1", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-07 20:15:50.955773", "repair_begin": "2018-12-07 20:14:31.149471", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n+++ org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n@@ -1794,7 +1794,7 @@\\n \\t\\t}\\n \\t\\tint index = this.plot.getIndexOf(this);\\n \\t\\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\\n-\\t\\tif (dataset != null) {\\n+\\t\\tif (dataset == null) {\\n \\t\\t\\treturn result;\\n \\t\\t}\\n \\t\\tint seriesCount = dataset.getRowCount();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "dataset != null", "PATCH_HUNK_CODE": "dataset == null", "LOCATION": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/src\\/\\/variant-40_f\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Chart_1\\/output_astor\\/AstorMain-Chart-1\\/src\\/default\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "LINE": "1797", "MP_RANKING": "8", "SUSPICIOUNESS": "0.132", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "40", "TIME": "15", "VALIDATION": "|true|0|4402|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/bin\\/\\/variant-40"}]}}, {"bug_id": "1", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 01:05:25.094106", "repair_begin": "2018-12-02 01:01:49.432921", "patches": [{"edits": [{"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1797, "faulty": "if (dataset != null) {\n  return result;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-01 19:01:39.066799642 -0500\n+++ /tmp/Kali_Defects4J_Chart_1/patches_1bmm/Patch_16/patched/tmp/Kali_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-01 19:05:24.712543098 -0500\n@@ -1794,7 +1794,7 @@\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n+        if (false) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();\n\n\n"}]}}, {"bug_id": "1", "tool": "RSRepair-A", "nb_patch": 16, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 11:30:59.397449", "repair_begin": "2018-12-02 10:44:22.372302", "patches": [{"edits": [{"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1798, "faulty": "return result;", "type": "Delete", "seed": "double x=0.0;"}], "patch": "--- /tmp/RSRepair_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-02 04:44:11.559360026 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_1/patches_mgoi/Patch_158/patched/tmp/RSRepair_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-02 04:52:49.735477558 -0500\n@@ -1795,7 +1795,6 @@\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n         if (dataset != null) {\n-            return result;\n         }\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n\n\n"}]}}, {"bug_id": "3", "tool": "ARJA", "nb_patch": 66, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 14:55:57.516034", "repair_begin": "2018-12-01 14:25:31.223646", "patches": [{"edits": [{"path": "source/org/jfree/data/time/TimeSeries.java", "line": 667, "faulty": "add(item,notify);", "type": "InsertBefore", "seed": "fireSeriesChanged();"}, {"path": "source/org/jfree/data/time/TimeSeries.java", "line": 564, "faulty": "add(item,true);", "type": "InsertBefore", "seed": "updateBoundsForRemovedItem(item);"}], "patch": "--- /tmp/Arja_Defects4J_Chart_3/source/org/jfree/data/time/TimeSeries.java\t2018-12-01 08:25:21.026940649 -0500\n+++ /tmp/Arja_Defects4J_Chart_3/patches_24th/Patch_1253/patched/tmp/Arja_Defects4J_Chart_3/source/org/jfree/data/time/TimeSeries.java\t2018-12-01 08:45:47.492696538 -0500\n@@ -561,7 +561,8 @@\n      *              permitted).\n      */\n     public void add(TimeSeriesDataItem item) {\n-        add(item, true);\n+        updateBoundsForRemovedItem(item);\n+\t\tadd(item, true);\n     }\n \n     /**\n@@ -664,7 +665,8 @@\n     public void add(RegularTimePeriod period, double value, boolean notify) {\n         // defer argument checking...\n         TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n-        add(item, notify);\n+        fireSeriesChanged();\n+\t\tadd(item, notify);\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "3", "tool": "GenProg-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 08:59:27.938519", "repair_begin": "2018-12-02 08:37:32.735828", "patches": [{"edits": [{"path": "source/org/jfree/data/time/TimeSeries.java", "line": 1071, "faulty": "return copy;", "type": "InsertBefore", "seed": "boolean iterate=false;"}, {"path": "source/org/jfree/data/time/TimeSeries.java", "line": 1059, "faulty": "for (int index=start; index <= end; index++) {\n  TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);\n  TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();\n  try {\n    copy.add(clone);\n  }\n catch (  SeriesException e) {\n    e.printStackTrace();\n  }\n}", "type": "InsertBefore", "seed": "boolean iterate=false;"}, {"path": "source/org/jfree/data/time/TimeSeries.java", "line": 584, "faulty": "if (!this.timePeriodClass.equals(c)) {\n  StringBuffer b=new StringBuffer();\n  b.append(\"You are trying to add data where the time period class \");\n  b.append(\"is \");\n  b.append(item.getPeriod().getClass().getName());\n  b.append(\", but the TimeSeries is expecting an instance of \");\n  b.append(this.timePeriodClass.getName());\n  b.append(\".\");\n  throw new SeriesException(b.toString());\n}", "type": "InsertBefore", "seed": "findBoundsByIteration();"}], "patch": "--- /tmp/GenProg_Defects4J_Chart_3/source/org/jfree/data/time/TimeSeries.java\t2018-12-02 02:37:23.299000074 -0500\n+++ /tmp/GenProg_Defects4J_Chart_3/patches_5iix/Patch_828/patched/tmp/GenProg_Defects4J_Chart_3/source/org/jfree/data/time/TimeSeries.java\t2018-12-02 02:53:46.974335885 -0500\n@@ -580,17 +580,19 @@\n         Class c = item.getPeriod().getClass();\n         if (this.timePeriodClass == null) {\n             this.timePeriodClass = c;\n-        }\n-        else if (!this.timePeriodClass.equals(c)) {\n-            StringBuffer b = new StringBuffer();\n-            b.append(\"You are trying to add data where the time period class \");\n-            b.append(\"is \");\n-            b.append(item.getPeriod().getClass().getName());\n-            b.append(\", but the TimeSeries is expecting an instance of \");\n-            b.append(this.timePeriodClass.getName());\n-            b.append(\".\");\n-            throw new SeriesException(b.toString());\n-        }\n+        } else {\n+\t\t\tfindBoundsByIteration();\n+\t\t\tif (!this.timePeriodClass.equals(c)) {\n+\t\t\t\tStringBuffer b = new StringBuffer();\n+\t\t\t\tb.append(\"You are trying to add data where the time period class \");\n+\t\t\t\tb.append(\"is \");\n+\t\t\t\tb.append(item.getPeriod().getClass().getName());\n+\t\t\t\tb.append(\", but the TimeSeries is expecting an instance of \");\n+\t\t\t\tb.append(this.timePeriodClass.getName());\n+\t\t\t\tb.append(\".\");\n+\t\t\t\tthrow new SeriesException(b.toString());\n+\t\t\t}\n+\t\t}\n \n         // make the change (if it's not a duplicate time period)...\n         boolean added = false;\n@@ -1056,7 +1058,8 @@\n         TimeSeries copy = (TimeSeries) super.clone();\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n+            boolean iterate = false;\n+\t\t\tfor (int index = start; index <= end; index++) {\n                 TimeSeriesDataItem item\n                         = (TimeSeriesDataItem) this.data.get(index);\n                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n@@ -1068,7 +1071,8 @@\n                 }\n             }\n         }\n-        return copy;\n+        boolean iterate = false;\n+\t\treturn copy;\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "3", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-30 22:17:26.732436", "repair_begin": "2018-11-30 22:15:01.515203", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/time\\/TimeSeries.java\\n+++ org\\/jfree\\/data\\/time\\/TimeSeries.java\\n@@ -635,11 +635,7 @@\\n \\n \\n \\t\\t\\tif (notify) {\\n-\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t}\\n-\\t\\t}\\n \\n-\\t}\\n \\n \\n \\n@@ -648,10 +644,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value) {\\n \\n-\\t\\tadd(period, value, true);\\n-\\t}\\n \\n \\n \\n@@ -661,11 +654,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {\\n \\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tadd(item, notify);\\n-\\t}\\n \\n \\n \\n@@ -675,10 +664,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {\\n \\n-\\t\\tadd(period, value, true);\\n-\\t}\\n \\n \\n \\n@@ -688,11 +674,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {\\n \\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tadd(item, notify);\\n-\\t}\\n \\n \\n \\n@@ -701,15 +683,6 @@\\n \\n \\n \\n-\\tpublic void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tint index = java.util.Collections.binarySearch(this.data, temp);\\n-\\t\\tif (index < 0) {\\n-\\t\\t\\tthrow new org.jfree.data.general.SeriesException((\\\"There is no existing value for the \\\" + \\n-\\t\\t\\t\\\"specified 'period'.\\\"));\\n-\\t\\t}\\n-\\t\\tupdate(index, value);\\n-\\t}\\n \\n \\n \\n@@ -717,27 +690,6 @@\\n \\n \\n \\n-\\tpublic void update(int index, java.lang.Number value) {\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));\\n-\\t\\tboolean iterate = false;\\n-\\t\\tjava.lang.Number oldYN = item.getValue();\\n-\\t\\tif (oldYN != null) {\\n-\\t\\t\\tdouble oldY = oldYN.doubleValue();\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) {\\n-\\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\titem.setValue(value);\\n-\\t\\tif (iterate) {\\n-\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t}else\\n-\\t\\t\\tif (value != null) {\\n-\\t\\t\\t\\tdouble yy = value.doubleValue();\\n-\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy);\\n-\\t\\t\\t\\tthis.maxY = maxIgnoreNaN(this.maxY, yy);\\n-\\t\\t\\t}\\n-\\t\\tfireSeriesChanged();\\n-\\t}\\n \\n \\n \\n@@ -747,19 +699,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {\\n-\\t\\torg.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries((\\\"Overwritten values from: \\\" + \\n-\\t\\t(getKey())));\\n-\\t\\tfor (int i = 0; i < (series.getItemCount()); i++) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), \\n-\\t\\t\\titem.getValue());\\n-\\t\\t\\tif (oldItem != null) {\\n-\\t\\t\\t\\toverwritten.add(oldItem);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn overwritten;\\n-\\t}\\n \\n \\n \\n@@ -772,10 +711,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, \\n-\\tdouble value) {\\n-\\t\\treturn addOrUpdate(period, new java.lang.Double(value));\\n-\\t}\\n \\n \\n \\n@@ -788,10 +723,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, \\n-\\tjava.lang.Number value) {\\n-\\t\\treturn addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));\\n-\\t}\\n \\n \\n \\n@@ -804,64 +735,14 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {\\n \\n-\\t\\tif (item == null) {\\n-\\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"Null 'period' argument.\\\");\\n-\\t\\t}\\n-\\t\\tjava.lang.Class periodClass = item.getPeriod().getClass();\\n-\\t\\tif ((this.timePeriodClass) == null) {\\n-\\t\\t\\tthis.timePeriodClass = periodClass;\\n-\\t\\t}else\\n-\\t\\t\\tif (!(this.timePeriodClass.equals(periodClass))) {\\n-\\t\\t\\t\\tjava.lang.String msg = ((((\\\"You are trying to add data where the time \\\" + \\n-\\t\\t\\t\\t\\\"period class is \\\") + (periodClass.getName())) + \\n-\\t\\t\\t\\t\\\", but the TimeSeries is expecting an instance of \\\") + \\n-\\t\\t\\t\\t(this.timePeriodClass.getName())) + \\\".\\\";\\n-\\t\\t\\t\\tthrow new org.jfree.data.general.SeriesException(msg);\\n-\\t\\t\\t}\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem overwritten = null;\\n-\\t\\tint index = java.util.Collections.binarySearch(this.data, item);\\n-\\t\\tif (index >= 0) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem existing = \\n-\\t\\t\\t((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));\\n-\\t\\t\\toverwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));\\n \\n \\n-\\t\\t\\tboolean iterate = false;\\n-\\t\\t\\tjava.lang.Number oldYN = existing.getValue();\\n-\\t\\t\\tdouble oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) {\\n-\\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));\\n-\\t\\t\\t}\\n-\\t\\t\\texisting.setValue(item.getValue());\\n-\\t\\t\\tif (iterate) {\\n-\\t\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\t}else\\n-\\t\\t\\t\\tif ((item.getValue()) != null) {\\n-\\t\\t\\t\\t\\tdouble yy = item.getValue().doubleValue();\\n-\\t\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy);\\n-\\t\\t\\t\\t\\tthis.maxY = minIgnoreNaN(this.maxY, yy);\\n-\\t\\t\\t\\t}\\n-\\t\\t}else \\n-\\t\\t{\\n-\\t\\t\\titem = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));\\n-\\t\\t\\tthis.data.add(((-index) - 1), item);\\n-\\t\\t\\tupdateBoundsForAddedItem(item);\\n \\n \\n-\\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) {\\n-\\t\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));\\n-\\t\\t\\t\\tupdateBoundsForRemovedItem(d);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tremoveAgedItems(false);\\n \\n \\n-\\t\\tfireSeriesChanged();\\n-\\t\\treturn overwritten;\\n \\n-\\t}\\n \\n \\n \\n@@ -871,25 +752,8 @@\\n \\n \\n \\n-\\tpublic void removeAgedItems(boolean notify) {\\n \\n \\n-\\t\\tif ((getItemCount()) > 1) {\\n-\\t\\t\\tlong latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex();\\n-\\t\\t\\tboolean removed = false;\\n-\\t\\t\\twhile ((latest - (getTimePeriod(0).getSerialIndex())) > \\n-\\t\\t\\t(this.maximumItemAge)) {\\n-\\t\\t\\t\\tthis.data.remove(0);\\n-\\t\\t\\t\\tremoved = true;\\n-\\t\\t\\t} \\n-\\t\\t\\tif (removed) {\\n-\\t\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\t\\tif (notify) {\\n-\\t\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -901,60 +765,15 @@\\n \\n \\n \\n-\\tpublic void removeAgedItems(long latest, boolean notify) {\\n-\\t\\tif (this.data.isEmpty()) {\\n-\\t\\t\\treturn;\\n-\\t\\t}\\n \\n-\\t\\tlong index = java.lang.Long.MAX_VALUE;\\n-\\t\\ttry {\\n-\\t\\t\\tjava.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(\\n-\\t\\t\\t\\\"createInstance\\\", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, \\n-\\t\\t\\tjava.util.TimeZone.class });\\n-\\t\\t\\torg.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(\\n-\\t\\t\\tthis.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, \\n-\\t\\t\\tnew java.util.Date(latest), java.util.TimeZone.getDefault() })));\\n-\\t\\t\\tindex = newest.getSerialIndex();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.NoSuchMethodException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.IllegalAccessException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.reflect.InvocationTargetException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n \\n \\n \\n-\\t\\tboolean removed = false;\\n-\\t\\twhile (((getItemCount()) > 0) && ((index - \\n-\\t\\t(getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) {\\n-\\t\\t\\tthis.data.remove(0);\\n-\\t\\t\\tremoved = true;\\n-\\t\\t} \\n-\\t\\tif (removed) {\\n-\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\tif (notify) {\\n-\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n \\n \\n-\\tpublic void clear() {\\n-\\t\\tif ((this.data.size()) > 0) {\\n-\\t\\t\\tthis.data.clear();\\n-\\t\\t\\tthis.timePeriodClass = null;\\n-\\t\\t\\tthis.minY = java.lang.Double.NaN;\\n-\\t\\t\\tthis.maxY = java.lang.Double.NaN;\\n-\\t\\t\\tfireSeriesChanged();\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -964,12 +783,193 @@\\n \\n \\n \\n-\\tpublic void delete(org.jfree.data.time.RegularTimePeriod period) {\\n-\\t\\tint index = getIndex(period);\\n-\\t\\tif (index >= 0) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(\\n-\\t\\t\\tindex)));\\n-\\t\\t\\tupdateBoundsForRemovedItem(item);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\tupdateBoundsForRemovedItem(item);}}} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value) { \\t\\tadd(period, value, true);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tadd(item, notify);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\tadd(period, value, true);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tadd(item, notify);} \\tpublic void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\torg.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tint index = java.util.Collections.binarySearch(this.data, temp); \\t\\tif (index < 0) { \\t\\t\\tthrow new org.jfree.data.general.SeriesException((\\\"There is no existing value for the \\\" + \\\"specified 'period'.\\\"));} \\t\\tupdate(index, value);} \\tpublic void update(int index, java.lang.Number value) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); \\t\\tboolean iterate = false; \\t\\tjava.lang.Number oldYN = item.getValue(); \\t\\tif (oldYN != null) { \\t\\t\\tdouble oldY = oldYN.doubleValue(); \\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) { \\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));}} \\t\\titem.setValue(value); \\t\\tif (iterate) { \\t\\t\\tfindBoundsByIteration();}else \\t\\t\\tif (value != null) { \\t\\t\\t\\tdouble yy = value.doubleValue(); \\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy); \\t\\t\\t\\tthis.maxY = maxIgnoreNaN(this.maxY, yy);} \\t\\tfireSeriesChanged();} \\tpublic org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) { \\t\\torg.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries((\\\"Overwritten values from: \\\" + (getKey()))); \\t\\tfor (int i = 0; i < (series.getItemCount()); i++) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i); \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue()); \\t\\t\\tif (oldItem != null) { \\t\\t\\t\\toverwritten.add(oldItem);}} \\t\\treturn overwritten;} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) { \\t\\treturn addOrUpdate(period, new java.lang.Double(value));} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\treturn addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) { \\t\\tif (item == null) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"Null 'period' argument.\\\");} \\t\\tjava.lang.Class periodClass = item.getPeriod().getClass(); \\t\\tif ((this.timePeriodClass) == null) { \\t\\t\\tthis.timePeriodClass = periodClass;}else \\t\\t\\tif (!(this.timePeriodClass.equals(periodClass))) { \\t\\t\\t\\tjava.lang.String msg = ((((\\\"You are trying to add data where the time \\\" + \\\"period class is \\\") + (periodClass.getName())) + \\\", but the TimeSeries is expecting an instance of \\\") + (this.timePeriodClass.getName())) + \\\".\\\"; \\t\\t\\t\\tthrow new org.jfree.data.general.SeriesException(msg);} \\t\\torg.jfree.data.time.TimeSeriesDataItem overwritten = null; \\t\\tint index = java.util.Collections.binarySearch(this.data, item); \\t\\tif (index >= 0) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); \\t\\t\\toverwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone())); \\t\\t\\tboolean iterate = false; \\t\\t\\tjava.lang.Number oldYN = existing.getValue(); \\t\\t\\tdouble oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN; \\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) { \\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));} \\t\\t\\texisting.setValue(item.getValue()); \\t\\t\\tif (iterate) { \\t\\t\\t\\tfindBoundsByIteration();}else \\t\\t\\t\\tif ((item.getValue()) != null) { \\t\\t\\t\\t\\tdouble yy = item.getValue().doubleValue(); \\t\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy); \\t\\t\\t\\t\\tthis.maxY = minIgnoreNaN(this.maxY, yy);}}else { \\t\\t\\titem = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone())); \\t\\t\\tthis.data.add(((-index) - 1), item); \\t\\t\\tupdateBoundsForAddedItem(item); \\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) { \\t\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0))); \\t\\t\\t\\tupdateBoundsForRemovedItem(d);}} \\t\\tremoveAgedItems(false); \\t\\tfireSeriesChanged(); \\t\\treturn overwritten;} \\tpublic void removeAgedItems(boolean notify) { \\t\\tif ((getItemCount()) > 1) { \\t\\t\\tlong latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex(); \\t\\t\\tboolean removed = false; \\t\\t\\twhile ((latest - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge)) { \\t\\t\\t\\tthis.data.remove(0); \\t\\t\\t\\tremoved = true;} \\t\\t\\tif (removed) { \\t\\t\\t\\tfindBoundsByIteration(); \\t\\t\\t\\tif (notify) { \\t\\t\\t\\t\\tfireSeriesChanged();}}}} \\tpublic void removeAgedItems(long latest, boolean notify) { \\t\\tif (this.data.isEmpty()) { \\t\\t\\treturn;} \\t\\tlong index = java.lang.Long.MAX_VALUE; \\t\\ttry { \\t\\t\\tjava.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(\\\"createInstance\\\", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class }); \\t\\t\\torg.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() }))); \\t\\t\\tindex = newest.getSerialIndex();} catch (java.lang.NoSuchMethodException e) { \\t\\t\\te.printStackTrace();} catch (java.lang.IllegalAccessException e) { \\t\\t\\te.printStackTrace();} catch (java.lang.reflect.InvocationTargetException e) { \\t\\t\\te.printStackTrace();} \\t\\tboolean removed = false; \\t\\twhile (((getItemCount()) > 0) && ((index - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) { \\t\\t\\tthis.data.remove(0); \\t\\t\\tremoved = true;} \\t\\tif (removed) { \\t\\t\\tfindBoundsByIteration(); \\t\\t\\tif (notify) { \\t\\t\\t\\tfireSeriesChanged();}}} \\tpublic void clear() { \\t\\tif ((this.data.size()) > 0) { \\t\\t\\tthis.data.clear(); \\t\\t\\tthis.timePeriodClass = null; \\t\\t\\tthis.minY = java.lang.Double.NaN; \\t\\t\\tthis.maxY = java.lang.Double.NaN; \\t\\t\\tfireSeriesChanged();}} \\tpublic void delete(org.jfree.data.time.RegularTimePeriod period) { \\t\\tint index = getIndex(period); \\t\\tif (index >= 0) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index))); \\t\\t\\tupdateBoundsForRemovedItem(item);\\n \\t\\t\\tif (this.data.isEmpty()) {\\n \\t\\t\\t\\tthis.timePeriodClass = null;\\n \\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "fireSeriesChanged()", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "updateBoundsForRemovedItem(item)", "INGREDIENT_PARENT": "updateBoundsForRemovedItem(item)", "LOCATION": "org.jfree.data.time.TimeSeries", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_3\\/.\\/output_astor\\/AstorMain-Chart-3\\/\\/src\\/\\/variant-486_f\\/org\\/jfree\\/data\\/time\\/TimeSeries.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_3\\/output_astor\\/AstorMain-Chart-3\\/src\\/default\\/org\\/jfree\\/data\\/time\\/TimeSeries.java", "LINE": "638", "MP_RANKING": "59", "SUSPICIOUNESS": "0.123", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "243", "VARIANT_ID": "486", "TIME": "90", "VALIDATION": "|true|0|4390|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_3\\/.\\/output_astor\\/AstorMain-Chart-3\\/\\/bin\\/\\/variant-486"}]}}, {"bug_id": "3", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 10:54:46.256791", "repair_begin": "2018-12-02 10:41:15.907882", "patches": [{"edits": [{"path": "source/org/jfree/data/time/TimeSeries.java", "line": 429, "faulty": "return (TimeSeriesDataItem)this.data.get(index);", "type": "InsertBefore", "seed": "findBoundsByIteration();"}], "patch": "--- /tmp/RSRepair_Defects4J_Chart_3/source/org/jfree/data/time/TimeSeries.java\t2018-12-02 04:41:05.528300711 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_3/patches_cydy/Patch_82/patched/tmp/RSRepair_Defects4J_Chart_3/source/org/jfree/data/time/TimeSeries.java\t2018-12-02 04:44:51.989869487 -0500\n@@ -426,7 +426,8 @@\n      * @since 1.0.14\n      */\n     TimeSeriesDataItem getRawDataItem(int index) {\n-        return (TimeSeriesDataItem) this.data.get(index);\n+        findBoundsByIteration();\n+\t\treturn (TimeSeriesDataItem) this.data.get(index);\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "4", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-29 00:04:39.053276", "repair_begin": "2018-11-28 23:54:01.025604", "patches": [{"nb_test_that_execute_statement": 18, "patchLocation": {"line": 1607, "class": "org.jfree.chart.plot.XYPlot"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -1606,3 +1606,5 @@\n     public void setRenderer(XYItemRenderer renderer) {\n-        setRenderer(0, renderer);\n+        if (renderer!=null) {\n+            setRenderer(0, renderer);\n+        }\n     }\n"}]}}, {"bug_id": "4", "tool": "NPEFix", "nb_patch": 35, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2019-05-05 03:47:19.902080", "repair_begin": "2019-05-05 03:37:53.642732", "patches": [{"locations": [{"executionCount": 0, "line": 4493, "class": "org.jfree.chart.plot.XYPlot", "sourceStart": 160968, "sourceEnd": 160968}], "patch": "--- org/jfree/chart/plot/XYPlot.java\n+++ org/jfree/chart/plot/XYPlot.java\n@@ -4492,3 +4492,10 @@\n                 \n-                    Collection c = r.getAnnotations();\n+                    } else {\n+                        Collec;\n+                        if (r == null) {\n+                            ction c = new XYLineAndShapeRenderer().getAnnotations();\n+                        } else {\n+                            ction c = r.getAnnotations();\n+                        }\n+                    }\n                     Iterator i = c.iterator();\n"}]}}, {"bug_id": "5", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 22:20:00.102281", "repair_begin": "2018-12-01 22:19:14.503663", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 563, "class": "org.jfree.data.xy.XYSeries"}, "patchType": "CONDITIONAL", "patch": "--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -562,3 +562,3 @@\n             // append the value to the list...\n-            if (this.autoSort) {\n+            if (false) {\n                 this.data.add(-index - 1, new XYDataItem(x, y));\n"}]}}, {"bug_id": "5", "tool": "GenProg-A", "nb_patch": 3, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 09:07:50.371381", "repair_begin": "2018-12-02 08:35:51.800104", "patches": [{"edits": [{"path": "source/org/jfree/data/xy/XYSeries.java", "line": 541, "faulty": "if (x == null) {\n  throw new IllegalArgumentException(\"Null 'x' argument.\");\n}", "type": "Delete", "seed": "for (int s=0; s < this.data.size(); s++) {\n  XYSeries series=(XYSeries)this.data.get(s);\n  if (series.getY(series.indexOf(x)) != null) {\n    return false;\n  }\n}"}, {"path": "source/org/jfree/data/xy/XYSeries.java", "line": 541, "faulty": "if (x == null) {\n  throw new IllegalArgumentException(\"Null 'x' argument.\");\n}", "type": "Delete", "seed": "for (int s=0; s < this.data.size(); s++) {\n  XYSeries series=(XYSeries)this.data.get(s);\n  if (series.getY(series.indexOf(x)) != null) {\n    return false;\n  }\n}"}, {"path": "source/org/jfree/data/xy/XYSeries.java", "line": 575, "faulty": "return overwritten;", "type": "InsertBefore", "seed": "int seriesCount=this.data.size();"}, {"path": "source/org/jfree/data/xy/XYSeries.java", "line": 564, "faulty": "this.data.add(-index - 1,new XYDataItem(x,y));", "type": "Replace", "seed": "this.data.add(new XYDataItem(x,y));"}], "patch": "--- /tmp/GenProg_Defects4J_Chart_5/source/org/jfree/data/xy/XYSeries.java\t2018-12-02 02:35:42.719931504 -0500\n+++ /tmp/GenProg_Defects4J_Chart_5/patches_4pgo/Patch_475/patched/tmp/GenProg_Defects4J_Chart_5/source/org/jfree/data/xy/XYSeries.java\t2018-12-02 02:48:34.008006427 -0500\n@@ -538,10 +538,6 @@\n      *         item was overwritten.\n      */\n     public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n         // if we get to here, we know that duplicate X values are not permitted\n         XYDataItem overwritten = null;\n         int index = indexOf(x);\n@@ -561,7 +557,7 @@\n             // new item...otherwise it will be just -1 and we should just\n             // append the value to the list...\n             if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n+                this.data.add(new XYDataItem(x, y));\n             }\n             else {\n                 this.data.add(new XYDataItem(x, y));\n@@ -572,7 +568,8 @@\n             }\n         }\n         fireSeriesChanged();\n-        return overwritten;\n+        int seriesCount = this.data.size();\n+\t\treturn overwritten;\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "5", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-30 22:16:22.221602", "repair_begin": "2018-11-30 22:14:33.046574", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/xy\\/XYSeries.java\\n+++ org\\/jfree\\/data\\/xy\\/XYSeries.java\\n@@ -561,10 +561,10 @@\\n \\n \\n \\t\\t\\tif (this.autoSort) {\\n-\\t\\t\\t\\tthis.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x, y));\\n-\\t\\t\\t}else \\n-\\t\\t\\t{\\n-\\t\\t\\t\\tthis.data.add(new org.jfree.data.xy.XYDataItem(x, y));\\n+\\n+\\n+\\n+\\t\\t\\t\\tthis.data.add(new org.jfree.data.xy.XYDataItem(x, y));}else { \\t\\t\\t\\tthis.data.add(new org.jfree.data.xy.XYDataItem(x, y));\\n \\t\\t\\t}\\n \\n \\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "this.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x, y))", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "this.data.add(new org.jfree.data.xy.XYDataItem(x, y))", "INGREDIENT_PARENT": "this.data.add(new org.jfree.data.xy.XYDataItem(x, y))", "LOCATION": "org.jfree.data.xy.XYSeries", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_5\\/.\\/output_astor\\/AstorMain-Chart-5\\/\\/src\\/\\/variant-456_f\\/org\\/jfree\\/data\\/xy\\/XYSeries.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_5\\/output_astor\\/AstorMain-Chart-5\\/src\\/default\\/org\\/jfree\\/data\\/xy\\/XYSeries.java", "LINE": "564", "MP_RANKING": "0", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "228", "VARIANT_ID": "456", "TIME": "61", "VALIDATION": "|true|0|4081|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_5\\/.\\/output_astor\\/AstorMain-Chart-5\\/\\/bin\\/\\/variant-456"}]}}, {"bug_id": "5", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-07 01:58:14.665862", "repair_begin": "2018-12-07 01:57:20.785100", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/xy\\/XYSeries.java\\n+++ org\\/jfree\\/data\\/xy\\/XYSeries.java\\n@@ -560,7 +560,7 @@\\n \\n \\n \\n-\\t\\t\\tif (this.autoSort) {\\n+\\t\\t\\tif (false) {\\n \\t\\t\\t\\tthis.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x, y));\\n \\t\\t\\t}else \\n \\t\\t\\t{\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (this.autoSort) {\\n\\tthis.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x, y));\\n}else \\n{\\n\\tthis.data.add(new org.jfree.data.xy.XYDataItem(x, y));\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tthis.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x, y));\\n}else \\n{\\n\\tthis.data.add(new org.jfree.data.xy.XYDataItem(x, y));\\n}", "LOCATION": "org.jfree.data.xy.XYSeries", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Chart_5\\/.\\/output_astor\\/AstorMain-Chart-5\\/\\/src\\/\\/variant-4_f\\/org\\/jfree\\/data\\/xy\\/XYSeries.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Chart_5\\/output_astor\\/AstorMain-Chart-5\\/src\\/default\\/org\\/jfree\\/data\\/xy\\/XYSeries.java", "LINE": "563", "MP_RANKING": "2", "SUSPICIOUNESS": "0.471", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "4", "TIME": "1", "VALIDATION": "|true|0|4081|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Chart_5\\/.\\/output_astor\\/AstorMain-Chart-5\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "5", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 00:59:36.234952", "repair_begin": "2018-12-02 00:58:04.101145", "patches": [{"edits": [{"path": "source/org/jfree/data/xy/XYSeries.java", "line": 563, "faulty": "if (this.autoSort) {\n  this.data.add(-index - 1,new XYDataItem(x,y));\n}\n else {\n  this.data.add(new XYDataItem(x,y));\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Chart_5/source/org/jfree/data/xy/XYSeries.java\t2018-12-01 18:57:57.662993256 -0500\n+++ /tmp/Kali_Defects4J_Chart_5/patches_ifcn/Patch_2/patched/tmp/Kali_Defects4J_Chart_5/source/org/jfree/data/xy/XYSeries.java\t2018-12-01 18:59:35.858996573 -0500\n@@ -560,7 +560,7 @@\n             // Collections.binarySearch() and tells us where to insert the\n             // new item...otherwise it will be just -1 and we should just\n             // append the value to the list...\n-            if (this.autoSort) {\n+            if (false) {\n                 this.data.add(-index - 1, new XYDataItem(x, y));\n             }\n             else {\n\n\n"}]}}, {"bug_id": "5", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-28 23:55:05.746945", "repair_begin": "2018-11-28 23:54:13.675332", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 563, "class": "org.jfree.data.xy.XYSeries"}, "patchType": "CONDITIONAL", "patch": "--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -562,3 +562,3 @@\n             // append the value to the list...\n-            if (this.autoSort) {\n+            if (overwritten!=null) {\n                 this.data.add(-index - 1, new XYDataItem(x, y));\n"}]}}, {"bug_id": "5", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 10:54:10.836799", "repair_begin": "2018-12-02 10:40:13.446792", "patches": [{"edits": [{"path": "source/org/jfree/data/xy/XYSeries.java", "line": 563, "faulty": "if (this.autoSort) {\n  this.data.add(-index - 1,new XYDataItem(x,y));\n}\n else {\n  this.data.add(new XYDataItem(x,y));\n}", "type": "Replace", "seed": "this.data.add(new XYDataItem(x,y));"}], "patch": "--- /tmp/RSRepair_Defects4J_Chart_5/source/org/jfree/data/xy/XYSeries.java\t2018-12-02 04:40:02.749290065 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_5/patches_fppt/Patch_78/patched/tmp/RSRepair_Defects4J_Chart_5/source/org/jfree/data/xy/XYSeries.java\t2018-12-02 04:43:57.725940936 -0500\n@@ -556,16 +556,7 @@\n             existing.setY(y);\n         }\n         else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n+            this.data.add(new XYDataItem(x, y));\n             // check if this addition will exceed the maximum item count...\n             if (getItemCount() > this.maximumItemCount) {\n                 this.data.remove(0);\n\n\n"}]}}, {"bug_id": "6", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-29 03:13:37.635141", "repair_begin": "2018-12-29 03:11:21.215519", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/util\\/ShapeList.java\\n+++ org\\/jfree\\/chart\\/util\\/ShapeList.java\\n@@ -78,7 +78,7 @@\\n \\n \\n \\tpublic void setShape(int index, java.awt.Shape shape) {\\n-\\t\\tset(index, shape);\\n+\\t\\tset(org.jfree.chart.util.AbstractObjectList.DEFAULT_INITIAL_CAPACITY, shape);\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "set(index, shape)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "set(org.jfree.chart.util.AbstractObjectList.DEFAULT_INITIAL_CAPACITY, shape)", "INGREDIENT_PARENT": "set(_int_0, _Shape_1)", "LOCATION": "org.jfree.chart.util.ShapeList", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_6\\/.\\/output_astor\\/AstorMain-Chart-6\\/\\/src\\/\\/variant-392_f\\/org\\/jfree\\/chart\\/util\\/ShapeList.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_6\\/output_astor\\/AstorMain-Chart-6\\/src\\/default\\/org\\/jfree\\/chart\\/util\\/ShapeList.java", "LINE": "81", "MP_RANKING": "28", "SUSPICIOUNESS": "0.243", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "196", "VARIANT_ID": "392", "TIME": "82", "VALIDATION": "|true|0|3789|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Chart_6\\/.\\/output_astor\\/AstorMain-Chart-6\\/\\/bin\\/\\/variant-392"}]}}, {"bug_id": "7", "tool": "ARJA", "nb_patch": 32, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 14:26:39.226044", "repair_begin": "2018-12-01 14:18:47.726520", "patches": [{"edits": [{"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 317, "faulty": "this.minEndIndex=index;", "type": "Replace", "seed": "this.data.remove(index);"}, {"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 205, "faulty": "return (TimePeriodValue)this.data.get(index);", "type": "Replace", "seed": "return (TimePeriodValue)this.data.get(index);"}], "patch": "--- /tmp/Arja_Defects4J_Chart_7/source/org/jfree/data/time/TimePeriodValues.java\t2018-12-01 08:18:41.580888616 -0500\n+++ /tmp/Arja_Defects4J_Chart_7/patches_f8u6/Patch_1017/patched/tmp/Arja_Defects4J_Chart_7/source/org/jfree/data/time/TimePeriodValues.java\t2018-12-01 08:23:44.045108543 -0500\n@@ -314,7 +314,7 @@\n             long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n                 .getTime();\n             if (end < minEnd) {\n-                this.minEndIndex = index;           \n+                this.data.remove(index);           \n             }\n         }\n         else {\n\n\n"}]}}, {"bug_id": "7", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-30 22:17:46.518917", "repair_begin": "2018-11-30 22:14:47.021451", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/time\\/TimePeriodValues.java\\n+++ org\\/jfree\\/data\\/time\\/TimePeriodValues.java\\n@@ -549,23 +549,23 @@\\n \\n \\n \\tpublic int getMaxMiddleIndex() {\\n-\\t\\treturn this.maxMiddleIndex;\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic int getMinEndIndex() {\\n-\\t\\treturn this.minEndIndex;\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic int getMaxEndIndex() {\\n-\\t\\treturn this.maxEndIndex;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\treturn this.maxEndIndex;} \\tpublic int getMinEndIndex() { \\t\\treturn this.minEndIndex;} \\tpublic int getMaxEndIndex() { \\t\\treturn this.maxEndIndex;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return this.maxMiddleIndex", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return this.maxEndIndex", "INGREDIENT_PARENT": "return this.maxEndIndex", "LOCATION": "org.jfree.data.time.TimePeriodValues", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_7\\/.\\/output_astor\\/AstorMain-Chart-7\\/\\/src\\/\\/variant-940_f\\/org\\/jfree\\/data\\/time\\/TimePeriodValues.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_7\\/output_astor\\/AstorMain-Chart-7\\/src\\/default\\/org\\/jfree\\/data\\/time\\/TimePeriodValues.java", "LINE": "552", "MP_RANKING": "0", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "470", "VARIANT_ID": "940", "TIME": "134", "VALIDATION": "|true|0|3641|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_7\\/.\\/output_astor\\/AstorMain-Chart-7\\/\\/bin\\/\\/variant-940"}]}}, {"bug_id": "7", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-07 20:08:17.670692", "repair_begin": "2018-12-07 20:07:00.726681", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/time\\/TimePeriodValues.java\\n+++ org\\/jfree\\/data\\/time\\/TimePeriodValues.java\\n@@ -282,7 +282,7 @@\\n \\t\\t\\tthis.maxStartIndex = index;\\n \\t\\t}\\n \\n-\\t\\tif ((this.minMiddleIndex) >= 0) {\\n+\\t\\tif ((this.minMiddleIndex) == 0) {\\n \\t\\t\\tlong s = getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();\\n \\n \\t\\t\\tlong e = getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(this.minMiddleIndex) >= 0", "PATCH_HUNK_CODE": "(this.minMiddleIndex) == 0", "LOCATION": "org.jfree.data.time.TimePeriodValues", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Chart_7\\/.\\/output_astor\\/AstorMain-Chart-7\\/\\/src\\/\\/variant-38_f\\/org\\/jfree\\/data\\/time\\/TimePeriodValues.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Chart_7\\/output_astor\\/AstorMain-Chart-7\\/src\\/default\\/org\\/jfree\\/data\\/time\\/TimePeriodValues.java", "LINE": "285", "MP_RANKING": "6", "SUSPICIOUNESS": "0.226", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "38", "TIME": "11", "VALIDATION": "|true|0|3641|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Chart_7\\/.\\/output_astor\\/AstorMain-Chart-7\\/\\/bin\\/\\/variant-38"}]}}, {"bug_id": "7", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 10:44:38.328787", "repair_begin": "2018-12-02 10:38:27.162888", "patches": [{"edits": [{"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 317, "faulty": "this.minEndIndex=index;", "type": "Replace", "seed": "this.data.remove(index);"}], "patch": "--- /tmp/RSRepair_Defects4J_Chart_7/source/org/jfree/data/time/TimePeriodValues.java\t2018-12-02 04:38:17.586295556 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_7/patches_qs8i/Patch_397/patched/tmp/RSRepair_Defects4J_Chart_7/source/org/jfree/data/time/TimePeriodValues.java\t2018-12-02 04:42:32.908198162 -0500\n@@ -314,7 +314,7 @@\n             long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n                 .getTime();\n             if (end < minEnd) {\n-                this.minEndIndex = index;           \n+                this.data.remove(index);           \n             }\n         }\n         else {\n\n\n"}]}}, {"bug_id": "8", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 22:19:56.355486", "repair_begin": "2018-12-01 22:19:28.887500", "patches": [{"nb_test_that_execute_statement": 46, "patchLocation": {"line": 413, "class": "org.jfree.data.time.Week"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/data/time/Week.java\n+++ b/source/org/jfree/data/time/Week.java\n@@ -412,3 +412,5 @@\n         c.set(Calendar.SECOND, 0);\n-        c.set(Calendar.MILLISECOND, 0);\n+        if (true) {\n+            c.set(Calendar.MILLISECOND, 0);\n+        }\n         //return c.getTimeInMillis();  // this won't work for JDK 1.3\n"}]}}, {"bug_id": "9", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-28 23:51:57.751126", "repair_begin": "2018-11-28 23:51:25.259472", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 883, "class": "org.jfree.data.time.TimeSeries"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -882,3 +882,5 @@\n         if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n+            if (org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()) {\n+                throw new IllegalArgumentException(\"Requires start <= end.\");\n+            }\n         }\n"}]}}, {"bug_id": "11", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-29 03:09:41.450931", "repair_begin": "2018-12-29 03:08:20.847187", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/util\\/ShapeUtilities.java\\n+++ org\\/jfree\\/chart\\/util\\/ShapeUtilities.java\\n@@ -271,7 +271,7 @@\\n \\t\\tif ((p1.getWindingRule()) != (p2.getWindingRule())) {\\n \\t\\t\\treturn false;\\n \\t\\t}\\n-\\t\\tjava.awt.geom.PathIterator iterator1 = p1.getPathIterator(null);\\n+\\t\\tjava.awt.geom.PathIterator iterator1 = p2.getPathIterator(null);\\n \\t\\tjava.awt.geom.PathIterator iterator2 = p1.getPathIterator(null);\\n \\t\\tdouble[] d1 = new double[6];\\n \\t\\tdouble[] d2 = new double[6];\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtLocalVariableImpl", "ORIGINAL_CODE": "p1.getPathIterator(null)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "p2.getPathIterator(null)", "INGREDIENT_PARENT": "_GeneralPath_0.getPathIterator(null)", "LOCATION": "org.jfree.chart.util.ShapeUtilities", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_11\\/.\\/output_astor\\/AstorMain-Chart-11\\/\\/src\\/\\/variant-20_f\\/org\\/jfree\\/chart\\/util\\/ShapeUtilities.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_11\\/output_astor\\/AstorMain-Chart-11\\/src\\/default\\/org\\/jfree\\/chart\\/util\\/ShapeUtilities.java", "LINE": "274", "MP_RANKING": "11", "SUSPICIOUNESS": "0.204", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtLocalVariableImpl"}], "GENERATION": "10", "VARIANT_ID": "20", "TIME": "24", "VALIDATION": "|true|0|3621|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Chart_11\\/.\\/output_astor\\/AstorMain-Chart-11\\/\\/bin\\/\\/variant-20"}]}}, {"bug_id": "12", "tool": "ARJA", "nb_patch": 196, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 14:58:22.800243", "repair_begin": "2018-12-01 14:17:23.980531", "patches": [{"edits": [{"path": "source/org/jfree/chart/JFreeChart.java", "line": 962, "faulty": "fireChartChanged();", "type": "Replace", "seed": "if (plot == null) {\n  throw new NullPointerException(\"Null 'plot' argument.\");\n}"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 644, "faulty": "Title subtitle=(Title)iterator.next();", "type": "InsertBefore", "seed": "this.title=title;"}, {"path": "source/org/jfree/data/general/AbstractDataset.java", "line": 161, "faulty": "return list.contains(listener);", "type": "Replace", "seed": "return true;"}], "patch": "--- /tmp/Arja_Defects4J_Chart_12/source/org/jfree/chart/JFreeChart.java\t2018-12-01 08:17:07.210870065 -0500\n+++ /tmp/Arja_Defects4J_Chart_12/patches_pie9/Patch_1475/patched/tmp/Arja_Defects4J_Chart_12/source/org/jfree/chart/JFreeChart.java\t2018-12-01 08:48:15.629613232 -0500\n@@ -641,7 +641,8 @@\n         int seen = 0;\n         Iterator iterator = this.subtitles.iterator();\n         while (iterator.hasNext()) {\n-            Title subtitle = (Title) iterator.next();\n+            this.title = title;\n+\t\t\tTitle subtitle = (Title) iterator.next();\n             if (subtitle instanceof LegendTitle) {\n                 if (seen == index) {\n                     return (LegendTitle) subtitle;\n@@ -959,7 +960,9 @@\n         if (this.backgroundPaint != null) {\n             if (!this.backgroundPaint.equals(paint)) {\n                 this.backgroundPaint = paint;\n-                fireChartChanged();\n+                if (plot == null) {\n+\t\t\t\t\tthrow new NullPointerException(\"Null 'plot' argument.\");\n+\t\t\t\t}\n             }\n         }\n         else {\n\n\n--- /tmp/Arja_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-01 08:17:07.710870085 -0500\n+++ /tmp/Arja_Defects4J_Chart_12/patches_pie9/Patch_1475/patched/tmp/Arja_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-01 08:48:15.629613232 -0500\n@@ -158,7 +158,7 @@\n      */\n     public boolean hasListener(EventListener listener) {\n         List list = Arrays.asList(this.listenerList.getListenerList());\n-        return list.contains(listener);\n+        return true;\n     }\n     \n     /**\n\n\n"}]}}, {"bug_id": "12", "tool": "GenProg-A", "nb_patch": 11, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 09:06:02.423618", "repair_begin": "2018-12-02 08:37:00.637297", "patches": [{"edits": [{"path": "source/org/jfree/chart/JFreeChart.java", "line": 795, "faulty": "this.subtitles.remove(title);", "type": "Delete", "seed": "notifyListeners(new ChartProgressEvent(this,this,ChartProgressEvent.DRAWING_STARTED,0));"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 664, "faulty": "removeSubtitle(getLegend());", "type": "InsertBefore", "seed": "boolean separator=false;"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 578, "faulty": "fireChartChanged();", "type": "InsertBefore", "seed": "this.padding=RectangleInsets.ZERO_INSETS;"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 795, "faulty": "this.subtitles.remove(title);", "type": "Delete", "seed": "if (title != null) {\n  title.addChangeListener(this);\n}"}, {"path": "source/org/jfree/data/general/AbstractDataset.java", "line": 160, "faulty": "List list=Arrays.asList(this.listenerList.getListenerList());", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/general/AbstractDataset.java", "line": 161, "faulty": "return list.contains(listener);", "type": "Replace", "seed": "return true;"}], "patch": "--- /tmp/GenProg_Defects4J_Chart_12/source/org/jfree/chart/JFreeChart.java\t2018-12-02 02:36:47.075168785 -0500\n+++ /tmp/GenProg_Defects4J_Chart_12/patches_ilme/Patch_1104/patched/tmp/GenProg_Defects4J_Chart_12/source/org/jfree/chart/JFreeChart.java\t2018-12-02 03:04:29.602168522 -0500\n@@ -575,7 +575,8 @@\n         if (title != null) {\n             title.addChangeListener(this);\n         }\n-        fireChartChanged();\n+        this.padding = RectangleInsets.ZERO_INSETS;\n+\t\tfireChartChanged();\n     }\n \n     /**\n@@ -661,7 +662,8 @@\n      * @see #getLegend()\n      */\n     public void removeLegend() {\n-        removeSubtitle(getLegend());\n+        boolean separator = false;\n+\t\tremoveSubtitle(getLegend());\n     }\n     \n     /**\n@@ -792,7 +794,6 @@\n      * @see #addSubtitle(Title)\n      */\n     public void removeSubtitle(Title title) {\n-        this.subtitles.remove(title);\n         fireChartChanged();\n     }\n     \n\n\n--- /tmp/GenProg_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-02 02:36:47.443170342 -0500\n+++ /tmp/GenProg_Defects4J_Chart_12/patches_ilme/Patch_1104/patched/tmp/GenProg_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-02 03:04:29.602168522 -0500\n@@ -157,8 +157,7 @@\n      * @see #removeChangeListener(DatasetChangeListener)\n      */\n     public boolean hasListener(EventListener listener) {\n-        List list = Arrays.asList(this.listenerList.getListenerList());\n-        return list.contains(listener);\n+        return true;\n     }\n     \n     /**\n\n\n"}]}}, {"bug_id": "12", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 00:57:13.446480", "repair_begin": "2018-12-02 00:54:22.904119", "patches": [{"edits": [{"path": "source/org/jfree/data/general/AbstractDataset.java", "line": 160, "faulty": "List list=Arrays.asList(this.listenerList.getListenerList());", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-01 18:54:08.475122910 -0500\n+++ /tmp/Kali_Defects4J_Chart_12/patches_kb09/Patch_19/patched/tmp/Kali_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-01 18:57:13.067493125 -0500\n@@ -157,7 +157,9 @@\n      * @see #removeChangeListener(DatasetChangeListener)\n      */\n     public boolean hasListener(EventListener listener) {\n-        List list = Arrays.asList(this.listenerList.getListenerList());\n+        if (true)\n+\t\t\treturn true;\n+\t\tList list = Arrays.asList(this.listenerList.getListenerList());\n         return list.contains(listener);\n     }\n     \n\n\n"}]}}, {"bug_id": "12", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 10:57:14.761662", "repair_begin": "2018-12-02 10:37:01.656975", "patches": [{"edits": [{"path": "source/org/jfree/data/general/AbstractDataset.java", "line": 161, "faulty": "return list.contains(listener);", "type": "Replace", "seed": "return true;"}], "patch": "--- /tmp/RSRepair_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-02 04:36:47.678081363 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_12/patches_ilic/Patch_135/patched/tmp/RSRepair_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-02 04:41:56.859336399 -0500\n@@ -158,7 +158,7 @@\n      */\n     public boolean hasListener(EventListener listener) {\n         List list = Arrays.asList(this.listenerList.getListenerList());\n-        return list.contains(listener);\n+        return true;\n     }\n     \n     /**\n\n\n"}]}}, {"bug_id": "13", "tool": "ARJA", "nb_patch": 172, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 14:28:22.050680", "repair_begin": "2018-12-01 14:16:37.626999", "patches": [{"edits": [{"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 279, "faulty": "RectangleConstraint c1=new RectangleConstraint(width,null,LengthConstraintType.FIXED,0.0,null,LengthConstraintType.NONE);", "type": "InsertBefore", "seed": "w[1]=w[0];"}, {"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 314, "faulty": "if (this.centerBlock != null) {\n  RectangleConstraint c4=new RectangleConstraint(width - w[2] - w[3],null,LengthConstraintType.FIXED,0.0,null,LengthConstraintType.NONE);\n  Size2D size=this.centerBlock.arrange(g2,c4);\n  w[4]=size.width;\n  h[4]=size.height;\n}", "type": "InsertBefore", "seed": "this.leftBlock=null;"}], "patch": "--- /tmp/Arja_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-01 08:16:25.168968211 -0500\n+++ /tmp/Arja_Defects4J_Chart_13/patches_4hrp/Patch_622/patched/tmp/Arja_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-01 08:22:28.736345297 -0500\n@@ -276,7 +276,8 @@\n                                double width) {\n         double[] w = new double[5];\n         double[] h = new double[5];\n-        RectangleConstraint c1 = new RectangleConstraint(width, null,\n+        w[1] = w[0];\n+\t\tRectangleConstraint c1 = new RectangleConstraint(width, null,\n                 LengthConstraintType.FIXED, 0.0, null,\n                 LengthConstraintType.NONE);\n         if (this.topBlock != null) {\n@@ -311,7 +312,8 @@\n         h[2] = Math.max(h[2], h[3]);\n         h[3] = h[2];\n \n-        if (this.centerBlock != null) {\n+        this.leftBlock = null;\n+\t\tif (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                     - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n                     LengthConstraintType.NONE);\n\n\n"}]}}, {"bug_id": "13", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-29 03:09:38.765141", "repair_begin": "2018-12-29 03:07:54.290415", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/block\\/BorderArrangement.java\\n+++ org\\/jfree\\/chart\\/block\\/BorderArrangement.java\\n@@ -441,7 +441,7 @@\\n \\t\\t\\th[1] = size.height;\\n \\t\\t}\\n \\t\\th[2] = ((constraint.getHeight()) - (h[1])) - (h[0]);\\n-\\t\\tif ((this.leftBlock) != null) {\\n+\\t\\tif (g2 == null) {\\n \\t\\t\\torg.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n \\t\\t\\tnew org.jfree.data.Range(0.0, constraint.getWidth()), \\n \\t\\t\\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(this.leftBlock) != null", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "g2 == null", "INGREDIENT_PARENT": "_Object_0 == null", "LOCATION": "org.jfree.chart.block.BorderArrangement", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_13\\/.\\/output_astor\\/AstorMain-Chart-13\\/\\/src\\/\\/variant-124_f\\/org\\/jfree\\/chart\\/block\\/BorderArrangement.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_13\\/output_astor\\/AstorMain-Chart-13\\/src\\/default\\/org\\/jfree\\/chart\\/block\\/BorderArrangement.java", "LINE": "444", "MP_RANKING": "70", "SUSPICIOUNESS": "0.816", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "62", "VARIANT_ID": "124", "TIME": "46", "VALIDATION": "|true|0|3597|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Chart_13\\/.\\/output_astor\\/AstorMain-Chart-13\\/\\/bin\\/\\/variant-124"}]}}, {"bug_id": "13", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 22:19:15.601379", "repair_begin": "2018-12-01 22:18:47.116812", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 453, "class": "org.jfree.chart.block.BorderArrangement"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,9 +452,11 @@\n         h[3] = h[2];\n-        if (this.rightBlock != null) {\n-            RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth() - w[2]),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.rightBlock.arrange(g2, c4);\n-            w[3] = size.width;\n+        if (false) {\n+            if (this.rightBlock != null) {\n+                RectangleConstraint c4 = new RectangleConstraint(0.0,\n+                new Range(0.0, constraint.getWidth() - w[2]),\n+                LengthConstraintType.RANGE, h[2], null,\n+                LengthConstraintType.FIXED);\n+                Size2D size = this.rightBlock.arrange(g2, c4);\n+                w[3] = size.width;\n+            }\n         }\n"}]}}, {"bug_id": "13", "tool": "GenProg-A", "nb_patch": 35, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 08:39:28.249961", "repair_begin": "2018-12-02 08:35:29.725524", "patches": [{"edits": [{"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 444, "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", "type": "Delete", "seed": "Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);"}], "patch": "--- /tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:35:20.605941475 -0500\n+++ /tmp/GenProg_Defects4J_Chart_13/patches_7fn9/Patch_267/patched/tmp/GenProg_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 02:38:43.610722509 -0500\n@@ -441,14 +441,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n\n\n"}]}}, {"bug_id": "13", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-30 22:15:24.638567", "repair_begin": "2018-11-30 22:14:15.659565", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/block\\/BorderArrangement.java\\n+++ org\\/jfree\\/chart\\/block\\/BorderArrangement.java\\n@@ -441,14 +441,14 @@\\n \\t\\t\\th[1] = size.height;\\n \\t\\t}\\n \\t\\th[2] = ((constraint.getHeight()) - (h[1])) - (h[0]);\\n-\\t\\tif ((this.leftBlock) != null) {\\n-\\t\\t\\torg.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n-\\t\\t\\tnew org.jfree.data.Range(0.0, constraint.getWidth()), \\n-\\t\\t\\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \\n-\\t\\t\\torg.jfree.chart.block.LengthConstraintType.FIXED);\\n-\\t\\t\\torg.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c3);\\n-\\t\\t\\tw[2] = size.width;\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\th[3] = h[2];\\n \\t\\tif ((this.rightBlock) != null) {\\n \\t\\t\\torg.jfree.chart.block.RectangleConstraint c4 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((this.leftBlock) != null) {\\n\\torg.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n\\tnew org.jfree.data.Range(0.0, constraint.getWidth()), \\n\\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \\n\\torg.jfree.chart.block.LengthConstraintType.FIXED);\\n\\torg.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c3);\\n\\tw[2] = size.width;\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.jfree.chart.block.BorderArrangement", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_13\\/.\\/output_astor\\/AstorMain-Chart-13\\/\\/src\\/\\/variant-28_f\\/org\\/jfree\\/chart\\/block\\/BorderArrangement.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_13\\/output_astor\\/AstorMain-Chart-13\\/src\\/default\\/org\\/jfree\\/chart\\/block\\/BorderArrangement.java", "LINE": "444", "MP_RANKING": "37", "SUSPICIOUNESS": "0.816"}], "GENERATION": "14", "VARIANT_ID": "28", "TIME": "19", "VALIDATION": "|true|0|3597|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_13\\/.\\/output_astor\\/AstorMain-Chart-13\\/\\/bin\\/\\/variant-28"}]}}, {"bug_id": "13", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-07 01:52:42.390334", "repair_begin": "2018-12-07 01:51:18.490956", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/block\\/BorderArrangement.java\\n+++ org\\/jfree\\/chart\\/block\\/BorderArrangement.java\\n@@ -441,7 +441,7 @@\\n \\t\\t\\th[1] = size.height;\\n \\t\\t}\\n \\t\\th[2] = ((constraint.getHeight()) - (h[1])) - (h[0]);\\n-\\t\\tif ((this.leftBlock) != null) {\\n+\\t\\tif (false) {\\n \\t\\t\\torg.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n \\t\\t\\tnew org.jfree.data.Range(0.0, constraint.getWidth()), \\n \\t\\t\\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((this.leftBlock) != null) {\\n\\torg.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n\\tnew org.jfree.data.Range(0.0, constraint.getWidth()), \\n\\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \\n\\torg.jfree.chart.block.LengthConstraintType.FIXED);\\n\\torg.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c3);\\n\\tw[2] = size.width;\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\torg.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n\\tnew org.jfree.data.Range(0.0, constraint.getWidth()), \\n\\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \\n\\torg.jfree.chart.block.LengthConstraintType.FIXED);\\n\\torg.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c3);\\n\\tw[2] = size.width;\\n}", "LOCATION": "org.jfree.chart.block.BorderArrangement", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Chart_13\\/.\\/output_astor\\/AstorMain-Chart-13\\/\\/src\\/\\/variant-46_f\\/org\\/jfree\\/chart\\/block\\/BorderArrangement.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Chart_13\\/output_astor\\/AstorMain-Chart-13\\/src\\/default\\/org\\/jfree\\/chart\\/block\\/BorderArrangement.java", "LINE": "444", "MP_RANKING": "37", "SUSPICIOUNESS": "0.816", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "46", "TIME": "19", "VALIDATION": "|true|0|3597|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Chart_13\\/.\\/output_astor\\/AstorMain-Chart-13\\/\\/bin\\/\\/variant-46"}]}}, {"bug_id": "13", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-28 23:49:34.707022", "repair_begin": "2018-11-28 23:48:53.461137", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 453, "class": "org.jfree.chart.block.BorderArrangement"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,9 +452,11 @@\n         h[3] = h[2];\n-        if (this.rightBlock != null) {\n-            RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth() - w[2]),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.rightBlock.arrange(g2, c4);\n-            w[3] = size.width;\n+        if (null!=null) {\n+            if (this.rightBlock != null) {\n+                RectangleConstraint c4 = new RectangleConstraint(0.0,\n+                new Range(0.0, constraint.getWidth() - w[2]),\n+                LengthConstraintType.RANGE, h[2], null,\n+                LengthConstraintType.FIXED);\n+                Size2D size = this.rightBlock.arrange(g2, c4);\n+                w[3] = size.width;\n+            }\n         }\n"}]}}, {"bug_id": "13", "tool": "RSRepair-A", "nb_patch": 5, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 10:38:51.294463", "repair_begin": "2018-12-02 10:34:33.514836", "patches": [{"edits": [{"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 314, "faulty": "if (this.centerBlock != null) {\n  RectangleConstraint c4=new RectangleConstraint(width - w[2] - w[3],null,LengthConstraintType.FIXED,0.0,null,LengthConstraintType.NONE);\n  Size2D size=this.centerBlock.arrange(g2,c4);\n  w[4]=size.width;\n  h[4]=size.height;\n}", "type": "InsertBefore", "seed": "this.leftBlock=null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 04:34:23.767899462 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_13/patches_a9gi/Patch_26/patched/tmp/RSRepair_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-02 04:36:35.705191044 -0500\n@@ -311,7 +311,8 @@\n         h[2] = Math.max(h[2], h[3]);\n         h[3] = h[2];\n \n-        if (this.centerBlock != null) {\n+        this.leftBlock = null;\n+\t\tif (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                     - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n                     LengthConstraintType.NONE);\n\n\n"}]}}, {"bug_id": "14", "tool": "ARJA", "nb_patch": 13, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 15:16:08.542282", "repair_begin": "2018-12-01 14:16:57.754330", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/XYPlot.java", "line": 2481, "faulty": "return removeRangeMarker(0,marker,layer);", "type": "Replace", "seed": "return this.domainZeroBaselineVisible;"}, {"path": "source/org/jfree/chart/plot/Plot.java", "line": 433, "faulty": "return this.parent;", "type": "Replace", "seed": "return this.parent;"}, {"path": "source/org/jfree/chart/plot/XYPlot.java", "line": 2248, "faulty": "return removeDomainMarker(0,marker,layer);", "type": "Replace", "seed": "return false;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 2139, "faulty": "return removeDomainMarker(index,marker,layer,true);", "type": "Replace", "seed": "return this.domainGridlinesVisible;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 2378, "faulty": "return removeRangeMarker(marker,Layer.FOREGROUND);", "type": "Replace", "seed": "return false;"}], "patch": "--- /tmp/Arja_Defects4J_Chart_14/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 08:16:43.488810038 -0500\n+++ /tmp/Arja_Defects4J_Chart_14/patches_rhkx/Patch_1364/patched/tmp/Arja_Defects4J_Chart_14/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 09:08:45.213969849 -0500\n@@ -2136,7 +2136,7 @@\n      * @since 1.0.7\n      */\n     public boolean removeDomainMarker(int index, Marker marker, Layer layer) {\n-    \treturn removeDomainMarker(index, marker, layer, true);\n+    \treturn this.domainGridlinesVisible;\n     }\n \n     /**\n@@ -2375,7 +2375,7 @@\n      * @see #addRangeMarker(Marker)\n      */\n     public boolean removeRangeMarker(Marker marker) {\n-        return removeRangeMarker(marker, Layer.FOREGROUND);\n+        return false;\n     }\n \n     /**\n\n\n\n\n--- /tmp/Arja_Defects4J_Chart_14/source/org/jfree/chart/plot/XYPlot.java\t2018-12-01 08:16:43.488810038 -0500\n+++ /tmp/Arja_Defects4J_Chart_14/patches_rhkx/Patch_1364/patched/tmp/Arja_Defects4J_Chart_14/source/org/jfree/chart/plot/XYPlot.java\t2018-12-01 09:08:45.217969874 -0500\n@@ -2245,7 +2245,7 @@\n      * @since 1.0.7\n      */\n     public boolean removeDomainMarker(Marker marker, Layer layer) {\n-        return removeDomainMarker(0, marker, layer);\n+        return false;\n     }\n \n     /**\n@@ -2478,7 +2478,7 @@\n      * @since 1.0.7\n      */\n     public boolean removeRangeMarker(Marker marker, Layer layer) {\n-        return removeRangeMarker(0, marker, layer);\n+        return this.domainZeroBaselineVisible;\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "14", "tool": "NPEFix", "nb_patch": 40, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2019-05-05 03:35:49.870170", "repair_begin": "2019-05-05 03:29:03.588595", "patches": [{"locations": [{"executionCount": 0, "line": 2166, "class": "org.jfree.chart.plot.CategoryPlot", "sourceStart": 75454, "sourceEnd": 75460}], "patch": "--- org/jfree/chart/plot/CategoryPlot.java\n+++ org/jfree/chart/plot/CategoryPlot.java\n@@ -2165,3 +2165,8 @@\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed;\n+        if (markers == null) {\n+            removed = annotations.remove(marker);\n+        } else {\n+            removed = markers.remove(marker);\n+        }\n         if (removed && notify) {\n"}]}}, {"bug_id": "15", "tool": "ARJA", "nb_patch": 387, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 14:38:11.112106", "repair_begin": "2018-12-01 14:15:46.698274", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 246, "faulty": "double labelPercent=0.0;", "type": "InsertBefore", "seed": "g2.setClip(savedClip);"}, {"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 272, "faulty": "if (isCircular()) {\n  double min=Math.min(linkW,linkH) / 2;\n  linkX=(linkX + linkX + linkW) / 2 - min;\n  linkY=(linkY + linkY + linkH) / 2 - min;\n  linkW=2 * min;\n  linkH=2 * min;\n}", "type": "Replace", "seed": "if (DatasetUtilities.isEmptyOrNull(getDataset())) {\n  drawNoDataMessage(g2,plotArea);\n  g2.setClip(savedClip);\n  drawOutline(g2,plotArea);\n  return;\n}"}], "patch": "--- /tmp/Arja_Defects4J_Chart_15/source/org/jfree/chart/plot/PiePlot3D.java\t2018-12-01 08:15:31.186705575 -0500\n+++ /tmp/Arja_Defects4J_Chart_15/patches_66bc/Patch_1546/patched/tmp/Arja_Defects4J_Chart_15/source/org/jfree/chart/plot/PiePlot3D.java\t2018-12-01 08:32:52.834247547 -0500\n@@ -243,7 +243,8 @@\n \n         // adjust the plot area by the interior spacing value\n         double gapPercent = getInteriorGap();\n-        double labelPercent = 0.0;\n+        g2.setClip(savedClip);\n+\t\tdouble labelPercent = 0.0;\n         if (getLabelGenerator() != null) {\n             labelPercent = getLabelGap() + getMaximumLabelWidth();   \n         }\n@@ -268,14 +269,12 @@\n         double linkW = plotArea.getWidth() - gapHorizontal;\n         double linkH = plotArea.getHeight() - gapVertical;\n         \n-        // make the link area a square if the pie chart is to be circular...\n-        if (isCircular()) { // is circular?\n-            double min = Math.min(linkW, linkH) / 2;\n-            linkX = (linkX + linkX + linkW) / 2 - min;\n-            linkY = (linkY + linkY + linkH) / 2 - min;\n-            linkW = 2 * min;\n-            linkH = 2 * min;\n-        }\n+        if (DatasetUtilities.isEmptyOrNull(getDataset())) {\n+\t\t\tdrawNoDataMessage(g2, plotArea);\n+\t\t\tg2.setClip(savedClip);\n+\t\t\tdrawOutline(g2, plotArea);\n+\t\t\treturn;\n+\t\t}\n         \n         PiePlotState state = initialise(g2, plotArea, this, null, info);\n \n\n\n"}]}}, {"bug_id": "15", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 22:10:53.270937", "repair_begin": "2018-12-01 22:09:11.565756", "patches": [{"nb_test_that_execute_statement": 128, "patchLocation": {"line": 1219, "class": "org.jfree.chart.JFreeChart"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/JFreeChart.java\n+++ b/source/org/jfree/chart/JFreeChart.java\n@@ -1218,3 +1218,5 @@\n         }\n-        this.plot.draw(g2, plotArea, anchor, null, plotInfo);\n+        if (false) {\n+            this.plot.draw(g2, plotArea, anchor, null, plotInfo);\n+        }\n \n"}]}}, {"bug_id": "15", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-30 22:24:54.260072", "repair_begin": "2018-11-30 22:16:17.477872", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/plot\\/PiePlot3D.java\\n+++ org\\/jfree\\/chart\\/plot\\/PiePlot3D.java\\n@@ -264,78 +264,78 @@\\n \\t\\t}\\n \\n \\t\\tdouble linkX = (plotArea.getX()) + (gapHorizontal \\/ 2);\\n-\\t\\tdouble linkY = (plotArea.getY()) + (gapVertical \\/ 2);\\n-\\t\\tdouble linkW = (plotArea.getWidth()) - gapHorizontal;\\n-\\t\\tdouble linkH = (plotArea.getHeight()) - gapVertical;\\n \\n \\n-\\t\\tif (isCircular()) {\\n-\\t\\t\\tdouble min = (java.lang.Math.min(linkW, linkH)) \\/ 2;\\n-\\t\\t\\tlinkX = (((linkX + linkX) + linkW) \\/ 2) - min;\\n-\\t\\t\\tlinkY = (((linkY + linkY) + linkH) \\/ 2) - min;\\n-\\t\\t\\tlinkW = 2 * min;\\n-\\t\\t\\tlinkH = 2 * min;\\n-\\t\\t}\\n \\n-\\t\\torg.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\\n \\n \\n \\n-\\t\\tjava.awt.geom.Rectangle2D linkAreaXX = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, \\n-\\t\\t(linkH * (1 - (this.depthFactor))));\\n-\\t\\tstate.setLinkArea(linkAreaXX);\\n \\n-\\t\\tif (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\\n-\\t\\t\\tg2.setPaint(java.awt.Color.blue);\\n-\\t\\t\\tg2.draw(linkAreaXX);\\n-\\t\\t\\tg2.setPaint(java.awt.Color.yellow);\\n-\\t\\t\\tg2.draw(new java.awt.geom.Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(), \\n-\\t\\t\\tlinkAreaXX.getWidth(), linkAreaXX.getHeight()));\\n-\\t\\t}\\n \\n \\n \\n \\n-\\t\\tdouble hh = linkW * (getLabelLinkMargin());\\n-\\t\\tdouble vv = linkH * (getLabelLinkMargin());\\n-\\t\\tjava.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double((linkX + (hh \\/ 2.0)), \\n-\\t\\t(linkY + (vv \\/ 2.0)), (linkW - hh), (linkH - vv));\\n \\n-\\t\\tstate.setExplodedPieArea(explodeArea);\\n \\n \\n \\n \\n-\\t\\tdouble maximumExplodePercent = getMaximumExplodePercent();\\n-\\t\\tdouble percent = maximumExplodePercent \\/ (1.0 + maximumExplodePercent);\\n \\n-\\t\\tdouble h1 = (explodeArea.getWidth()) * percent;\\n-\\t\\tdouble v1 = (explodeArea.getHeight()) * percent;\\n-\\t\\tjava.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(((explodeArea.getX()) + \\n-\\t\\t(h1 \\/ 2.0)), ((explodeArea.getY()) + (v1 \\/ 2.0)), \\n-\\t\\t((explodeArea.getWidth()) - h1), ((explodeArea.getHeight()) - v1));\\n \\n \\n \\n-\\t\\tint depth = ((int) ((pieArea.getHeight()) * (this.depthFactor)));\\n-\\t\\tjava.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, \\n-\\t\\t(linkH - depth));\\n-\\t\\tstate.setLinkArea(linkArea);\\n \\n-\\t\\tstate.setPieArea(pieArea);\\n-\\t\\tstate.setPieCenterX(pieArea.getCenterX());\\n-\\t\\tstate.setPieCenterY(((pieArea.getCenterY()) - (depth \\/ 2.0)));\\n-\\t\\tstate.setPieWRadius(((pieArea.getWidth()) \\/ 2.0));\\n-\\t\\tstate.setPieHRadius((((pieArea.getHeight()) - depth) \\/ 2.0));\\n \\n \\n-\\t\\torg.jfree.data.general.PieDataset dataset = getDataset();\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\tif (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\\n \\t\\t\\tdrawNoDataMessage(g2, plotArea);\\n \\t\\t\\tg2.setClip(savedClip);\\n \\t\\t\\tdrawOutline(g2, plotArea);\\n \\t\\t\\treturn;\\n-\\t\\t}\\n+\\t\\t} \\t\\tdouble linkY = (plotArea.getY()) + (gapVertical \\/ 2); \\t\\tdouble linkW = (plotArea.getWidth()) - gapHorizontal; \\t\\tdouble linkH = (plotArea.getHeight()) - gapVertical; \\t\\tif (isCircular()) { \\t\\t\\tdouble min = (java.lang.Math.min(linkW, linkH)) \\/ 2; \\t\\t\\tlinkX = (((linkX + linkX) + linkW) \\/ 2) - min; \\t\\t\\tlinkY = (((linkY + linkY) + linkH) \\/ 2) - min; \\t\\t\\tlinkW = 2 * min; \\t\\t\\tlinkH = 2 * min;} \\t\\torg.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info); \\t\\tjava.awt.geom.Rectangle2D linkAreaXX = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, (linkH * (1 - (this.depthFactor)))); \\t\\tstate.setLinkArea(linkAreaXX); \\t\\tif (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) { \\t\\t\\tg2.setPaint(java.awt.Color.blue); \\t\\t\\tg2.draw(linkAreaXX); \\t\\t\\tg2.setPaint(java.awt.Color.yellow); \\t\\t\\tg2.draw(new java.awt.geom.Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(), linkAreaXX.getWidth(), linkAreaXX.getHeight()));} \\t\\tdouble hh = linkW * (getLabelLinkMargin()); \\t\\tdouble vv = linkH * (getLabelLinkMargin()); \\t\\tjava.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double((linkX + (hh \\/ 2.0)), (linkY + (vv \\/ 2.0)), (linkW - hh), (linkH - vv)); \\t\\tstate.setExplodedPieArea(explodeArea); \\t\\tdouble maximumExplodePercent = getMaximumExplodePercent(); \\t\\tdouble percent = maximumExplodePercent \\/ (1.0 + maximumExplodePercent); \\t\\tdouble h1 = (explodeArea.getWidth()) * percent; \\t\\tdouble v1 = (explodeArea.getHeight()) * percent; \\t\\tjava.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(((explodeArea.getX()) + (h1 \\/ 2.0)), ((explodeArea.getY()) + (v1 \\/ 2.0)), ((explodeArea.getWidth()) - h1), ((explodeArea.getHeight()) - v1)); \\t\\tint depth = ((int) ((pieArea.getHeight()) * (this.depthFactor))); \\t\\tjava.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, (linkH - depth)); \\t\\tstate.setLinkArea(linkArea); \\t\\tstate.setPieArea(pieArea); \\t\\tstate.setPieCenterX(pieArea.getCenterX()); \\t\\tstate.setPieCenterY(((pieArea.getCenterY()) - (depth \\/ 2.0))); \\t\\tstate.setPieWRadius(((pieArea.getWidth()) \\/ 2.0)); \\t\\tstate.setPieHRadius((((pieArea.getHeight()) - depth) \\/ 2.0)); \\t\\torg.jfree.data.general.PieDataset dataset = getDataset(); \\t\\tif (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) { \\t\\t\\tdrawNoDataMessage(g2, plotArea); \\t\\t\\tg2.setClip(savedClip); \\t\\t\\tdrawOutline(g2, plotArea); \\t\\t\\treturn;}\\n \\n \\n \\t\\tif ((dataset.getKeys().size()) > (plotArea.getWidth())) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtLocalVariableImpl|CtBlockImpl", "ORIGINAL_CODE": "double linkY = (plotArea.getY()) + (gapVertical \\/ 2)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\\n\\tdrawNoDataMessage(g2, plotArea);\\n\\tg2.setClip(savedClip);\\n\\tdrawOutline(g2, plotArea);\\n\\treturn;\\n}", "INGREDIENT_PARENT": "if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\\n\\tdrawNoDataMessage(g2, plotArea);\\n\\tg2.setClip(savedClip);\\n\\tdrawOutline(g2, plotArea);\\n\\treturn;\\n}", "LOCATION": "org.jfree.chart.plot.PiePlot3D", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_15\\/.\\/output_astor\\/AstorMain-Chart-15\\/\\/src\\/\\/variant-774_f\\/org\\/jfree\\/chart\\/plot\\/PiePlot3D.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_15\\/output_astor\\/AstorMain-Chart-15\\/src\\/default\\/org\\/jfree\\/chart\\/plot\\/PiePlot3D.java", "LINE": "267", "MP_RANKING": "20", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "387", "VARIANT_ID": "774", "TIME": "379", "VALIDATION": "|true|0|3579|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_15\\/.\\/output_astor\\/AstorMain-Chart-15\\/\\/bin\\/\\/variant-774"}]}}, {"bug_id": "15", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-07 01:57:20.370730", "repair_begin": "2018-12-07 01:50:23.868456", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/JFreeChart.java\\n+++ org\\/jfree\\/chart\\/JFreeChart.java\\n@@ -1216,7 +1216,7 @@\\n \\t\\tif (info != null) {\\n \\t\\t\\tplotInfo = info.getPlotInfo();\\n \\t\\t}\\n-\\t\\tthis.plot.draw(g2, plotArea, anchor, null, plotInfo);\\n+\\n \\n \\t\\tg2.setClip(savedClip);\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "this.plot.draw(g2, plotArea, anchor, null, plotInfo)", "LOCATION": "org.jfree.chart.JFreeChart", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Chart_15\\/.\\/output_astor\\/AstorMain-Chart-15\\/\\/src\\/\\/variant-386_f\\/org\\/jfree\\/chart\\/JFreeChart.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Chart_15\\/output_astor\\/AstorMain-Chart-15\\/src\\/default\\/org\\/jfree\\/chart\\/JFreeChart.java", "LINE": "1219", "MP_RANKING": "416", "SUSPICIOUNESS": "0.102"}], "GENERATION": "1", "VARIANT_ID": "386", "TIME": "348", "VALIDATION": "|true|0|3579|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Chart_15\\/.\\/output_astor\\/AstorMain-Chart-15\\/\\/bin\\/\\/variant-386"}]}}, {"bug_id": "15", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 00:54:47.824495", "repair_begin": "2018-12-02 00:52:57.193281", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 280, "faulty": "PiePlotState state=initialise(g2,plotArea,this,null,info);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Chart_15/source/org/jfree/chart/plot/PiePlot3D.java\t2018-12-01 18:52:46.650539916 -0500\n+++ /tmp/Kali_Defects4J_Chart_15/patches_dkr6/Patch_17/patched/tmp/Kali_Defects4J_Chart_15/source/org/jfree/chart/plot/PiePlot3D.java\t2018-12-01 18:54:47.442528590 -0500\n@@ -277,7 +277,9 @@\n             linkH = 2 * min;\n         }\n         \n-        PiePlotState state = initialise(g2, plotArea, this, null, info);\n+        if (true)\n+\t\t\treturn;\n+\t\tPiePlotState state = initialise(g2, plotArea, this, null, info);\n \n         // the link area defines the dog leg points for the linking lines to \n         // the labels\n\n\n"}]}}, {"bug_id": "15", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 10:41:43.130650", "repair_begin": "2018-12-02 10:33:40.296766", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 239, "faulty": "drawBackground(g2,plotArea);", "type": "Delete", "seed": "if (this.equals(DatasetRenderingOrder.REVERSE)) {\n  return DatasetRenderingOrder.REVERSE;\n}"}, {"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 250, "faulty": "double gapHorizontal=plotArea.getWidth() * (gapPercent + labelPercent) * 2.0;", "type": "InsertBefore", "seed": "Rectangle2D[] r=new Rectangle2D[]{null,null,null,null};"}, {"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 252, "faulty": "double gapVertical=plotArea.getHeight() * gapPercent * 2.0;", "type": "InsertBefore", "seed": "if (DatasetUtilities.isEmptyOrNull(getDataset())) {\n  drawNoDataMessage(g2,plotArea);\n  g2.setClip(savedClip);\n  drawOutline(g2,plotArea);\n  return;\n}"}], "patch": "--- /tmp/RSRepair_Defects4J_Chart_15/source/org/jfree/chart/plot/PiePlot3D.java\t2018-12-02 04:33:25.133932501 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_15/patches_rh23/Patch_106/patched/tmp/RSRepair_Defects4J_Chart_15/source/org/jfree/chart/plot/PiePlot3D.java\t2018-12-02 04:37:29.454335645 -0500\n@@ -236,8 +236,6 @@\n             info.setDataArea(plotArea);\n         }\n \n-        drawBackground(g2, plotArea);\n-\n         Shape savedClip = g2.getClip();\n         g2.clip(plotArea);\n \n@@ -247,9 +245,16 @@\n         if (getLabelGenerator() != null) {\n             labelPercent = getLabelGap() + getMaximumLabelWidth();   \n         }\n-        double gapHorizontal = plotArea.getWidth() * (gapPercent \n+        Rectangle2D[] r = new Rectangle2D[] { null, null, null, null };\n+\t\tdouble gapHorizontal = plotArea.getWidth() * (gapPercent \n                 + labelPercent) * 2.0;\n-        double gapVertical = plotArea.getHeight() * gapPercent * 2.0;\n+        if (DatasetUtilities.isEmptyOrNull(getDataset())) {\n+\t\t\tdrawNoDataMessage(g2, plotArea);\n+\t\t\tg2.setClip(savedClip);\n+\t\t\tdrawOutline(g2, plotArea);\n+\t\t\treturn;\n+\t\t}\n+\t\tdouble gapVertical = plotArea.getHeight() * gapPercent * 2.0;\n \n         if (DEBUG_DRAW_INTERIOR) {\n             double hGap = plotArea.getWidth() * getInteriorGap();\n\n\n"}]}}, {"bug_id": "16", "tool": "NPEFix", "nb_patch": 22, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2019-05-05 03:32:04.991674", "repair_begin": "2019-05-05 03:26:52.235470", "patches": [{"locations": [{"executionCount": 0, "line": 574, "class": "org.jfree.data.category.DefaultIntervalCategoryDataset", "sourceStart": 20741, "sourceEnd": 20757}], "patch": "--- org/jfree/data/category/DefaultIntervalCategoryDataset.java\n+++ org/jfree/data/category/DefaultIntervalCategoryDataset.java\n@@ -573,7 +573,16 @@\n         int result = -1;\n-        for (int i = 0; i < this.categoryKeys.length; i++) {\n-            if (category.equals(this.categoryKeys[i])) {\n-                result = i;\n-                break;\n+        if (this.categoryKeys == null) {\n+            for (int i = 0; i < new Comparable[0].length; i++) {\n+                if (category.equals(this.categoryKeys[i])) {\n+                    result = i;\n+                    break;\n+                }\n             }\n+        } else {\n+            for (int i = 0; i < this.categoryKeys.length; i++) {\n+                if (category.equals(this.categoryKeys[i])) {\n+                    result = i;\n+                    break;\n+                }\n+            }\n         }\n"}]}}, {"bug_id": "17", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-28 23:47:36.672447", "repair_begin": "2018-11-28 23:46:48.995933", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 880, "class": "org.jfree.data.time.TimeSeries"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -879,3 +879,5 @@\n         if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n+            if (org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()) {\n+                throw new IllegalArgumentException(\"Requires start <= end.\");\n+            }\n         }\n"}]}}, {"bug_id": "18", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 22:08:14.173990", "repair_begin": "2018-12-01 22:07:47.445969", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 350, "class": "org.jfree.data.category.DefaultCategoryDataset"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/data/category/DefaultCategoryDataset.java\n+++ b/source/org/jfree/data/category/DefaultCategoryDataset.java\n@@ -349,3 +349,5 @@\n     public void removeColumn(Comparable columnKey) {\n-        this.data.removeColumn(columnKey);\n+        if (false) {\n+            this.data.removeColumn(columnKey);\n+        }\n         fireDatasetChanged();\n"}]}}, {"bug_id": "19", "tool": "ARJA", "nb_patch": 30, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 15:10:05.210154", "repair_begin": "2018-12-01 14:14:20.108593", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1134, "faulty": "axis.configure();", "type": "InsertBefore", "seed": "if (axis != null) {\n  axis.configure();\n  axis.addChangeListener(this);\n}"}, {"path": "source/org/jfree/chart/util/AbstractObjectList.java", "line": 164, "faulty": "return -1;", "type": "InsertBefore", "seed": "if (object == null) {\n  throw new IllegalArgumentException(\"Null 'object' argument.\");\n}"}], "patch": "--- /tmp/Arja_Defects4J_Chart_19/source/org/jfree/chart/util/AbstractObjectList.java\t2018-12-01 08:14:04.945381176 -0500\n+++ /tmp/Arja_Defects4J_Chart_19/patches_pitz/Patch_1411/patched/tmp/Arja_Defects4J_Chart_19/source/org/jfree/chart/util/AbstractObjectList.java\t2018-12-01 09:03:17.701171352 -0500\n@@ -161,7 +161,10 @@\n                 return (index);\n             }\n         }\n-        return -1;\n+        if (object == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Null 'object' argument.\");\n+\t\t}\n+\t\treturn -1;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Chart_19/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 08:14:09.741381399 -0500\n+++ /tmp/Arja_Defects4J_Chart_19/patches_pitz/Patch_1411/patched/tmp/Arja_Defects4J_Chart_19/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 09:03:17.705171644 -0500\n@@ -1131,7 +1131,11 @@\n         for (int i = 0; i < this.rangeAxes.size(); i++) {\n             ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n             if (axis != null) {\n-                axis.configure();\n+                if (axis != null) {\n+\t\t\t\t\taxis.configure();\n+\t\t\t\t\taxis.addChangeListener(this);\n+\t\t\t\t}\n+\t\t\t\taxis.configure();\n             }\n         }\n     }\n\n\n"}]}}, {"bug_id": "21", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-28 23:45:55.645051", "repair_begin": "2018-11-28 23:45:02.122924", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 335, "class": "org.jfree.data.Range"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/data/Range.java\n+++ b/source/org/jfree/data/Range.java\n@@ -334,3 +334,5 @@\n         if (!(this.lower == range.lower)) {\n-            return false;\n+            if ((org.jfree.data.Range.this.lower <= 0) || (29 < org.jfree.data.Range.this.upper)) {\n+                return false;\n+            }\n         }\n"}]}}, {"bug_id": "24", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-29 03:05:14.118259", "repair_begin": "2018-12-29 03:01:09.531329", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/renderer\\/GrayPaintScale.java\\n+++ org\\/jfree\\/chart\\/renderer\\/GrayPaintScale.java\\n@@ -123,8 +123,8 @@\\n \\tpublic java.awt.Paint getPaint(double value) {\\n \\t\\tdouble v = java.lang.Math.max(value, this.lowerBound);\\n \\t\\tv = java.lang.Math.min(v, this.upperBound);\\n-\\t\\tint g = ((int) (((value - (this.lowerBound)) \\/ ((this.upperBound) - \\n-\\t\\t(this.lowerBound))) * 255.0));\\n+\\t\\tint g = ((int) (((v - (lowerBound)) \\/ (v - (lowerBound))) * \\n+\\t\\t255.0));\\n \\t\\treturn new java.awt.Color(g, g, g);\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtLocalVariableImpl", "ORIGINAL_CODE": "((int) (((value - (this.lowerBound)) \\/ ((this.upperBound) - \\n(this.lowerBound))) * 255.0))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "((int) (((v - (lowerBound)) \\/ (v - (lowerBound))) * \\n255.0))", "INGREDIENT_PARENT": "((int) (((_double_0 - (this._double_1)) \\/ ((this._double_2) - \\n(this._double_1))) * 255.0))", "LOCATION": "org.jfree.chart.renderer.GrayPaintScale", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_24\\/.\\/output_astor\\/AstorMain-Chart-24\\/\\/src\\/\\/variant-1476_f\\/org\\/jfree\\/chart\\/renderer\\/GrayPaintScale.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Chart_24\\/output_astor\\/AstorMain-Chart-24\\/src\\/default\\/org\\/jfree\\/chart\\/renderer\\/GrayPaintScale.java", "LINE": "126", "MP_RANKING": "8", "SUSPICIOUNESS": "0.816", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtLocalVariableImpl"}], "GENERATION": "738", "VARIANT_ID": "1476", "TIME": "193", "VALIDATION": "|true|0|3253|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Chart_24\\/.\\/output_astor\\/AstorMain-Chart-24\\/\\/bin\\/\\/variant-1476"}]}}, {"bug_id": "25", "tool": "ARJA", "nb_patch": 334, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 14:14:57.846435", "repair_begin": "2018-12-01 13:57:09.419486", "patches": [{"edits": [{"path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", "line": 248, "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", "type": "Replace", "seed": "setPositiveItemLabelPositionFallback(null);"}, {"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 111, "faulty": "result=masd.getMean();", "type": "Replace", "seed": "this.maximumRangeValueIncStdDev=Double.NaN;"}, {"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 273, "faulty": "return this.data.getColumnCount();", "type": "InsertBefore", "seed": "this.minimumRangeValue=Double.NaN;"}, {"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 264, "faulty": "return this.data.getRowCount();", "type": "InsertBefore", "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"}, {"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 246, "faulty": "return this.data.getRowKey(row);", "type": "Replace", "seed": "return true;"}], "patch": "--- /tmp/Arja_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-01 07:56:59.456195057 -0500\n+++ /tmp/Arja_Defects4J_Chart_25/patches_atq3/Patch_820/patched/tmp/Arja_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-01 08:05:50.299247461 -0500\n@@ -245,14 +245,7 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        setPositiveItemLabelPositionFallback(null);\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/Arja_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-01 07:56:54.316104358 -0500\n+++ /tmp/Arja_Defects4J_Chart_25/patches_atq3/Patch_820/patched/tmp/Arja_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-01 08:05:50.299247461 -0500\n@@ -108,7 +108,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+            this.maximumRangeValueIncStdDev = Double.NaN;\n         }\n         return result;\n     }\n@@ -243,7 +243,7 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        return true;\n     }\n \n     /**\n@@ -261,7 +261,8 @@\n      * @return The row count.\n      */\n     public int getRowCount() {\n-        return this.data.getRowCount();\n+        this.minimumRangeValueIncStdDev = Double.NaN;\n+\t\treturn this.data.getRowCount();\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "25", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-01 22:10:35.000305", "repair_begin": "2018-12-01 22:10:10.536539", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 207, "class": "org.jfree.chart.renderer.category.StatisticalBarRenderer"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n@@ -206,10 +206,12 @@\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n+        if (false) {\n+            if (orientation == PlotOrientation.HORIZONTAL) {\n+                drawHorizontalItem(g2, state, dataArea, plot, domainAxis,\n+                rangeAxis, statData, row, column);\n+            }\n+            else if (orientation == PlotOrientation.VERTICAL) {\n+                drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis,\n+                statData, row, column);\n+            }\n         }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n"}]}}, {"bug_id": "25", "tool": "GenProg-A", "nb_patch": 235, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 08:46:37.242721", "repair_begin": "2018-12-02 08:37:24.111975", "patches": [{"edits": [{"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 110, "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", "type": "Delete", "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"}, {"path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", "line": 207, "faulty": "if (orientation == PlotOrientation.HORIZONTAL) {\n  drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}\n else if (orientation == PlotOrientation.VERTICAL) {\n  drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,row,column);\n}", "type": "Replace", "seed": "RectangleEdge edge=plot.getRangeAxisEdge();"}], "patch": "--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:37:11.037757212 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_566/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-02 02:45:30.328256496 -0500\n@@ -204,14 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n-        }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n+        RectangleEdge edge = plot.getRangeAxisEdge();\n     }\n                 \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:37:06.237617857 -0500\n+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_566/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 02:45:30.332256612 -0500\n@@ -107,9 +107,6 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n         return result;\n     }\n \n\n\n"}]}}, {"bug_id": "25", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-30 22:23:12.698097", "repair_begin": "2018-11-30 22:14:45.072918", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/plot\\/CategoryPlot.java\\n+++ org\\/jfree\\/chart\\/plot\\/CategoryPlot.java\\n@@ -2862,22 +2862,22 @@\\n \\t\\t\\tint passCount = renderer.getPassCount();\\n \\t\\t\\tfor (int pass = 0; pass < passCount; pass++) {\\n \\t\\t\\t\\tif ((this.columnRenderingOrder) == (org.jfree.chart.util.SortOrder.ASCENDING)) {\\n-\\t\\t\\t\\t\\tfor (int column = 0; column < columnCount; column++) {\\n-\\t\\t\\t\\t\\t\\tif ((this.rowRenderingOrder) == (org.jfree.chart.util.SortOrder.ASCENDING)) {\\n-\\t\\t\\t\\t\\t\\t\\tfor (int row = 0; row < rowCount; row++) {\\n-\\t\\t\\t\\t\\t\\t\\t\\trenderer.drawItem(g2, state, dataArea, this, \\n-\\t\\t\\t\\t\\t\\t\\t\\tdomainAxis, rangeAxis, currentDataset, \\n-\\t\\t\\t\\t\\t\\t\\t\\trow, column, pass);\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t}else \\n-\\t\\t\\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\t\\t\\tfor (int row = rowCount - 1; row >= 0; row--) {\\n-\\t\\t\\t\\t\\t\\t\\t\\trenderer.drawItem(g2, state, dataArea, this, \\n-\\t\\t\\t\\t\\t\\t\\t\\tdomainAxis, rangeAxis, currentDataset, \\n-\\t\\t\\t\\t\\t\\t\\t\\trow, column, pass);\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\t\\t}else \\n \\t\\t\\t\\t{\\n \\t\\t\\t\\t\\tfor (int column = columnCount - 1; column >= 0; column--) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", "ORIGINAL_CODE": "for (int column = 0; column < columnCount; column++) {\\n\\tif ((this.rowRenderingOrder) == (org.jfree.chart.util.SortOrder.ASCENDING)) {\\n\\t\\tfor (int row = 0; row < rowCount; row++) {\\n\\t\\t\\trenderer.drawItem(g2, state, dataArea, this, \\n\\t\\t\\tdomainAxis, rangeAxis, currentDataset, \\n\\t\\t\\trow, column, pass);\\n\\t\\t}\\n\\t}else \\n\\t{\\n\\t\\tfor (int row = rowCount - 1; row >= 0; row--) {\\n\\t\\t\\trenderer.drawItem(g2, state, dataArea, this, \\n\\t\\t\\tdomainAxis, rangeAxis, currentDataset, \\n\\t\\t\\trow, column, pass);\\n\\t\\t}\\n\\t}\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.jfree.chart.plot.CategoryPlot", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_25\\/.\\/output_astor\\/AstorMain-Chart-25\\/\\/src\\/\\/variant-152_f\\/org\\/jfree\\/chart\\/plot\\/CategoryPlot.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_25\\/output_astor\\/AstorMain-Chart-25\\/src\\/default\\/org\\/jfree\\/chart\\/plot\\/CategoryPlot.java", "LINE": "2865", "MP_RANKING": "249", "SUSPICIOUNESS": "0.402"}], "GENERATION": "76", "VARIANT_ID": "152", "TIME": "158", "VALIDATION": "|true|0|3243|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_25\\/.\\/output_astor\\/AstorMain-Chart-25\\/\\/bin\\/\\/variant-152"}]}}, {"bug_id": "25", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-07 01:40:44.329076", "repair_begin": "2018-12-07 01:39:39.626310", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/renderer\\/category\\/StatisticalBarRenderer.java\\n+++ org\\/jfree\\/chart\\/renderer\\/category\\/StatisticalBarRenderer.java\\n@@ -204,14 +204,14 @@\\n \\t\\torg.jfree.data.statistics.StatisticalCategoryDataset statData = ((org.jfree.data.statistics.StatisticalCategoryDataset) (data));\\n \\n \\t\\torg.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();\\n-\\t\\tif (orientation == (org.jfree.chart.plot.PlotOrientation.HORIZONTAL)) {\\n-\\t\\t\\tdrawHorizontalItem(g2, state, dataArea, plot, domainAxis, \\n-\\t\\t\\trangeAxis, statData, row, column);\\n-\\t\\t}else\\n-\\t\\t\\tif (orientation == (org.jfree.chart.plot.PlotOrientation.VERTICAL)) {\\n-\\t\\t\\t\\tdrawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \\n-\\t\\t\\t\\tstatData, row, column);\\n-\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (orientation == (org.jfree.chart.plot.PlotOrientation.HORIZONTAL)) {\\n\\tdrawHorizontalItem(g2, state, dataArea, plot, domainAxis, \\n\\trangeAxis, statData, row, column);\\n}else\\n\\tif (orientation == (org.jfree.chart.plot.PlotOrientation.VERTICAL)) {\\n\\t\\tdrawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \\n\\t\\tstatData, row, column);\\n\\t}", "LOCATION": "org.jfree.chart.renderer.category.StatisticalBarRenderer", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Chart_25\\/.\\/output_astor\\/AstorMain-Chart-25\\/\\/src\\/\\/variant-7_f\\/org\\/jfree\\/chart\\/renderer\\/category\\/StatisticalBarRenderer.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Chart_25\\/output_astor\\/AstorMain-Chart-25\\/src\\/default\\/org\\/jfree\\/chart\\/renderer\\/category\\/StatisticalBarRenderer.java", "LINE": "207", "MP_RANKING": "3", "SUSPICIOUNESS": "0.843"}], "GENERATION": "1", "VARIANT_ID": "7", "TIME": "7", "VALIDATION": "|true|0|3243|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Chart_25\\/.\\/output_astor\\/AstorMain-Chart-25\\/\\/bin\\/\\/variant-7"}]}}, {"bug_id": "25", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-07 19:41:59.399946", "repair_begin": "2018-12-07 19:40:46.254623", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/statistics\\/DefaultStatisticalCategoryDataset.java\\n+++ org\\/jfree\\/data\\/statistics\\/DefaultStatisticalCategoryDataset.java\\n@@ -107,7 +107,7 @@\\n \\t\\tjava.lang.Number result = null;\\n \\t\\torg.jfree.data.statistics.MeanAndStandardDeviation masd = \\n \\t\\t((org.jfree.data.statistics.MeanAndStandardDeviation) (this.data.getObject(row, column)));\\n-\\t\\tif (masd != null) {\\n+\\t\\tif (masd == null) {\\n \\t\\t\\tresult = masd.getMean();\\n \\t\\t}\\n \\t\\treturn result;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "masd != null", "PATCH_HUNK_CODE": "masd == null", "LOCATION": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Chart_25\\/.\\/output_astor\\/AstorMain-Chart-25\\/\\/src\\/\\/variant-9_f\\/org\\/jfree\\/data\\/statistics\\/DefaultStatisticalCategoryDataset.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Chart_25\\/output_astor\\/AstorMain-Chart-25\\/src\\/default\\/org\\/jfree\\/data\\/statistics\\/DefaultStatisticalCategoryDataset.java", "LINE": "110", "MP_RANKING": "2", "SUSPICIOUNESS": "0.77", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "9", "TIME": "9", "VALIDATION": "|true|0|3243|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Chart_25\\/.\\/output_astor\\/AstorMain-Chart-25\\/\\/bin\\/\\/variant-9"}]}}, {"bug_id": "25", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 00:45:41.660371", "repair_begin": "2018-12-02 00:44:18.175887", "patches": [{"edits": [{"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 110, "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-01 18:44:07.845782445 -0500\n+++ /tmp/Kali_Defects4J_Chart_25/patches_d9xc/Patch_8/patched/tmp/Kali_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-01 18:45:41.289786767 -0500\n@@ -107,7 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n+        if (false) {\n             result = masd.getMean();\n         }\n         return result;\n\n\n"}]}}, {"bug_id": "25", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-11-28 23:43:09.393868", "repair_begin": "2018-11-28 23:42:37.039483", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 207, "class": "org.jfree.chart.renderer.category.StatisticalBarRenderer"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n@@ -206,10 +206,12 @@\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n+        if (3 == 0) {\n+            if (orientation == PlotOrientation.HORIZONTAL) {\n+                drawHorizontalItem(g2, state, dataArea, plot, domainAxis,\n+                rangeAxis, statData, row, column);\n+            }\n+            else if (orientation == PlotOrientation.VERTICAL) {\n+                drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis,\n+                statData, row, column);\n+            }\n         }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n"}]}}, {"bug_id": "25", "tool": "NPEFix", "nb_patch": 85, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2019-05-05 03:31:45.818429", "repair_begin": "2019-05-05 03:24:50.201028", "patches": [{"locations": [{"executionCount": 0, "line": 315, "class": "org.jfree.chart.renderer.category.StatisticalBarRenderer", "sourceStart": 11843, "sourceEnd": 11877}], "patch": "--- org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n+++ org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n@@ -314,3 +314,8 @@\n         // standard deviation lines\n-            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n+            double valueDelta;\n+            if (dataset.getStdDevValue(row, column) == null) {\n+                valueDelta = rectY.doubleValue();\n+            } else {\n+                valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n+            }\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n"}]}}, {"bug_id": "25", "tool": "RSRepair-A", "nb_patch": 40, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 10:32:18.389430", "repair_begin": "2018-12-02 10:26:05.447042", "patches": [{"edits": [{"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 110, "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", "type": "Replace", "seed": "double sumX2=0.0;"}, {"path": "source/org/jfree/chart/renderer/category/BarRenderer.java", "line": 459, "faulty": "return this.lowerClip;", "type": "InsertBefore", "seed": "Shape[] result=new Shape[6];"}], "patch": "--- /tmp/RSRepair_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 04:25:51.535091490 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_25/patches_l19u/Patch_260/patched/tmp/RSRepair_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-02 04:30:38.792187203 -0500\n@@ -107,9 +107,7 @@\n         Number result = null;\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n-        if (masd != null) {\n-            result = masd.getMean();\n-        }\n+        double sumX2 = 0.0;\n         return result;\n     }\n \n\n\n--- /tmp/RSRepair_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/BarRenderer.java\t2018-12-02 04:25:50.319086256 -0500\n+++ /tmp/RSRepair_Defects4J_Chart_25/patches_l19u/Patch_260/patched/tmp/RSRepair_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/BarRenderer.java\t2018-12-02 04:30:38.792187203 -0500\n@@ -455,7 +455,8 @@\n      * @return The value.\n      */\n     public double getLowerClip() {\n-        // TODO:  this attribute should be transferred to the renderer state.\n+        Shape[] result = new Shape[6];\n+\t\t// TODO:  this attribute should be transferred to the renderer state.\n         return this.lowerClip;\n     }\n \n\n\n"}]}}, {"bug_id": "26", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2018-12-02 00:44:21.317948", "repair_begin": "2018-12-02 00:42:36.109656", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 2547, "faulty": "state=new PlotRenderingInfo(null);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Chart_26/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 18:42:25.640372567 -0500\n+++ /tmp/Kali_Defects4J_Chart_26/patches_oc3p/Patch_27/patched/tmp/Kali_Defects4J_Chart_26/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 18:44:20.936377901 -0500\n@@ -2541,7 +2541,9 @@\n \n         // record the plot area...\n         if (state == null) {\n-            // if the incoming state is null, no information will be passed\n+            if (true)\n+\t\t\t\treturn;\n+\t\t\t// if the incoming state is null, no information will be passed\n             // back to the caller - but we create a temporary state to record\n             // the plot area, since that is used later by the axes\n             state = new PlotRenderingInfo(null);\n\n\n"}]}}, {"bug_id": "26", "tool": "NPEFix", "nb_patch": 24, "benchmark": "Defects4J", "project": "Chart", "result": {"repair_end": "2019-05-05 03:30:42.994175", "repair_begin": "2019-05-05 03:24:26.018304", "patches": [{"locations": [{"executionCount": 0, "line": 1192, "class": "org.jfree.chart.axis.Axis", "sourceStart": 41050, "sourceEnd": 41054}], "patch": "--- org/jfree/chart/axis/Axis.java\n+++ org/jfree/chart/axis/Axis.java\n@@ -1191,3 +1191,10 @@\n             ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n+                } else {\n+                    EntityCollection entities;\n+                    if (owner == null) {\n+                        entities = new ChartRenderingInfo().getEntityCollection();\n+                    } else {\n+                        entities = owner.getEntityCollection();\n+                    }\n+                }\n                 if (entities != null) {\n"}]}}, {"bug_id": "1", "tool": "ARJA", "nb_patch": 129, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:55:12.419296", "repair_begin": "2018-12-01 16:04:54.888280", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 396, "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 974, "faulty": "sb.append(value);", "type": "Delete", "seed": "sb.append('\\n');"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 946, "faulty": "sb.append(first.getString());", "type": "Delete", "seed": "sb.append(Token.name(type));"}], "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1340/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:13.893041158 -0500\n@@ -943,7 +943,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -971,7 +970,6 @@\n             value = x.toString();\n             break;\n         }\n-        sb.append(value);\n         sb.append(']');\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1340/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:13.893041158 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"}]}}, {"bug_id": "1", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:51:17.247556", "repair_begin": "2018-12-02 01:47:14.279341", "patches": [{"nb_test_that_execute_statement": 17, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "1", "tool": "GenProg-A", "nb_patch": 421, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:53:59.921567", "repair_begin": "2018-12-02 14:18:42.959108", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 112, "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", "type": "Replace", "seed": "return \"BITOR\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 943, "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", "type": "Delete", "seed": "StringBuilder sb=new StringBuilder();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 133, "faulty": "case INPUT_ID:", "type": "Replace", "seed": "int[] keys=getSortedPropTypes();"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 396, "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 133, "faulty": "case INPUT_ID:", "type": "Replace", "seed": "int[] keys=getSortedPropTypes();"}, {"path": "src/com/google/javascript/jscomp/SourceFile.java", "line": 303, "faulty": "return fileName;", "type": "InsertBefore", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 131, "faulty": "case FREE_CALL:", "type": "Replace", "seed": "return new Node(Token.PARAM_LIST);"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 939, "faulty": "sb.append(' ');", "type": "Replace", "seed": "int lineno=getLineno();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 943, "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", "type": "Delete", "seed": "StringBuilder sb=new StringBuilder();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 133, "faulty": "return \"input_id\";", "type": "Delete", "seed": "Node block=new Node(Token.SCRIPT);"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 943, "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", "type": "Delete", "seed": "StringBuilder sb=new StringBuilder();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 133, "faulty": "return \"input_id\";", "type": "Delete", "seed": "Node block=new Node(Token.SCRIPT);"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 132, "faulty": "return \"source_file\";", "type": "Replace", "seed": "return this.getType() == Token.NAME;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 131, "faulty": "case FREE_CALL:", "type": "Replace", "seed": "return getIntProp(propType) != 0;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 132, "faulty": "return \"source_file\";", "type": "InsertBefore", "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 112, "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", "type": "Replace", "seed": "return \"BITOR\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 943, "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", "type": "Delete", "seed": "StringBuilder sb=new StringBuilder();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 132, "faulty": "case STATIC_SOURCE_FILE:", "type": "Replace", "seed": "Node block=new Node(Token.SCRIPT);"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1440, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 396, "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 971, "faulty": "value=x.toString();", "type": "InsertBefore", "seed": "if (jsType != null) {\n  String jsTypeString=jsType.toString();\n  if (jsTypeString != null) {\n    sb.append(\" : \");\n    sb.append(jsTypeString);\n  }\n}"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 311, "faulty": "return objectValue == null ? \"null\" : objectValue.toString();", "type": "InsertBefore", "seed": "StringBuilder s=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 396, "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1440, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 112, "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", "type": "Replace", "seed": "return \"BITOR\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 943, "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", "type": "Delete", "seed": "StringBuilder sb=new StringBuilder();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 132, "faulty": "case STATIC_SOURCE_FILE:", "type": "Replace", "seed": "Node block=new Node(Token.SCRIPT);"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1440, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 396, "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 131, "faulty": "case FREE_CALL:", "type": "Replace", "seed": "return new FileLevelJsDocBuilder();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 133, "faulty": "return \"input_id\";", "type": "InsertBefore", "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 397, "faulty": "argList.removeChild(lastArg);", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 112, "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", "type": "Replace", "seed": "return \"SUB\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 133, "faulty": "return \"input_id\";", "type": "Delete", "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 343, "faulty": "return String.valueOf(intValue);", "type": "Replace", "seed": "return \"EMPTY\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 133, "faulty": "case INPUT_ID:", "type": "Replace", "seed": "Node block=new Node(Token.BLOCK);"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-02 08:18:24.391954401 -0500\n+++ /tmp/GenProg_Defects4J_Closure_1/patches_vhe5/Patch_961/patched/tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-02 08:44:04.972902636 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n--- /tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:18:21.387954471 -0500\n+++ /tmp/GenProg_Defects4J_Closure_1/patches_vhe5/Patch_961/patched/tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:44:04.972902636 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"SUB\";\n   }\n \n   private static class NumberNode extends Node {\n@@ -308,7 +281,8 @@\n \n     @Override\n     public String toString() {\n-      return objectValue == null ? \"null\" : objectValue.toString();\n+      StringBuilder s = new StringBuilder();\n+\treturn objectValue == null ? \"null\" : objectValue.toString();\n     }\n \n     @Override\n@@ -340,7 +314,7 @@\n \n     @Override\n     public String toString() {\n-      return String.valueOf(intValue);\n+      return \"EMPTY\";\n     }\n \n     @Override\n@@ -936,15 +910,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      int lineno = getLineno();\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -968,7 +934,16 @@\n         String value;\n         switch (type) {\n           default:\n-            value = x.toString();\n+            {\n+\t\t\t\tif (jsType != null) {\n+\t\t\t\t\tString jsTypeString = jsType.toString();\n+\t\t\t\t\tif (jsTypeString != null) {\n+\t\t\t\t\t\tsb.append(\" : \");\n+\t\t\t\t\t\tsb.append(jsTypeString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalue = x.toString();\n+\t\t\t}\n             break;\n         }\n         sb.append(value);\n@@ -1437,7 +1412,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-02 08:18:21.075954478 -0500\n+++ /tmp/GenProg_Defects4J_Closure_1/patches_vhe5/Patch_961/patched/tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-02 08:44:04.972902636 -0500\n@@ -300,7 +300,8 @@\n \n   @Override\n   public String toString() {\n-    return fileName;\n+    int index = -1;\n+\treturn fileName;\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n\n\n"}]}}, {"bug_id": "1", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:28:11.308885", "repair_begin": "2018-12-02 02:24:06.517240", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 396, "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 20:23:53.310762130 -0500\n+++ /tmp/Kali_Defects4J_Closure_1/patches_ddtc/Patch_4/patched/tmp/Kali_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 20:28:10.835468285 -0500\n@@ -393,7 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n+        if (false) {\n           argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n         } else {\n\n\n"}]}}, {"bug_id": "1", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:58:50.379312", "repair_begin": "2018-11-29 02:55:14.374534", "patches": [{"nb_test_that_execute_statement": 17, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 53) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "2", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:47:38.400675", "repair_begin": "2018-12-02 01:44:53.039709", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "2", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:58:09.376632", "repair_begin": "2018-11-29 02:55:02.622449", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "3", "tool": "ARJA", "nb_patch": 320, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:32:37.240769", "repair_begin": "2018-12-01 16:05:01.400756", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 424, "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 405, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 211, "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", "type": "Delete", "seed": "break;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1509/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:44.646542992 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1509/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:44.650543036 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"}]}}, {"bug_id": "3", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:46:46.010701", "repair_begin": "2018-12-02 01:43:50.899063", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "3", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:27:20.680761", "repair_begin": "2018-12-02 02:23:18.017036", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 405, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 20:23:05.293213865 -0500\n+++ /tmp/Kali_Defects4J_Closure_3/patches_afca/Patch_1/patched/tmp/Kali_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 20:27:20.245687443 -0500\n@@ -402,7 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n+        if (true) {\n           return false;\n         }\n       }\n\n\n"}]}}, {"bug_id": "3", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:56:54.937727", "repair_begin": "2018-11-29 02:53:47.613980", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "4", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:46:01.965236", "repair_begin": "2018-12-02 01:42:57.940727", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "4", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 03:00:56.300784", "repair_begin": "2018-11-29 02:53:29.359462", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "5", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:28:07.791576", "repair_begin": "2018-12-02 02:23:04.281009", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1440, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_5/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:22:45.561145835 -0500\n+++ /tmp/Kali_Defects4J_Closure_5/patches_2yd2/Patch_13/patched/tmp/Kali_Defects4J_Closure_5/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:28:07.320900533 -0500\n@@ -1437,7 +1437,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "5", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:55:36.662379", "repair_begin": "2018-11-29 02:52:39.932518", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "6", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:55:05.829914", "repair_begin": "2018-11-29 02:51:28.184292", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "7", "tool": "ARJA", "nb_patch": 25, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:28:22.919756", "repair_begin": "2018-12-01 16:02:21.090363", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/FunctionType.java", "line": 931, "faulty": "return \"Function\";", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/jstype/UnionType.java", "line": 336, "faulty": "return false;", "type": "Replace", "seed": "return true;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_7/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-01 10:01:58.968231593 -0500\n+++ /tmp/Arja_Defects4J_Closure_7/patches_a2mm/Patch_1695/patched/tmp/Arja_Defects4J_Closure_7/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-01 10:27:14.593173671 -0500\n@@ -928,7 +928,6 @@\n   String toStringHelper(boolean forAnnotations) {\n     if (!isPrettyPrint() ||\n         this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n-      return \"Function\";\n     }\n \n     setPrettyPrint(false);\n\n\n--- /tmp/Arja_Defects4J_Closure_7/src/com/google/javascript/rhino/jstype/UnionType.java\t2018-12-01 10:01:58.972231593 -0500\n+++ /tmp/Arja_Defects4J_Closure_7/patches_a2mm/Patch_1695/patched/tmp/Arja_Defects4J_Closure_7/src/com/google/javascript/rhino/jstype/UnionType.java\t2018-12-01 10:27:14.593173671 -0500\n@@ -333,7 +333,7 @@\n   boolean checkUnionEquivalenceHelper(\n       UnionType that, boolean tolerateUnknowns) {\n     if (!tolerateUnknowns && alternates.size() != that.alternates.size()) {\n-      return false;\n+      return true;\n     }\n     for (JSType alternate : that.alternates) {\n       if (!hasAlternate(alternate, tolerateUnknowns)) {\n\n\n"}]}}, {"bug_id": "7", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2019-02-14 00:51:43.080768", "repair_begin": "2019-02-14 00:25:38.553866", "patches": [{"nb_test_that_execute_statement": 320, "patchLocation": {"line": 96, "class": "com.google.javascript.rhino.testing.Asserts"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/testing/Asserts.java\n+++ b/src/com/google/javascript/rhino/testing/Asserts.java\n@@ -95,3 +95,5 @@\n   public static void assertTypeEquals(JSType a, JSType b) {\n-    assertTypeEquals(\"\", a, b);\n+    if (false) {\n+      assertTypeEquals(\"\", a, b);\n+    }\n   }\n"}]}}, {"bug_id": "7", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:26:18.971404", "repair_begin": "2018-12-02 02:22:26.171268", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java", "line": 395, "faulty": "restricted=restrictedAlternate.getLeastSupertype(restricted);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_7/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\t2018-12-01 20:22:13.335509294 -0500\n+++ /tmp/Kali_Defects4J_Closure_7/patches_e972/Patch_11/patched/tmp/Kali_Defects4J_Closure_7/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\t2018-12-01 20:26:18.527065436 -0500\n@@ -392,7 +392,9 @@\n           if (restricted == null) {\n             restricted = restrictedAlternate;\n           } else {\n-            restricted = restrictedAlternate.getLeastSupertype(restricted);\n+            if (true)\n+\t\t\t\treturn null;\n+\t\t\trestricted = restrictedAlternate.getLeastSupertype(restricted);\n           }\n         }\n       }\n\n\n"}]}}, {"bug_id": "7", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:53:09.073985", "repair_begin": "2018-11-29 02:50:24.849854", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "8", "tool": "ARJA", "nb_patch": 145, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:24:17.476925", "repair_begin": "2018-12-01 16:02:44.803388", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", "line": 202, "faulty": "return var != null && var.getScope() == s && !blacklistedVars.contains(var);", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 115, "faulty": "return \"jsdoc_info\";", "type": "Replace", "seed": "return \"BLOCK\";"}], "patch": "--- /tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-01 10:02:25.535699864 -0500\n+++ /tmp/Arja_Defects4J_Closure_8/patches_hwwe/Patch_181/patched/tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-01 10:10:03.406214317 -0500\n@@ -199,9 +199,7 @@\n       }\n \n       Var var = s.getVar(lhs.getString());\n-      return var != null\n-          && var.getScope() == s\n-          && !blacklistedVars.contains(var);\n+      return false;\n     }\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:02:23.007699806 -0500\n+++ /tmp/Arja_Defects4J_Closure_8/patches_hwwe/Patch_181/patched/tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:10:03.410214332 -0500\n@@ -112,7 +112,7 @@\n       switch (propType) {\n         case VAR_ARGS_NAME:      return \"var_args_name\";\n \n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n+        case JSDOC_INFO_PROP:    return \"BLOCK\";\n \n         case INCRDECR_PROP:      return \"incrdecr\";\n         case QUOTED_PROP:        return \"quoted\";\n\n\n"}]}}, {"bug_id": "8", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:25:59.919164", "repair_begin": "2018-12-02 02:21:44.744618", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1440, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_8/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:21:29.619699365 -0500\n+++ /tmp/Kali_Defects4J_Closure_8/patches_cpbc/Patch_31/patched/tmp/Kali_Defects4J_Closure_8/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:25:59.476001698 -0500\n@@ -1437,7 +1437,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "8", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:52:36.481484", "repair_begin": "2018-11-29 02:50:11.542078", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "8", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 17:07:32.498358", "repair_begin": "2018-12-02 16:57:18.770408", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", "line": 202, "faulty": "return var != null && var.getScope() == s && !blacklistedVars.contains(var);", "type": "Replace", "seed": "return false;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 10:57:05.875901179 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_8/patches_0cst/Patch_367/patched/tmp/RSRepair_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 11:04:55.169044892 -0500\n@@ -199,9 +199,7 @@\n       }\n \n       Var var = s.getVar(lhs.getString());\n-      return var != null\n-          && var.getScope() == s\n-          && !blacklistedVars.contains(var);\n+      return false;\n     }\n   }\n \n\n\n"}]}}, {"bug_id": "9", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:53:09.276913", "repair_begin": "2018-11-29 02:49:08.156417", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "10", "tool": "ARJA", "nb_patch": 230, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:29:58.108072", "repair_begin": "2018-12-01 16:02:39.248730", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 800, "faulty": "Preconditions.checkState(left.getChildCount() == 2);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 251, "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 1271, "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 808, "faulty": "valueToCombine=lr;", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 10:02:20.292394989 -0500\n+++ /tmp/Arja_Defects4J_Closure_10/patches_ktm9/Patch_1593/patched/tmp/Arja_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 10:28:18.919090209 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        return false;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 10:02:17.256394865 -0500\n+++ /tmp/Arja_Defects4J_Closure_10/patches_ktm9/Patch_1593/patched/tmp/Arja_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 10:28:18.919090209 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        ;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -797,15 +797,12 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"}]}}, {"bug_id": "10", "tool": "GenProg-A", "nb_patch": 335, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:42:02.502069", "repair_begin": "2018-12-02 14:07:22.312877", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 364, "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 1271, "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 320, "faulty": "return getStringNumberValue(n.getString());", "type": "InsertBefore", "seed": "JSType type=n.getJSType();"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 191, "faulty": "return \"GT\";", "type": "Replace", "seed": "Node block=new Node(Token.SCRIPT);"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 808, "faulty": "valueToCombine=lr;", "type": "Delete", "seed": "return toDot(n,null);"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1462, "faulty": "return res;", "type": "Delete", "seed": "return extractLineno(sourcePosition);"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 1271, "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 364, "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 191, "faulty": "return \"GT\";", "type": "Replace", "seed": "Node block=new Node(Token.SCRIPT);"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 808, "faulty": "valueToCombine=lr;", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 813, "faulty": "left.removeChild(valueToCombine);", "type": "Delete", "seed": "StringBuilder builder=new StringBuilder();"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_895/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:25.973632105 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_895/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:25.977632308 -0500\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_895/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:25.981632511 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_895/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:30:25.981632511 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "10", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 02:45:33.226584", "repair_begin": "2018-12-07 01:30:50.880482", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/NodeUtil.java\\n+++ com\\/google\\/javascript\\/jscomp\\/NodeUtil.java\\n@@ -1413,7 +1413,7 @@\\n \\t}\\n \\n \\tstatic boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {\\n-\\t\\tif (recurse) {\\n+\\t\\tif (false) {\\n \\t\\t\\treturn com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);\\n \\t\\t}else {\\n \\t\\t\\treturn com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (recurse) {\\n\\treturn com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);\\n}else {\\n\\treturn com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\treturn com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);\\n}else {\\n\\treturn com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);\\n}", "LOCATION": "com.google.javascript.jscomp.NodeUtil", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_10\\/.\\/output_astor\\/AstorMain-Closure-10\\/\\/src\\/\\/variant-422_f\\/com\\/google\\/javascript\\/jscomp\\/NodeUtil.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_10\\/output_astor\\/AstorMain-Closure-10\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/NodeUtil.java", "LINE": "1416", "MP_RANKING": "376", "SUSPICIOUNESS": "0.105", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "422", "TIME": "3169", "VALIDATION": "|true|0|7650|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_10\\/.\\/output_astor\\/AstorMain-Closure-10\\/\\/bin\\/\\/variant-422"}]}}, {"bug_id": "10", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-08 00:24:29.758387", "repair_begin": "2018-12-07 23:07:47.843191", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/NodeUtil.java\\n+++ com\\/google\\/javascript\\/jscomp\\/NodeUtil.java\\n@@ -1413,7 +1413,7 @@\\n \\t}\\n \\n \\tstatic boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {\\n-\\t\\tif (recurse) {\\n+\\t\\tif (!recurse) {\\n \\t\\t\\treturn com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);\\n \\t\\t}else {\\n \\t\\t\\treturn com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtVariableReadImpl|CtIfImpl", "ORIGINAL_CODE": "recurse", "PATCH_HUNK_CODE": "!\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nrecurse", "LOCATION": "com.google.javascript.jscomp.NodeUtil", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_10\\/.\\/output_astor\\/AstorMain-Closure-10\\/\\/src\\/\\/variant-553_f\\/com\\/google\\/javascript\\/jscomp\\/NodeUtil.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_10\\/output_astor\\/AstorMain-Closure-10\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/NodeUtil.java", "LINE": "1416", "MP_RANKING": "91", "SUSPICIOUNESS": "0.105", "PATCH_HUNK_TYPE": "CtUnaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "553", "TIME": "4288", "VALIDATION": "|true|0|7650|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Closure_10\\/.\\/output_astor\\/AstorMain-Closure-10\\/\\/bin\\/\\/variant-553"}]}}, {"bug_id": "10", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:26:26.557947", "repair_begin": "2018-12-02 02:21:38.414006", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 1271, "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 20:21:25.279505116 -0500\n+++ /tmp/Kali_Defects4J_Closure_10/patches_7aq0/Patch_17/patched/tmp/Kali_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 20:26:26.105562203 -0500\n@@ -1268,8 +1268,12 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        {\n+\t\t\tif (true)\n+\t\t\t\treturn true;\n+\t\t\treturn allResultsMatch(n.getFirstChild().getNext(), p)\n+\t\t\t\t\t&& allResultsMatch(n.getLastChild(), p);\n+\t\t}\n       default:\n         return p.apply(n);\n     }\n\n\n"}]}}, {"bug_id": "10", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:53:09.649786", "repair_begin": "2018-11-29 02:48:48.489756", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1433, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1432,7 +1432,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type < 36) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "10", "tool": "RSRepair-A", "nb_patch": 14, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 17:13:45.741032", "repair_begin": "2018-12-02 16:56:31.979763", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 1271, "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", "type": "Delete", "seed": "return toDot(n,null);"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 818, "faulty": "replacement.copyInformationFromForTree(right);", "type": "Delete", "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 10:56:12.575958159 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_10/patches_vho4/Patch_119/patched/tmp/RSRepair_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 11:05:47.326630988 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/RSRepair_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 10:56:09.327768535 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_10/patches_vho4/Patch_119/patched/tmp/RSRepair_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 11:05:47.330631283 -0500\n@@ -813,9 +813,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n"}]}}, {"bug_id": "11", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:29:04.861948", "repair_begin": "2018-12-02 01:26:54.032329", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1433, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1432,7 +1432,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "11", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:52:39.579569", "repair_begin": "2018-11-29 02:48:21.926328", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1433, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1432,7 +1432,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type < 36) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "12", "tool": "ARJA", "nb_patch": 267, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:22:56.062646", "repair_begin": "2018-12-01 15:59:07.754384", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 416, "faulty": "rhs.detachFromParent();", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 400, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 201, "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_636/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:54.815399144 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_636/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:54.815399144 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"}]}}, {"bug_id": "12", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:22:53.822903", "repair_begin": "2018-12-02 01:20:29.353717", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1433, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1432,7 +1432,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "12", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:24:52.311646", "repair_begin": "2018-12-02 02:20:43.582909", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 400, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 20:20:28.174545338 -0500\n+++ /tmp/Kali_Defects4J_Closure_12/patches_onbh/Patch_1/patched/tmp/Kali_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 20:24:51.874374397 -0500\n@@ -397,7 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n+        if (true) {\n           return false;\n         }\n       }\n\n\n"}]}}, {"bug_id": "12", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:51:22.618899", "repair_begin": "2018-11-29 02:47:10.045439", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1433, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1432,7 +1432,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type < 36) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "13", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:42:08.419716", "repair_begin": "2018-12-02 01:19:47.040478", "patches": [{"nb_test_that_execute_statement": 20, "patchLocation": {"line": 160, "class": "com.google.javascript.jscomp.PeepholeOptimizationsPass"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -159,3 +159,5 @@\n       if (!previous.traverseChildScopes) {\n-        return false;\n+        if (false) {\n+          return false;\n+        }\n       }\n"}]}}, {"bug_id": "13", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 02:26:23.313321", "repair_begin": "2018-12-07 01:27:18.629147", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/PeepholeOptimizationsPass.java\\n+++ com\\/google\\/javascript\\/jscomp\\/PeepholeOptimizationsPass.java\\n@@ -116,7 +116,7 @@\\n \\n \\n \\t\\tif (!(shouldVisit(node))) {\\n-\\t\\t\\treturn;\\n+\\n \\t\\t}\\n \\n \\t\\tint visits = 0;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return", "LOCATION": "com.google.javascript.jscomp.PeepholeOptimizationsPass", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_13\\/.\\/output_astor\\/AstorMain-Closure-13\\/\\/src\\/\\/variant-321_f\\/com\\/google\\/javascript\\/jscomp\\/PeepholeOptimizationsPass.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_13\\/output_astor\\/AstorMain-Closure-13\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/PeepholeOptimizationsPass.java", "LINE": "119", "MP_RANKING": "299", "SUSPICIOUNESS": "0.129"}], "GENERATION": "1", "VARIANT_ID": "321", "TIME": "2513", "VALIDATION": "|true|0|7604|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_13\\/.\\/output_astor\\/AstorMain-Closure-13\\/\\/bin\\/\\/variant-321"}]}}, {"bug_id": "13", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:48:01.351130", "repair_begin": "2018-11-29 02:45:31.409455", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < 40) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "14", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:48:08.171406", "repair_begin": "2018-11-29 02:45:37.662558", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "15", "tool": "ARJA", "nb_patch": 130, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:21:43.091618", "repair_begin": "2018-12-01 15:57:54.563683", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 208, "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 211, "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 214, "faulty": "e.setAnnotation(VISITED_EDGE);", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_988/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:52.145002466 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_988/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:52.149002455 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "15", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:24:12.276092", "repair_begin": "2018-12-02 02:19:52.095733", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 370, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 20:19:39.300995017 -0500\n+++ /tmp/Kali_Defects4J_Closure_15/patches_2nqc/Patch_1/patched/tmp/Kali_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 20:24:11.840765515 -0500\n@@ -367,7 +367,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n+        if (true) {\n           return false;\n         }\n       }\n\n\n"}]}}, {"bug_id": "15", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:48:42.172452", "repair_begin": "2018-11-29 02:44:30.638723", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "16", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:46:28.704180", "repair_begin": "2018-11-29 02:44:07.747266", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < node2.type) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "17", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:13:13.991963", "repair_begin": "2018-12-02 01:10:39.726893", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "17", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:47:58.868461", "repair_begin": "2018-11-29 02:43:52.921170", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "18", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:45:21.189525", "repair_begin": "2018-11-29 02:43:10.702135", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < 40) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "19", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:11:08.111417", "repair_begin": "2018-12-02 01:09:13.116394", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 175, "class": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -174,4 +174,6 @@\n       default:\n-        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n-            node.toStringTree());\n+        if (false) {\n+          throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n+          node.toStringTree());\n+        }\n     }\n"}]}}, {"bug_id": "19", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:45:47.367049", "repair_begin": "2018-11-29 02:41:41.443009", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "20", "tool": "ARJA", "nb_patch": 26, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:21:57.414762", "repair_begin": "2018-12-01 15:59:35.787120", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 141, "faulty": "return \"free_call\";", "type": "Replace", "seed": "return \"EMPTY\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_20/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:59:15.572095989 -0500\n+++ /tmp/Arja_Defects4J_Closure_20/patches_rf7a/Patch_1452/patched/tmp/Arja_Defects4J_Closure_20/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:13.232253959 -0500\n@@ -138,7 +138,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"EMPTY\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "20", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:11:57.601457", "repair_begin": "2018-12-02 01:09:46.638233", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "20", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:23:56.238763", "repair_begin": "2018-12-02 02:18:19.718000", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_20/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:17:57.727539963 -0500\n+++ /tmp/Kali_Defects4J_Closure_20/patches_rvw9/Patch_15/patched/tmp/Kali_Defects4J_Closure_20/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:23:55.741986571 -0500\n@@ -1456,7 +1456,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "20", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:44:12.376787", "repair_begin": "2018-11-29 02:41:29.513889", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "21", "tool": "ARJA", "nb_patch": 99, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:16:46.385037", "repair_begin": "2018-12-01 15:58:06.183678", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 117, "faulty": "if (n == parent.getLastChild()) {\n  for (  Node an : parent.getAncestors()) {\n    int ancestorType=an.getType();\n    if (ancestorType == Token.COMMA)     continue;\n    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)     return;\n else     break;\n  }\n}", "type": "Delete", "seed": "this.level=level;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 119, "faulty": "int ancestorType=an.getType();", "type": "InsertBefore", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 120, "faulty": "continue;", "type": "Replace", "seed": "break;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 09:57:47.389900461 -0500\n+++ /tmp/Arja_Defects4J_Closure_21/patches_9yoi/Patch_264/patched/tmp/Arja_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 10:06:27.511927684 -0500\n@@ -114,14 +114,6 @@\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n         return;\n\n\n"}]}}, {"bug_id": "21", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:10:09.119924", "repair_begin": "2018-12-02 01:08:02.760020", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 121, "class": "com.google.javascript.jscomp.CheckSideEffects"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -120,3 +120,5 @@\n           if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          if (false) {\n+            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          }\n           else break;\n"}]}}, {"bug_id": "21", "tool": "GenProg-A", "nb_patch": 547, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:11:29.508506", "repair_begin": "2018-12-02 13:45:04.200826", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 118, "faulty": "for (Node an : parent.getAncestors()) {\n  int ancestorType=an.getType();\n  if (ancestorType == Token.COMMA)   continue;\n  if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)   return;\n else   break;\n}", "type": "Delete", "seed": "int keyParent=key(parent);"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 119, "faulty": "int ancestorType=an.getType();", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 120, "faulty": "if (ancestorType == Token.COMMA) continue;", "type": "Replace", "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-02 07:44:46.397015709 -0500\n+++ /tmp/GenProg_Defects4J_Closure_21/patches_rhwv/Patch_140/patched/tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-02 07:52:04.521456900 -0500\n@@ -115,12 +115,6 @@\n         return;\n       }\n       if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n\n\n"}]}}, {"bug_id": "21", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 18:24:49.551490", "repair_begin": "2018-12-01 16:36:26.071212", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n+++ com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n@@ -118,7 +118,7 @@\\n \\t\\t\\t\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n \\t\\t\\t\\t\\tint ancestorType = an.getType();\\n \\t\\t\\t\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA)) { \\t\\t\\t\\t\\t\\tcontinue;}\\n-\\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK))) \\t\\t\\t\\t\\t\\treturn;else\\n+\\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK))) {}else\\n \\t\\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return", "INGREDIENT_SCOPE": "-", "LOCATION": "com.google.javascript.jscomp.CheckSideEffects", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_21\\/.\\/output_astor\\/AstorMain-Closure-21\\/\\/src\\/\\/variant-486_f\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_21\\/output_astor\\/AstorMain-Closure-21\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "LINE": "121", "MP_RANKING": "6", "SUSPICIOUNESS": "0.408"}], "GENERATION": "243", "VARIANT_ID": "486", "TIME": "3095", "VALIDATION": "|true|0|7580|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Closure_21\\/.\\/output_astor\\/AstorMain-Closure-21\\/\\/bin\\/\\/variant-486"}]}}, {"bug_id": "21", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 01:43:16.729271", "repair_begin": "2018-12-07 01:20:47.001257", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n+++ com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n@@ -115,12 +115,12 @@\\n \\t\\t\\t\\treturn;\\n \\t\\t\\t}\\n \\t\\t\\tif (n == (parent.getLastChild())) {\\n-\\t\\t\\t\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n-\\t\\t\\t\\t\\tint ancestorType = an.getType();\\n-\\t\\t\\t\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA)) \\t\\t\\t\\t\\t\\tcontinue;\\n-\\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK))) \\t\\t\\t\\t\\t\\treturn;else\\n-\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\t}\\n \\t\\t}else \\t\\t\\tif (((parent.getType()) != (com.google.javascript.rhino.Token.EXPR_RESULT)) && ((parent.getType()) != (com.google.javascript.rhino.Token.BLOCK))) {\\n \\t\\t\\t\\tif (!((((parent.getType()) == (com.google.javascript.rhino.Token.FOR)) && ((parent.getChildCount()) == 4)) && ((n == (parent.getFirstChild())) || (n == (parent.getFirstChild().getNext().getNext()))))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForEachImpl|CtBlockImpl", "ORIGINAL_CODE": "for (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n\\tint ancestorType = an.getType();\\n\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA)) \\t\\tcontinue;\\n\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK))) \\t\\treturn;else\\n\\t\\tbreak;\\n}", "LOCATION": "com.google.javascript.jscomp.CheckSideEffects", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_21\\/.\\/output_astor\\/AstorMain-Closure-21\\/\\/src\\/\\/variant-4_f\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_21\\/output_astor\\/AstorMain-Closure-21\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "LINE": "118", "MP_RANKING": "2", "SUSPICIOUNESS": "0.408"}], "GENERATION": "1", "VARIANT_ID": "4", "TIME": "9", "VALIDATION": "|true|0|7580|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_21\\/.\\/output_astor\\/AstorMain-Closure-21\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "21", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 23:00:17.615171", "repair_begin": "2018-12-07 22:55:02.049404", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n+++ com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n@@ -117,7 +117,7 @@\\n \\t\\t\\tif (n == (parent.getLastChild())) {\\n \\t\\t\\t\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n \\t\\t\\t\\t\\tint ancestorType = an.getType();\\n-\\t\\t\\t\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA)) \\t\\t\\t\\t\\t\\tcontinue;\\n+\\t\\t\\t\\t\\tif (ancestorType >= (com.google.javascript.rhino.Token.COMMA)) \\t\\t\\t\\t\\t\\tcontinue;\\n \\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK))) \\t\\t\\t\\t\\t\\treturn;else\\n \\t\\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "ancestorType == (com.google.javascript.rhino.Token.COMMA)", "PATCH_HUNK_CODE": "ancestorType >= (com.google.javascript.rhino.Token.COMMA)", "LOCATION": "com.google.javascript.jscomp.CheckSideEffects", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_21\\/.\\/output_astor\\/AstorMain-Closure-21\\/\\/src\\/\\/variant-3_f\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_21\\/output_astor\\/AstorMain-Closure-21\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "LINE": "120", "MP_RANKING": "0", "SUSPICIOUNESS": "0.408", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "3", "TIME": "5", "VALIDATION": "|true|0|7580|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Closure_21\\/.\\/output_astor\\/AstorMain-Closure-21\\/\\/bin\\/\\/variant-3"}]}}, {"bug_id": "21", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:23:24.375474", "repair_begin": "2018-12-02 02:17:23.579149", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 120, "faulty": "if (ancestorType == Token.COMMA) continue;", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 20:17:04.425243768 -0500\n+++ /tmp/Kali_Defects4J_Closure_21/patches_k7vg/Patch_1/patched/tmp/Kali_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 20:23:23.810602242 -0500\n@@ -117,7 +117,7 @@\n       if (n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n+          if (true) continue;\n           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n           else break;\n         }\n\n\n"}]}}, {"bug_id": "21", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:45:17.353874", "repair_begin": "2018-11-29 02:41:32.295274", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 118, "class": "com.google.javascript.jscomp.CheckSideEffects"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -117,7 +117,9 @@\n       if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+        if (com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0) {\n+          for (Node an : parent.getAncestors()) {\n+            int ancestorType = an.getType();\n+            if (ancestorType == Token.COMMA) continue;\n+            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+            else break;\n+          }\n         }\n"}]}}, {"bug_id": "21", "tool": "RSRepair-A", "nb_patch": 33, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 15:08:50.046655", "repair_begin": "2018-12-02 14:53:37.849534", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Token.java", "line": 187, "faulty": "return \"EQ\";", "type": "InsertBefore", "seed": "int count=0;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 121, "faulty": "return;", "type": "Delete", "seed": "formatConclusion();"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-02 08:53:18.499325959 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_21/patches_43a5/Patch_91/patched/tmp/RSRepair_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-02 08:59:58.678196973 -0500\n@@ -118,8 +118,9 @@\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n+\t\t\t;\n+\t\telse break;\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n\n\n--- /tmp/RSRepair_Defects4J_Closure_21/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:53:16.936107918 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_21/patches_43a5/Patch_91/patched/tmp/RSRepair_Defects4J_Closure_21/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:59:58.682196997 -0500\n@@ -184,7 +184,10 @@\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n-          case EQ:              return \"EQ\";\n+          case EQ:              {\n+\t\t\t\tint count = 0;\n+\t\t\t\treturn \"EQ\";\n+\t\t\t}\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n\n\n"}]}}, {"bug_id": "22", "tool": "ARJA", "nb_patch": 133, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:12:45.932087", "repair_begin": "2018-12-01 15:55:44.776524", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 179, "faulty": "name.putBooleanProp(Node.IS_CONSTANT_NAME,true);", "type": "Delete", "seed": "this.level=level;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 115, "faulty": "continue;", "type": "Replace", "seed": "break;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 09:55:25.787478311 -0500\n+++ /tmp/Arja_Defects4J_Closure_22/patches_ahai/Patch_554/patched/tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 10:07:17.651617453 -0500\n@@ -112,7 +112,7 @@\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA)\n-            continue;\n+\t\t\tbreak;\n           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n             return;\n           else\n@@ -176,7 +176,6 @@\n \n   private void addExtern() {\n     Node name = IR.name(PROTECTOR_FN);\n-    name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     Node var = IR.var(name);\n     // Add \"@noalias\" so we can strip the method when AliasExternals is enabled.\n     JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n\n\n"}]}}, {"bug_id": "22", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:10:21.831913", "repair_begin": "2018-12-02 01:07:52.668762", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "22", "tool": "GenProg-A", "nb_patch": 479, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:10:25.523565", "repair_begin": "2018-12-02 13:44:55.079935", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 117, "faulty": "return;", "type": "Delete", "seed": "this.level=level;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 111, "faulty": "if (n == parent.getLastChild()) {\n  for (  Node an : parent.getAncestors()) {\n    int ancestorType=an.getType();\n    if (ancestorType == Token.COMMA)     continue;\n    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)     return;\n else     break;\n  }\n}", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 112, "faulty": "for (Node an : parent.getAncestors()) {\n  int ancestorType=an.getType();\n  if (ancestorType == Token.COMMA)   continue;\n  if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)   return;\n else   break;\n}", "type": "Delete", "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 116, "faulty": "if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n else break;", "type": "Replace", "seed": "return new DefaultCodingConvention();"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-02 07:44:36.414916381 -0500\n+++ /tmp/GenProg_Defects4J_Closure_22/patches_qjuv/Patch_519/patched/tmp/GenProg_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-02 07:56:21.685541387 -0500\n@@ -105,20 +105,6 @@\n       return;\n         }\n     }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n            n == parent.getFirstChild().getNext().getNext())) {\n\n\n"}]}}, {"bug_id": "22", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 17:29:30.414180", "repair_begin": "2018-12-01 16:35:58.556568", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n+++ com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n@@ -109,15 +109,15 @@\\n \\n \\n \\t\\t\\tif (n == (parent.getLastChild())) {\\n-\\t\\t\\t\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n-\\t\\t\\t\\t\\tint ancestorType = an.getType();\\n-\\t\\t\\t\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\\n-\\t\\t\\t\\t\\t\\tcontinue;\\n-\\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\\n-\\t\\t\\t\\t\\t\\treturn;else\\n \\n-\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\t}\\n \\t\\t}else \\t\\t\\tif (((parent.getType()) != (com.google.javascript.rhino.Token.EXPR_RESULT)) && ((parent.getType()) != (com.google.javascript.rhino.Token.BLOCK))) {\\n \\t\\t\\t\\tif ((((parent.getType()) == (com.google.javascript.rhino.Token.FOR)) && ((parent.getChildCount()) == 4)) && ((n == (parent.getFirstChild())) || \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForEachImpl|CtBlockImpl", "ORIGINAL_CODE": "for (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n\\tint ancestorType = an.getType();\\n\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\\n\\t\\tcontinue;\\n\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\\n\\t\\treturn;else\\n\\n\\t\\tbreak;\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "com.google.javascript.jscomp.CheckSideEffects", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_22\\/.\\/output_astor\\/AstorMain-Closure-22\\/\\/src\\/\\/variant-110_f\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_22\\/output_astor\\/AstorMain-Closure-22\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "LINE": "112", "MP_RANKING": "8", "SUSPICIOUNESS": "0.333"}], "GENERATION": "55", "VARIANT_ID": "110", "TIME": "537", "VALIDATION": "|true|0|7580|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Closure_22\\/.\\/output_astor\\/AstorMain-Closure-22\\/\\/bin\\/\\/variant-110"}]}}, {"bug_id": "22", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 01:38:30.388731", "repair_begin": "2018-12-07 01:19:49.258740", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n+++ com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n@@ -108,7 +108,7 @@\\n \\n \\n \\n-\\t\\t\\tif (n == (parent.getLastChild())) {\\n+\\t\\t\\tif (false) {\\n \\t\\t\\t\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n \\t\\t\\t\\t\\tint ancestorType = an.getType();\\n \\t\\t\\t\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (n == (parent.getLastChild())) {\\n\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n\\t\\tint ancestorType = an.getType();\\n\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\\n\\t\\t\\tcontinue;\\n\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\\n\\t\\t\\treturn;else\\n\\n\\t\\t\\tbreak;\\n\\t}\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n\\t\\tint ancestorType = an.getType();\\n\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\\n\\t\\t\\tcontinue;\\n\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\\n\\t\\t\\treturn;else\\n\\n\\t\\t\\tbreak;\\n\\t}\\n}", "LOCATION": "com.google.javascript.jscomp.CheckSideEffects", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_22\\/.\\/output_astor\\/AstorMain-Closure-22\\/\\/src\\/\\/variant-10_f\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_22\\/output_astor\\/AstorMain-Closure-22\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "LINE": "111", "MP_RANKING": "7", "SUSPICIOUNESS": "0.333", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "10", "TIME": "24", "VALIDATION": "|true|0|7580|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_22\\/.\\/output_astor\\/AstorMain-Closure-22\\/\\/bin\\/\\/variant-10"}]}}, {"bug_id": "22", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 23:01:22.721824", "repair_begin": "2018-12-07 22:55:06.442013", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n+++ com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n@@ -111,7 +111,7 @@\\n \\t\\t\\tif (n == (parent.getLastChild())) {\\n \\t\\t\\t\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n \\t\\t\\t\\t\\tint ancestorType = an.getType();\\n-\\t\\t\\t\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\\n+\\t\\t\\t\\t\\tif (ancestorType >= (com.google.javascript.rhino.Token.COMMA))\\n \\t\\t\\t\\t\\t\\tcontinue;\\n \\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\\n \\t\\t\\t\\t\\t\\treturn;else\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "ancestorType == (com.google.javascript.rhino.Token.COMMA)", "PATCH_HUNK_CODE": "ancestorType >= (com.google.javascript.rhino.Token.COMMA)", "LOCATION": "com.google.javascript.jscomp.CheckSideEffects", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_22\\/.\\/output_astor\\/AstorMain-Closure-22\\/\\/src\\/\\/variant-18_f\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_22\\/output_astor\\/AstorMain-Closure-22\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "LINE": "114", "MP_RANKING": "2", "SUSPICIOUNESS": "0.333", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "18", "TIME": "48", "VALIDATION": "|true|0|7580|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Closure_22\\/.\\/output_astor\\/AstorMain-Closure-22\\/\\/bin\\/\\/variant-18"}]}}, {"bug_id": "22", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:20:56.614108", "repair_begin": "2018-12-02 02:16:59.748070", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 111, "faulty": "if (n == parent.getLastChild()) {\n  for (  Node an : parent.getAncestors()) {\n    int ancestorType=an.getType();\n    if (ancestorType == Token.COMMA)     continue;\n    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)     return;\n else     break;\n  }\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 20:16:47.277193162 -0500\n+++ /tmp/Kali_Defects4J_Closure_22/patches_2bcl/Patch_4/patched/tmp/Kali_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 20:20:56.170828245 -0500\n@@ -108,7 +108,7 @@\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n+      if (false) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA)\n\n\n"}]}}, {"bug_id": "22", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:45:25.645246", "repair_begin": "2018-11-29 02:41:22.592026", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "22", "tool": "RSRepair-A", "nb_patch": 29, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 15:07:45.250365", "repair_begin": "2018-12-02 14:53:33.420771", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 116, "faulty": "if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n else break;", "type": "Replace", "seed": "break;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-02 08:53:14.342528072 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_22/patches_zhto/Patch_373/patched/tmp/RSRepair_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-02 09:03:36.522739338 -0500\n@@ -113,10 +113,7 @@\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA)\n             continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+          break;\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n\n\n"}]}}, {"bug_id": "23", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:12:24.684563", "repair_begin": "2018-12-02 01:07:57.261196", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "23", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:47:57.351013", "repair_begin": "2018-11-29 02:41:12.550192", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "24", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:07:53.736060", "repair_begin": "2018-12-02 01:05:57.225159", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "24", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:42:49.277728", "repair_begin": "2018-11-29 02:40:22.985636", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "25", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:08:13.524332", "repair_begin": "2018-12-02 01:06:11.929713", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "25", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:41:26.632686", "repair_begin": "2018-11-29 02:37:15.612732", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "26", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:09:49.813603", "repair_begin": "2018-12-02 01:06:03.571397", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "26", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:19:40.269015", "repair_begin": "2018-12-02 02:14:57.643160", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_26/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:14:43.266513735 -0500\n+++ /tmp/Kali_Defects4J_Closure_26/patches_xzdn/Patch_79/patched/tmp/Kali_Defects4J_Closure_26/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:19:39.791917840 -0500\n@@ -1456,7 +1456,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "26", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:42:43.669860", "repair_begin": "2018-11-29 02:36:47.171541", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "27", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:08:18.064744", "repair_begin": "2018-12-02 01:06:08.343448", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "27", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:41:03.120091", "repair_begin": "2018-11-29 02:36:44.660772", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "28", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:08:20.205315", "repair_begin": "2018-12-02 01:06:21.781554", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "28", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:40:14.045419", "repair_begin": "2018-11-29 02:36:23.662881", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "29", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:07:53.257908", "repair_begin": "2018-12-02 01:04:15.133492", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "29", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:19:49.537732", "repair_begin": "2018-12-02 02:14:25.658625", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_29/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:14:05.254324224 -0500\n+++ /tmp/Kali_Defects4J_Closure_29/patches_k17t/Patch_25/patched/tmp/Kali_Defects4J_Closure_29/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:19:49.047063107 -0500\n@@ -1456,7 +1456,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "29", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:38:32.058915", "repair_begin": "2018-11-29 02:36:02.688554", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "30", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:19:50.805940", "repair_begin": "2018-12-02 02:14:32.822297", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_30/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:14:11.588582551 -0500\n+++ /tmp/Kali_Defects4J_Closure_30/patches_ibi6/Patch_23/patched/tmp/Kali_Defects4J_Closure_30/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:19:50.309781934 -0500\n@@ -1456,7 +1456,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "30", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:39:23.503817", "repair_begin": "2018-11-29 02:35:27.065110", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "31", "tool": "ARJA", "nb_patch": 388, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:21:00.595109", "repair_begin": "2018-12-01 15:47:17.322318", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CompilerOptions.java", "line": 1279, "faulty": "this.dependencyOptions=options;", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_31/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:46:57.523791036 -0500\n+++ /tmp/Arja_Defects4J_Closure_31/patches_4aem/Patch_1139/patched/tmp/Arja_Defects4J_Closure_31/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:50.204450356 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_31/src/com/google/javascript/jscomp/CompilerOptions.java\t2018-12-01 09:46:57.483790804 -0500\n+++ /tmp/Arja_Defects4J_Closure_31/patches_4aem/Patch_1139/patched/tmp/Arja_Defects4J_Closure_31/src/com/google/javascript/jscomp/CompilerOptions.java\t2018-12-01 10:11:50.204450356 -0500\n@@ -1276,7 +1276,6 @@\n    */\n   public void setDependencyOptions(DependencyOptions options) {\n     Preconditions.checkNotNull(options);\n-    this.dependencyOptions = options;\n   }\n \n   /**\n\n\n"}]}}, {"bug_id": "31", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:01:09.360177", "repair_begin": "2018-12-02 00:59:13.949762", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "31", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:17:41.814570", "repair_begin": "2018-12-02 02:13:18.306554", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_31/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:13:04.194275237 -0500\n+++ /tmp/Kali_Defects4J_Closure_31/patches_nc61/Patch_15/patched/tmp/Kali_Defects4J_Closure_31/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:17:41.365561988 -0500\n@@ -1456,7 +1456,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "31", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:36:04.436150", "repair_begin": "2018-11-29 02:33:35.828425", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "31", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 15:09:33.311124", "repair_begin": "2018-12-02 14:49:37.732207", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_31/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:49:17.176885650 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_31/patches_k61m/Patch_99/patched/tmp/RSRepair_Defects4J_Closure_31/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:56:41.626497597 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "32", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:03:39.158933", "repair_begin": "2018-12-02 00:57:52.776056", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "32", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:37:37.107369", "repair_begin": "2018-11-29 02:33:04.325972", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "33", "tool": "ARJA", "nb_patch": 1642, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:10:56.935043", "repair_begin": "2018-12-01 15:44:17.715225", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 573, "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-01 09:43:59.335451027 -0500\n+++ /tmp/Arja_Defects4J_Closure_33/patches_8itw/Patch_791/patched/tmp/Arja_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-01 09:54:07.976132296 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"}]}}, {"bug_id": "33", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:00:08.044969", "repair_begin": "2018-12-02 00:57:41.774120", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "33", "tool": "GenProg-A", "nb_patch": 172, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 13:56:35.288118", "repair_begin": "2018-12-02 13:28:42.534238", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 570, "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", "type": "InsertBefore", "seed": "return false;"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 573, "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", "type": "Delete", "seed": "case 0:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 576, "faulty": "defineInferredProperty(prop,typeToInfer,null);", "type": "Delete", "seed": "case 2:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 576, "faulty": "defineInferredProperty(prop,typeToInfer,null);", "type": "Delete", "seed": "case 2:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 576, "faulty": "defineInferredProperty(prop,typeToInfer,null);", "type": "Delete", "seed": "case 2:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 571, "faulty": "JSType typeToInfer=propType;", "type": "InsertBefore", "seed": "return TRUE;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1145/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:38.702976965 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"}]}}, {"bug_id": "33", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:16:14.620554", "repair_begin": "2018-12-02 02:12:55.991604", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 570, "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-01 20:12:43.349470283 -0500\n+++ /tmp/Kali_Defects4J_Closure_33/patches_3qww/Patch_2/patched/tmp/Kali_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-01 20:16:14.180751829 -0500\n@@ -567,7 +567,7 @@\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n+        if (false) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n\n\n"}]}}, {"bug_id": "33", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:36:41.882604", "repair_begin": "2018-11-29 02:32:51.907963", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "33", "tool": "RSRepair-A", "nb_patch": 16, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 15:00:45.421697", "repair_begin": "2018-12-02 14:49:32.422273", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 113, "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", "type": "Delete", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 261, "faulty": "return false;", "type": "Delete", "seed": "case 0:"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 08:49:11.830310926 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_33/patches_ufd1/Patch_157/patched/tmp/RSRepair_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 08:55:54.229838328 -0500\n@@ -110,9 +110,6 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n     }\n     return true;\n   }\n@@ -258,7 +255,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n"}]}}, {"bug_id": "34", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:35:05.844820", "repair_begin": "2018-11-29 02:31:25.578872", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1429, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1428,7 +1428,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "35", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:56:23.233610", "repair_begin": "2018-12-02 00:54:33.622929", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "35", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:33:46.699618", "repair_begin": "2018-11-29 02:30:13.468862", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "36", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:57:13.453766", "repair_begin": "2018-12-02 00:55:03.279543", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "36", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:16:52.024634", "repair_begin": "2018-12-02 02:11:23.902785", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_36/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:11:09.913552631 -0500\n+++ /tmp/Kali_Defects4J_Closure_36/patches_sqc9/Patch_15/patched/tmp/Kali_Defects4J_Closure_36/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:16:51.529177686 -0500\n@@ -1443,7 +1443,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "36", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:33:22.823282", "repair_begin": "2018-11-29 02:29:04.031983", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < 40) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "37", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:30:26.917670", "repair_begin": "2018-11-29 02:28:18.616429", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1412, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1411,7 +1411,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "38", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:29:50.054850", "repair_begin": "2018-11-29 02:27:47.580324", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1412, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1411,7 +1411,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "39", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:29:22.319384", "repair_begin": "2018-11-29 02:27:01.003867", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1412, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1411,7 +1411,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "40", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:28:49.456590", "repair_begin": "2018-11-29 02:26:42.179503", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1412, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1411,7 +1411,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "41", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:29:52.349919", "repair_begin": "2018-11-29 02:26:09.417724", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "42", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:29:09.194398", "repair_begin": "2018-11-29 02:25:40.880106", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "43", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:26:44.973193", "repair_begin": "2018-11-29 02:24:17.706613", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "44", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:27:51.563619", "repair_begin": "2018-11-29 02:24:27.379980", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "45", "tool": "ARJA", "nb_patch": 136, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:57:01.506068", "repair_begin": "2018-12-01 15:38:01.705865", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 588, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 594, "faulty": "return true;", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 962, "faulty": "parent.replaceChild(assignNode,replacement);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1315/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:18.052832697 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1315/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:18.052832697 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"}]}}, {"bug_id": "45", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:53:01.951335", "repair_begin": "2018-12-02 00:45:44.294363", "patches": [{"nb_test_that_execute_statement": 18, "patchLocation": {"line": 735, "class": "com.google.javascript.jscomp.RemoveUnusedVars"}, "patchType": "CONDITIONAL", "patch": "--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -734,4 +734,3 @@\n               hasPropertyAssign = true;\n-            } else if (!NodeUtil.isLiteralValue(\n-                assign.assignNode.getLastChild(), true)) {\n+            } else if (true) {\n               assignedToUnknownValue = true;\n"}]}}, {"bug_id": "45", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 01:27:03.978805", "repair_begin": "2018-12-07 00:54:57.328296", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/RemoveUnusedVars.java\\n+++ com\\/google\\/javascript\\/jscomp\\/RemoveUnusedVars.java\\n@@ -732,8 +732,8 @@\\n \\t\\t\\t\\t\\tfor (com.google.javascript.jscomp.RemoveUnusedVars.Assign assign : assignsByVar.get(var)) {\\n \\t\\t\\t\\t\\t\\tif (assign.isPropertyAssign) {\\n \\t\\t\\t\\t\\t\\t\\thasPropertyAssign = true;\\n-\\t\\t\\t\\t\\t\\t}else { \\t\\t\\t\\t\\t\\t\\tif (!(com.google.javascript.jscomp.NodeUtil.isLiteralValue(\\n-\\t\\t\\t\\t\\t\\t\\tassign.assignNode.getLastChild(), true))) {\\n+\\t\\t\\t\\t\\t\\t}else { \\t\\t\\t\\t\\t\\t\\tif (true) \\n+\\t\\t\\t\\t\\t\\t\\t{\\n \\t\\t\\t\\t\\t\\t\\t\\tassignedToUnknownValue = true;\\n \\t\\t\\t\\t\\t\\t\\t}}\\n \\t\\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (!(com.google.javascript.jscomp.NodeUtil.isLiteralValue(\\nassign.assignNode.getLastChild(), true))) {\\n\\tassignedToUnknownValue = true;\\n}", "PATCH_HUNK_CODE": "if (true) \\n{\\n\\tassignedToUnknownValue = true;\\n}", "LOCATION": "com.google.javascript.jscomp.RemoveUnusedVars", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_45\\/.\\/output_astor\\/AstorMain-Closure-45\\/\\/src\\/\\/variant-256_f\\/com\\/google\\/javascript\\/jscomp\\/RemoveUnusedVars.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_45\\/output_astor\\/AstorMain-Closure-45\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/RemoveUnusedVars.java", "LINE": "735", "MP_RANKING": "225", "SUSPICIOUNESS": "0.136", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "256", "TIME": "973", "VALIDATION": "|true|0|7190|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_45\\/.\\/output_astor\\/AstorMain-Closure-45\\/\\/bin\\/\\/variant-256"}]}}, {"bug_id": "45", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:14:07.273106", "repair_begin": "2018-12-02 02:10:06.500486", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1433, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:09:53.073393723 -0500\n+++ /tmp/Kali_Defects4J_Closure_45/patches_zfw4/Patch_7/patched/tmp/Kali_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:14:06.832725850 -0500\n@@ -1430,7 +1430,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "45", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:26:03.875060", "repair_begin": "2018-11-29 02:24:06.470998", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "45", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:44:41.011732", "repair_begin": "2018-12-02 14:34:38.438141", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1433, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:34:24.171303625 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_45/patches_huhs/Patch_389/patched/tmp/RSRepair_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:51.794205590 -0500\n@@ -1430,7 +1430,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "46", "tool": "ARJA", "nb_patch": 433, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:52:52.575228", "repair_begin": "2018-12-01 15:38:14.158168", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 110, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", "line": 86, "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 171, "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-01 09:37:54.247737241 -0500\n+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_1778/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-01 09:50:46.493707152 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-01 09:37:56.231742339 -0500\n+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_1778/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-01 09:50:46.493707152 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -167,9 +167,6 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n"}]}}, {"bug_id": "46", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:48:47.464142", "repair_begin": "2018-12-02 00:44:11.717779", "patches": [{"nb_test_that_execute_statement": 87, "patchLocation": {"line": 95, "class": "com.google.javascript.rhino.testing.Asserts"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/testing/Asserts.java\n+++ b/src/com/google/javascript/rhino/testing/Asserts.java\n@@ -94,3 +94,5 @@\n   public static void assertTypeEquals(JSType a, JSType b) {\n-    assertTypeEquals(\"\", a, b);\n+    if (false) {\n+      assertTypeEquals(\"\", a, b);\n+    }\n   }\n"}]}}, {"bug_id": "46", "tool": "GenProg-A", "nb_patch": 115, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 13:24:55.405847", "repair_begin": "2018-12-02 13:13:39.345901", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", "line": 86, "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", "type": "Delete", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 110, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", "line": 86, "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", "type": "Delete", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 110, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 110, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 110, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 110, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 110, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 378, "faulty": "sb.append(property);", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 379, "faulty": "sb.append(\": \");", "type": "Delete", "seed": "return FALSE;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 171, "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", "type": "Delete", "seed": "return BOTH;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1101/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:19.726645631 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1101/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:19.726645631 -0500\n@@ -375,8 +375,6 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1101/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:19.726645631 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -167,9 +167,6 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n"}]}}, {"bug_id": "46", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 01:06:16.358028", "repair_begin": "2018-12-07 00:54:42.516652", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/rhino\\/jstype\\/RecordType.java\\n+++ com\\/google\\/javascript\\/rhino\\/jstype\\/RecordType.java\\n@@ -139,7 +139,7 @@\\n \\n \\t@java.lang.Override\\n \\tpublic com.google.javascript.rhino.jstype.JSType getLeastSupertype(com.google.javascript.rhino.jstype.JSType that) {\\n-\\t\\tif (!(that.isRecordType())) {\\n+\\t\\tif (true) {\\n \\t\\t\\treturn super.getLeastSupertype(that);\\n \\t\\t}\\n \\t\\tcom.google.javascript.rhino.jstype.RecordTypeBuilder builder = new com.google.javascript.rhino.jstype.RecordTypeBuilder(registry);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (!(that.isRecordType())) {\\n\\treturn super.getLeastSupertype(that);\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\treturn super.getLeastSupertype(that);\\n}", "LOCATION": "com.google.javascript.rhino.jstype.RecordType", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_46\\/.\\/output_astor\\/AstorMain-Closure-46\\/\\/src\\/\\/variant-7_f\\/com\\/google\\/javascript\\/rhino\\/jstype\\/RecordType.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_46\\/output_astor\\/AstorMain-Closure-46\\/src\\/default\\/com\\/google\\/javascript\\/rhino\\/jstype\\/RecordType.java", "LINE": "142", "MP_RANKING": "6", "SUSPICIOUNESS": "0.372", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "7", "TIME": "16", "VALIDATION": "|true|0|7242|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_46\\/.\\/output_astor\\/AstorMain-Closure-46\\/\\/bin\\/\\/variant-7"}]}}, {"bug_id": "46", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:13:57.917038", "repair_begin": "2018-12-02 02:09:48.171618", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 142, "faulty": "if (!that.isRecordType()) {\n  return super.getLeastSupertype(that);\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-01 20:09:32.367087967 -0500\n+++ /tmp/Kali_Defects4J_Closure_46/patches_6jfz/Patch_3/patched/tmp/Kali_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-01 20:13:57.468306249 -0500\n@@ -139,7 +139,7 @@\n \n   @Override\n   public JSType getLeastSupertype(JSType that) {\n-    if (!that.isRecordType()) {\n+    if (true) {\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n\n"}]}}, {"bug_id": "46", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:27:42.130791", "repair_begin": "2018-11-29 02:24:05.908531", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "48", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2019-02-13 23:54:11.860788", "repair_begin": "2019-02-13 23:28:27.665528", "patches": [{"nb_test_that_execute_statement": 430, "patchLocation": {"line": 1441, "class": "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,3 +1440,5 @@\n         // Determining type for #5\n-        valueType = rhsValue.getJSType();\n+        if (false) {\n+          valueType = rhsValue.getJSType();\n+        }\n       }\n"}]}}, {"bug_id": "48", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:25:50.181541", "repair_begin": "2018-11-29 02:22:43.399800", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1402, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1401,7 +1401,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 36) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "49", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:09:01.204549", "repair_begin": "2018-12-02 02:05:40.793819", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1609, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_49/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:05:26.258240896 -0500\n+++ /tmp/Kali_Defects4J_Closure_49/patches_mr7r/Patch_1/patched/tmp/Kali_Defects4J_Closure_49/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:09:00.768856791 -0500\n@@ -1606,7 +1606,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "50", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:08:37.613672", "repair_begin": "2018-12-02 02:04:59.481240", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1609, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_50/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:04:44.966484875 -0500\n+++ /tmp/Kali_Defects4J_Closure_50/patches_kngg/Patch_25/patched/tmp/Kali_Defects4J_Closure_50/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:08:37.176723600 -0500\n@@ -1606,7 +1606,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "50", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:23:00.933937", "repair_begin": "2018-11-29 02:19:53.696567", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "51", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:21:19.383530", "repair_begin": "2018-11-29 02:19:26.482243", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "52", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:20:55.758122", "repair_begin": "2018-11-29 02:19:04.155983", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "53", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:44:14.261092", "repair_begin": "2018-12-02 00:42:48.897830", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "53", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:22:16.422764", "repair_begin": "2018-11-29 02:19:15.634784", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "54", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:21:44.146602", "repair_begin": "2018-11-29 02:18:44.915497", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "55", "tool": "ARJA", "nb_patch": 264, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:51:33.934977", "repair_begin": "2018-12-01 15:32:20.901034", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 87, "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 218, "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_565/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:52.251535084 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"}]}}, {"bug_id": "55", "tool": "GenProg-A", "nb_patch": 569, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 13:32:26.347462", "repair_begin": "2018-12-02 13:04:24.488199", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1677, "faulty": "return \"call\";", "type": "InsertBefore", "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 178, "faulty": "reductions.put(reducer,new Reduction(parent,node,replacement));", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 93, "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", "type": "Delete", "seed": "return;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 179, "faulty": "return false;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 93, "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", "type": "Delete", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 93, "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", "type": "Delete", "seed": "return;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1677, "faulty": "return \"call\";", "type": "InsertBefore", "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "Replace", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 217, "faulty": "Node call=new Node(Token.CALL,lineno,charno);", "type": "InsertBefore", "seed": "int start=0;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-02 07:03:59.474998055 -0500\n+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-02 07:24:16.317674962 -0500\n@@ -87,18 +87,6 @@\n       for (Reduction reduction : reductions) {\n         savings += reduction.estimateSavings();\n       }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n@@ -175,8 +163,6 @@\n       for (Reducer reducer : reducers) {\n         Node replacement = reducer.reduce(node);\n         if (replacement != node) {\n-          reductions.put(reducer, new Reduction(parent, node, replacement));\n-          return false;\n         }\n       }\n       return true;\n@@ -214,7 +200,8 @@\n      */\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n-      Node call = new Node(Token.CALL, lineno, charno);\n+      int start = 0;\n+\tNode call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n@@ -448,7 +435,7 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n+        int start = 0;\n       }\n       return null;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:57.814998114 -0500\n+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:24:16.321675138 -0500\n@@ -1674,7 +1674,245 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            {\n+\t\t\tswitch (token) {\n+\t\t\tcase Token.ERROR:\n+\t\t\t\treturn \"error\";\n+\t\t\tcase Token.EOF:\n+\t\t\t\treturn \"eof\";\n+\t\t\tcase Token.EOL:\n+\t\t\t\treturn \"eol\";\n+\t\t\tcase Token.ENTERWITH:\n+\t\t\t\treturn \"enterwith\";\n+\t\t\tcase Token.LEAVEWITH:\n+\t\t\t\treturn \"leavewith\";\n+\t\t\tcase Token.RETURN:\n+\t\t\t\treturn \"return\";\n+\t\t\tcase Token.GOTO:\n+\t\t\t\treturn \"goto\";\n+\t\t\tcase Token.IFEQ:\n+\t\t\t\treturn \"ifeq\";\n+\t\t\tcase Token.IFNE:\n+\t\t\t\treturn \"ifne\";\n+\t\t\tcase Token.SETNAME:\n+\t\t\t\treturn \"setname\";\n+\t\t\tcase Token.BITOR:\n+\t\t\t\treturn \"bitor\";\n+\t\t\tcase Token.BITXOR:\n+\t\t\t\treturn \"bitxor\";\n+\t\t\tcase Token.BITAND:\n+\t\t\t\treturn \"bitand\";\n+\t\t\tcase Token.EQ:\n+\t\t\t\treturn \"eq\";\n+\t\t\tcase Token.NE:\n+\t\t\t\treturn \"ne\";\n+\t\t\tcase Token.LT:\n+\t\t\t\treturn \"lt\";\n+\t\t\tcase Token.LE:\n+\t\t\t\treturn \"le\";\n+\t\t\tcase Token.GT:\n+\t\t\t\treturn \"gt\";\n+\t\t\tcase Token.GE:\n+\t\t\t\treturn \"ge\";\n+\t\t\tcase Token.LSH:\n+\t\t\t\treturn \"lsh\";\n+\t\t\tcase Token.RSH:\n+\t\t\t\treturn \"rsh\";\n+\t\t\tcase Token.URSH:\n+\t\t\t\treturn \"ursh\";\n+\t\t\tcase Token.ADD:\n+\t\t\t\treturn \"add\";\n+\t\t\tcase Token.SUB:\n+\t\t\t\treturn \"sub\";\n+\t\t\tcase Token.MUL:\n+\t\t\t\treturn \"mul\";\n+\t\t\tcase Token.DIV:\n+\t\t\t\treturn \"div\";\n+\t\t\tcase Token.MOD:\n+\t\t\t\treturn \"mod\";\n+\t\t\tcase Token.BITNOT:\n+\t\t\t\treturn \"bitnot\";\n+\t\t\tcase Token.NEG:\n+\t\t\t\treturn \"neg\";\n+\t\t\tcase Token.NEW:\n+\t\t\t\treturn \"new\";\n+\t\t\tcase Token.DELPROP:\n+\t\t\t\treturn \"delprop\";\n+\t\t\tcase Token.TYPEOF:\n+\t\t\t\treturn \"typeof\";\n+\t\t\tcase Token.GETPROP:\n+\t\t\t\treturn \"getprop\";\n+\t\t\tcase Token.SETPROP:\n+\t\t\t\treturn \"setprop\";\n+\t\t\tcase Token.GETELEM:\n+\t\t\t\treturn \"getelem\";\n+\t\t\tcase Token.SETELEM:\n+\t\t\t\treturn \"setelem\";\n+\t\t\tcase Token.CALL:\n+\t\t\t\treturn \"call\";\n+\t\t\tcase Token.NAME:\n+\t\t\t\treturn \"name\";\n+\t\t\tcase Token.NUMBER:\n+\t\t\t\treturn \"number\";\n+\t\t\tcase Token.STRING:\n+\t\t\t\treturn \"string\";\n+\t\t\tcase Token.NULL:\n+\t\t\t\treturn \"null\";\n+\t\t\tcase Token.THIS:\n+\t\t\t\treturn \"this\";\n+\t\t\tcase Token.FALSE:\n+\t\t\t\treturn \"false\";\n+\t\t\tcase Token.TRUE:\n+\t\t\t\treturn \"true\";\n+\t\t\tcase Token.SHEQ:\n+\t\t\t\treturn \"sheq\";\n+\t\t\tcase Token.SHNE:\n+\t\t\t\treturn \"shne\";\n+\t\t\tcase Token.REGEXP:\n+\t\t\t\treturn \"regexp\";\n+\t\t\tcase Token.POS:\n+\t\t\t\treturn \"pos\";\n+\t\t\tcase Token.BINDNAME:\n+\t\t\t\treturn \"bindname\";\n+\t\t\tcase Token.THROW:\n+\t\t\t\treturn \"throw\";\n+\t\t\tcase Token.IN:\n+\t\t\t\treturn \"in\";\n+\t\t\tcase Token.INSTANCEOF:\n+\t\t\t\treturn \"instanceof\";\n+\t\t\tcase Token.GETVAR:\n+\t\t\t\treturn \"getvar\";\n+\t\t\tcase Token.SETVAR:\n+\t\t\t\treturn \"setvar\";\n+\t\t\tcase Token.TRY:\n+\t\t\t\treturn \"try\";\n+\t\t\tcase Token.TYPEOFNAME:\n+\t\t\t\treturn \"typeofname\";\n+\t\t\tcase Token.THISFN:\n+\t\t\t\treturn \"thisfn\";\n+\t\t\tcase Token.SEMI:\n+\t\t\t\treturn \"semi\";\n+\t\t\tcase Token.LB:\n+\t\t\t\treturn \"lb\";\n+\t\t\tcase Token.RB:\n+\t\t\t\treturn \"rb\";\n+\t\t\tcase Token.LC:\n+\t\t\t\treturn \"lc\";\n+\t\t\tcase Token.RC:\n+\t\t\t\treturn \"rc\";\n+\t\t\tcase Token.LP:\n+\t\t\t\treturn \"lp\";\n+\t\t\tcase Token.RP:\n+\t\t\t\treturn \"rp\";\n+\t\t\tcase Token.COMMA:\n+\t\t\t\treturn \"comma\";\n+\t\t\tcase Token.ASSIGN:\n+\t\t\t\treturn \"assign\";\n+\t\t\tcase Token.ASSIGN_BITOR:\n+\t\t\t\treturn \"assign_bitor\";\n+\t\t\tcase Token.ASSIGN_BITXOR:\n+\t\t\t\treturn \"assign_bitxor\";\n+\t\t\tcase Token.ASSIGN_BITAND:\n+\t\t\t\treturn \"assign_bitand\";\n+\t\t\tcase Token.ASSIGN_LSH:\n+\t\t\t\treturn \"assign_lsh\";\n+\t\t\tcase Token.ASSIGN_RSH:\n+\t\t\t\treturn \"assign_rsh\";\n+\t\t\tcase Token.ASSIGN_URSH:\n+\t\t\t\treturn \"assign_ursh\";\n+\t\t\tcase Token.ASSIGN_ADD:\n+\t\t\t\treturn \"assign_add\";\n+\t\t\tcase Token.ASSIGN_SUB:\n+\t\t\t\treturn \"assign_sub\";\n+\t\t\tcase Token.ASSIGN_MUL:\n+\t\t\t\treturn \"assign_mul\";\n+\t\t\tcase Token.ASSIGN_DIV:\n+\t\t\t\treturn \"assign_div\";\n+\t\t\tcase Token.ASSIGN_MOD:\n+\t\t\t\treturn \"assign_mod\";\n+\t\t\tcase Token.HOOK:\n+\t\t\t\treturn \"hook\";\n+\t\t\tcase Token.COLON:\n+\t\t\t\treturn \"colon\";\n+\t\t\tcase Token.OR:\n+\t\t\t\treturn \"or\";\n+\t\t\tcase Token.AND:\n+\t\t\t\treturn \"and\";\n+\t\t\tcase Token.INC:\n+\t\t\t\treturn \"inc\";\n+\t\t\tcase Token.DEC:\n+\t\t\t\treturn \"dec\";\n+\t\t\tcase Token.DOT:\n+\t\t\t\treturn \"dot\";\n+\t\t\tcase Token.FUNCTION:\n+\t\t\t\treturn \"function\";\n+\t\t\tcase Token.EXPORT:\n+\t\t\t\treturn \"export\";\n+\t\t\tcase Token.IMPORT:\n+\t\t\t\treturn \"import\";\n+\t\t\tcase Token.IF:\n+\t\t\t\treturn \"if\";\n+\t\t\tcase Token.ELSE:\n+\t\t\t\treturn \"else\";\n+\t\t\tcase Token.SWITCH:\n+\t\t\t\treturn \"switch\";\n+\t\t\tcase Token.CASE:\n+\t\t\t\treturn \"case\";\n+\t\t\tcase Token.DEFAULT:\n+\t\t\t\treturn \"default\";\n+\t\t\tcase Token.WHILE:\n+\t\t\t\treturn \"while\";\n+\t\t\tcase Token.DO:\n+\t\t\t\treturn \"do\";\n+\t\t\tcase Token.FOR:\n+\t\t\t\treturn \"for\";\n+\t\t\tcase Token.BREAK:\n+\t\t\t\treturn \"break\";\n+\t\t\tcase Token.CONTINUE:\n+\t\t\t\treturn \"continue\";\n+\t\t\tcase Token.VAR:\n+\t\t\t\treturn \"var\";\n+\t\t\tcase Token.WITH:\n+\t\t\t\treturn \"with\";\n+\t\t\tcase Token.CATCH:\n+\t\t\t\treturn \"catch\";\n+\t\t\tcase Token.FINALLY:\n+\t\t\t\treturn \"finally\";\n+\t\t\tcase Token.RESERVED:\n+\t\t\t\treturn \"reserved\";\n+\t\t\tcase Token.NOT:\n+\t\t\t\treturn \"not\";\n+\t\t\tcase Token.VOID:\n+\t\t\t\treturn \"void\";\n+\t\t\tcase Token.BLOCK:\n+\t\t\t\treturn \"block\";\n+\t\t\tcase Token.ARRAYLIT:\n+\t\t\t\treturn \"arraylit\";\n+\t\t\tcase Token.OBJECTLIT:\n+\t\t\t\treturn \"objectlit\";\n+\t\t\tcase Token.LABEL:\n+\t\t\t\treturn \"label\";\n+\t\t\tcase Token.TARGET:\n+\t\t\t\treturn \"target\";\n+\t\t\tcase Token.LOOP:\n+\t\t\t\treturn \"loop\";\n+\t\t\tcase Token.EXPR_VOID:\n+\t\t\t\treturn \"expr_void\";\n+\t\t\tcase Token.EXPR_RESULT:\n+\t\t\t\treturn \"expr_result\";\n+\t\t\tcase Token.JSR:\n+\t\t\t\treturn \"jsr\";\n+\t\t\tcase Token.SCRIPT:\n+\t\t\t\treturn \"script\";\n+\t\t\tcase Token.EMPTY:\n+\t\t\t\treturn \"empty\";\n+\t\t\tcase Token.GET_REF:\n+\t\t\t\treturn \"get_ref\";\n+\t\t\tcase Token.REF_SPECIAL:\n+\t\t\t\treturn \"ref_special\";\n+\t\t\t}\n+\t\t\treturn \"call\";\n+\t\t}\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"}]}}, {"bug_id": "55", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:09:58.788922", "repair_begin": "2018-12-02 02:05:16.814466", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 79, "faulty": "if (helperCode == null) {\n  continue;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 20:04:55.583882688 -0500\n+++ /tmp/Kali_Defects4J_Closure_55/patches_u9rc/Patch_3/patched/tmp/Kali_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 20:09:58.307042025 -0500\n@@ -76,7 +76,7 @@\n       }\n \n       Node helperCode = parseHelperCode(reducer);\n-      if (helperCode == null) {\n+      if (true) {\n         continue;\n       }\n \n\n\n"}]}}, {"bug_id": "55", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:19:40.890834", "repair_begin": "2018-11-29 02:17:51.662444", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "55", "tool": "RSRepair-A", "nb_patch": 37, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:44:23.301213", "repair_begin": "2018-12-02 14:32:09.004901", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 427, "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "Delete", "seed": "formatConclusion();"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-02 08:31:50.719827596 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_55/patches_2m63/Patch_629/patched/tmp/RSRepair_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-02 08:44:06.812387568 -0500\n@@ -424,11 +424,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n@@ -448,7 +443,6 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n       }\n       return null;\n     }\n\n\n"}]}}, {"bug_id": "56", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:20:58.819614", "repair_begin": "2018-11-29 02:17:54.557791", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "57", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:18:54.533961", "repair_begin": "2018-11-29 02:17:03.911493", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "58", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:16:56.638050", "repair_begin": "2018-11-29 02:15:06.119642", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "59", "tool": "ARJA", "nb_patch": 1036, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:07:23.610451", "repair_begin": "2018-12-01 15:32:30.849305", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-01 09:32:10.027745566 -0500\n+++ /tmp/Arja_Defects4J_Closure_59/patches_qxp9/Patch_525/patched/tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-01 09:45:36.400054818 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n"}]}}, {"bug_id": "59", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:41:10.849360", "repair_begin": "2018-12-02 00:39:53.026165", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1514, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1513,7 +1513,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "59", "tool": "GenProg-A", "nb_patch": 277, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 13:44:02.312573", "repair_begin": "2018-12-02 13:03:27.594551", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", "line": 1729, "faulty": "entries.add(new Entry(level,groupName));", "type": "Delete", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", "line": 156, "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", "type": "Delete", "seed": "return new DotFormatter();"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_885/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:36.304457539 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_885/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:27:36.308457722 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_885/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:27:36.308457722 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n"}]}}, {"bug_id": "59", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 01:39:28.528566", "repair_begin": "2018-12-07 00:44:56.944126", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/WarningLevel.java\\n+++ com\\/google\\/javascript\\/jscomp\\/WarningLevel.java\\n@@ -76,7 +76,7 @@\\n \\n \\n \\t\\toptions.checkSuspiciousCode = true;\\n-\\t\\toptions.checkGlobalThisLevel = com.google.javascript.jscomp.CheckLevel.WARNING;\\n+\\n \\t\\toptions.checkSymbols = true;\\n \\t\\toptions.checkMissingReturn = com.google.javascript.jscomp.CheckLevel.WARNING;\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "options.checkGlobalThisLevel = com.google.javascript.jscomp.CheckLevel.WARNING", "LOCATION": "com.google.javascript.jscomp.WarningLevel", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_59\\/.\\/output_astor\\/AstorMain-Closure-59\\/\\/src\\/\\/variant-251_f\\/com\\/google\\/javascript\\/jscomp\\/WarningLevel.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_59\\/output_astor\\/AstorMain-Closure-59\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/WarningLevel.java", "LINE": "79", "MP_RANKING": "227", "SUSPICIOUNESS": "0.14"}], "GENERATION": "1", "VARIANT_ID": "251", "TIME": "2568", "VALIDATION": "|true|0|7144|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_59\\/.\\/output_astor\\/AstorMain-Closure-59\\/\\/bin\\/\\/variant-251"}]}}, {"bug_id": "59", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:10:20.110013", "repair_begin": "2018-12-02 02:03:52.181478", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", "line": 263, "faulty": "checks.add(checkAccessControls);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-01 20:03:32.314309418 -0500\n+++ /tmp/Kali_Defects4J_Closure_59/patches_z1hr/Patch_61/patched/tmp/Kali_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-01 20:10:19.587488139 -0500\n@@ -260,7 +260,9 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      if (true)\n+\t\t\t\treturn null;\n+\tchecks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n"}]}}, {"bug_id": "59", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:18:25.420732", "repair_begin": "2018-11-29 02:15:22.463541", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1514, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1513,7 +1513,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.SPECIALCALL_WITH == node2.type) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "59", "tool": "RSRepair-A", "nb_patch": 5, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:41:51.086160", "repair_begin": "2018-12-02 14:29:39.283525", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 42, "faulty": "addVerboseWarnings(options);", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", "line": 288, "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", "type": "Delete", "seed": "int index=-1;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 08:29:25.201275956 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_59/patches_swi5/Patch_176/patched/tmp/RSRepair_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 08:35:57.047714837 -0500\n@@ -39,7 +39,7 @@\n         addDefaultWarnings(options);\n         break;\n       case VERBOSE:\n-        addVerboseWarnings(options);\n+        StringBuilder builder = new StringBuilder();\n         break;\n       default:\n         throw new RuntimeException(\"Unknown warning level.\");\n\n\n--- /tmp/RSRepair_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 08:29:25.185275956 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_59/patches_swi5/Patch_176/patched/tmp/RSRepair_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 08:35:57.055714879 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n"}]}}, {"bug_id": "60", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:41:48.652480", "repair_begin": "2018-12-02 00:40:04.324345", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1500, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1499,7 +1499,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "60", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:16:53.885787", "repair_begin": "2018-11-29 02:14:58.767436", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1500, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1499,7 +1499,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type < 3) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "61", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:06:15.363125", "repair_begin": "2018-12-02 02:02:37.483515", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1503, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_61/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:02:23.261437912 -0500\n+++ /tmp/Kali_Defects4J_Closure_61/patches_i9a3/Patch_1/patched/tmp/Kali_Defects4J_Closure_61/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:06:14.933474039 -0500\n@@ -1500,7 +1500,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "61", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:17:10.411348", "repair_begin": "2018-11-29 02:14:17.617416", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 1461, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1460,7 +1460,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.ENUM_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "61", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:41:45.457668", "repair_begin": "2018-12-02 14:29:56.332509", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1503, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_61/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:29:35.466045015 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_61/patches_0czc/Patch_507/patched/tmp/RSRepair_Defects4J_Closure_61/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:48.801669354 -0500\n@@ -1500,7 +1500,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "62", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:39:29.858589", "repair_begin": "2018-12-02 00:38:10.835724", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 97, "class": "com.google.javascript.jscomp.LightweightMessageFormatter"}, "patchType": "CONDITIONAL", "patch": "--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -96,4 +96,3 @@\n       // at the end of the line\n-      if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+      if (true) {\n         for (int i = 0; i < charno; i++) {\n"}]}}, {"bug_id": "62", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 00:55:31.958349", "repair_begin": "2018-12-07 00:42:59.994413", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java\\n+++ com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java\\n@@ -94,8 +94,8 @@\\n \\n \\n \\n-\\t\\t\\tif (((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n-\\t\\t\\t(0 <= charno)) && (charno < (sourceExcerpt.length()))) {\\n+\\t\\t\\tif (true) \\n+\\t\\t\\t{\\n \\t\\t\\t\\tfor (int i = 0; i < charno; i++) {\\n \\t\\t\\t\\t\\tchar c = sourceExcerpt.charAt(i);\\n \\t\\t\\t\\t\\tif (java.lang.Character.isWhitespace(c)) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n(0 <= charno)) && (charno < (sourceExcerpt.length()))) {\\n\\tfor (int i = 0; i < charno; i++) {\\n\\t\\tchar c = sourceExcerpt.charAt(i);\\n\\t\\tif (java.lang.Character.isWhitespace(c)) {\\n\\t\\t\\tb.append(c);\\n\\t\\t}else {\\n\\t\\t\\tb.append(' ');\\n\\t\\t}\\n\\t}\\n\\tb.append(\\\"^\\\\n\\\");\\n}", "PATCH_HUNK_CODE": "if (true) \\n{\\n\\tfor (int i = 0; i < charno; i++) {\\n\\t\\tchar c = sourceExcerpt.charAt(i);\\n\\t\\tif (java.lang.Character.isWhitespace(c)) {\\n\\t\\t\\tb.append(c);\\n\\t\\t}else {\\n\\t\\t\\tb.append(' ');\\n\\t\\t}\\n\\t}\\n\\tb.append(\\\"^\\\\n\\\");\\n}", "LOCATION": "com.google.javascript.jscomp.LightweightMessageFormatter", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_62\\/.\\/output_astor\\/AstorMain-Closure-62\\/\\/src\\/\\/variant-5_f\\/com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_62\\/output_astor\\/AstorMain-Closure-62\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java", "LINE": "97", "MP_RANKING": "5", "SUSPICIOUNESS": "0.447", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "6", "VALIDATION": "|true|0|7114|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_62\\/.\\/output_astor\\/AstorMain-Closure-62\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "62", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 21:39:02.722212", "repair_begin": "2018-12-07 21:33:53.145152", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java\\n+++ com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java\\n@@ -94,8 +94,8 @@\\n \\n \\n \\n-\\t\\t\\tif (((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n-\\t\\t\\t(0 <= charno)) && (charno < (sourceExcerpt.length()))) {\\n+\\t\\t\\tif (((this.excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n+\\t\\t\\t(0 <= charno)) && (charno <= (sourceExcerpt.length()))) {\\n \\t\\t\\t\\tfor (int i = 0; i < charno; i++) {\\n \\t\\t\\t\\t\\tchar c = sourceExcerpt.charAt(i);\\n \\t\\t\\t\\t\\tif (java.lang.Character.isWhitespace(c)) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n(0 <= charno)) && (charno < (sourceExcerpt.length()))", "PATCH_HUNK_CODE": "((this.excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n(0 <= charno)) && (charno <= (sourceExcerpt.length()))", "LOCATION": "com.google.javascript.jscomp.LightweightMessageFormatter", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_62\\/.\\/output_astor\\/AstorMain-Closure-62\\/\\/src\\/\\/variant-15_f\\/com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_62\\/output_astor\\/AstorMain-Closure-62\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java", "LINE": "97", "MP_RANKING": "0", "SUSPICIOUNESS": "0.447", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "15", "TIME": "29", "VALIDATION": "|true|0|7114|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Closure_62\\/.\\/output_astor\\/AstorMain-Closure-62\\/\\/bin\\/\\/variant-15"}]}}, {"bug_id": "62", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:06:54.109642", "repair_begin": "2018-12-02 02:03:04.728767", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java", "line": 97, "faulty": "if (excerpt.equals(LINE) && 0 <= charno && charno < sourceExcerpt.length()) {\n  for (int i=0; i < charno; i++) {\n    char c=sourceExcerpt.charAt(i);\n    if (Character.isWhitespace(c)) {\n      b.append(c);\n    }\n else {\n      b.append(' ');\n    }\n  }\n  b.append(\"^\\n\");\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\t2018-12-01 20:02:46.333309972 -0500\n+++ /tmp/Kali_Defects4J_Closure_62/patches_p9zu/Patch_1/patched/tmp/Kali_Defects4J_Closure_62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\t2018-12-01 20:06:53.625504119 -0500\n@@ -94,8 +94,7 @@\n       // padding equal to the excerpt and arrow at the end\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n-      if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+      if (true) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n\n\n"}]}}, {"bug_id": "62", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:15:33.131236", "repair_begin": "2018-11-29 02:13:41.833112", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1461, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1460,7 +1460,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.ENUM_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "63", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:39:21.736319", "repair_begin": "2018-12-02 00:38:02.890672", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 97, "class": "com.google.javascript.jscomp.LightweightMessageFormatter"}, "patchType": "CONDITIONAL", "patch": "--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -96,4 +96,3 @@\n       // at the end of the line\n-      if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+      if (true) {\n         for (int i = 0; i < charno; i++) {\n"}]}}, {"bug_id": "63", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 00:57:26.276417", "repair_begin": "2018-12-07 00:42:16.448630", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java\\n+++ com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java\\n@@ -94,8 +94,8 @@\\n \\n \\n \\n-\\t\\t\\tif (((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n-\\t\\t\\t(0 <= charno)) && (charno < (sourceExcerpt.length()))) {\\n+\\t\\t\\tif (true) \\n+\\t\\t\\t{\\n \\t\\t\\t\\tfor (int i = 0; i < charno; i++) {\\n \\t\\t\\t\\t\\tchar c = sourceExcerpt.charAt(i);\\n \\t\\t\\t\\t\\tif (java.lang.Character.isWhitespace(c)) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n(0 <= charno)) && (charno < (sourceExcerpt.length()))) {\\n\\tfor (int i = 0; i < charno; i++) {\\n\\t\\tchar c = sourceExcerpt.charAt(i);\\n\\t\\tif (java.lang.Character.isWhitespace(c)) {\\n\\t\\t\\tb.append(c);\\n\\t\\t}else {\\n\\t\\t\\tb.append(' ');\\n\\t\\t}\\n\\t}\\n\\tb.append(\\\"^\\\\n\\\");\\n}", "PATCH_HUNK_CODE": "if (true) \\n{\\n\\tfor (int i = 0; i < charno; i++) {\\n\\t\\tchar c = sourceExcerpt.charAt(i);\\n\\t\\tif (java.lang.Character.isWhitespace(c)) {\\n\\t\\t\\tb.append(c);\\n\\t\\t}else {\\n\\t\\t\\tb.append(' ');\\n\\t\\t}\\n\\t}\\n\\tb.append(\\\"^\\\\n\\\");\\n}", "LOCATION": "com.google.javascript.jscomp.LightweightMessageFormatter", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_63\\/.\\/output_astor\\/AstorMain-Closure-63\\/\\/src\\/\\/variant-5_f\\/com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_63\\/output_astor\\/AstorMain-Closure-63\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java", "LINE": "97", "MP_RANKING": "5", "SUSPICIOUNESS": "0.447", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "8", "VALIDATION": "|true|0|7114|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_63\\/.\\/output_astor\\/AstorMain-Closure-63\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "63", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 21:37:55.530108", "repair_begin": "2018-12-07 21:33:33.409764", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java\\n+++ com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java\\n@@ -94,8 +94,8 @@\\n \\n \\n \\n-\\t\\t\\tif (((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n-\\t\\t\\t(0 <= charno)) && (charno < (sourceExcerpt.length()))) {\\n+\\t\\t\\tif (((this.excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n+\\t\\t\\t(0 <= charno)) && (charno <= (sourceExcerpt.length()))) {\\n \\t\\t\\t\\tfor (int i = 0; i < charno; i++) {\\n \\t\\t\\t\\t\\tchar c = sourceExcerpt.charAt(i);\\n \\t\\t\\t\\t\\tif (java.lang.Character.isWhitespace(c)) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n(0 <= charno)) && (charno < (sourceExcerpt.length()))", "PATCH_HUNK_CODE": "((this.excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \\n(0 <= charno)) && (charno <= (sourceExcerpt.length()))", "LOCATION": "com.google.javascript.jscomp.LightweightMessageFormatter", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_63\\/.\\/output_astor\\/AstorMain-Closure-63\\/\\/src\\/\\/variant-15_f\\/com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_63\\/output_astor\\/AstorMain-Closure-63\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/LightweightMessageFormatter.java", "LINE": "97", "MP_RANKING": "0", "SUSPICIOUNESS": "0.447", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "15", "TIME": "27", "VALIDATION": "|true|0|7114|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Closure_63\\/.\\/output_astor\\/AstorMain-Closure-63\\/\\/bin\\/\\/variant-15"}]}}, {"bug_id": "63", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:06:45.941670", "repair_begin": "2018-12-02 02:03:00.037920", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java", "line": 97, "faulty": "if (excerpt.equals(LINE) && 0 <= charno && charno < sourceExcerpt.length()) {\n  for (int i=0; i < charno; i++) {\n    char c=sourceExcerpt.charAt(i);\n    if (Character.isWhitespace(c)) {\n      b.append(c);\n    }\n else {\n      b.append(' ');\n    }\n  }\n  b.append(\"^\\n\");\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_63/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\t2018-12-01 20:02:42.810267668 -0500\n+++ /tmp/Kali_Defects4J_Closure_63/patches_5ywv/Patch_1/patched/tmp/Kali_Defects4J_Closure_63/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\t2018-12-01 20:06:45.471265240 -0500\n@@ -94,8 +94,7 @@\n       // padding equal to the excerpt and arrow at the end\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n-      if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+      if (true) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n\n\n"}]}}, {"bug_id": "63", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 02:16:05.087410", "repair_begin": "2018-11-29 02:13:10.433163", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1461, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1460,7 +1460,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.ENUM_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "64", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:39:30.941763", "repair_begin": "2018-12-02 00:38:16.222492", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1385, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1384,7 +1384,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "64", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:09:01.287239", "repair_begin": "2018-12-02 02:02:51.073625", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/StatementFusion.java", "line": 61, "faulty": "return false;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_64/src/com/google/javascript/jscomp/StatementFusion.java\t2018-12-01 20:02:35.460405760 -0500\n+++ /tmp/Kali_Defects4J_Closure_64/patches_5224/Patch_39/patched/tmp/Kali_Defects4J_Closure_64/src/com/google/javascript/jscomp/StatementFusion.java\t2018-12-01 20:09:00.780514360 -0500\n@@ -58,7 +58,9 @@\n \n     for (Node c = block.getFirstChild(); c != null; c = c.getNext()) {\n       if (!NodeUtil.isExpressionNode(c) && c != last) {\n-        return false;\n+        if (true)\n+\t\t\treturn true;\n+\t\treturn false;\n       }\n     }\n \n\n\n"}]}}, {"bug_id": "67", "tool": "ARJA", "nb_patch": 171, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:46:28.275163", "repair_begin": "2018-12-01 15:26:03.257598", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1427, "faulty": "return res;", "type": "Delete", "seed": "return new NodeMismatch(this,node2);"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 87, "faulty": "if (specializationState == null) {\n  canRemove=true;\n}\n else {\n  Node specializableFunction=getSpecializableFunctionFromSymbol(declaration);\n  if (specializableFunction != null) {\n    specializationState.reportRemovedFunction(specializableFunction,null);\n    canRemove=true;\n  }\n}", "type": "Delete", "seed": "break;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-01 09:25:47.602554953 -0500\n+++ /tmp/Arja_Defects4J_Closure_67/patches_k844/Patch_417/patched/tmp/Arja_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-01 09:34:32.818172973 -0500\n@@ -84,19 +84,6 @@\n         for (Symbol declaration : nameInfo.getDeclarations()) {\n           boolean canRemove = false;\n \n-          if (specializationState == null) {\n-            canRemove = true;\n-          } else {\n-            Node specializableFunction =\n-              getSpecializableFunctionFromSymbol(declaration);\n-\n-            if (specializableFunction != null) {\n-              specializationState.reportRemovedFunction(\n-                  specializableFunction, null);\n-              canRemove = true;\n-            }\n-          }\n-\n           if (canRemove) {\n             declaration.remove();\n             changed = true;\n\n\n--- /tmp/Arja_Defects4J_Closure_67/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:47.626555117 -0500\n+++ /tmp/Arja_Defects4J_Closure_67/patches_k844/Patch_417/patched/tmp/Arja_Defects4J_Closure_67/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:34:32.822173000 -0500\n@@ -1424,7 +1424,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "67", "tool": "GenProg-A", "nb_patch": 355, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 13:13:14.056401", "repair_begin": "2018-12-02 12:51:53.162240", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 100, "faulty": "if (canRemove) {\n  declaration.remove();\n  changed=true;\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 100, "faulty": "if (canRemove) {\n  declaration.remove();\n  changed=true;\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 362, "faulty": "return \"ASSIGN\";", "type": "Replace", "seed": "Context cx=Context.getCurrentContext();"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-02 06:51:37.259744610 -0500\n+++ /tmp/GenProg_Defects4J_Closure_67/patches_0sb3/Patch_1126/patched/tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-02 07:06:24.388949395 -0500\n@@ -96,11 +96,6 @@\n               canRemove = true;\n             }\n           }\n-\n-          if (canRemove) {\n-            declaration.remove();\n-            changed = true;\n-          }\n         }\n \n         logger.fine(\"Removed unused prototype property: \" + nameInfo.name);\n\n\n--- /tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:51:37.283732609 -0500\n+++ /tmp/GenProg_Defects4J_Closure_67/patches_0sb3/Patch_1126/patched/tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:24.388949395 -0500\n@@ -359,7 +359,7 @@\n           case LP:              return \"LP\";\n           case RP:              return \"RP\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          Context cx = Context.getCurrentContext();\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n"}]}}, {"bug_id": "67", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:05:30.440228", "repair_begin": "2018-12-02 02:01:18.656023", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 100, "faulty": "if (canRemove) {\n  declaration.remove();\n  changed=true;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-01 20:01:04.694511695 -0500\n+++ /tmp/Kali_Defects4J_Closure_67/patches_a6mz/Patch_6/patched/tmp/Kali_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-01 20:05:29.996618104 -0500\n@@ -97,7 +97,7 @@\n             }\n           }\n \n-          if (canRemove) {\n+          if (false) {\n             declaration.remove();\n             changed = true;\n           }\n\n\n"}]}}, {"bug_id": "67", "tool": "RSRepair-A", "nb_patch": 21, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:40:47.998615", "repair_begin": "2018-12-02 14:29:17.556922", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 84, "faulty": "for (Symbol declaration : nameInfo.getDeclarations()) {\n  boolean canRemove=false;\n  if (specializationState == null) {\n    canRemove=true;\n  }\n else {\n    Node specializableFunction=getSpecializableFunctionFromSymbol(declaration);\n    if (specializableFunction != null) {\n      specializationState.reportRemovedFunction(specializableFunction,null);\n      canRemove=true;\n    }\n  }\n  if (canRemove) {\n    declaration.remove();\n    changed=true;\n  }\n}", "type": "Replace", "seed": "int start=0;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-02 08:29:01.569227355 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_67/patches_z92j/Patch_281/patched/tmp/RSRepair_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-02 08:36:23.319015681 -0500\n@@ -81,27 +81,7 @@\n     boolean changed = false;\n     for (NameInfo nameInfo : allNameInfo) {\n       if (!nameInfo.isReferenced()) {\n-        for (Symbol declaration : nameInfo.getDeclarations()) {\n-          boolean canRemove = false;\n-\n-          if (specializationState == null) {\n-            canRemove = true;\n-          } else {\n-            Node specializableFunction =\n-              getSpecializableFunctionFromSymbol(declaration);\n-\n-            if (specializableFunction != null) {\n-              specializationState.reportRemovedFunction(\n-                  specializableFunction, null);\n-              canRemove = true;\n-            }\n-          }\n-\n-          if (canRemove) {\n-            declaration.remove();\n-            changed = true;\n-          }\n-        }\n+        int start = 0;\n \n         logger.fine(\"Removed unused prototype property: \" + nameInfo.name);\n       }\n\n\n"}]}}, {"bug_id": "68", "tool": "ARJA", "nb_patch": 1052, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 16:02:30.269807", "repair_begin": "2018-12-01 15:23:50.120288", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java", "line": 887, "faulty": "parser.addParserWarning(\"msg.unexpected.eof\",stream.getLineno(),stream.getCharno());", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 09:23:33.332831255 -0500\n+++ /tmp/Arja_Defects4J_Closure_68/patches_2aye/Patch_1511/patched/tmp/Arja_Defects4J_Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 09:45:38.297803894 -0500\n@@ -884,8 +884,7 @@\n         case EOF:\n           // discard any accumulated information\n           jsdocBuilder.build(null);\n-          parser.addParserWarning(\"msg.unexpected.eof\",\n-              stream.getLineno(), stream.getCharno());\n+          ;\n           checkExtendedTypes(extendedTypes);\n           return false;\n \n\n\n"}]}}, {"bug_id": "68", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2019-02-13 23:30:37.505835", "repair_begin": "2019-02-13 23:22:45.510559", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 62, "class": "com.google.javascript.jscomp.testing.TestErrorReporter"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/testing/TestErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/testing/TestErrorReporter.java\n@@ -61,3 +61,5 @@\n     } else {\n-      fail(\"extra warning: \" + message);\n+      if (false) {\n+        fail(\"extra warning: \" + message);\n+      }\n     }\n"}]}}, {"bug_id": "68", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:06:02.460577", "repair_begin": "2018-12-02 02:01:05.074517", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java", "line": 886, "faulty": "jsdocBuilder.build(null);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 20:00:49.402701210 -0500\n+++ /tmp/Kali_Defects4J_Closure_68/patches_9acd/Patch_3/patched/tmp/Kali_Defects4J_Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 20:06:01.936002180 -0500\n@@ -882,8 +882,11 @@\n           return true;\n \n         case EOF:\n-          // discard any accumulated information\n-          jsdocBuilder.build(null);\n+          {\n+\t\t\tif (true)\n+\t\t\t\treturn true;\n+\t\t\tjsdocBuilder.build(null);\n+\t\t}\n           parser.addParserWarning(\"msg.unexpected.eof\",\n               stream.getLineno(), stream.getCharno());\n           checkExtendedTypes(extendedTypes);\n\n\n"}]}}, {"bug_id": "70", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:36:19.967185", "repair_begin": "2018-12-02 00:35:02.840030", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1385, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1384,7 +1384,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "71", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:36:17.704877", "repair_begin": "2018-12-02 00:34:59.547603", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1382, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1381,7 +1381,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "72", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:34:45.683211", "repair_begin": "2018-12-02 00:33:31.665153", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1382, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1381,7 +1381,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "72", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:04:09.875739", "repair_begin": "2018-12-02 02:00:44.876786", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1424, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_72/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:00:33.809050483 -0500\n+++ /tmp/Kali_Defects4J_Closure_72/patches_31ay/Patch_9/patched/tmp/Kali_Defects4J_Closure_72/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:04:09.449316711 -0500\n@@ -1421,7 +1421,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "75", "tool": "ARJA", "nb_patch": 277, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:45:53.070448", "repair_begin": "2018-12-01 15:23:41.083885", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 349, "faulty": "return Double.parseDouble(s);", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 265, "faulty": "reportCodeChange();", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_635/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:35:06.527507276 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_635/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:06.527507276 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n"}]}}, {"bug_id": "75", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:29:25.996212", "repair_begin": "2018-12-02 00:28:13.400103", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1371, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1370,7 +1370,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "75", "tool": "GenProg-A", "nb_patch": 340, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 13:12:23.811164", "repair_begin": "2018-12-02 12:44:48.310390", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1413, "faulty": "return res;", "type": "Delete", "seed": "return Token.RC;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 349, "faulty": "return Double.parseDouble(s);", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 375, "faulty": "return TernaryValue.TRUE;", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/CodeGenerator.java", "line": 1145, "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 349, "faulty": "return Double.parseDouble(s);", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1413, "faulty": "return res;", "type": "Delete", "seed": "return Token.RC;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 349, "faulty": "return Double.parseDouble(s);", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1413, "faulty": "return res;", "type": "Delete", "seed": "return Token.RC;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 349, "faulty": "return Double.parseDouble(s);", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 355, "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", "type": "Delete", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 355, "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", "type": "Delete", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/CodeGenerator.java", "line": 1145, "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 349, "faulty": "return Double.parseDouble(s);", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 387, "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", "type": "InsertBefore", "seed": "int index=-1;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_846/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:31.699940108 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_846/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:31.703940260 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_846/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:31.703940260 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_846/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:31.707940412 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"}]}}, {"bug_id": "75", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:03:29.050295", "repair_begin": "2018-12-02 01:59:21.966731", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 332, "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 19:59:12.215140786 -0500\n+++ /tmp/Kali_Defects4J_Closure_75/patches_l9sy/Patch_3/patched/tmp/Kali_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 20:03:28.632758076 -0500\n@@ -329,10 +329,7 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n+    if (true) {\n       // hex numbers with explicit signs vary between browsers.\n       return null;\n     }\n\n\n"}]}}, {"bug_id": "75", "tool": "RSRepair-A", "nb_patch": 3, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:19:06.956863", "repair_begin": "2018-12-02 14:07:19.175168", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 301, "faulty": "return getStringNumberValue(n.getString());", "type": "Replace", "seed": "break;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:07:09.306102473 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_75/patches_98sr/Patch_410/patched/tmp/RSRepair_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:16:38.714371845 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        break;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n\n\n"}]}}, {"bug_id": "76", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:29:35.661441", "repair_begin": "2018-12-02 00:28:19.519853", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 1369, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1368,7 +1368,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "76", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:04:00.615034", "repair_begin": "2018-12-02 01:59:48.080751", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1411, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_76/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:59:32.566148849 -0500\n+++ /tmp/Kali_Defects4J_Closure_76/patches_zn81/Patch_15/patched/tmp/Kali_Defects4J_Closure_76/src/com/google/javascript/rhino/Node.java\t2018-12-01 20:04:00.136988865 -0500\n@@ -1408,7 +1408,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "77", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:28:19.196993", "repair_begin": "2018-12-02 00:27:09.927234", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1369, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1368,7 +1368,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "78", "tool": "ARJA", "nb_patch": 1147, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:44:45.935835", "repair_begin": "2018-12-01 15:23:04.660649", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 270, "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:22:48.941670648 -0500\n+++ /tmp/Arja_Defects4J_Closure_78/patches_k0hs/Patch_2296/patched/tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:27.477562817 -0500\n@@ -267,9 +267,7 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n+        ;\n         return null;\n \n       case Token.NEG:\n\n\n--- /tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 09:22:48.921670448 -0500\n+++ /tmp/Arja_Defects4J_Closure_78/patches_k0hs/Patch_2296/patched/tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 09:42:27.485562899 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n"}]}}, {"bug_id": "78", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 00:26:58.185362", "repair_begin": "2018-12-02 00:25:45.238220", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1369, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1368,7 +1368,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.getChildCount() == 0) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "78", "tool": "GenProg-A", "nb_patch": 360, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 13:05:43.837074", "repair_begin": "2018-12-02 12:43:55.592668", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "Replace", "seed": "int type=n.getType();"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 267, "faulty": "if (name.equals(\"NaN\")) {\n  return Double.NaN;\n}", "type": "Replace", "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_207/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:06.530979308 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_207/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:51:06.534979322 -0500\n@@ -264,9 +264,7 @@\n         if (name.equals(\"undefined\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"NaN\")) {\n-          return Double.NaN;\n-        }\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n\n\n"}]}}, {"bug_id": "78", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 02:01:53.885844", "repair_begin": "2018-12-02 01:58:14.657487", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 19:58:03.284963140 -0500\n+++ /tmp/Kali_Defects4J_Closure_78/patches_eybj/Patch_25/patched/tmp/Kali_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 20:01:53.460453437 -0500\n@@ -51,7 +51,9 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    if (true)\n+\t\treturn;\n+\tcurrentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n"}]}}, {"bug_id": "78", "tool": "RSRepair-A", "nb_patch": 6, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 14:22:31.004003", "repair_begin": "2018-12-02 14:06:35.421028", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "Replace", "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 08:06:18.805965104 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_78/patches_j6j0/Patch_99/patched/tmp/RSRepair_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 08:13:16.259933956 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n"}]}}, {"bug_id": "109", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 23:31:46.996067", "repair_begin": "2018-12-01 23:27:25.741681", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1434, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1433,7 +1433,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "111", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 23:54:41.647525", "repair_begin": "2018-12-01 23:11:47.310355", "patches": [{"nb_test_that_execute_statement": 242, "patchLocation": {"line": 96, "class": "com.google.javascript.rhino.testing.Asserts"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/testing/Asserts.java\n+++ b/src/com/google/javascript/rhino/testing/Asserts.java\n@@ -95,3 +95,5 @@\n   public static void assertTypeEquals(JSType a, JSType b) {\n-    assertTypeEquals(\"\", a, b);\n+    if (false) {\n+      assertTypeEquals(\"\", a, b);\n+    }\n   }\n"}]}}, {"bug_id": "112", "tool": "ARJA", "nb_patch": 1285, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:35:04.087827", "repair_begin": "2018-12-01 15:01:32.917303", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1152, "faulty": "map.put(template,join);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1127, "faulty": "while (declParams.hasNext() && callParams.hasNext()) {\n  Node declParam=declParams.next();\n  maybeResolveTemplatedType(getJSType(declParam),getJSType(callParams.next()),resolvedTypes);\n  if (declParam.isVarArgs()) {\n    while (callParams.hasNext()) {\n      maybeResolveTemplatedType(getJSType(declParam),getJSType(callParams.next()),resolvedTypes);\n    }\n  }\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-01 09:01:13.654047680 -0500\n+++ /tmp/Arja_Defects4J_Closure_112/patches_famj/Patch_2214/patched/tmp/Arja_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-01 09:28:42.022508264 -0500\n@@ -1124,21 +1124,6 @@\n       Iterator<Node> declParams,\n       Iterator<Node> callParams,\n       Map<TemplateType, JSType> resolvedTypes) {\n-    while (declParams.hasNext() && callParams.hasNext()) {\n-      Node declParam = declParams.next();\n-      maybeResolveTemplatedType(\n-          getJSType(declParam),\n-          getJSType(callParams.next()),\n-          resolvedTypes);\n-      if (declParam.isVarArgs()) {\n-        while (callParams.hasNext()) {\n-          maybeResolveTemplatedType(\n-              getJSType(declParam),\n-              getJSType(callParams.next()),\n-              resolvedTypes);\n-        }\n-      }\n-    }\n   }\n \n   private static void resolvedTemplateType(\n@@ -1149,7 +1134,6 @@\n         map.put(template, resolved);\n       } else {\n         JSType join = previous.getLeastSupertype(resolved);\n-        map.put(template, join);\n       }\n     }\n   }\n\n\n"}]}}, {"bug_id": "112", "tool": "GenProg-A", "nb_patch": 287, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:28:50.739578", "repair_begin": "2018-12-02 11:54:48.751194", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1065, "faulty": "if (paramType.isUnionType()) {\n  UnionType unionType=paramType.toMaybeUnionType();\n  for (  JSType alernative : unionType.getAlternates()) {\n    maybeResolveTemplatedType(alernative,argType,resolvedTypes);\n  }\n}\n else if (paramType.isFunctionType()) {\n  FunctionType paramFunctionType=paramType.toMaybeFunctionType();\n  FunctionType argFunctionType=argType.restrictByNotNullOrUndefined().collapseUnion().toMaybeFunctionType();\n  if (argFunctionType != null && argFunctionType.isSubtype(paramType)) {\n    maybeResolveTemplatedType(paramFunctionType.getTypeOfThis(),argFunctionType.getTypeOfThis(),resolvedTypes);\n    maybeResolveTemplatedType(paramFunctionType.getReturnType(),argFunctionType.getReturnType(),resolvedTypes);\n    maybeResolveTemplateTypeFromNodes(paramFunctionType.getParameters(),argFunctionType.getParameters(),resolvedTypes);\n  }\n}\n else if (paramType.isTemplatizedType()) {\n  ObjectType referencedParamType=paramType.toMaybeTemplatizedType().getReferencedType();\n  JSType argObjectType=argType.restrictByNotNullOrUndefined().collapseUnion();\n  if (argObjectType.isSubtype(referencedParamType)) {\n    TemplateTypeMap paramTypeMap=paramType.getTemplateTypeMap();\n    TemplateTypeMap argTypeMap=argObjectType.getTemplateTypeMap();\n    for (    TemplateType key : paramTypeMap.getTemplateKeys()) {\n      maybeResolveTemplatedType(paramTypeMap.getTemplateType(key),argTypeMap.getTemplateType(key),resolvedTypes);\n    }\n  }\n}", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1127, "faulty": "while (declParams.hasNext() && callParams.hasNext()) {\n  Node declParam=declParams.next();\n  maybeResolveTemplatedType(getJSType(declParam),getJSType(callParams.next()),resolvedTypes);\n  if (declParam.isVarArgs()) {\n    while (callParams.hasNext()) {\n      maybeResolveTemplatedType(getJSType(declParam),getJSType(callParams.next()),resolvedTypes);\n    }\n  }\n}", "type": "Delete", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1119, "faulty": "maybeResolveTemplateTypeFromNodes(declParams.iterator(),callParams.iterator(),resolvedTypes);", "type": "Delete", "seed": "formatConclusion();"}, {"path": "src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java", "line": 94, "faulty": "for (TemplateType visitedType : visitedTypes) {\n  if (visitedType == type) {\n    return true;\n  }\n}", "type": "Delete", "seed": "return false;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-02 05:54:30.851329143 -0500\n+++ /tmp/GenProg_Defects4J_Closure_112/patches_1e4m/Patch_358/patched/tmp/GenProg_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-02 06:07:20.333404513 -0500\n@@ -1062,83 +1062,20 @@\n       // @param {T}\n       resolvedTemplateType(\n           resolvedTypes, paramType.toMaybeTemplateType(), argType);\n-    } else if (paramType.isUnionType()) {\n-      // @param {Array.<T>|NodeList|Arguments|{length:number}}\n-      UnionType unionType = paramType.toMaybeUnionType();\n-      for (JSType alernative : unionType.getAlternates()) {\n-        maybeResolveTemplatedType(alernative, argType, resolvedTypes);\n-      }\n-    } else if (paramType.isFunctionType()) {\n-      FunctionType paramFunctionType = paramType.toMaybeFunctionType();\n-      FunctionType argFunctionType = argType\n-          .restrictByNotNullOrUndefined()\n-          .collapseUnion()\n-          .toMaybeFunctionType();\n-      if (argFunctionType != null && argFunctionType.isSubtype(paramType)) {\n-        // infer from return type of the function type\n-        maybeResolveTemplatedType(\n-            paramFunctionType.getTypeOfThis(),\n-            argFunctionType.getTypeOfThis(), resolvedTypes);\n-        // infer from return type of the function type\n-        maybeResolveTemplatedType(\n-            paramFunctionType.getReturnType(),\n-            argFunctionType.getReturnType(), resolvedTypes);\n-        // infer from parameter types of the function type\n-        maybeResolveTemplateTypeFromNodes(\n-            paramFunctionType.getParameters(),\n-            argFunctionType.getParameters(), resolvedTypes);\n-      }\n-    } else if (paramType.isTemplatizedType()) {\n-      // @param {Array.<T>}\n-      ObjectType referencedParamType = paramType\n-          .toMaybeTemplatizedType()\n-          .getReferencedType();\n-      JSType argObjectType = argType\n-          .restrictByNotNullOrUndefined()\n-          .collapseUnion();\n-\n-      if (argObjectType.isSubtype(referencedParamType)) {\n-        // If the argument type is a subtype of the parameter type, resolve any\n-        // template types amongst their templatized types.\n-        TemplateTypeMap paramTypeMap = paramType.getTemplateTypeMap();\n-        TemplateTypeMap argTypeMap = argObjectType.getTemplateTypeMap();\n-        for (TemplateType key : paramTypeMap.getTemplateKeys()) {\n-          maybeResolveTemplatedType(\n-              paramTypeMap.getTemplateType(key),\n-              argTypeMap.getTemplateType(key),\n-              resolvedTypes);\n-        }\n-      }\n-    }\n+    } else\n+\t\t;\n   }\n \n   private void maybeResolveTemplateTypeFromNodes(\n       Iterable<Node> declParams,\n       Iterable<Node> callParams,\n       Map<TemplateType, JSType> resolvedTypes) {\n-    maybeResolveTemplateTypeFromNodes(\n-        declParams.iterator(), callParams.iterator(), resolvedTypes);\n   }\n \n   private void maybeResolveTemplateTypeFromNodes(\n       Iterator<Node> declParams,\n       Iterator<Node> callParams,\n       Map<TemplateType, JSType> resolvedTypes) {\n-    while (declParams.hasNext() && callParams.hasNext()) {\n-      Node declParam = declParams.next();\n-      maybeResolveTemplatedType(\n-          getJSType(declParam),\n-          getJSType(callParams.next()),\n-          resolvedTypes);\n-      if (declParam.isVarArgs()) {\n-        while (callParams.hasNext()) {\n-          maybeResolveTemplatedType(\n-              getJSType(declParam),\n-              getJSType(callParams.next()),\n-              resolvedTypes);\n-        }\n-      }\n-    }\n   }\n \n   private static void resolvedTemplateType(\n\n\n--- /tmp/GenProg_Defects4J_Closure_112/src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java\t2018-12-02 05:54:28.183329267 -0500\n+++ /tmp/GenProg_Defects4J_Closure_112/patches_1e4m/Patch_358/patched/tmp/GenProg_Defects4J_Closure_112/src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java\t2018-12-02 06:07:20.337404525 -0500\n@@ -91,11 +91,6 @@\n    * traversal of a JSType.\n    */\n   private boolean hasVisitedType(TemplateType type) {\n-    for (TemplateType visitedType : visitedTypes) {\n-      if (visitedType == type) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"}]}}, {"bug_id": "112", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:45:21.641711", "repair_begin": "2018-12-02 01:40:25.916870", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1147, "faulty": "if (!resolved.isUnknownType()) {\n  if (previous == null) {\n    map.put(template,resolved);\n  }\n else {\n    JSType join=previous.getLeastSupertype(resolved);\n    map.put(template,join);\n  }\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-01 19:40:12.327554752 -0500\n+++ /tmp/Kali_Defects4J_Closure_112/patches_if4a/Patch_8/patched/tmp/Kali_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-01 19:45:21.186157736 -0500\n@@ -1144,7 +1144,7 @@\n   private static void resolvedTemplateType(\n       Map<TemplateType, JSType> map, TemplateType template, JSType resolved) {\n     JSType previous = map.get(template);\n-    if (!resolved.isUnknownType()) {\n+    if (false) {\n       if (previous == null) {\n         map.put(template, resolved);\n       } else {\n\n\n"}]}}, {"bug_id": "112", "tool": "RSRepair-A", "nb_patch": 38, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:49:30.495623", "repair_begin": "2018-12-02 11:29:14.101317", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1149, "faulty": "map.put(template,resolved);", "type": "Delete", "seed": "int index=-1;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-02 05:28:55.270249364 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_112/patches_pvgv/Patch_31/patched/tmp/RSRepair_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-02 05:36:13.426269302 -0500\n@@ -1146,7 +1146,6 @@\n     JSType previous = map.get(template);\n     if (!resolved.isUnknownType()) {\n       if (previous == null) {\n-        map.put(template, resolved);\n       } else {\n         JSType join = previous.getLeastSupertype(resolved);\n         map.put(template, join);\n\n\n"}]}}, {"bug_id": "114", "tool": "ARJA", "nb_patch": 16, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:28:28.307047", "repair_begin": "2018-12-01 15:01:40.171912", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/NameAnalyzer.java", "line": 1723, "faulty": "replacement.detachFromParent();", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/NameAnalyzer.java", "line": 1724, "faulty": "changeProxy.replaceWith(parent,n,replacement);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1480/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:15.061415055 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1480/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:25:15.065415065 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"}]}}, {"bug_id": "114", "tool": "GenProg-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:21:47.116026", "repair_begin": "2018-12-02 11:51:48.251742", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1430, "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", "type": "InsertBefore", "seed": "this.sourcePosition=sourcePosition;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Delete", "seed": "Node block=block();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertBefore", "seed": "return null;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:27.866763740 -0500\n+++ /tmp/GenProg_Defects4J_Closure_114/patches_5fhy/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:19:34.090327018 -0500\n@@ -1427,7 +1427,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        this.sourcePosition = sourcePosition;\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1456,7 +1457,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "114", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:46:38.979758", "repair_begin": "2018-12-02 01:40:57.344626", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:40:35.174355870 -0500\n+++ /tmp/Kali_Defects4J_Closure_114/patches_vemf/Patch_3/patched/tmp/Kali_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:46:38.460684265 -0500\n@@ -1456,7 +1456,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "114", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:46:37.576273", "repair_begin": "2018-12-02 11:28:01.748519", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:27:39.849472213 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_114/patches_ekg8/Patch_390/patched/tmp/RSRepair_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:00.432220163 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "115", "tool": "ARJA", "nb_patch": 1442, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:39:29.417661", "repair_begin": "2018-12-01 14:58:00.471043", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 729, "faulty": "if (cArg != null) {\n  if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n    return CanInlineResult.NO;\n  }\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:57:41.237845843 -0500\n+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_1387/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:19:39.055863522 -0500\n@@ -726,20 +726,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n"}]}}, {"bug_id": "115", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 23:00:43.848760", "repair_begin": "2018-12-01 22:56:16.565470", "patches": [{"nb_test_that_execute_statement": 8, "patchLocation": {"line": 731, "class": "com.google.javascript.jscomp.FunctionInjector"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -730,3 +730,5 @@\n           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n+            if (false) {\n+              return CanInlineResult.NO;\n+            }\n           }\n"}]}}, {"bug_id": "115", "tool": "GenProg-A", "nb_patch": 424, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:32:31.501591", "repair_begin": "2018-12-02 11:51:04.981670", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/InlineFunctions.java", "line": 886, "faulty": "for (i=getReferencesInternal().entrySet().iterator(); i.hasNext(); ) {\n  Entry<Node,Reference> entry=i.next();\n  if (entry.getValue().mode == InliningMode.BLOCK) {\n    i.remove();\n  }\n}", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/RenameLabels.java", "line": 205, "faulty": "String newName=getNameForId(li.id);", "type": "Replace", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/RenameLabels.java", "line": 204, "faulty": "if (li != null) {\n  String newName=getNameForId(li.id);\n  li.referenced=true;\n  if (!name.equals(newName)) {\n    nameNode.setString(newName);\n    compiler.reportCodeChange();\n  }\n}", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/RenameLabels.java", "line": 204, "faulty": "if (li != null) {\n  String newName=getNameForId(li.id);\n  li.referenced=true;\n  if (!name.equals(newName)) {\n    nameNode.setString(newName);\n    compiler.reportCodeChange();\n  }\n}", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/RenameLabels.java", "line": 204, "faulty": "if (li != null) {\n  String newName=getNameForId(li.id);\n  li.referenced=true;\n  if (!name.equals(newName)) {\n    nameNode.setString(newName);\n    compiler.reportCodeChange();\n  }\n}", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/RenameLabels.java", "line": 204, "faulty": "if (li != null) {\n  String newName=getNameForId(li.id);\n  li.referenced=true;\n  if (!name.equals(newName)) {\n    nameNode.setString(newName);\n    compiler.reportCodeChange();\n  }\n}", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/RenameLabels.java", "line": 204, "faulty": "if (li != null) {\n  String newName=getNameForId(li.id);\n  li.referenced=true;\n  if (!name.equals(newName)) {\n    nameNode.setString(newName);\n    compiler.reportCodeChange();\n  }\n}", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/InlineFunctions.java", "line": 503, "faulty": "mode=InliningMode.BLOCK;", "type": "Replace", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 729, "faulty": "if (cArg != null) {\n  if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n    return CanInlineResult.NO;\n  }\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", "type": "InsertBefore", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/InlineFunctions.java", "line": 745, "faulty": "return;", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/InlineFunctions.java", "line": 691, "faulty": "fs.setRemove(false);", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/RenameLabels.java", "line": 204, "faulty": "if (li != null) {\n  String newName=getNameForId(li.id);\n  li.referenced=true;\n  if (!name.equals(newName)) {\n    nameNode.setString(newName);\n    compiler.reportCodeChange();\n  }\n}", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java", "line": 201, "faulty": "return \"JSCompiler_inline_label_\" + idSupplier.get();", "type": "InsertBefore", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "formatConclusion();"}, {"path": "src/com/google/javascript/jscomp/InlineFunctions.java", "line": 503, "faulty": "mode=InliningMode.BLOCK;", "type": "Replace", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/RenameLabels.java", "line": 188, "faulty": "visitBreakOrContinue(node);", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/jscomp/InlineFunctions.java", "line": 886, "faulty": "for (i=getReferencesInternal().entrySet().iterator(); i.hasNext(); ) {\n  Entry<Node,Reference> entry=i.next();\n  if (entry.getValue().mode == InliningMode.BLOCK) {\n    i.remove();\n  }\n}", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 729, "faulty": "if (cArg != null) {\n  if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n    return CanInlineResult.NO;\n  }\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "int count=0;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-02 05:50:39.827963105 -0500\n+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1345/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-02 06:26:05.236114532 -0500\n@@ -726,21 +726,8 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n+        final String paramName = \"jscomp_throw_param\";\n+\t\t// Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java\t2018-12-02 05:50:36.879963209 -0500\n+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1345/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java\t2018-12-02 06:26:05.240114637 -0500\n@@ -498,9 +498,7 @@\n           t, fs, callNode, module, mode);\n       if (!referenceAdded &&\n           mode == InliningMode.DIRECT && blockFunctionInliningEnabled) {\n-        // This reference can not be directly inlined, see if\n-        // block replacement inlining is possible.\n-        mode = InliningMode.BLOCK;\n+        final String paramName = \"jscomp_throw_param\";\n         referenceAdded = maybeAddReferenceUsingMode(\n             t, fs, callNode, module, mode);\n       }\n@@ -688,7 +686,6 @@\n     if (!inliningLowersCost(fs)) {\n       // Try again without Block inlining references\n       if (fs.hasBlockInliningReferences()) {\n-        fs.setRemove(false);\n         fs.removeBlockInliningReferences();\n         if (!fs.hasReferences() || !inliningLowersCost(fs)) {\n           return false;\n@@ -742,7 +739,6 @@\n   private void resolveInlineConflictsForFunction(FunctionState fs) {\n     // Functions that aren't referenced don't cause conflicts.\n     if (!fs.hasReferences() || !fs.canInline()) {\n-      return;\n     }\n \n     Node fnNode = fs.getFn().getFunctionNode();\n@@ -883,12 +879,6 @@\n \n     void removeBlockInliningReferences() {\n       Iterator<Entry<Node, Reference>> i;\n-      for (i = getReferencesInternal().entrySet().iterator(); i.hasNext();) {\n-        Entry<Node, Reference> entry = i.next();\n-        if (entry.getValue().mode == InliningMode.BLOCK) {\n-          i.remove();\n-        }\n-      }\n     }\n \n     public boolean hasBlockInliningReferences() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\t2018-12-02 05:50:36.875963209 -0500\n+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1345/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\t2018-12-02 06:26:05.244114742 -0500\n@@ -198,7 +198,8 @@\n \n     @Override\n     public String get() {\n-        return \"JSCompiler_inline_label_\" + idSupplier.get();\n+        final String paramName = \"jscomp_throw_param\";\n+\t\treturn \"JSCompiler_inline_label_\" + idSupplier.get();\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:37.095963201 -0500\n+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1345/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:26:05.244114742 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        int count = 0;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java\t2018-12-02 05:50:36.899963208 -0500\n+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1345/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java\t2018-12-02 06:26:05.248114849 -0500\n@@ -185,7 +185,7 @@\n \n         case Token.BREAK:\n         case Token.CONTINUE:\n-          visitBreakOrContinue(node);\n+          ;\n           break;\n       }\n     }\n@@ -201,16 +201,7 @@\n         String name = nameNode.getString();\n         Preconditions.checkState(name.length() != 0);\n         LabelInfo li = getLabelInfo(name);\n-        if (li != null) {\n-          String newName = getNameForId(li.id);\n-          // Mark the label as referenced so it isn't removed.\n-          li.referenced = true;\n-          if (!name.equals(newName)) {\n-            // Give it the short name.\n-            nameNode.setString(newName);\n-            compiler.reportCodeChange();\n-          }\n-        }\n+        int index = -1;\n       }\n     }\n \n\n\n"}]}}, {"bug_id": "115", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 08:58:05.543844", "repair_begin": "2018-12-01 07:26:25.982638", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java\\n+++ com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java\\n@@ -699,7 +699,7 @@\\n \\t\\t\\tcom.google.common.base.Preconditions.checkState(block.hasOneChild());\\n \\t\\t\\tcom.google.javascript.rhino.Node stmt = block.getFirstChild();\\n \\t\\t\\tif (stmt.isReturn()) {\\n-\\t\\t\\t\\thasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\\n+\\n \\t\\t\\t}\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "hasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler)", "INGREDIENT_SCOPE": "-", "LOCATION": "com.google.javascript.jscomp.FunctionInjector", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_115\\/.\\/output_astor\\/AstorMain-Closure-115\\/\\/src\\/\\/variant-216_f\\/com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_115\\/output_astor\\/AstorMain-Closure-115\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java", "LINE": "702", "MP_RANKING": "64", "SUSPICIOUNESS": "0.164"}], "GENERATION": "108", "VARIANT_ID": "216", "TIME": "1865", "VALIDATION": "|true|0|8309|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Closure_115\\/.\\/output_astor\\/AstorMain-Closure-115\\/\\/bin\\/\\/variant-216"}]}}, {"bug_id": "115", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 00:40:11.403943", "repair_begin": "2018-12-07 00:14:54.384996", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java\\n+++ com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java\\n@@ -728,7 +728,7 @@\\n \\t\\t\\tif (fnParam != null) {\\n \\t\\t\\t\\tif (cArg != null) {\\n \\t\\t\\t\\t\\tif (hasSideEffects && (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(cArg))) {\\n-\\t\\t\\t\\t\\t\\treturn com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;\\n+\\n \\t\\t\\t\\t\\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO", "LOCATION": "com.google.javascript.jscomp.FunctionInjector", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_115\\/.\\/output_astor\\/AstorMain-Closure-115\\/\\/src\\/\\/variant-3_f\\/com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_115\\/output_astor\\/AstorMain-Closure-115\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java", "LINE": "731", "MP_RANKING": "2", "SUSPICIOUNESS": "0.668"}], "GENERATION": "1", "VARIANT_ID": "3", "TIME": "44", "VALIDATION": "|true|0|8309|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_115\\/.\\/output_astor\\/AstorMain-Closure-115\\/\\/bin\\/\\/variant-3"}]}}, {"bug_id": "115", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 20:52:46.270301", "repair_begin": "2018-12-07 20:42:53.329810", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java\\n+++ com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java\\n@@ -698,7 +698,7 @@\\n \\t\\tif (block.hasChildren()) {\\n \\t\\t\\tcom.google.common.base.Preconditions.checkState(block.hasOneChild());\\n \\t\\t\\tcom.google.javascript.rhino.Node stmt = block.getFirstChild();\\n-\\t\\t\\tif (stmt.isReturn()) {\\n+\\t\\t\\tif (!(stmt.isReturn())) {\\n \\t\\t\\t\\thasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\\n \\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtIfImpl", "ORIGINAL_CODE": "stmt.isReturn()", "PATCH_HUNK_CODE": "!\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(stmt.isReturn())", "LOCATION": "com.google.javascript.jscomp.FunctionInjector", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_115\\/.\\/output_astor\\/AstorMain-Closure-115\\/\\/src\\/\\/variant-47_f\\/com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_115\\/output_astor\\/AstorMain-Closure-115\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java", "LINE": "701", "MP_RANKING": "8", "SUSPICIOUNESS": "0.164", "PATCH_HUNK_TYPE": "CtUnaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "47", "TIME": "265", "VALIDATION": "|true|0|8309|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Closure_115\\/.\\/output_astor\\/AstorMain-Closure-115\\/\\/bin\\/\\/variant-47"}]}}, {"bug_id": "115", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:47:28.744077", "repair_begin": "2018-12-02 01:40:51.214731", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 730, "faulty": "if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n  return CanInlineResult.NO;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 19:40:30.353190167 -0500\n+++ /tmp/Kali_Defects4J_Closure_115/patches_nxsz/Patch_2/patched/tmp/Kali_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 19:47:28.231727638 -0500\n@@ -727,7 +727,7 @@\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+          if (false) {\n             return CanInlineResult.NO;\n           }\n           // Check for arguments that are evaluated more than once.\n\n\n"}]}}, {"bug_id": "115", "tool": "RSRepair-A", "nb_patch": 24, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:50:23.063724", "repair_begin": "2018-12-02 11:27:51.283109", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 730, "faulty": "if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n  return CanInlineResult.NO;\n}", "type": "InsertBefore", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 729, "faulty": "if (cArg != null) {\n  if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n    return CanInlineResult.NO;\n  }\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", "type": "Delete", "seed": "int start=0;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-02 05:27:32.386156206 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_115/patches_r0m3/Patch_87/patched/tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-02 05:36:00.535720996 -0500\n@@ -726,20 +726,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n"}]}}, {"bug_id": "116", "tool": "ARJA", "nb_patch": 99, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:29:51.986226", "repair_begin": "2018-12-01 14:51:23.523634", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 555, "faulty": "return true;", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", "line": 196, "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:26:47.174566503 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:26:47.178566521 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:47.178566521 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "117", "tool": "ARJA", "nb_patch": 833, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:13:06.185257", "repair_begin": "2018-12-01 14:50:48.151171", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1805, "faulty": "maybeCollectMember(child,child,null);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-01 08:50:26.003678223 -0500\n+++ /tmp/Arja_Defects4J_Closure_117/patches_1kvo/Patch_1061/patched/tmp/Arja_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-01 09:04:51.697528269 -0500\n@@ -1802,7 +1802,7 @@\n                   child.getLastChild());\n               break;\n             case Token.GETPROP:\n-              maybeCollectMember(child, child, null);\n+              ;\n               break;\n           }\n         }\n\n\n"}]}}, {"bug_id": "117", "tool": "GenProg-A", "nb_patch": 7, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:31:33.152211", "repair_begin": "2018-12-02 11:46:14.342287", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1805, "faulty": "maybeCollectMember(child,child,null);", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 930, "faulty": "scope.inferQualifiedSlot(node,node.getQualifiedName(),getJSType(node),narrowed);", "type": "Replace", "seed": "int index=-1;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-02 05:45:45.915521246 -0500\n+++ /tmp/GenProg_Defects4J_Closure_117/patches_396n/Patch_970/patched/tmp/GenProg_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-02 06:12:33.534557375 -0500\n@@ -927,8 +927,7 @@\n \n     scope = scope.createChildFlowScope();\n     if (node.isGetProp()) {\n-      scope.inferQualifiedSlot(\n-          node, node.getQualifiedName(), getJSType(node), narrowed);\n+      int index = -1;\n     } else {\n       redeclareSimpleVar(scope, node, narrowed);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:45:45.919523247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_117/patches_396n/Patch_970/patched/tmp/GenProg_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:33.538557548 -0500\n@@ -1802,7 +1802,7 @@\n                   child.getLastChild());\n               break;\n             case Token.GETPROP:\n-              maybeCollectMember(child, child, null);\n+              ;\n               break;\n           }\n         }\n\n\n"}]}}, {"bug_id": "117", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:41:16.182665", "repair_begin": "2018-12-02 01:37:19.049394", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1805, "faulty": "maybeCollectMember(child,child,null);", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-01 19:37:03.477325581 -0500\n+++ /tmp/Kali_Defects4J_Closure_117/patches_06en/Patch_3/patched/tmp/Kali_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-01 19:41:15.725715759 -0500\n@@ -1802,7 +1802,11 @@\n                   child.getLastChild());\n               break;\n             case Token.GETPROP:\n-              maybeCollectMember(child, child, null);\n+              {\n+\t\t\t\tif (true)\n+\t\t\t\t\treturn;\n+\t\t\t\tmaybeCollectMember(child, child, null);\n+\t\t\t}\n               break;\n           }\n         }\n\n\n"}]}}, {"bug_id": "117", "tool": "RSRepair-A", "nb_patch": 9, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:41:09.689711", "repair_begin": "2018-12-02 11:24:18.312688", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1805, "faulty": "maybeCollectMember(child,child,null);", "type": "Replace", "seed": "JSType type=n.getJSType();"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:24:03.002420387 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_117/patches_dssd/Patch_26/patched/tmp/RSRepair_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:28:33.618578466 -0500\n@@ -1802,7 +1802,7 @@\n                   child.getLastChild());\n               break;\n             case Token.GETPROP:\n-              maybeCollectMember(child, child, null);\n+              JSType type = n.getJSType();\n               break;\n           }\n         }\n\n\n"}]}}, {"bug_id": "118", "tool": "ARJA", "nb_patch": 1357, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:23:57.420648", "repair_begin": "2018-12-01 14:50:40.784872", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 442, "faulty": "handleObjectLit(t,n);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-01 08:50:21.552921286 -0500\n+++ /tmp/Arja_Defects4J_Closure_118/patches_pkqi/Patch_2343/patched/tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-01 09:18:12.101300290 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n\n\n"}]}}, {"bug_id": "118", "tool": "GenProg-A", "nb_patch": 394, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:18:16.161964", "repair_begin": "2018-12-02 11:44:16.376649", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", "line": 1417, "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 491, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", "line": 1417, "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 491, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", "line": 1419, "faulty": "poType.clearCachedValues();", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 497, "faulty": "String name=child.getString();", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 491, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", "line": 1417, "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 491, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 491, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 491, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 491, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1673, "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", "type": "InsertBefore", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 500, "faulty": "Property prop=getProperty(name);", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 501, "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", "type": "InsertBefore", "seed": "formatConclusion();"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1272/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:47.968016516 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1272/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:47.972016532 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1272/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:47.972016532 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"}]}}, {"bug_id": "118", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:46:16.051281", "repair_begin": "2018-12-02 01:37:45.220540", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 501, "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-01 19:37:25.302976717 -0500\n+++ /tmp/Kali_Defects4J_Closure_118/patches_pv93/Patch_1/patched/tmp/Kali_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-01 19:46:15.540507038 -0500\n@@ -498,8 +498,7 @@\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n+        if (true) {\n           // TODO(user): It doesn't look like the user can do much in this\n           // case right now.\n           if (propertiesToErrorFor.containsKey(name)) {\n\n\n"}]}}, {"bug_id": "118", "tool": "RSRepair-A", "nb_patch": 16, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:43:38.808004", "repair_begin": "2018-12-02 11:24:43.961213", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 491, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", "type": "Replace", "seed": "int index=-1;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_101/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:34:53.411088794 -0500\n@@ -488,28 +488,7 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n+      int index = -1;\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"}]}}, {"bug_id": "119", "tool": "ARJA", "nb_patch": 31, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:06:38.580081", "repair_begin": "2018-12-01 14:50:35.133980", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 159, "faulty": "reportRefToUndefinedName(name,ref);", "type": "Delete", "seed": "this.level=level;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-01 08:50:13.675964832 -0500\n+++ /tmp/Arja_Defects4J_Closure_119/patches_yqon/Patch_17/patched/tmp/Arja_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-01 08:55:53.896912085 -0500\n@@ -156,7 +156,6 @@\n \n       if (!isDefined && !isTypedef(ref)) {\n         if (!isGlobalExpr) {\n-          reportRefToUndefinedName(name, ref);\n         }\n       } else if (declaration != null &&\n           ref.getModule() != declaration.getModule() &&\n\n\n"}]}}, {"bug_id": "119", "tool": "GenProg-A", "nb_patch": 32, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:10:22.747726", "repair_begin": "2018-12-02 11:43:05.726644", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 158, "faulty": "if (!isGlobalExpr) {\n  reportRefToUndefinedName(name,ref);\n}", "type": "Replace", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 220, "faulty": "name=name.parent;", "type": "InsertBefore", "seed": "int start=0;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 05:42:43.834215860 -0500\n+++ /tmp/GenProg_Defects4J_Closure_119/patches_io4p/Patch_607/patched/tmp/GenProg_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 05:55:02.435151917 -0500\n@@ -155,9 +155,7 @@\n       boolean isGlobalExpr = ref.getNode().getParent().isExprResult();\n \n       if (!isDefined && !isTypedef(ref)) {\n-        if (!isGlobalExpr) {\n-          reportRefToUndefinedName(name, ref);\n-        }\n+        final String paramName = \"jscomp_throw_param\";\n       } else if (declaration != null &&\n           ref.getModule() != declaration.getModule() &&\n           !moduleGraph.dependsOn(\n@@ -217,7 +215,8 @@\n     // grab the highest undefined ancestor to output in the warning message.\n     while (name.parent != null &&\n            name.parent.globalSets + name.parent.localSets == 0) {\n-      name = name.parent;\n+      int start = 0;\n+\tname = name.parent;\n     }\n \n     compiler.report(\n\n\n"}]}}, {"bug_id": "119", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:34:25.987250", "repair_begin": "2018-12-02 01:30:53.996052", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 158, "faulty": "if (!isGlobalExpr) {\n  reportRefToUndefinedName(name,ref);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-01 19:30:38.424610660 -0500\n+++ /tmp/Kali_Defects4J_Closure_119/patches_15ui/Patch_2/patched/tmp/Kali_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-01 19:34:25.529020057 -0500\n@@ -155,7 +155,7 @@\n       boolean isGlobalExpr = ref.getNode().getParent().isExprResult();\n \n       if (!isDefined && !isTypedef(ref)) {\n-        if (!isGlobalExpr) {\n+        if (false) {\n           reportRefToUndefinedName(name, ref);\n         }\n       } else if (declaration != null &&\n\n\n"}]}}, {"bug_id": "119", "tool": "RSRepair-A", "nb_patch": 21, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:55:58.359084", "repair_begin": "2018-12-02 11:20:57.531123", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 158, "faulty": "if (!isGlobalExpr) {\n  reportRefToUndefinedName(name,ref);\n}", "type": "Replace", "seed": "int index=-1;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 05:20:35.521619059 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_119/patches_u5xu/Patch_193/patched/tmp/RSRepair_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 05:31:36.650286353 -0500\n@@ -155,9 +155,7 @@\n       boolean isGlobalExpr = ref.getNode().getParent().isExprResult();\n \n       if (!isDefined && !isTypedef(ref)) {\n-        if (!isGlobalExpr) {\n-          reportRefToUndefinedName(name, ref);\n-        }\n+        int index = -1;\n       } else if (declaration != null &&\n           ref.getModule() != declaration.getModule() &&\n           !moduleGraph.dependsOn(\n\n\n"}]}}, {"bug_id": "120", "tool": "ARJA", "nb_patch": 20, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:12:40.389169", "repair_begin": "2018-12-01 14:50:31.513176", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return new NodeMismatch(this,node2);", "type": "InsertBefore", "seed": "this.sourcePosition=sourcePosition;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_120/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:09.665911758 -0500\n+++ /tmp/Arja_Defects4J_Closure_120/patches_ng6x/Patch_1187/patched/tmp/Arja_Defects4J_Closure_120/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:34.936968012 -0500\n@@ -1443,7 +1443,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1456,7 +1457,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "120", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:34:28.642776", "repair_begin": "2018-12-02 01:30:27.443052", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_120/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:30:11.800514756 -0500\n+++ /tmp/Kali_Defects4J_Closure_120/patches_bneu/Patch_3/patched/tmp/Kali_Defects4J_Closure_120/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:34:28.181910821 -0500\n@@ -1456,7 +1456,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "120", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:33:22.360299", "repair_begin": "2018-12-02 11:18:55.581806", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_120/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:18:39.397859736 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_120/patches_xaby/Patch_678/patched/tmp/RSRepair_Defects4J_Closure_120/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:28:54.391093665 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "121", "tool": "ARJA", "nb_patch": 31, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:11:53.078085", "repair_begin": "2018-12-01 14:49:50.650073", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1430, "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", "type": "Replace", "seed": "return \"PARAM_LIST\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/Arja_Defects4J_Closure_121/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:49:29.457654604 -0500\n+++ /tmp/Arja_Defects4J_Closure_121/patches_g62h/Patch_989/patched/tmp/Arja_Defects4J_Closure_121/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:05:36.383045596 -0500\n@@ -1427,11 +1427,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n@@ -1456,7 +1452,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "121", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:36:19.902720", "repair_begin": "2018-12-02 01:30:55.253508", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_121/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:30:32.586318621 -0500\n+++ /tmp/Kali_Defects4J_Closure_121/patches_9b2m/Patch_3/patched/tmp/Kali_Defects4J_Closure_121/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:36:19.364331582 -0500\n@@ -1456,7 +1456,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "121", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:32:34.426594", "repair_begin": "2018-12-02 11:18:02.115463", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_121/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:17:46.551234616 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_121/patches_gtif/Patch_495/patched/tmp/RSRepair_Defects4J_Closure_121/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:26:26.369247641 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "122", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:34:37.715827", "repair_begin": "2018-12-02 01:29:45.991161", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/parsing/IRFactory.java", "line": 252, "faulty": "if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n  errorReporter.warning(SUSPICIOUS_COMMENT_WARNING,sourceName,comment.getLineno(),\"\",0);\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_122/src/com/google/javascript/jscomp/parsing/IRFactory.java\t2018-12-01 19:29:26.610491418 -0500\n+++ /tmp/Kali_Defects4J_Closure_122/patches_y24k/Patch_1/patched/tmp/Kali_Defects4J_Closure_122/src/com/google/javascript/jscomp/parsing/IRFactory.java\t2018-12-01 19:34:37.203864009 -0500\n@@ -249,7 +249,7 @@\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n   private void handleBlockComment(Comment comment) {\n-    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n+    if (true) {\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,\n\n\n"}]}}, {"bug_id": "124", "tool": "ARJA", "nb_patch": 583, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:13:58.987126", "repair_begin": "2018-12-01 14:47:28.023253", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 55, "faulty": "reportCodeChange();", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 219, "faulty": "return true;", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 151, "faulty": "parent.replaceChild(next,assign);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-01 08:47:09.466479311 -0500\n+++ /tmp/Arja_Defects4J_Closure_124/patches_uw31/Patch_2138/patched/tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-01 09:13:27.890893083 -0500\n@@ -52,7 +52,6 @@\n       reportCodeChange();\n     } else if (isCollapsibleValue(rightValue, false) &&\n         collapseAssignEqualTo(expr, exprParent, rightValue)) {\n-      reportCodeChange();\n     } else if (rightValue.isAssign()) {\n       // Recursively deal with nested assigns.\n       collapseAssign(rightValue, expr, exprParent);\n@@ -148,7 +147,6 @@\n \n               exprParent.removeChild(expr);\n               expr.removeChild(assign);\n-              parent.replaceChild(next, assign);\n               return true;\n             }\n           }\n@@ -216,7 +214,7 @@\n       return false;\n     }\n \n-    return true;\n+    return false;\n   }\n \n   /**\n\n\n"}]}}, {"bug_id": "124", "tool": "GenProg-A", "nb_patch": 366, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:10:10.179264", "repair_begin": "2018-12-02 11:36:26.001114", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 138, "faulty": "if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n  if (!isSafeReplacement(next,assign)) {\n    return false;\n  }\n  exprParent.removeChild(expr);\n  expr.removeChild(assign);\n  parent.replaceChild(next,assign);\n  return true;\n}", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 213, "faulty": "node=node.getFirstChild();", "type": "Delete", "seed": "formatConclusion();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 138, "faulty": "if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n  if (!isSafeReplacement(next,assign)) {\n    return false;\n  }\n  exprParent.removeChild(expr);\n  expr.removeChild(assign);\n  parent.replaceChild(next,assign);\n  return true;\n}", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 177, "faulty": "break;", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 138, "faulty": "if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n  if (!isSafeReplacement(next,assign)) {\n    return false;\n  }\n  exprParent.removeChild(expr);\n  expr.removeChild(assign);\n  parent.replaceChild(next,assign);\n  return true;\n}", "type": "Delete", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 149, "faulty": "exprParent.removeChild(expr);", "type": "InsertBefore", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 138, "faulty": "if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n  if (!isSafeReplacement(next,assign)) {\n    return false;\n  }\n  exprParent.removeChild(expr);\n  expr.removeChild(assign);\n  parent.replaceChild(next,assign);\n  return true;\n}", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 211, "faulty": "Preconditions.checkArgument(node.isGetProp());", "type": "Replace", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 208, "faulty": "if (node.isName()) {\n  return true;\n}", "type": "Delete", "seed": "return new DefaultCodingConvention();"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 05:36:00.557086818 -0500\n+++ /tmp/GenProg_Defects4J_Closure_124/patches_wpdl/Patch_2005/patched/tmp/GenProg_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 06:09:01.765066957 -0500\n@@ -135,22 +135,6 @@\n         case Token.NAME:\n           if (next.isQualifiedName()) {\n             String nextName = next.getQualifiedName();\n-            if (value.isQualifiedName() &&\n-                nextName.equals(value.getQualifiedName())) {\n-              // If the previous expression evaluates to value of a\n-              // qualified name, and that qualified name is used again\n-              // shortly, then we can exploit the assign here.\n-\n-              // Verify the assignment doesn't change its own value.\n-              if (!isSafeReplacement(next, assign)) {\n-                return false;\n-              }\n-\n-              exprParent.removeChild(expr);\n-              expr.removeChild(assign);\n-              parent.replaceChild(next, assign);\n-              return true;\n-            }\n           }\n           return false;\n \n@@ -174,7 +158,6 @@\n             // Dive down the right side of the assign.\n             parent = next;\n             next = leftSide.getNext();\n-            break;\n           } else {\n             return false;\n           }\n@@ -204,14 +187,9 @@\n    * @return Whether the replacement can be made.\n    */\n   private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n+    int start = 0;\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n+      if (node.isName()\n         && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n     }\n\n\n"}]}}, {"bug_id": "124", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:32:22.257876", "repair_begin": "2018-12-02 01:28:22.480230", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 214, "faulty": "if (node.isName() && isNameAssignedTo(node.getString(),replacement)) {\n  return false;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-01 19:28:09.304862752 -0500\n+++ /tmp/Kali_Defects4J_Closure_124/patches_8g7z/Patch_1/patched/tmp/Kali_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-01 19:32:21.800741750 -0500\n@@ -211,8 +211,7 @@\n     Preconditions.checkArgument(node.isGetProp());\n \n       node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+    if (true) {\n       return false;\n     }\n \n\n\n"}]}}, {"bug_id": "124", "tool": "RSRepair-A", "nb_patch": 45, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:34:35.493994", "repair_begin": "2018-12-02 11:18:09.984998", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 177, "faulty": "break;", "type": "Replace", "seed": "return false;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 05:17:57.266954096 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_124/patches_b4al/Patch_617/patched/tmp/RSRepair_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 05:30:14.273345550 -0500\n@@ -174,7 +174,7 @@\n             // Dive down the right side of the assign.\n             parent = next;\n             next = leftSide.getNext();\n-            break;\n+            return false;\n           } else {\n             return false;\n           }\n\n\n"}]}}, {"bug_id": "125", "tool": "ARJA", "nb_patch": 1502, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:16:35.030613", "repair_begin": "2018-12-01 14:47:41.129229", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java", "line": 203, "faulty": "return caseEquality(condition,blindScope,SHEQ);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_125/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java\t2018-12-01 08:47:19.455896889 -0500\n+++ /tmp/Arja_Defects4J_Closure_125/patches_0gzx/Patch_2156/patched/tmp/Arja_Defects4J_Closure_125/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java\t2018-12-01 09:08:53.673757899 -0500\n@@ -200,7 +200,6 @@\n \n       case Token.SHEQ:\n         if (outcome) {\n-          return caseEquality(condition, blindScope, SHEQ);\n         } else {\n           return caseEquality(condition, blindScope, SHNE);\n         }\n\n\n"}]}}, {"bug_id": "125", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 22:54:03.171989", "repair_begin": "2018-12-01 22:51:49.580531", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (this.isAdd()) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "125", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:34:03.428145", "repair_begin": "2018-12-02 01:28:42.835421", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java", "line": 202, "faulty": "if (outcome) {\n  return caseEquality(condition,blindScope,SHEQ);\n}\n else {\n  return caseEquality(condition,blindScope,SHNE);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_125/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java\t2018-12-01 19:28:20.327041636 -0500\n+++ /tmp/Kali_Defects4J_Closure_125/patches_0osh/Patch_2/patched/tmp/Kali_Defects4J_Closure_125/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java\t2018-12-01 19:34:02.920729415 -0500\n@@ -199,7 +199,7 @@\n         }\n \n       case Token.SHEQ:\n-        if (outcome) {\n+        if (false) {\n           return caseEquality(condition, blindScope, SHEQ);\n         } else {\n           return caseEquality(condition, blindScope, SHNE);\n\n\n"}]}}, {"bug_id": "125", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:33:46.011867", "repair_begin": "2018-11-29 01:25:49.377258", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 31) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "126", "tool": "ARJA", "nb_patch": 1039, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:15:38.697816", "repair_begin": "2018-12-01 14:46:50.632013", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 143, "faulty": "tryMinimizeExits(finallyBlock,exitType,labelName);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-01 08:46:30.980378793 -0500\n+++ /tmp/Arja_Defects4J_Closure_126/patches_shfw/Patch_1085/patched/tmp/Arja_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-01 09:02:50.890990290 -0500\n@@ -140,7 +140,6 @@\n        */\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n     }\n \n\n\n"}]}}, {"bug_id": "126", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 22:52:36.912129", "repair_begin": "2018-12-01 22:49:59.023269", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 143, "class": "com.google.javascript.jscomp.MinimizeExitPoints"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -142,3 +142,5 @@\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+        if (false) {\n+          tryMinimizeExits(finallyBlock, exitType, labelName);\n+        }\n       }\n"}]}}, {"bug_id": "126", "tool": "GenProg-A", "nb_patch": 409, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:58:48.883152", "repair_begin": "2018-12-02 11:32:49.483565", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 141, "faulty": "if (NodeUtil.hasFinally(n)) {\n  Node finallyBlock=n.getLastChild();\n  tryMinimizeExits(finallyBlock,exitType,labelName);\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 142, "faulty": "Node finallyBlock=n.getLastChild();", "type": "Replace", "seed": "int type=n.getType();"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 142, "faulty": "Node finallyBlock=n.getLastChild();", "type": "Replace", "seed": "int type=n.getType();"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 142, "faulty": "Node finallyBlock=n.getLastChild();", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 141, "faulty": "if (NodeUtil.hasFinally(n)) {\n  Node finallyBlock=n.getLastChild();\n  tryMinimizeExits(finallyBlock,exitType,labelName);\n}", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 141, "faulty": "if (NodeUtil.hasFinally(n)) {\n  Node finallyBlock=n.getLastChild();\n  tryMinimizeExits(finallyBlock,exitType,labelName);\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 229, "faulty": "return \"TRY\";", "type": "Delete", "seed": "int c=0;"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 142, "faulty": "Node finallyBlock=n.getLastChild();", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 224, "faulty": "return \"THROW\";", "type": "Replace", "seed": "StringBuilder sb=new StringBuilder();"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_126/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:27.906962217 -0500\n+++ /tmp/GenProg_Defects4J_Closure_126/patches_go4m/Patch_1630/patched/tmp/GenProg_Defects4J_Closure_126/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:19.863532238 -0500\n@@ -221,12 +221,12 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           StringBuilder sb = new StringBuilder();\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-02 05:32:30.886962148 -0500\n+++ /tmp/GenProg_Defects4J_Closure_126/patches_go4m/Patch_1630/patched/tmp/GenProg_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-02 05:57:19.863532238 -0500\n@@ -134,14 +134,6 @@\n         Node catchCodeBlock = catchNode.getLastChild();\n         tryMinimizeExits(catchCodeBlock, exitType, labelName);\n       }\n-      /* Don't try to minimize the exits of finally blocks, as this\n-       * can cause problems if it changes the completion type of the finally\n-       * block. See ECMA 262 Sections 8.9 & 12.14\n-       */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n     }\n \n     // Just a 'label'.\n\n\n"}]}}, {"bug_id": "126", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 07:44:01.957726", "repair_begin": "2018-12-01 06:47:17.745102", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java\\n+++ com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java\\n@@ -138,10 +138,10 @@\\n \\n \\n \\n-\\t\\t\\tif (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\\n-\\t\\t\\t\\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\\n-\\t\\t\\t\\ttryMinimizeExits(finallyBlock, exitType, labelName);\\n-\\t\\t\\t}\\n+\\n+\\n+\\n+\\n \\t\\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\\n\\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\\n\\ttryMinimizeExits(finallyBlock, exitType, labelName);\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "com.google.javascript.jscomp.MinimizeExitPoints", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_126\\/.\\/output_astor\\/AstorMain-Closure-126\\/\\/src\\/\\/variant-42_f\\/com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_126\\/output_astor\\/AstorMain-Closure-126\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java", "LINE": "141", "MP_RANKING": "14", "SUSPICIOUNESS": "0.408"}], "GENERATION": "21", "VARIANT_ID": "42", "TIME": "295", "VALIDATION": "|true|0|8011|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Closure_126\\/.\\/output_astor\\/AstorMain-Closure-126\\/\\/bin\\/\\/variant-42"}]}}, {"bug_id": "126", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 00:27:56.203073", "repair_begin": "2018-12-07 00:11:42.105921", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java\\n+++ com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java\\n@@ -138,7 +138,7 @@\\n \\n \\n \\n-\\t\\t\\tif (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\\n+\\t\\t\\tif (false) {\\n \\t\\t\\t\\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\\n \\t\\t\\t\\ttryMinimizeExits(finallyBlock, exitType, labelName);\\n \\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\\n\\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\\n\\ttryMinimizeExits(finallyBlock, exitType, labelName);\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\\n\\ttryMinimizeExits(finallyBlock, exitType, labelName);\\n}", "LOCATION": "com.google.javascript.jscomp.MinimizeExitPoints", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_126\\/.\\/output_astor\\/AstorMain-Closure-126\\/\\/src\\/\\/variant-16_f\\/com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_126\\/output_astor\\/AstorMain-Closure-126\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java", "LINE": "141", "MP_RANKING": "14", "SUSPICIOUNESS": "0.408", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "16", "TIME": "74", "VALIDATION": "|true|0|8011|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_126\\/.\\/output_astor\\/AstorMain-Closure-126\\/\\/bin\\/\\/variant-16"}]}}, {"bug_id": "126", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 20:40:01.518609", "repair_begin": "2018-12-07 20:33:29.831800", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java\\n+++ com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java\\n@@ -138,7 +138,7 @@\\n \\n \\n \\n-\\t\\t\\tif (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\\n+\\t\\t\\tif (!(com.google.javascript.jscomp.NodeUtil.hasFinally(n))) {\\n \\t\\t\\t\\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\\n \\t\\t\\t\\ttryMinimizeExits(finallyBlock, exitType, labelName);\\n \\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtIfImpl", "ORIGINAL_CODE": "com.google.javascript.jscomp.NodeUtil.hasFinally(n)", "PATCH_HUNK_CODE": "!\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(com.google.javascript.jscomp.NodeUtil.hasFinally(n))", "LOCATION": "com.google.javascript.jscomp.MinimizeExitPoints", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_126\\/.\\/output_astor\\/AstorMain-Closure-126\\/\\/src\\/\\/variant-17_f\\/com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Closure_126\\/output_astor\\/AstorMain-Closure-126\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java", "LINE": "141", "MP_RANKING": "2", "SUSPICIOUNESS": "0.408", "PATCH_HUNK_TYPE": "CtUnaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "17", "TIME": "67", "VALIDATION": "|true|0|8011|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Closure_126\\/.\\/output_astor\\/AstorMain-Closure-126\\/\\/bin\\/\\/variant-17"}]}}, {"bug_id": "126", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:31:19.662441", "repair_begin": "2018-12-02 01:27:22.769487", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 141, "faulty": "if (NodeUtil.hasFinally(n)) {\n  Node finallyBlock=n.getLastChild();\n  tryMinimizeExits(finallyBlock,exitType,labelName);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-01 19:27:10.090013082 -0500\n+++ /tmp/Kali_Defects4J_Closure_126/patches_1em6/Patch_4/patched/tmp/Kali_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-01 19:31:19.220744708 -0500\n@@ -138,7 +138,7 @@\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n+      if (false) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n\n\n"}]}}, {"bug_id": "126", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:31:28.611011", "repair_begin": "2018-11-29 01:25:39.516658", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 143, "class": "com.google.javascript.jscomp.MinimizeExitPoints"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -142,3 +142,5 @@\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+        if (1 <= -1) {\n+          tryMinimizeExits(finallyBlock, exitType, labelName);\n+        }\n       }\n"}]}}, {"bug_id": "126", "tool": "RSRepair-A", "nb_patch": 23, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:28:28.756307", "repair_begin": "2018-12-02 11:17:52.807194", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 141, "faulty": "if (NodeUtil.hasFinally(n)) {\n  Node finallyBlock=n.getLastChild();\n  tryMinimizeExits(finallyBlock,exitType,labelName);\n}", "type": "Replace", "seed": "int index=-1;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-02 05:17:40.318586462 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_126/patches_76pb/Patch_611/patched/tmp/RSRepair_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-02 05:28:22.495943488 -0500\n@@ -134,14 +134,7 @@\n         Node catchCodeBlock = catchNode.getLastChild();\n         tryMinimizeExits(catchCodeBlock, exitType, labelName);\n       }\n-      /* Don't try to minimize the exits of finally blocks, as this\n-       * can cause problems if it changes the completion type of the finally\n-       * block. See ECMA 262 Sections 8.9 & 12.14\n-       */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+      int index = -1;\n     }\n \n     // Just a 'label'.\n\n\n"}]}}, {"bug_id": "127", "tool": "ARJA", "nb_patch": 107, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:03:49.666248", "repair_begin": "2018-12-01 14:46:23.100398", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "Delete", "seed": "this.cfg=cfg;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 954, "faulty": "sb.append(' ');", "type": "InsertBefore", "seed": "parent=null;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 213, "faulty": "return \"LABEL_NAME\";", "type": "Replace", "seed": "return \"BITOR\";"}], "patch": "--- /tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:46:07.764980832 -0500\n+++ /tmp/Arja_Defects4J_Closure_127/patches_rmbn/Patch_1136/patched/tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:00:46.026478861 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"BITOR\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:46:07.764980832 -0500\n+++ /tmp/Arja_Defects4J_Closure_127/patches_rmbn/Patch_1136/patched/tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:46.026478861 -0500\n@@ -951,7 +951,8 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      parent = null;\n+\tsb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n--- /tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-01 08:46:10.460999129 -0500\n+++ /tmp/Arja_Defects4J_Closure_127/patches_rmbn/Patch_1136/patched/tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-01 09:00:46.026478861 -0500\n@@ -167,9 +167,6 @@\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n           }\n       }\n     }\n\n\n"}]}}, {"bug_id": "127", "tool": "GenProg-A", "nb_patch": 359, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:52:04.420395", "repair_begin": "2018-12-02 11:32:32.112079", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 961, "faulty": "sb.append(first.getString());", "type": "Delete", "seed": "Node block=block();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 162, "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "Delete", "seed": "int type=n.getType();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "Delete", "seed": "int type=n.getType();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 171, "faulty": "removeNode(n);", "type": "Replace", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "Delete", "seed": "int type=n.getType();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 171, "faulty": "removeNode(n);", "type": "Replace", "seed": "int type=n.getType();"}, {"path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", "line": 854, "faulty": "lastJump=handler;", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1457, "faulty": "return res;", "type": "Delete", "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 169, "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", "type": "Replace", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 169, "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", "type": "Delete", "seed": "return toDot(n,null);"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 169, "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", "type": "Delete", "seed": "return toDot(n,null);"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 162, "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 166, "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", "type": "Delete", "seed": "this.cfg=null;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 232, "faulty": "return \"ASSIGN\";", "type": "Delete", "seed": "int lineno=getLineno();"}, {"path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", "line": 854, "faulty": "lastJump=handler;", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "InsertBefore", "seed": "return toDot(n,null);"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "Delete", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 232, "faulty": "return \"ASSIGN\";", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 179, "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", "type": "InsertBefore", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 169, "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", "type": "InsertBefore", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 162, "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", "type": "Replace", "seed": "int start=0;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 257, "faulty": "return \"BREAK\";", "type": "Delete", "seed": "return new FileLevelJsDocBuilder();"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:37.914477343 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:37.914477343 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:37.914477343 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:37.918477356 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "127", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:32:17.755286", "repair_begin": "2018-12-02 01:26:47.513879", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-01 19:26:28.403820730 -0500\n+++ /tmp/Kali_Defects4J_Closure_127/patches_dqjd/Patch_2/patched/tmp/Kali_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-01 19:32:17.257866623 -0500\n@@ -167,7 +167,7 @@\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n+            if (false) {\n               removeNode(n);\n             }\n           }\n\n\n"}]}}, {"bug_id": "127", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:31:38.141032", "repair_begin": "2018-11-29 01:25:16.297492", "patches": [{"nb_test_that_execute_statement": 15, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 31) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "127", "tool": "RSRepair-A", "nb_patch": 25, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:27:36.962216", "repair_begin": "2018-12-02 11:17:58.656235", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 954, "faulty": "sb.append(' ');", "type": "InsertBefore", "seed": "String name=getString();"}, {"path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", "line": 854, "faulty": "lastJump=handler;", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 171, "faulty": "removeNode(n);", "type": "Delete", "seed": "return new DefaultCodingConvention();"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:17:42.950647785 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_127/patches_25dy/Patch_146/patched/tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:23:35.914834286 -0500\n@@ -951,7 +951,8 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      String name = getString();\n+\tsb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n--- /tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:17:45.386676090 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_127/patches_25dy/Patch_146/patched/tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:23:35.918834334 -0500\n@@ -168,7 +168,6 @@\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n             if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n             }\n           }\n       }\n\n\n--- /tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:17:42.938647646 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_127/patches_25dy/Patch_146/patched/tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:23:35.918834334 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n"}]}}, {"bug_id": "128", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:31:25.854948", "repair_begin": "2018-11-29 01:25:03.681030", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 31) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "129", "tool": "ARJA", "nb_patch": 167, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:05:21.535259", "repair_begin": "2018-12-01 14:46:16.851658", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "Delete", "seed": "this.sourcePosition=sourcePosition;"}, {"path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", "line": 64, "faulty": "compiler.reportCodeChange();", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 1323, "faulty": "Preconditions.checkArgument(n.isGetElem());", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 08:46:01.972601364 -0500\n+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_685/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 08:58:07.504737232 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:46:01.984601380 -0500\n+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_685/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:07.508737231 -0500\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-01 08:46:01.752601087 -0500\n+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_685/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-01 08:58:07.508737231 -0500\n@@ -61,7 +61,7 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n+          break;\n         }\n         break;\n     }\n\n\n"}]}}, {"bug_id": "129", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 22:54:40.873203", "repair_begin": "2018-12-01 22:50:11.289951", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1546, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1545,3 +1545,5 @@\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (false) {\n+          return false;\n+        }\n       }\n"}]}}, {"bug_id": "129", "tool": "GenProg-A", "nb_patch": 146, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:06:05.452012", "repair_begin": "2018-12-02 11:32:41.329680", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1457, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "Delete", "seed": "int c=0;"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_683/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:01.310598836 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n"}]}}, {"bug_id": "129", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-07 00:34:04.343628", "repair_begin": "2018-12-07 00:09:19.538244", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/rhino\\/Node.java\\n+++ com\\/google\\/javascript\\/rhino\\/Node.java\\n@@ -1543,7 +1543,7 @@\\n \\t\\t\\t\\t}\\n \\t\\t\\t}else \\t\\t\\t\\tif ((type) == (com.google.javascript.rhino.Token.CALL)) {\\n \\t\\t\\t\\t\\tif ((this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) != (node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL))) {\\n-\\t\\t\\t\\t\\t\\treturn false;\\n+\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return false", "LOCATION": "com.google.javascript.rhino.Node", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Closure_129\\/.\\/output_astor\\/AstorMain-Closure-129\\/\\/src\\/\\/variant-5_f\\/com\\/google\\/javascript\\/rhino\\/Node.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Closure_129\\/output_astor\\/AstorMain-Closure-129\\/src\\/default\\/com\\/google\\/javascript\\/rhino\\/Node.java", "LINE": "1546", "MP_RANKING": "5", "SUSPICIOUNESS": "0.333"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "85", "VALIDATION": "|true|0|7992|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Closure_129\\/.\\/output_astor\\/AstorMain-Closure-129\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "129", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:32:03.434831", "repair_begin": "2018-12-02 01:24:56.757162", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:24:37.402587181 -0500\n+++ /tmp/Kali_Defects4J_Closure_129/patches_f5gl/Patch_7/patched/tmp/Kali_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:32:02.958496272 -0500\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (true)\n+\t\t\treturn true;\n+\t\treturn false;\n       }\n     }\n \n\n\n"}]}}, {"bug_id": "129", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:29:18.957905", "repair_begin": "2018-11-29 01:23:04.687619", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= com.google.javascript.rhino.Node.EMPTY_BLOCK) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "129", "tool": "RSRepair-A", "nb_patch": 17, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:38:44.349856", "repair_begin": "2018-12-02 11:18:27.972440", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "Replace", "seed": "NodeMismatch res=null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:18:05.745242773 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_129/patches_3llp/Patch_576/patched/tmp/RSRepair_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:34:09.229882279 -0500\n@@ -1543,7 +1543,7 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        NodeMismatch res = null;\n       }\n     }\n \n\n\n"}]}}, {"bug_id": "130", "tool": "ARJA", "nb_patch": 487, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:09:30.571605", "repair_begin": "2018-12-01 14:46:02.059990", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 216, "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 227, "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", "type": "InsertBefore", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 233, "faulty": "compiler.reportCodeChange();", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-01 08:45:45.845585512 -0500\n+++ /tmp/Arja_Defects4J_Closure_130/patches_yo25/Patch_1144/patched/tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-01 09:01:54.831345614 -0500\n@@ -213,30 +213,7 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n+      return false;\n     }\n \n     return false;\n\n\n"}]}}, {"bug_id": "130", "tool": "GenProg-A", "nb_patch": 375, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 12:08:20.594343", "repair_begin": "2018-12-02 11:32:20.040840", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", "line": 477, "faulty": "return true;", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/GlobalNamespace.java", "line": 198, "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", "type": "Delete", "seed": "formatConclusion();"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 227, "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", "type": "Delete", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 227, "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", "type": "Delete", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", "line": 477, "faulty": "return true;", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", "line": 477, "faulty": "return true;", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", "line": 477, "faulty": "return true;", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 181, "faulty": "name.removeRef(ref);", "type": "InsertBefore", "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/GlobalNamespace.java", "line": 990, "faulty": "aliasingGets--;", "type": "InsertBefore", "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"}], "patch": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:06.204242520 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:06.204242520 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:06.208242682 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n"}]}}, {"bug_id": "130", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:31:48.009566", "repair_begin": "2018-12-02 01:25:54.889619", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", "line": 476, "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-01 19:25:31.125822137 -0500\n+++ /tmp/Kali_Defects4J_Closure_130/patches_blm6/Patch_2/patched/tmp/Kali_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-01 19:31:47.511632711 -0500\n@@ -473,7 +473,7 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n+      if (false) {\n         return true;\n       }\n       return false;\n\n\n"}]}}, {"bug_id": "130", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:25:14.469553", "repair_begin": "2018-11-29 01:21:30.322013", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "130", "tool": "RSRepair-A", "nb_patch": 24, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:33:35.282589", "repair_begin": "2018-12-02 11:18:37.403939", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", "line": 477, "faulty": "return true;", "type": "Replace", "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:18:15.434650689 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_130/patches_dfj3/Patch_361/patched/tmp/RSRepair_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:29:20.024592516 -0500\n@@ -474,7 +474,7 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n       }\n       return false;\n     }\n\n\n"}]}}, {"bug_id": "131", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:31:14.901092", "repair_begin": "2018-12-02 01:24:30.370030", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_131/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:24:06.818224925 -0500\n+++ /tmp/Kali_Defects4J_Closure_131/patches_8nqz/Patch_21/patched/tmp/Kali_Defects4J_Closure_131/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:31:14.392140455 -0500\n@@ -1443,7 +1443,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "131", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:27:13.270627", "repair_begin": "2018-11-29 01:21:43.197869", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "131", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 11:27:12.677690", "repair_begin": "2018-12-02 11:11:17.498266", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "Replace", "seed": "return null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Closure_131/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:10:56.311042386 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_131/patches_ajoc/Patch_218/patched/tmp/RSRepair_Defects4J_Closure_131/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:21:10.800005833 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "132", "tool": "ARJA", "nb_patch": 171, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:12:22.827677", "repair_begin": "2018-12-01 14:47:33.816754", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", "line": 773, "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_360/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:31.321168111 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_360/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:57:31.325168111 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n"}]}}, {"bug_id": "132", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-02 01:30:38.371043", "repair_begin": "2018-12-02 01:23:17.671571", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:22:54.386827891 -0500\n+++ /tmp/Kali_Defects4J_Closure_132/patches_w4ef/Patch_33/patched/tmp/Kali_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 19:30:37.779541625 -0500\n@@ -1443,7 +1443,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (true)\n+\t\t\treturn null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"}]}}, {"bug_id": "132", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:22:55.906345", "repair_begin": "2018-11-29 01:19:21.224324", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "133", "tool": "ARJA", "nb_patch": 979, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-12-01 15:02:16.385596", "repair_begin": "2018-12-01 14:47:15.004990", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/SourcePosition.java", "line": 87, "faulty": "throw new IllegalStateException(\"Recorded bad position information\\n\" + \"start-char: \" + startCharno + \"\\n\"+ \"end-char: \"+ endCharno);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java", "line": 1838, "faulty": "restoreLookAhead(token);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Closure_133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 08:46:55.368963583 -0500\n+++ /tmp/Arja_Defects4J_Closure_133/patches_fucq/Patch_1649/patched/tmp/Arja_Defects4J_Closure_133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 08:59:02.547829280 -0500\n@@ -1835,7 +1835,6 @@\n       }\n     }\n \n-    restoreLookAhead(token);\n     return reportGenericTypeSyntaxWarning();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_133/src/com/google/javascript/rhino/SourcePosition.java\t2018-12-01 08:46:52.592963520 -0500\n+++ /tmp/Arja_Defects4J_Closure_133/patches_fucq/Patch_1649/patched/tmp/Arja_Defects4J_Closure_133/src/com/google/javascript/rhino/SourcePosition.java\t2018-12-01 08:59:02.547829280 -0500\n@@ -84,10 +84,6 @@\n                                      int endLineno, int endCharno) {\n     if (startLineno == endLineno) {\n       if (startCharno >= endCharno) {\n-        throw new IllegalStateException(\n-            \"Recorded bad position information\\n\" +\n-            \"start-char: \" + startCharno + \"\\n\" +\n-            \"end-char: \" + endCharno);\n       }\n     } else {\n       if (startLineno > endLineno) {\n\n\n"}]}}, {"bug_id": "133", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-30 00:39:21.869918", "repair_begin": "2018-11-30 00:33:38.153020", "patches": [{"edits": [{"path": "", "line": 1838, "faulty": "restoreLookAhead(token);", "type": "Delete /tmp/Kali_Defects4J_Closure_133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"}]}]}}, {"bug_id": "133", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Closure", "result": {"repair_end": "2018-11-29 01:24:58.108521", "repair_begin": "2018-11-29 01:19:18.740107", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"bug_id": "7", "tool": "ARJA", "nb_patch": 111, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:51:05.895107", "repair_begin": "2018-12-01 11:41:48.061748", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 460, "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", "type": "InsertBefore", "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 453, "faulty": "return null;", "type": "Delete", "seed": "return 1;"}], "patch": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_286/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:45.196154948 -0500\n@@ -450,14 +450,16 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n\n\n"}]}}, {"bug_id": "7", "tool": "GenProg-A", "nb_patch": 57, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 11:28:34.036163", "repair_begin": "2018-12-02 11:05:49.197200", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 485, "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", "type": "InsertBefore", "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 474, "faulty": "if (expPos > -1) {\n  if (expPos < decPos || expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  dec=str.substring(decPos + 1,expPos);\n}\n else {\n  dec=str.substring(decPos + 1);\n}", "type": "InsertBefore", "seed": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 485, "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", "type": "InsertBefore", "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 485, "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", "type": "InsertBefore", "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 485, "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", "type": "InsertBefore", "seed": "if (expPos > -1 && expPos < str.length() - 1) {\n  exp=str.substring(expPos + 1,str.length());\n}\n else {\n  exp=null;\n}"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 453, "faulty": "return null;", "type": "Delete", "seed": "double x2=0;"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 485, "faulty": "if (expPos > str.length()) {\n  throw new NumberFormatException(str + \" is not a valid number.\");\n}", "type": "InsertBefore", "seed": "int i=1;"}], "patch": "--- /tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:05:38.013361696 -0500\n+++ /tmp/GenProg_Defects4J_Lang_7/patches_e3r9/Patch_1286/patched/tmp/GenProg_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 05:24:52.786068366 -0500\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n@@ -471,7 +470,10 @@\n \n         if (decPos > -1) {\n \n-            if (expPos > -1) {\n+            if (expPos > str.length()) {\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -482,7 +484,28 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\t\t\texp = str.substring(expPos + 1, str.length());\n+\t\t\t\t} else {\n+\t\t\t\t\texp = null;\n+\t\t\t\t}\n+\t\t\t\tint i = 1;\n+\t\t\t\tif (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 mant = str.substring(0, expPos);\n\n\n"}]}}, {"bug_id": "7", "tool": "RSRepair-A", "nb_patch": 13, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 08:54:09.318101", "repair_begin": "2018-12-02 08:43:56.225993", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 453, "faulty": "return null;", "type": "InsertBefore", "seed": "Double d=createDouble(str);"}], "patch": "--- /tmp/RSRepair_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 02:43:48.618053998 -0500\n+++ /tmp/RSRepair_Defects4J_Lang_7/patches_gx6z/Patch_93/patched/tmp/RSRepair_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-02 02:46:38.979525961 -0500\n@@ -450,7 +450,8 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+            Double d = createDouble(str);\n+\t\t\treturn null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n"}]}}, {"bug_id": "16", "tool": "ARJA", "nb_patch": 67, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:22:31.432533", "repair_begin": "2018-12-01 11:13:48.198411", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 545, "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", "type": "Replace", "seed": "return Integer.decode(str);"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 480, "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", "type": "InsertBefore", "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1215/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:31.303605453 -0500\n@@ -477,7 +477,10 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n"}]}}, {"bug_id": "20", "tool": "ARJA", "nb_patch": 23, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:27:38.622256", "repair_begin": "2018-12-01 11:15:44.527469", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/lang3/StringUtils.java", "line": 3298, "faulty": "StringBuilder buf=new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);", "type": "Replace", "seed": "StringBuilder buf=new StringBuilder(4);"}, {"path": "src/main/java/org/apache/commons/lang3/StringUtils.java", "line": 3383, "faulty": "StringBuilder buf=new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());", "type": "Replace", "seed": "StringBuilder buf=new StringBuilder(256);"}, {"path": "src/main/java/org/apache/commons/lang3/StringUtils.java", "line": 3302, "faulty": "buf.append(separator);", "type": "InsertBefore", "seed": "if (noOfItems <= 0) {\n  return EMPTY;\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_20/src/main/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:36.810015490 -0500\n+++ /tmp/Arja_Defects4J_Lang_20/patches_9t4x/Patch_1910/patched/tmp/Arja_Defects4J_Lang_20/src/main/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:27:37.371850220 -0500\n@@ -3295,11 +3295,14 @@\n             return EMPTY;\n         }\n         \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n+        StringBuilder buf = new StringBuilder(4);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n-                buf.append(separator);\n+                if (noOfItems <= 0) {\n+\t\t\t\t\treturn EMPTY;\n+\t\t\t\t}\n+\t\t\t\tbuf.append(separator);\n             }\n             if (array[i] != null) {\n                 buf.append(array[i]);\n@@ -3380,7 +3383,7 @@\n             return EMPTY;\n         }\n \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n+        StringBuilder buf = new StringBuilder(256);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n\n\n"}]}}, {"bug_id": "22", "tool": "ARJA", "nb_patch": 99, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:52:42.272337", "repair_begin": "2018-12-01 11:13:26.189604", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", "line": 585, "faulty": "return 1;", "type": "Delete", "seed": "u=-u;"}, {"path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", "line": 596, "faulty": "u/=2;", "type": "InsertBefore", "seed": "if (v > 0) {\n  v=-v;\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_817/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:07.856708265 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -593,7 +592,10 @@\n         // B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n-            u/=2; v/=2; k++; // cast out twos.\n+            if (v > 0) {\n+\t\t\t\tv = -v;\n+\t\t\t}\n+\t\t\tu/=2; v/=2; k++; // cast out twos.\n         }\n         if (k==31) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n\n\n"}]}}, {"bug_id": "27", "tool": "ARJA", "nb_patch": 65, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:23:39.145305", "repair_begin": "2018-12-01 11:16:14.621983", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 489, "faulty": "mant=str.substring(0,expPos);", "type": "Replace", "seed": "mant=str;"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 569, "faulty": "return createLong(str);", "type": "InsertBefore", "seed": "dec=str.substring(decPos + 1);"}], "patch": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_451/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:55.291315477 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -566,7 +566,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    dec = str.substring(decPos + 1);\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n\n\n"}]}}, {"bug_id": "39", "tool": "ARJA", "nb_patch": 123, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:24:18.541850", "repair_begin": "2018-12-01 11:12:56.967569", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang3/StringUtils.java", "line": 3675, "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", "type": "Delete", "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"}, {"path": "src/java/org/apache/commons/lang3/StringUtils.java", "line": 3502, "faulty": "return replaceEach(text,searchList,replacementList,false,0);", "type": "InsertBefore", "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"}, {"path": "src/java/org/apache/commons/lang3/StringUtils.java", "line": 3623, "faulty": "int searchLength=searchList.length;", "type": "InsertBefore", "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1001/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:59.909593377 -0500\n@@ -3499,7 +3499,12 @@\n      * @since 2.4\n      */\n     public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n-        return replaceEach(text, searchList, replacementList, false, 0);\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\treturn replaceEach(text, searchList, replacementList, false, 0);\n     }\n \n     /**\n@@ -3620,7 +3625,12 @@\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n \n-        int searchLength = searchList.length;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n@@ -3671,13 +3681,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n"}]}}, {"bug_id": "43", "tool": "ARJA", "nb_patch": 99, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 12:32:10.895536", "repair_begin": "2018-12-01 11:13:11.877072", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", "line": 420, "faulty": "char[] c=pattern.toCharArray();", "type": "InsertBefore", "seed": "pos.setIndex(pos.getIndex() + 1);"}, {"path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", "line": 154, "faulty": "int fmtCount=0;", "type": "InsertBefore", "seed": "toPattern=super.toPattern();"}, {"path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", "line": 159, "faulty": "break;", "type": "InsertBefore", "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_90/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:23:30.170916141 -0500\n@@ -151,12 +151,53 @@\n \n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n-        int fmtCount = 0;\n+        toPattern = super.toPattern();\n+\t\tint fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +458,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n"}]}}, {"bug_id": "44", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 22:10:18.667604", "repair_begin": "2018-12-01 22:08:50.439957", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/NumberUtils.java", "line": 193, "faulty": "if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n  try {\n    return createLong(numeric);\n  }\n catch (  NumberFormatException nfe) {\n  }\n  return createBigInteger(numeric);\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Lang_44/src/java/org/apache/commons/lang/NumberUtils.java\t2018-12-01 16:08:45.188008785 -0500\n+++ /tmp/Kali_Defects4J_Lang_44/patches_rdm2/Patch_17/patched/tmp/Kali_Defects4J_Lang_44/src/java/org/apache/commons/lang/NumberUtils.java\t2018-12-01 16:10:18.316501963 -0500\n@@ -190,9 +190,7 @@\n             switch (lastChar) {\n                 case 'l' :\n                 case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+                    if (true) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n\n\n"}]}}, {"bug_id": "44", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-11-29 00:43:00.177834", "repair_begin": "2018-11-29 00:42:22.265235", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 193, "class": "org.apache.commons.lang.NumberUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -192,12 +192,14 @@\n                 case 'L' :\n-                    if (dec == null\n+                    if ((1) != (val.length())) {\n+                        if (dec == null\n                         && exp == null\n                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n+                            try {\n+                                return createLong(numeric);\n+                            } catch (NumberFormatException nfe) {\n+                                //Too big for a long\n+                            }\n+                            return createBigInteger(numeric);\n+                            \n                         }\n-                        return createBigInteger(numeric);\n-\n                     }\n"}]}}, {"bug_id": "45", "tool": "ARJA", "nb_patch": 42, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:25:24.499765", "repair_begin": "2018-12-01 11:12:28.477174", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/WordUtils.java", "line": 636, "faulty": "result.append(StringUtils.defaultString(appendToEnd));", "type": "InsertBefore", "seed": "if (StringUtils.isEmpty(str)) {\n  return null;\n}"}, {"path": "src/java/org/apache/commons/lang/WordUtils.java", "line": 627, "faulty": "int index=StringUtils.indexOf(str,\" \",lower);", "type": "InsertBefore", "seed": "if (upper == -1 || upper > str.length()) {\n  upper=str.length();\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_45/src/java/org/apache/commons/lang/WordUtils.java\t2018-12-01 05:12:20.869445549 -0500\n+++ /tmp/Arja_Defects4J_Lang_45/patches_id71/Patch_1479/patched/tmp/Arja_Defects4J_Lang_45/src/java/org/apache/commons/lang/WordUtils.java\t2018-12-01 05:22:59.626502406 -0500\n@@ -624,7 +624,10 @@\n         }\n \n         StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n+        if (upper == -1 || upper > str.length()) {\n+\t\t\tupper = str.length();\n+\t\t}\n+\t\tint index = StringUtils.indexOf(str, \" \", lower);\n         if (index == -1) {\n             result.append(str.substring(0, upper));\n             // only if abbreviation has occured do we append the appendToEnd value\n@@ -633,7 +636,10 @@\n             }\n         } else if (index > upper) {\n             result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+            if (StringUtils.isEmpty(str)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tresult.append(StringUtils.defaultString(appendToEnd));\n         } else {\n             result.append(str.substring(0, index));\n             result.append(StringUtils.defaultString(appendToEnd));\n\n\n"}]}}, {"bug_id": "45", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 08:46:24.241242", "repair_begin": "2018-12-02 08:38:14.263311", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/WordUtils.java", "line": 626, "faulty": "StringBuffer result=new StringBuffer();", "type": "InsertBefore", "seed": "if (upper == -1 || upper > str.length()) {\n  upper=str.length();\n}"}], "patch": "--- /tmp/RSRepair_Defects4J_Lang_45/src/java/org/apache/commons/lang/WordUtils.java\t2018-12-02 02:38:06.457977142 -0500\n+++ /tmp/RSRepair_Defects4J_Lang_45/patches_fq31/Patch_631/patched/tmp/RSRepair_Defects4J_Lang_45/src/java/org/apache/commons/lang/WordUtils.java\t2018-12-02 02:44:02.045522323 -0500\n@@ -623,7 +623,10 @@\n             upper = lower;\n         }\n \n-        StringBuffer result = new StringBuffer();\n+        if (upper == -1 || upper > str.length()) {\n+\t\t\tupper = str.length();\n+\t\t}\n+\t\tStringBuffer result = new StringBuffer();\n         int index = StringUtils.indexOf(str, \" \", lower);\n         if (index == -1) {\n             result.append(str.substring(0, upper));\n\n\n"}]}}, {"bug_id": "46", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-11-29 00:42:12.021120", "repair_begin": "2018-11-29 00:41:45.937579", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 244, "class": "org.apache.commons.lang.StringEscapeUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -243,3 +243,5 @@\n                     case '/' :\n-                            out.write('\\\\');\n+                            if (escapeSingleQuote) {\n+                                out.write('\\\\');\n+                            }\n                         out.write('/');\n"}]}}, {"bug_id": "50", "tool": "ARJA", "nb_patch": 118, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 09:04:53.798987", "repair_begin": "2018-12-02 08:51:26.225563", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", "line": 479, "faulty": "cDateTimeInstanceCache.put(key,format);", "type": "Delete", "seed": "if (pattern == null) {\n  throw new IllegalArgumentException(\"The pattern must not be null\");\n}"}, {"path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", "line": 675, "faulty": "rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);", "type": "InsertBefore", "seed": "if (tokenLen == 2) {\n  rule=TwoDigitMonthField.INSTANCE;\n}\n else {\n  rule=UnpaddedMonthField.INSTANCE;\n}"}, {"path": "src/java/org/apache/commons/lang/time/FastDateFormat.java", "line": 281, "faulty": "if (timeZone != null) {\n  key=new Pair(key,timeZone);\n}", "type": "Replace", "seed": "if (locale == null) {\n  locale=Locale.getDefault();\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:51:18.813128272 -0500\n+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_697/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2018-12-02 02:57:55.914492650 -0500\n@@ -278,9 +278,9 @@\n      */\n     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n         Object key = new Integer(style);\n-        if (timeZone != null) {\n-            key = new Pair(key, timeZone);\n-        }\n+        if (locale == null) {\n+\t\t\tlocale = Locale.getDefault();\n+\t\t}\n \n         if (locale != null) {\n             key = new Pair(key, locale);\n@@ -476,7 +476,6 @@\n                         locale);\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n-                cDateTimeInstanceCache.put(key, format);\n \n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n@@ -672,7 +671,12 @@\n                 if (tokenLen >= 4) {\n                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                    if (tokenLen == 2) {\n+\t\t\t\t\t\trule = TwoDigitMonthField.INSTANCE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\trule = UnpaddedMonthField.INSTANCE;\n+\t\t\t\t\t}\n+\t\t\t\t\trule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case 'Z': // time zone (value)\n\n\n"}]}}, {"bug_id": "51", "tool": "ARJA", "nb_patch": 160, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:22:18.272758", "repair_begin": "2018-12-01 11:12:06.220838", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 699, "faulty": "return false;", "type": "Replace", "seed": "return Boolean.FALSE;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 685, "faulty": "if (ch == 't') {\n  return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n}", "type": "Replace", "seed": "if (\"true\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"false\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}\n else if (\"on\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"off\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}\n else if (\"yes\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"no\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java\t2018-12-01 05:11:58.747316711 -0500\n+++ /tmp/Arja_Defects4J_Lang_51/patches_elk5/Patch_1078/patched/tmp/Arja_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java\t2018-12-01 05:18:34.189250902 -0500\n@@ -682,12 +682,19 @@\n             }\n             case 4: {\n                 char ch = str.charAt(0);\n-                if (ch == 't') {\n-                    return \n-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n-                }\n+                if (\"true\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t} else if (\"false\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t} else if (\"on\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t} else if (\"off\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t} else if (\"yes\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t} else if (\"no\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t}\n                 if (ch == 'T') {\n                     return \n                         (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n@@ -696,7 +703,7 @@\n                 }\n             }\n         }\n-        return false;\n+        return Boolean.FALSE;\n     }\n     \n //    public static void main(String[] args) {\n\n\n"}]}}, {"bug_id": "51", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 15:53:57.858394", "repair_begin": "2018-12-01 15:53:29.851853", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 677, "class": "org.apache.commons.lang.BooleanUtils"}, "patchType": "CONDITIONAL", "patch": "--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -676,6 +676,6 @@\n                 }\n-                if (ch == 'Y') {\n-                    return \n-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n+                if (true) {\n+                    return\n+                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n+                    (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n"}]}}, {"bug_id": "51", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 22:11:56.835275", "repair_begin": "2018-12-01 22:10:37.858120", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 672, "faulty": "if (ch == 'y') {\n  return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java\t2018-12-01 16:10:32.782592743 -0500\n+++ /tmp/Kali_Defects4J_Lang_51/patches_lbn8/Patch_5/patched/tmp/Kali_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java\t2018-12-01 16:11:56.486687888 -0500\n@@ -669,7 +669,7 @@\n             }\n             case 3: {\n                 char ch = str.charAt(0);\n-                if (ch == 'y') {\n+                if (true) {\n                     return \n                         (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                         (str.charAt(2) == 's' || str.charAt(2) == 'S');\n\n\n"}]}}, {"bug_id": "51", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-11-29 00:38:09.740792", "repair_begin": "2018-11-29 00:37:43.471609", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 677, "class": "org.apache.commons.lang.BooleanUtils"}, "patchType": "CONDITIONAL", "patch": "--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -676,6 +676,6 @@\n                 }\n-                if (ch == 'Y') {\n-                    return \n-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n+                if (str!=null) {\n+                    return\n+                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n+                    (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n"}]}}, {"bug_id": "51", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 08:42:50.571931", "repair_begin": "2018-12-02 08:36:09.002483", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "Replace", "seed": "if (\"true\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"false\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}\n else if (\"on\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"off\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}\n else if (\"yes\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"no\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}"}], "patch": "--- /tmp/RSRepair_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java\t2018-12-02 02:36:01.593845651 -0500\n+++ /tmp/RSRepair_Defects4J_Lang_51/patches_u76w/Patch_894/patched/tmp/RSRepair_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java\t2018-12-02 02:42:27.770694383 -0500\n@@ -683,10 +683,19 @@\n             case 4: {\n                 char ch = str.charAt(0);\n                 if (ch == 't') {\n-                    return \n-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n+                    if (\"true\".equalsIgnoreCase(str)) {\n+\t\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t\t} else if (\"false\".equalsIgnoreCase(str)) {\n+\t\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t\t} else if (\"on\".equalsIgnoreCase(str)) {\n+\t\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t\t} else if (\"off\".equalsIgnoreCase(str)) {\n+\t\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t\t} else if (\"yes\".equalsIgnoreCase(str)) {\n+\t\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t\t} else if (\"no\".equalsIgnoreCase(str)) {\n+\t\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t\t}\n                 }\n                 if (ch == 'T') {\n                     return \n\n\n"}]}}, {"bug_id": "53", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-11-29 00:37:12.676984", "repair_begin": "2018-11-29 00:36:26.422714", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 666, "class": "org.apache.commons.lang.time.DateUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -665,3 +665,5 @@\n             date.setTime(time);\n-            val.setTime(date);\n+            if (seconds <= org.apache.commons.lang.time.DateUtils.fields.length) {\n+                val.setTime(date);\n+            }\n         }\n"}]}}, {"bug_id": "55", "tool": "ARJA", "nb_patch": 14, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 13:39:56.390609", "repair_begin": "2018-12-02 11:39:55.268679", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/time/StopWatch.java", "line": 118, "faulty": "stopTime=System.currentTimeMillis();", "type": "Delete", "seed": "if (this.splitState != STATE_SPLIT) {\n  throw new IllegalStateException(\"Stopwatch has not been split. \");\n}"}, {"path": "src/java/org/apache/commons/lang/time/StopWatch.java", "line": 119, "faulty": "this.runningState=STATE_STOPPED;", "type": "Delete", "seed": "this.runningState=STATE_RUNNING;"}, {"path": "src/java/org/apache/commons/lang/time/StopWatch.java", "line": 176, "faulty": "if (this.runningState != STATE_RUNNING) {\n  throw new IllegalStateException(\"Stopwatch must be running to suspend. \");\n}", "type": "Replace", "seed": "if (this.runningState != STATE_RUNNING) {\n  throw new IllegalStateException(\"Stopwatch is not running. \");\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_55/src/java/org/apache/commons/lang/time/StopWatch.java\t2018-12-02 05:39:49.871847241 -0500\n+++ /tmp/Arja_Defects4J_Lang_55/patches_qnya/Patch_1679/patched/tmp/Arja_Defects4J_Lang_55/src/java/org/apache/commons/lang/time/StopWatch.java\t2018-12-02 07:38:59.230806162 -0500\n@@ -115,8 +115,6 @@\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n-            stopTime = System.currentTimeMillis();\n-        this.runningState = STATE_STOPPED;\n     }\n \n     /**\n@@ -173,9 +171,9 @@\n      * @throws IllegalStateException if the StopWatch is not currently running.\n      */\n     public void suspend() {\n-        if(this.runningState != STATE_RUNNING) {\n-            throw new IllegalStateException(\"Stopwatch must be running to suspend. \");\n-        }\n+        if (this.runningState != STATE_RUNNING) {\n+\t\t\tthrow new IllegalStateException(\"Stopwatch is not running. \");\n+\t\t}\n         stopTime = System.currentTimeMillis();\n         this.runningState = STATE_SUSPENDED;\n     }\n\n\n"}]}}, {"bug_id": "55", "tool": "GenProg-A", "nb_patch": 2, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 12:10:10.973142", "repair_begin": "2018-12-02 10:10:09.538702", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/time/StopWatch.java", "line": 119, "faulty": "this.runningState=STATE_STOPPED;", "type": "Delete", "seed": "if (this.runningState == STATE_STOPPED) {\n  throw new IllegalStateException(\"Stopwatch must be reset before being restarted. \");\n}"}, {"path": "src/java/org/apache/commons/lang/time/StopWatch.java", "line": 118, "faulty": "stopTime=System.currentTimeMillis();", "type": "Delete", "seed": "boolean done=false;"}], "patch": "--- /tmp/GenProg_Defects4J_Lang_55/src/java/org/apache/commons/lang/time/StopWatch.java\t2018-12-02 04:10:02.431054548 -0500\n+++ /tmp/GenProg_Defects4J_Lang_55/patches_g457/Patch_94/patched/tmp/GenProg_Defects4J_Lang_55/src/java/org/apache/commons/lang/time/StopWatch.java\t2018-12-02 04:19:05.444564270 -0500\n@@ -115,8 +115,6 @@\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n-            stopTime = System.currentTimeMillis();\n-        this.runningState = STATE_STOPPED;\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "55", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-11-29 00:36:19.473096", "repair_begin": "2018-11-29 00:34:44.031593", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 118, "class": "org.apache.commons.lang.time.StopWatch"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -117,3 +117,5 @@\n         }\n-            stopTime = System.currentTimeMillis();\n+            if (org.apache.commons.lang.time.StopWatch.this.stopTime < 10) {\n+                stopTime = System.currentTimeMillis();\n+            }\n         this.runningState = STATE_STOPPED;\n"}]}}, {"bug_id": "58", "tool": "ARJA", "nb_patch": 46, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:28:10.570185", "repair_begin": "2018-12-01 11:16:06.544700", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/math/NumberUtils.java", "line": 464, "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", "type": "Replace", "seed": "return null;"}, {"path": "src/java/org/apache/commons/lang/math/NumberUtils.java", "line": 414, "faulty": "char lastChar=str.charAt(str.length() - 1);", "type": "InsertBefore", "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_568/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:21:26.276897955 -0500\n@@ -411,7 +411,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n"}]}}, {"bug_id": "58", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-11-29 00:35:03.864991", "repair_begin": "2018-11-29 00:33:53.480765", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 464, "class": "org.apache.commons.lang.math.NumberUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -463,3 +463,5 @@\n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                    if ((numeric.length()) != (org.apache.commons.lang.math.NumberUtils.SHORT_ONE)) {\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                    }\n                 case 'f' :\n"}]}}, {"bug_id": "59", "tool": "ARJA", "nb_patch": 85, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 11:50:35.508619", "repair_begin": "2018-12-02 11:40:07.241099", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 879, "faulty": "if (width > 0) {\n  ensureCapacity(size + width);\n  String str=(obj == null ? getNullText() : obj.toString());\n  int strLen=str.length();\n  if (strLen >= width) {\n    str.getChars(0,strLen,buffer,size);\n  }\n else {\n    int padLen=width - strLen;\n    str.getChars(0,strLen,buffer,size);\n    for (int i=0; i < padLen; i++) {\n      buffer[size + strLen + i]=padChar;\n    }\n  }\n  size+=width;\n}", "type": "InsertBefore", "seed": "ensureCapacity(size + 4);"}], "patch": "--- /tmp/Arja_Defects4J_Lang_59/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-02 05:39:59.457267784 -0500\n+++ /tmp/Arja_Defects4J_Lang_59/patches_u933/Patch_1767/patched/tmp/Arja_Defects4J_Lang_59/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-02 05:50:30.016866567 -0500\n@@ -876,7 +876,8 @@\n      * @return this, to enable chaining\n      */\n     public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n-        if (width > 0) {\n+        ensureCapacity(size + 4);\n+\t\tif (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n\n\n"}]}}, {"bug_id": "60", "tool": "ARJA", "nb_patch": 23, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:25:18.048561", "repair_begin": "2018-12-01 11:13:55.243020", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1204, "faulty": "int index=indexOf(str,0);", "type": "InsertBefore", "seed": "ensureCapacity(size + 5);"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1209, "faulty": "return this;", "type": "Replace", "seed": "return append(nullText);"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1672, "faulty": "char[] thisBuf=buffer;", "type": "InsertBefore", "seed": "if (buffer.length > length()) {\n  char[] old=buffer;\n  buffer=new char[length()];\n  System.arraycopy(old,0,buffer,0,size);\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_60/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-01 05:13:47.825870951 -0500\n+++ /tmp/Arja_Defects4J_Lang_60/patches_earj/Patch_816/patched/tmp/Arja_Defects4J_Lang_60/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-01 05:20:08.956361056 -0500\n@@ -1201,12 +1201,13 @@\n     public StrBuilder deleteFirst(String str) {\n         int len = (str == null ? 0 : str.length());\n         if (len > 0) {\n-            int index = indexOf(str, 0);\n+            ensureCapacity(size + 5);\n+\t\t\tint index = indexOf(str, 0);\n             if (index >= 0) {\n                 deleteImpl(index, index + len, len);\n             }\n         }\n-        return this;\n+        return append(nullText);\n     }\n \n     //-----------------------------------------------------------------------\n@@ -1669,7 +1670,12 @@\n      * @return true if the builder contains the character\n      */\n     public boolean contains(char ch) {\n-        char[] thisBuf = buffer;\n+        if (buffer.length > length()) {\n+\t\t\tchar[] old = buffer;\n+\t\t\tbuffer = new char[length()];\n+\t\t\tSystem.arraycopy(old, 0, buffer, 0, size);\n+\t\t}\n+\t\tchar[] thisBuf = buffer;\n         for (int i = 0; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n\n\n"}]}}, {"bug_id": "61", "tool": "ARJA", "nb_patch": 18, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:39:31.354559", "repair_begin": "2018-12-01 11:12:42.750417", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1766, "faulty": "if (strLen == 1) {\n  return indexOf(str.charAt(0),startIndex);\n}", "type": "Delete", "seed": "if (str == null) {\n  buffer=new char[CAPACITY];\n}\n else {\n  buffer=new char[str.length() + CAPACITY];\n  append(str);\n}"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1186, "faulty": "int index=indexOf(str,0);", "type": "InsertBefore", "seed": "append(str);"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1776, "faulty": "int len=thisBuf.length - strLen;", "type": "Replace", "seed": "int len=size;"}], "patch": "--- /tmp/Arja_Defects4J_Lang_61/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-01 05:12:35.361875133 -0500\n+++ /tmp/Arja_Defects4J_Lang_61/patches_d2sp/Patch_1358/patched/tmp/Arja_Defects4J_Lang_61/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-01 05:33:14.772395126 -0500\n@@ -1183,7 +1183,8 @@\n     public StrBuilder deleteAll(String str) {\n         int len = (str == null ? 0 : str.length());\n         if (len > 0) {\n-            int index = indexOf(str, 0);\n+            append(str);\n+\t\t\tint index = indexOf(str, 0);\n             while (index >= 0) {\n                 deleteImpl(index, index + len, len);\n                 index = indexOf(str, index);\n@@ -1763,9 +1764,6 @@\n             return -1;\n         }\n         int strLen = str.length();\n-        if (strLen == 1) {\n-            return indexOf(str.charAt(0), startIndex);\n-        }\n         if (strLen == 0) {\n             return startIndex;\n         }\n@@ -1773,7 +1771,7 @@\n             return -1;\n         }\n         char[] thisBuf = buffer;\n-        int len = thisBuf.length - strLen;\n+        int len = size;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {\n\n\n"}]}}, {"bug_id": "63", "tool": "ARJA", "nb_patch": 223, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 11:32:49.107819", "repair_begin": "2018-12-01 11:15:51.640739", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 438, "faulty": "end.add(field,newdiff);", "type": "Delete", "seed": "end.add(Calendar.DATE,1);"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 293, "faulty": "while (seconds < 0) {\n  seconds+=60;\n  minutes-=1;\n}", "type": "InsertBefore", "seed": "if (millis < 28 * DateUtils.MILLIS_PER_DAY) {\n  return formatDuration(millis,format,padWithZeros);\n}"}], "patch": "--- /tmp/Arja_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2018-12-01 05:15:44.533037303 -0500\n+++ /tmp/Arja_Defects4J_Lang_63/patches_g3j7/Patch_972/patched/tmp/Arja_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2018-12-01 05:25:03.054057915 -0500\n@@ -290,7 +290,10 @@\n             milliseconds += 1000;\n             seconds -= 1;\n         }\n-        while (seconds < 0) {\n+        if (millis < 28 * DateUtils.MILLIS_PER_DAY) {\n+\t\t\treturn formatDuration(millis, format, padWithZeros);\n+\t\t}\n+\t\twhile (seconds < 0) {\n             seconds += 60;\n             minutes -= 1;\n         }\n@@ -435,7 +438,6 @@\n         int startValue = start.get(field);\n         if (endValue < startValue) {\n             int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n             return newdiff;\n         } else {\n             return 0;\n\n\n"}]}}, {"bug_id": "63", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-01 15:57:57.217470", "repair_begin": "2018-12-01 15:57:31.059386", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 438, "class": "org.apache.commons.lang.time.DurationFormatUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -437,3 +437,5 @@\n             int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n+            if (false) {\n+                end.add( field, newdiff );\n+            }\n             return newdiff;\n"}]}}, {"bug_id": "63", "tool": "RSRepair-A", "nb_patch": 17, "benchmark": "Defects4J", "project": "Lang", "result": {"repair_end": "2018-12-02 08:56:11.152539", "repair_begin": "2018-12-02 08:42:02.898932", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 437, "faulty": "int newdiff=startValue - endValue;", "type": "InsertBefore", "seed": "end.add(Calendar.DATE,-1);"}], "patch": "--- /tmp/RSRepair_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2018-12-02 02:41:55.555632237 -0500\n+++ /tmp/RSRepair_Defects4J_Lang_63/patches_65rr/Patch_924/patched/tmp/RSRepair_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2018-12-02 02:55:53.483330582 -0500\n@@ -434,7 +434,8 @@\n         int endValue = end.get(field);\n         int startValue = start.get(field);\n         if (endValue < startValue) {\n-            int newdiff = startValue - endValue;\n+            end.add(Calendar.DATE, -1);\n+\t\t\tint newdiff = startValue - endValue;\n             end.add( field, newdiff );\n             return newdiff;\n         } else {\n\n\n"}]}}, {"bug_id": "2", "tool": "ARJA", "nb_patch": 229, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 14:12:29.874596", "repair_begin": "2018-12-01 13:03:04.056117", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 138, "faulty": "upper=((int)Math.ceil(tmp)) - 1;", "type": "Replace", "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "Delete", "seed": "lower-=1;"}], "patch": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_854/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:44:36.876489222 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n"}]}}, {"bug_id": "2", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-29 00:59:29.517899", "repair_begin": "2018-12-29 00:39:20.806214", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java\\n@@ -276,7 +276,7 @@\\n \\n \\n \\tpublic double getNumericalVariance() {\\n-\\t\\tif (!(numericalVarianceIsCalculated)) {\\n+\\t\\tif ((sampleSize) > (numberOfSuccesses)) {\\n \\t\\t\\tnumericalVariance = calculateNumericalVariance();\\n \\t\\t\\tnumericalVarianceIsCalculated = true;\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "!(numericalVarianceIsCalculated)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(sampleSize) > (numberOfSuccesses)", "INGREDIENT_PARENT": "_int_0 > _int_1", "LOCATION": "org.apache.commons.math3.distribution.HypergeometricDistribution", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_2\\/.\\/output_astor\\/AstorMain-Math-2\\/\\/src\\/\\/variant-988_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_2\\/output_astor\\/AstorMain-Math-2\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java", "LINE": "279", "MP_RANKING": "5", "SUSPICIOUNESS": "0.162", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "494", "VARIANT_ID": "988", "TIME": "485", "VALIDATION": "|true|0|5195|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_2\\/.\\/output_astor\\/AstorMain-Math-2\\/\\/bin\\/\\/variant-988"}]}}, {"bug_id": "2", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:48:21.093512", "repair_begin": "2018-12-01 16:42:27.035803", "patches": [{"nb_test_that_execute_statement": 63, "patchLocation": {"line": 138, "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n@@ -137,3 +137,5 @@\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n+                if (false) {\n+                    upper = ((int) Math.ceil(tmp)) - 1;\n+                }\n             }\n"}]}}, {"bug_id": "2", "tool": "GenProg-A", "nb_patch": 256, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 21:36:41.261116", "repair_begin": "2018-12-02 20:26:27.384257", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", "line": 179, "faulty": "return sampleSize;", "type": "InsertBefore", "seed": "int j=1;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", "line": 161, "faulty": "return numberOfSuccesses;", "type": "InsertBefore", "seed": "int j=1;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", "line": 321, "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", "type": "InsertBefore", "seed": "final double n=getSampleSize();"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "Replace", "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "Delete", "seed": "double r=1.0d;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "Replace", "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "Delete", "seed": "double r=1.0d;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 136, "faulty": "tmp=mu + k * sigma;", "type": "Delete", "seed": "return (1 - p) / p;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", "line": 321, "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", "type": "InsertBefore", "seed": "double u=random.nextDouble();"}], "patch": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1106/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:20:35.251453340 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1106/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:20:35.251453340 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,9 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\tdouble u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "2", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 02:23:14.739845", "repair_begin": "2018-12-02 02:07:30.040972", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java\\n@@ -317,7 +317,7 @@\\n \\n \\n \\n-\\tpublic int getSupportUpperBound() {\\n+\\tpublic int getSupportUpperBound() { \\t\\tnumericalVarianceIsCalculated = true;\\n \\t\\treturn org.apache.commons.math3.util.FastMath.min(getNumberOfSuccesses(), getSampleSize());\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return org.apache.commons.math3.util.FastMath.min(getNumberOfSuccesses(), getSampleSize())", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "numericalVarianceIsCalculated = true", "INGREDIENT_PARENT": "numericalVarianceIsCalculated = true", "LOCATION": "org.apache.commons.math3.distribution.HypergeometricDistribution", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_2\\/.\\/output_astor\\/AstorMain-Math-2\\/\\/src\\/\\/variant-6_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_2\\/output_astor\\/AstorMain-Math-2\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java", "LINE": "321", "MP_RANKING": "10", "SUSPICIOUNESS": "0.162", "PATCH_HUNK_TYPE": "CtAssignmentImpl|CtBlockImpl"}], "GENERATION": "3", "VARIANT_ID": "6", "TIME": "295", "VALIDATION": "|true|0|5195|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_2\\/.\\/output_astor\\/AstorMain-Math-2\\/\\/bin\\/\\/variant-6"}]}}, {"bug_id": "2", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 00:29:13.054001", "repair_begin": "2018-12-02 00:09:36.091467", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 18:09:20.555146778 -0500\n+++ /tmp/Kali_Defects4J_Math_2/patches_jbci/Patch_6/patched/tmp/Kali_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 18:29:12.670587072 -0500\n@@ -134,7 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n+            if (false) {\n                 upper = ((int) Math.ceil(tmp)) - 1;\n             }\n         }\n\n\n"}]}}, {"bug_id": "2", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 06:48:08.753196", "repair_begin": "2018-11-29 06:42:20.739403", "patches": [{"nb_test_that_execute_statement": 63, "patchLocation": {"line": 138, "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n@@ -137,3 +137,5 @@\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n+                if (sigma == upper) {\n+                    upper = ((int) Math.ceil(tmp)) - 1;\n+                }\n             }\n"}]}}, {"bug_id": "2", "tool": "RSRepair-A", "nb_patch": 18, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 10:23:51.306993", "repair_begin": "2018-12-02 09:46:21.880419", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 138, "faulty": "upper=((int)Math.ceil(tmp)) - 1;", "type": "Replace", "seed": "double lowerBound=getSupportLowerBound();"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 03:46:04.348451226 -0500\n+++ /tmp/RSRepair_Defects4J_Math_2/patches_5nkj/Patch_397/patched/tmp/RSRepair_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 04:16:11.113595025 -0500\n@@ -135,7 +135,7 @@\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n+                double lowerBound = getSupportLowerBound();\n             }\n         }\n \n\n\n"}]}}, {"bug_id": "4", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 06:47:44.487119", "repair_begin": "2018-11-29 06:38:05.423123", "patches": [{"nb_test_that_execute_statement": 24, "patchLocation": {"line": 200, "class": "org.apache.commons.math3.geometry.euclidean.twod.Line"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n@@ -199,3 +199,5 @@\n         if (FastMath.abs(d) < 1.0e-10) {\n-            return null;\n+            if (((other.sin < 1) && (other.sin < 1)) || ((org.apache.commons.math3.geometry.euclidean.twod.Line.this.originOffset) != (d))) {\n+                return null;\n+            }\n         }\n"}]}}, {"bug_id": "5", "tool": "ARJA", "nb_patch": 16, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 13:58:10.230219", "repair_begin": "2018-12-01 13:01:23.713431", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 300, "faulty": "if (isNaN) {\n  return NaN;\n}", "type": "Delete", "seed": "isInfinite=!isNaN && (Double.isInfinite(real) || Double.isInfinite(imaginary));"}, {"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 305, "faulty": "return NaN;", "type": "Replace", "seed": "return INF;"}], "patch": "--- /tmp/Arja_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complex.java\t2018-12-01 07:01:09.709772458 -0500\n+++ /tmp/Arja_Defects4J_Math_5/patches_22ad/Patch_717/patched/tmp/Arja_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complex.java\t2018-12-01 07:49:01.005284729 -0500\n@@ -297,12 +297,8 @@\n \n     /** {@inheritDoc} */\n     public Complex reciprocal() {\n-        if (isNaN) {\n-            return NaN;\n-        }\n-\n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+            return INF;\n         }\n \n         if (isInfinite) {\n\n\n"}]}}, {"bug_id": "5", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 01:59:10.419043", "repair_begin": "2018-12-02 01:33:50.424524", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/complex\\/Complex.java\\n+++ org\\/apache\\/commons\\/math3\\/complex\\/Complex.java\\n@@ -302,23 +302,8 @@\\n \\t\\t}\\n \\n \\t\\tif (((real) == 0.0) && ((imaginary) == 0.0)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n \\n-\\t\\tif (isInfinite) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;\\n-\\t\\t}\\n \\n-\\t\\tif ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) {\\n-\\t\\t\\tdouble q = (real) \\/ (imaginary);\\n-\\t\\t\\tdouble scale = 1.0 \\/ (((real) * q) + (imaginary));\\n-\\t\\t\\treturn createComplex((scale * q), (-scale));\\n-\\t\\t}else {\\n-\\t\\t\\tdouble q = (imaginary) \\/ (real);\\n-\\t\\t\\tdouble scale = 1.0 \\/ (((imaginary) * q) + (real));\\n-\\t\\t\\treturn createComplex(scale, ((-scale) * q));\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -335,21 +320,6 @@\\n \\n \\n \\n-\\t@java.lang.Override\\n-\\tpublic boolean equals(java.lang.Object other) {\\n-\\t\\tif ((this) == other) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) {\\n-\\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));\\n-\\t\\t\\tif (c.isNaN) {\\n-\\t\\t\\t\\treturn isNaN;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\treturn ((real) == (c.real)) && ((imaginary) == (c.imaginary));\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn false;\\n-\\t}\\n \\n \\n \\n@@ -358,32 +328,18 @@\\n \\n \\n \\n-\\t@java.lang.Override\\n-\\tpublic int hashCode() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn 7;\\n-\\t\\t}\\n-\\t\\treturn 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + \\n-\\t\\t(org.apache.commons.math3.util.MathUtils.hash(real)));\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic double getImaginary() {\\n-\\t\\treturn imaginary;\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic double getReal() {\\n-\\t\\treturn real;\\n-\\t}\\n \\n \\n \\n@@ -392,9 +348,6 @@\\n \\n \\n \\n-\\tpublic boolean isNaN() {\\n-\\t\\treturn isNaN;\\n-\\t}\\n \\n \\n \\n@@ -405,9 +358,6 @@\\n \\n \\n \\n-\\tpublic boolean isInfinite() {\\n-\\t\\treturn isInfinite;\\n-\\t}\\n \\n \\n \\n@@ -433,18 +383,68 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws \\n-\\torg.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor);\\n-\\t\\tif ((isNaN) || (factor.isNaN)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif ((((java.lang.Double.isInfinite(real)) || \\n-\\t\\t(java.lang.Double.isInfinite(imaginary))) || \\n-\\t\\t(java.lang.Double.isInfinite(factor.real))) || \\n-\\t\\t(java.lang.Double.isInfinite(factor.imaginary))) {\\n \\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\tif (isInfinite) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;} \\t\\tif ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) { \\t\\t\\tdouble q = (real) \\/ (imaginary); \\t\\t\\tdouble scale = 1.0 \\/ (((real) * q) + (imaginary)); \\t\\t\\treturn createComplex((scale * q), (-scale));}else { \\t\\t\\tdouble q = (imaginary) \\/ (real); \\t\\t\\tdouble scale = 1.0 \\/ (((imaginary) * q) + (real)); \\t\\t\\treturn createComplex(scale, ((-scale) * q));}} \\t@java.lang.Override \\tpublic boolean equals(java.lang.Object other) { \\t\\tif ((this) == other) { \\t\\t\\treturn true;} \\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) { \\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); \\t\\t\\tif (c.isNaN) { \\t\\t\\t\\treturn isNaN;}else { \\t\\t\\t\\treturn ((real) == (c.real)) && ((imaginary) == (c.imaginary));}} \\t\\treturn false;} \\t@java.lang.Override \\tpublic int hashCode() { \\t\\tif (isNaN) { \\t\\t\\treturn 7;} \\t\\treturn 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + (org.apache.commons.math3.util.MathUtils.hash(real)));} \\tpublic double getImaginary() { \\t\\treturn imaginary;} \\tpublic double getReal() { \\t\\treturn real;} \\tpublic boolean isNaN() { \\t\\treturn isNaN;} \\tpublic boolean isInfinite() { \\t\\treturn isInfinite;} \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor); \\t\\tif ((isNaN) || (factor.isNaN)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n \\t\\t}\\n \\t\\treturn createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), \\n \\t\\t(((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return org.apache.commons.math3.complex.Complex.NaN", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return org.apache.commons.math3.complex.Complex.INF", "INGREDIENT_PARENT": "return org.apache.commons.math3.complex.Complex.INF", "LOCATION": "org.apache.commons.math3.complex.Complex", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_5\\/.\\/output_astor\\/AstorMain-Math-5\\/\\/src\\/\\/variant-404_f\\/org\\/apache\\/commons\\/math3\\/complex\\/Complex.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_5\\/output_astor\\/AstorMain-Math-5\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/complex\\/Complex.java", "LINE": "305", "MP_RANKING": "0", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "202", "VARIANT_ID": "404", "TIME": "384", "VALIDATION": "|true|0|4949|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_5\\/.\\/output_astor\\/AstorMain-Math-5\\/\\/bin\\/\\/variant-404"}]}}, {"bug_id": "5", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 10:31:38.524172", "repair_begin": "2018-12-02 09:44:19.975810", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 305, "faulty": "return NaN;", "type": "Replace", "seed": "return INF;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complex.java\t2018-12-02 03:44:05.397146379 -0500\n+++ /tmp/RSRepair_Defects4J_Math_5/patches_lb64/Patch_153/patched/tmp/RSRepair_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complex.java\t2018-12-02 04:22:12.930049427 -0500\n@@ -302,7 +302,7 @@\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+            return INF;\n         }\n \n         if (isInfinite) {\n\n\n"}]}}, {"bug_id": "7", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 06:42:29.258472", "repair_begin": "2018-11-29 06:24:46.490669", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 351, "class": "org.apache.commons.math3.ode.AbstractIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -350,3 +350,5 @@\n                 for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+                    if (org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers.size() == orderingSign) {\n+                        handler.handleStep(interpolator, isLastStep);\n+                    }\n                 }\n"}]}}, {"bug_id": "8", "tool": "ARJA", "nb_patch": 102, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 13:52:16.692427", "repair_begin": "2018-12-01 12:59:25.506019", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "InsertBefore", "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_281/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:38.912484969 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"}]}}, {"bug_id": "8", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-29 00:50:32.702377", "repair_begin": "2018-12-29 00:20:23.500708", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java\\n@@ -186,7 +186,7 @@\\n \\n \\t\\tfinal T[] out = ((T[]) (java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize)));\\n \\n-\\t\\tfor (int i = 0; i < sampleSize; i++) {\\n+\\t\\tfor (int i = 0; (singletons.get(sampleSize)) == null; i++) {\\n \\t\\t\\tout[i] = sample();\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtForImpl", "ORIGINAL_CODE": "i < sampleSize", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(singletons.get(sampleSize)) == null", "INGREDIENT_PARENT": "((_List_0.get(_int_1)) == null)", "LOCATION": "org.apache.commons.math3.distribution.DiscreteDistribution", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_8\\/.\\/output_astor\\/AstorMain-Math-8\\/\\/src\\/\\/variant-4_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_8\\/output_astor\\/AstorMain-Math-8\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java", "LINE": "189", "MP_RANKING": "4", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtForImpl"}], "GENERATION": "2", "VARIANT_ID": "4", "TIME": "431", "VALIDATION": "|true|0|4850|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_8\\/.\\/output_astor\\/AstorMain-Math-8\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "8", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:53:54.025302", "repair_begin": "2018-12-01 16:39:38.823607", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 190, "class": "org.apache.commons.math3.distribution.DiscreteDistribution"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n@@ -189,3 +189,5 @@\n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            if (false) {\n+                out[i] = sample();\n+            }\n         }\n"}]}}, {"bug_id": "8", "tool": "GenProg-A", "nb_patch": 416, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 21:11:04.399952", "repair_begin": "2018-12-02 20:00:24.233296", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "Replace", "seed": "return Double.POSITIVE_INFINITY;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "Delete", "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "int i=0;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "return getMean();"}, {"path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", "line": 1255, "faulty": "double sum=0d;", "type": "InsertBefore", "seed": "final int splitFactor=0x8000001;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "Replace", "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 163, "faulty": "return singletons.get(i);", "type": "InsertBefore", "seed": "double qr=0;"}, {"path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", "line": 1269, "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", "type": "InsertBefore", "seed": "int newSize=0;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 182, "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", "type": "Delete", "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "Replace", "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"}, {"path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", "line": 1249, "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", "type": "InsertBefore", "seed": "double b=0.0;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 187, "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", "type": "InsertBefore", "seed": "double mean=0;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 187, "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", "type": "Replace", "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "Replace", "seed": "double[] out=new double[sampleSize];"}], "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1547/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:33.616719993 -0500\n@@ -1246,13 +1246,15 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         final int splitFactor = 0x8000001;\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n@@ -1266,7 +1268,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1547/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:33.620720163 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"}]}}, {"bug_id": "8", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 02:00:52.540027", "repair_begin": "2018-12-02 01:22:57.950538", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java\\n@@ -187,7 +187,7 @@\\n \\t\\tfinal T[] out = ((T[]) (java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize)));\\n \\n \\t\\tfor (int i = 0; i < sampleSize; i++) {\\n-\\t\\t\\tout[i] = sample();\\n+\\n \\t\\t}\\n \\n \\t\\treturn out;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "out[i] = sample()", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math3.distribution.DiscreteDistribution", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_8\\/.\\/output_astor\\/AstorMain-Math-8\\/\\/src\\/\\/variant-22_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_8\\/output_astor\\/AstorMain-Math-8\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java", "LINE": "190", "MP_RANKING": "3", "SUSPICIOUNESS": "0.707"}], "GENERATION": "11", "VARIANT_ID": "22", "TIME": "584", "VALIDATION": "|true|0|4850|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_8\\/.\\/output_astor\\/AstorMain-Math-8\\/\\/bin\\/\\/variant-22"}]}}, {"bug_id": "8", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 00:27:06.510569", "repair_begin": "2018-12-07 00:04:28.033802", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java\\n@@ -186,9 +186,9 @@\\n \\n \\t\\tfinal T[] out = ((T[]) (java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize)));\\n \\n-\\t\\tfor (int i = 0; i < sampleSize; i++) {\\n-\\t\\t\\tout[i] = sample();\\n-\\t\\t}\\n+\\n+\\n+\\n \\n \\t\\treturn out;\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", "ORIGINAL_CODE": "for (int i = 0; i < sampleSize; i++) {\\n\\tout[i] = sample();\\n}", "LOCATION": "org.apache.commons.math3.distribution.DiscreteDistribution", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_8\\/.\\/output_astor\\/AstorMain-Math-8\\/\\/src\\/\\/variant-5_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_8\\/output_astor\\/AstorMain-Math-8\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java", "LINE": "189", "MP_RANKING": "2", "SUSPICIOUNESS": "0.707"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "2", "VALIDATION": "|true|0|4850|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_8\\/.\\/output_astor\\/AstorMain-Math-8\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "8", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-30 01:05:49.428192", "repair_begin": "2018-11-30 00:23:09.425312", "patches": [{"edits": [{"path": "", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete /tmp/Kali_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java"}]}]}}, {"bug_id": "8", "tool": "RSRepair-A", "nb_patch": 60, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 10:28:56.388043", "repair_begin": "2018-12-02 09:42:58.337526", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "Replace", "seed": "long n=0;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_585/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:26:18.665869701 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            long n = 0;\n         }\n \n         return out;\n\n\n"}]}}, {"bug_id": "18", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 06:19:26.124786", "repair_begin": "2018-11-29 06:03:36.131633", "patches": [{"nb_test_that_execute_statement": 8, "patchLocation": {"line": 529, "class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -528,24 +528,26 @@\n \n-            if (hasInfiniteBounds) {\n-                // If there is at least one finite bound, none can be infinite,\n-                // because mixed cases are not supported by the current code.\n-                throw new MathUnsupportedOperationException();\n-            } else {\n-                // Convert API to internal handling of boundaries.\n-                boundaries = new double[2][];\n-                boundaries[0] = lB;\n-                boundaries[1] = uB;\n-\n-                // Abort early if the normalization will overflow (cf. \"encode\" method).\n-                for (int i = 0; i < lB.length; i++) {\n-                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n-                        final double max = Double.MAX_VALUE + boundaries[0][i];\n-                        final NumberIsTooLargeException e\n+            if (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs) {\n+                if (hasInfiniteBounds) {\n+                    // If there is at least one finite bound, none can be infinite,\n+                    // because mixed cases are not supported by the current code.\n+                    throw new MathUnsupportedOperationException();\n+                } else {\n+                    // Convert API to internal handling of boundaries.\n+                    boundaries = new double[2][];\n+                    boundaries[0] = lB;\n+                    boundaries[1] = uB;\n+                    \n+                    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                    for (int i = 0; i < lB.length; i++) {\n+                        if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n+                            final double max = Double.MAX_VALUE + boundaries[0][i];\n+                            final NumberIsTooLargeException e\n                             = new NumberIsTooLargeException(boundaries[1][i],\n-                                                            max,\n-                                                            true);\n-                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n-                        e.getContext().addMessage(LocalizedFormats.INDEX, i);\n-\n-                        throw e;\n+                            max,\n+                            true);\n+                            e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n+                            e.getContext().addMessage(LocalizedFormats.INDEX, i);\n+                            \n+                            throw e;\n+                        }\n                     }\n"}]}}, {"bug_id": "20", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:37:57.108581", "repair_begin": "2018-12-01 16:28:44.745191", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 995, "class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -994,3 +994,5 @@\n                 } else if (x[i] > 1.0) {\n-                    repaired[i] = 1.0;\n+                    if (false) {\n+                        repaired[i] = 1.0;\n+                    }\n                 } else {\n"}]}}, {"bug_id": "20", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 00:55:24.524823", "repair_begin": "2018-12-02 00:25:32.443838", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/optimization\\/direct\\/CMAESOptimizer.java\\n+++ org\\/apache\\/commons\\/math3\\/optimization\\/direct\\/CMAESOptimizer.java\\n@@ -909,8 +909,8 @@\\n \\t\\t\\tfor (int i = 0; i < (x.length); i++) {\\n \\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]);\\n \\t\\t\\t\\tres[i] = ((x[i]) - (boundaries[0][i])) \\/ diff;\\n-\\t\\t\\t}\\n-\\t\\t\\treturn res;\\n+\\t\\t\\t} \\t\\t\\treturn x;\\n+\\n \\t\\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return res", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return x", "INGREDIENT_PARENT": "return x", "LOCATION": "org.apache.commons.math3.optimization.direct.CMAESOptimizer", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_20\\/.\\/output_astor\\/AstorMain-Math-20\\/\\/src\\/\\/variant-86_f\\/org\\/apache\\/commons\\/math3\\/optimization\\/direct\\/CMAESOptimizer.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_20\\/output_astor\\/AstorMain-Math-20\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/optimization\\/direct\\/CMAESOptimizer.java", "LINE": "913", "MP_RANKING": "8", "SUSPICIOUNESS": "0.408", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "43", "VARIANT_ID": "86", "TIME": "595", "VALIDATION": "|true|0|4164|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_20\\/.\\/output_astor\\/AstorMain-Math-20\\/\\/bin\\/\\/variant-86"}]}}, {"bug_id": "20", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 00:15:01.504182", "repair_begin": "2018-12-06 23:56:38.784835", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/optimization\\/direct\\/CMAESOptimizer.java\\n+++ org\\/apache\\/commons\\/math3\\/optimization\\/direct\\/CMAESOptimizer.java\\n@@ -992,7 +992,7 @@\\n \\t\\t\\t\\tif ((x[i]) < 0) {\\n \\t\\t\\t\\t\\trepaired[i] = 0;\\n \\t\\t\\t\\t}else \\t\\t\\t\\t\\tif ((x[i]) > 1.0) {\\n-\\t\\t\\t\\t\\t\\trepaired[i] = 1.0;\\n+\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\trepaired[i] = x[i];\\n \\t\\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "repaired[i] = 1.0", "LOCATION": "org.apache.commons.math3.optimization.direct.CMAESOptimizer", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_20\\/.\\/output_astor\\/AstorMain-Math-20\\/\\/src\\/\\/variant-5_f\\/org\\/apache\\/commons\\/math3\\/optimization\\/direct\\/CMAESOptimizer.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_20\\/output_astor\\/AstorMain-Math-20\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/optimization\\/direct\\/CMAESOptimizer.java", "LINE": "995", "MP_RANKING": "3", "SUSPICIOUNESS": "0.5"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "20", "VALIDATION": "|true|0|4164|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_20\\/.\\/output_astor\\/AstorMain-Math-20\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "20", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 06:13:45.270329", "repair_begin": "2018-11-29 06:00:53.771329", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 995, "class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -994,3 +994,5 @@\n                 } else if (x[i] > 1.0) {\n-                    repaired[i] = 1.0;\n+                    if (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.generateStatistics) {\n+                        repaired[i] = 1.0;\n+                    }\n                 } else {\n"}]}}, {"bug_id": "22", "tool": "ARJA", "nb_patch": 19, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 14:05:49.413878", "repair_begin": "2018-12-01 12:33:36.114487", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "line": 129, "faulty": "final double nhalf=numeratorDegreesOfFreedom / 2;", "type": "InsertBefore", "seed": "if (x <= 0) {\n  return 0;\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "line": 132, "faulty": "final double logn=FastMath.log(numeratorDegreesOfFreedom);", "type": "InsertBefore", "seed": "numericalVarianceIsCalculated=true;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", "line": 184, "faulty": "return false;", "type": "Replace", "seed": "return true;"}], "patch": "--- /tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-01 06:33:23.389757961 -0500\n+++ /tmp/Arja_Defects4J_Math_22/patches_owa9/Patch_880/patched/tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-01 07:33:39.195435605 -0500\n@@ -126,10 +126,14 @@\n      * @since 2.1\n      */\n     public double density(double x) {\n-        final double nhalf = numeratorDegreesOfFreedom / 2;\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n-        final double logn = FastMath.log(numeratorDegreesOfFreedom);\n+        numericalVarianceIsCalculated = true;\n+\t\tfinal double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n\n\n--- /tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-01 06:33:23.389757961 -0500\n+++ /tmp/Arja_Defects4J_Math_22/patches_owa9/Patch_880/patched/tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-01 07:33:39.195435605 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "22", "tool": "GenProg-A", "nb_patch": 71, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 21:16:17.911589", "repair_begin": "2018-12-02 19:22:50.015155", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", "line": 184, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", "line": 184, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "line": 134, "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", "type": "InsertBefore", "seed": "if (x <= 0) {\n  return 0;\n}"}, {"path": "src/main/java/org/apache/commons/math3/util/FastMath.java", "line": 1107, "faulty": "return Double.NEGATIVE_INFINITY;", "type": "InsertBefore", "seed": "final int splitFactor=0x8000001;"}], "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1103/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:57:43.472550750 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1103/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:57:43.476550904 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1103/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 14:57:43.476550904 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"}]}}, {"bug_id": "24", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 06:03:39.346197", "repair_begin": "2018-11-29 05:52:19.406027", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 146, "class": "org.apache.commons.math3.analysis.FunctionUtils$4"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n@@ -145,3 +145,5 @@\n                 for (int i = 1; i < f.length; i++) {\n-                    r += f[i].value(x);\n+                    if (((0 <= r) && (0 <= r)) || (r < -1)) {\n+                        r += f[i].value(x);\n+                    }\n                 }\n"}]}}, {"bug_id": "28", "tool": "ARJA", "nb_patch": 192, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 13:14:36.330729", "repair_begin": "2018-12-01 12:30:02.258978", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 120, "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", "type": "Delete", "seed": "continue;"}, {"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 124, "faulty": "return row;", "type": "InsertBefore", "seed": "incrementIterationsCounter();"}], "patch": "--- /tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-01 06:29:49.227599214 -0500\n+++ /tmp/Arja_Defects4J_Math_28/patches_1aw5/Patch_754/patched/tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-01 07:04:10.968161721 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"}]}}, {"bug_id": "28", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 23:40:30.287449", "repair_begin": "2018-12-28 23:16:28.172840", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -112,7 +112,7 @@\\n \\n \\t\\tif ((minRatioPositions.size()) == 0) {\\n \\t\\t\\treturn null;\\n-\\t\\t}else \\t\\t\\tif ((minRatioPositions.size()) > 1) {\\n+\\t\\t}else \\t\\t\\tif ((tableau.getNumObjectiveFunctions()) > 1) {\\n \\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(minRatioPositions.size())", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(tableau.getNumObjectiveFunctions())", "INGREDIENT_PARENT": "_SimplexTableau_0.getNumObjectiveFunctions()", "LOCATION": "org.apache.commons.math3.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/src\\/\\/variant-34_f\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_28\\/output_astor\\/AstorMain-Math-28\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "115", "MP_RANKING": "142", "SUSPICIOUNESS": "0.144", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl"}], "GENERATION": "17", "VARIANT_ID": "34", "TIME": "373", "VALIDATION": "|true|0|3981|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/bin\\/\\/variant-34"}]}}, {"bug_id": "28", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:35:58.848677", "repair_begin": "2018-12-01 16:24:15.897017", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 151, "class": "org.apache.commons.math3.optimization.linear.SimplexSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -150,3 +150,5 @@\n                 }\n-                return minRow;\n+                if (false) {\n+                    return minRow;\n+                }\n         }\n"}]}}, {"bug_id": "28", "tool": "GenProg-A", "nb_patch": 251, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 19:52:56.526318", "repair_begin": "2018-12-02 18:59:33.415526", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 120, "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", "type": "Delete", "seed": "Integer row=null;"}, {"path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", "line": 128, "faulty": "throw new MaxCountExceededException(maxIterations);", "type": "Delete", "seed": "Integer minPos=null;"}, {"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 124, "faulty": "return row;", "type": "Delete", "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 175, "faulty": "final Localizable pat=msgPatterns.get(i);", "type": "InsertBefore", "seed": "final List<Object> list=new ArrayList<Object>();"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 182, "faulty": "sb.append(separator);", "type": "InsertBefore", "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"}, {"path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", "line": 86, "faulty": "return context.getLocalizedMessage();", "type": "Replace", "seed": "return context.getLocalizedMessage();"}, {"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 123, "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", "type": "Delete", "seed": "return tableau.getSolution();"}], "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_333/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:40:43.882529424 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_333/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:43.882529424 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_333/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:43.886529596 -0500\n@@ -172,13 +172,16 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final String path = LocalizedFormats.class.getName()\n+\t\t\t\t\t\t.replaceAll(\"\\\\.\", \"/\");\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n\n\n"}]}}, {"bug_id": "28", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 00:22:41.860483", "repair_begin": "2018-12-01 23:52:50.623563", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -73,10 +73,10 @@\\n \\t\\t\\tfinal double entry = tableau.getEntry(0, i);\\n \\n \\n-\\t\\t\\tif (entry < minValue) {\\n-\\t\\t\\t\\tminValue = entry;\\n+\\t\\t\\tif (entry < minValue)\\n+\\n \\t\\t\\t\\tminPos = i;\\n-\\t\\t\\t}\\n+\\n \\t\\t}\\n \\t\\treturn minPos;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "minValue = entry", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math3.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/src\\/\\/variant-86_f\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_28\\/output_astor\\/AstorMain-Math-28\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "77", "MP_RANKING": "78", "SUSPICIOUNESS": "0.144"}], "GENERATION": "43", "VARIANT_ID": "86", "TIME": "525", "VALIDATION": "|true|0|3981|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/bin\\/\\/variant-86"}]}}, {"bug_id": "28", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 00:16:13.068790", "repair_begin": "2018-12-06 23:55:52.215627", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -140,7 +140,7 @@\\n \\t\\t\\t\\tfor (java.lang.Integer row : minRatioPositions) {\\n \\t\\t\\t\\t\\tint i = tableau.getNumObjectiveFunctions();\\n \\t\\t\\t\\t\\tfor (; (i < ((tableau.getWidth()) - 1)) && (minRow != row); i++) {\\n-\\t\\t\\t\\t\\t\\tif (row == (tableau.getBasicRow(i))) {\\n+\\t\\t\\t\\t\\t\\tif (true) {\\n \\t\\t\\t\\t\\t\\t\\tif (i < minIndex) {\\n \\t\\t\\t\\t\\t\\t\\t\\tminIndex = i;\\n \\t\\t\\t\\t\\t\\t\\t\\tminRow = row;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (row == (tableau.getBasicRow(i))) {\\n\\tif (i < minIndex) {\\n\\t\\tminIndex = i;\\n\\t\\tminRow = row;\\n\\t}\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\tif (i < minIndex) {\\n\\t\\tminIndex = i;\\n\\t\\tminRow = row;\\n\\t}\\n}", "LOCATION": "org.apache.commons.math3.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/src\\/\\/variant-6_f\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_28\\/output_astor\\/AstorMain-Math-28\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "143", "MP_RANKING": "8", "SUSPICIOUNESS": "0.354", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "6", "TIME": "14", "VALIDATION": "|true|0|3981|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/bin\\/\\/variant-6"}]}}, {"bug_id": "28", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 19:12:51.658199", "repair_begin": "2018-12-07 18:54:55.027384", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -140,7 +140,7 @@\\n \\t\\t\\t\\tfor (java.lang.Integer row : minRatioPositions) {\\n \\t\\t\\t\\t\\tint i = tableau.getNumObjectiveFunctions();\\n \\t\\t\\t\\t\\tfor (; (i < ((tableau.getWidth()) - 1)) && (minRow != row); i++) {\\n-\\t\\t\\t\\t\\t\\tif (row == (tableau.getBasicRow(i))) {\\n+\\t\\t\\t\\t\\t\\tif (row != (tableau.getBasicRow(i))) {\\n \\t\\t\\t\\t\\t\\t\\tif (i < minIndex) {\\n \\t\\t\\t\\t\\t\\t\\t\\tminIndex = i;\\n \\t\\t\\t\\t\\t\\t\\t\\tminRow = row;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "row == (tableau.getBasicRow(i))", "PATCH_HUNK_CODE": "row != (tableau.getBasicRow(i))", "LOCATION": "org.apache.commons.math3.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/src\\/\\/variant-2_f\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_28\\/output_astor\\/AstorMain-Math-28\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "143", "MP_RANKING": "0", "SUSPICIOUNESS": "0.354", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|3981|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "28", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 23:55:09.317808", "repair_begin": "2018-12-01 23:29:39.554950", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 143, "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-01 17:29:26.406627915 -0500\n+++ /tmp/Kali_Defects4J_Math_28/patches_5n7v/Patch_1/patched/tmp/Kali_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-01 17:55:08.912495964 -0500\n@@ -140,7 +140,7 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n+                        if (true) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n\n\n"}]}}, {"bug_id": "28", "tool": "RSRepair-A", "nb_patch": 47, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:43:48.951287", "repair_begin": "2018-12-02 09:14:16.420170", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 145, "faulty": "minIndex=i;", "type": "Delete", "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 180, "faulty": "if (++count < len) {\n  sb.append(separator);\n}", "type": "InsertBefore", "seed": "this.throwable=throwable;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:14:04.352259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_150/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:35:25.774109544 -0500\n@@ -177,7 +177,8 @@\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n-            if (++count < len) {\n+            this.throwable = throwable;\n+\t\t\tif (++count < len) {\n                 // Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_150/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:35:25.774109544 -0500\n@@ -142,7 +142,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n"}]}}, {"bug_id": "31", "tool": "ARJA", "nb_patch": 50, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 14:24:39.531616", "repair_begin": "2018-12-01 12:24:37.469563", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "Replace", "seed": "return -0.0;"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 137, "faulty": "return getMessage(Locale.getDefault());", "type": "Replace", "seed": "return getMessage(Locale.getDefault());"}], "patch": "\n\n--- /tmp/Arja_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-01 06:24:25.950060055 -0500\n+++ /tmp/Arja_Defects4J_Math_31/patches_85dh/Patch_434/patched/tmp/Arja_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-01 07:24:59.457925990 -0500\n@@ -174,8 +174,7 @@\n                                                x);\n             }\n             if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                return -0.0;\n             }\n \n             if (FastMath.abs(deltaN - 1.0) < epsilon) {\n\n\n"}]}}, {"bug_id": "31", "tool": "GenProg-A", "nb_patch": 124, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 20:42:16.801121", "repair_begin": "2018-12-02 18:47:53.515904", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "Replace", "seed": "return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", "line": 379, "faulty": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");", "type": "InsertBefore", "seed": "int count=0;"}, {"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "Replace", "seed": "return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);"}, {"path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", "line": 86, "faulty": "return context.getLocalizedMessage();", "type": "InsertBefore", "seed": "getContext().addMessage(LocalizedFormats.EVALUATIONS);"}, {"path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", "line": 86, "faulty": "return context.getLocalizedMessage();", "type": "InsertBefore", "seed": "getContext().addMessage(LocalizedFormats.EVALUATIONS);"}, {"path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", "line": 86, "faulty": "return context.getLocalizedMessage();", "type": "InsertBefore", "seed": "getContext().addMessage(LocalizedFormats.EVALUATIONS);"}, {"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "Replace", "seed": "return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 147, "faulty": "return buildMessage(locale,\": \");", "type": "InsertBefore", "seed": "final List<Object> list=new ArrayList<Object>();"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 176, "faulty": "final Object[] args=msgArguments.get(i);", "type": "Replace", "seed": "final Object[] args=msgArguments.get(i);"}], "patch": "--- /tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:47:37.456289903 -0500\n+++ /tmp/GenProg_Defects4J_Math_31/patches_alxn/Patch_1229/patched/tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 14:42:15.639590958 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:47:37.716289918 -0500\n+++ /tmp/GenProg_Defects4J_Math_31/patches_alxn/Patch_1229/patched/tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 14:42:15.643590971 -0500\n@@ -376,7 +376,8 @@\n     /** {@inheritDoc} */\n     public String getLocalizedString(final Locale locale) {\n         try {\n-            final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n+            int count = 0;\n+\t\t\tfinal String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n             ResourceBundle bundle =\n                     ResourceBundle.getBundle(\"assets/\" + path, locale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n\n\n--- /tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-02 12:47:41.336290119 -0500\n+++ /tmp/GenProg_Defects4J_Math_31/patches_alxn/Patch_1229/patched/tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-02 14:42:15.643590971 -0500\n@@ -174,8 +174,8 @@\n                                                x);\n             }\n             if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                return FastMath.floor(FastMath.exp(ArithmeticUtils\n+\t\t\t\t\t\t.factorialLog(n)) + 0.5);\n             }\n \n             if (FastMath.abs(deltaN - 1.0) < epsilon) {\n\n\n--- /tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-02 12:47:37.456289903 -0500\n+++ /tmp/GenProg_Defects4J_Math_31/patches_alxn/Patch_1229/patched/tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-02 14:42:15.643590971 -0500\n@@ -83,6 +83,9 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return context.getLocalizedMessage();\n+        getContext().addMessage(LocalizedFormats.EVALUATIONS);\n+\t\tgetContext().addMessage(LocalizedFormats.EVALUATIONS);\n+\t\tgetContext().addMessage(LocalizedFormats.EVALUATIONS);\n+\t\treturn context.getLocalizedMessage();\n     }\n }\n\n\n"}]}}, {"bug_id": "31", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 23:47:04.986933", "repair_begin": "2018-12-01 23:28:11.887933", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "InsertReturn false"}], "patch": "--- /tmp/Kali_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-01 17:28:03.404647744 -0500\n+++ /tmp/Kali_Defects4J_Math_31/patches_cawh/Patch_8/patched/tmp/Kali_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-01 17:47:04.616410968 -0500\n@@ -174,7 +174,9 @@\n                                                x);\n             }\n             if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n+                if (true)\n+\t\t\t\t\treturn -1;\n+\t\t\t\tthrow new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                                x);\n             }\n \n\n\n"}]}}, {"bug_id": "31", "tool": "RSRepair-A", "nb_patch": 6, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 11:14:27.751167", "repair_begin": "2018-12-02 09:14:25.707787", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "Replace", "seed": "return n;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-02 03:14:13.955820874 -0500\n+++ /tmp/RSRepair_Defects4J_Math_31/patches_k311/Patch_240/patched/tmp/RSRepair_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-02 04:20:58.070084658 -0500\n@@ -174,8 +174,7 @@\n                                                x);\n             }\n             if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                return n;\n             }\n \n             if (FastMath.abs(deltaN - 1.0) < epsilon) {\n\n\n"}]}}, {"bug_id": "32", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:31:47.833310", "repair_begin": "2018-12-01 16:23:45.061003", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 136, "class": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n@@ -135,3 +135,3 @@\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if ((Boolean) tree.getAttribute()) {\n+            if (false) {\n                 // the instance covers the whole space\n"}]}}, {"bug_id": "32", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 00:12:21.163095", "repair_begin": "2018-12-06 23:55:53.561847", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/PolygonsSet.java\\n+++ org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/PolygonsSet.java\\n@@ -133,7 +133,7 @@\\n \\n \\t\\tif ((v.length) == 0) {\\n \\t\\t\\tfinal org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false);\\n-\\t\\t\\tif (((java.lang.Boolean) (tree.getAttribute()))) {\\n+\\t\\t\\tif (false) {\\n \\n \\t\\t\\t\\tsetSize(java.lang.Double.POSITIVE_INFINITY);\\n \\t\\t\\t\\tsetBarycenter(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (((java.lang.Boolean) (tree.getAttribute()))) {\\n\\n\\tsetSize(java.lang.Double.POSITIVE_INFINITY);\\n\\tsetBarycenter(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN);\\n}else {\\n\\tsetSize(0);\\n\\tsetBarycenter(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0, 0));\\n}", "PATCH_HUNK_CODE": "if (false) {\\n\\n\\tsetSize(java.lang.Double.POSITIVE_INFINITY);\\n\\tsetBarycenter(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN);\\n}else {\\n\\tsetSize(0);\\n\\tsetBarycenter(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0, 0));\\n}", "LOCATION": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_32\\/.\\/output_astor\\/AstorMain-Math-32\\/\\/src\\/\\/variant-3_f\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/PolygonsSet.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_32\\/output_astor\\/AstorMain-Math-32\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/geometry\\/euclidean\\/twod\\/PolygonsSet.java", "LINE": "136", "MP_RANKING": "2", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "3", "TIME": "2", "VALIDATION": "|true|0|3593|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_32\\/.\\/output_astor\\/AstorMain-Math-32\\/\\/bin\\/\\/variant-3"}]}}, {"bug_id": "32", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 23:45:18.457277", "repair_begin": "2018-12-01 23:27:06.958885", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java", "line": 136, "faulty": "if ((Boolean)tree.getAttribute()) {\n  setSize(Double.POSITIVE_INFINITY);\n  setBarycenter(Vector2D.NaN);\n}\n else {\n  setSize(0);\n  setBarycenter(new Vector2D(0,0));\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Math_32/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2018-12-01 17:26:58.373440956 -0500\n+++ /tmp/Kali_Defects4J_Math_32/patches_r50i/Patch_2/patched/tmp/Kali_Defects4J_Math_32/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2018-12-01 17:45:18.089896403 -0500\n@@ -133,7 +133,7 @@\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if ((Boolean) tree.getAttribute()) {\n+            if (false) {\n                 // the instance covers the whole space\n                 setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);\n\n\n"}]}}, {"bug_id": "33", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 05:47:32.186548", "repair_begin": "2018-11-29 05:36:02.379893", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 339, "class": "org.apache.commons.math3.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -338,3 +338,5 @@\n             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                columnsToDrop.add(i);\n+                if ((2) != (org.apache.commons.math3.optimization.linear.SimplexTableau.this.numArtificialVariables)) {\n+                    columnsToDrop.add(i);\n+                }\n             }\n"}]}}, {"bug_id": "39", "tool": "ARJA", "nb_patch": 26, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 13:55:26.737978", "repair_begin": "2018-12-01 12:16:10.349887", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", "line": 290, "faulty": "final int dimension=currentState.length;", "type": "InsertBefore", "seed": "if (!forward) {\n  h=-h;\n}"}, {"path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", "line": 254, "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", "type": "InsertBefore", "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_975/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:21:59.306923197 -0500\n@@ -287,7 +287,10 @@\n \n     super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);\n \n-    final int dimension = currentState.length;\n+    if (!forward) {\n+\t\th = -h;\n+\t}\n+\tfinal int dimension = currentState.length;\n \n     yDotKLast = new double[3][];\n     for (int k = 0; k < yDotKLast.length; ++k) {\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_975/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:21:59.310923179 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n"}]}}, {"bug_id": "39", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 10:25:58.102881", "repair_begin": "2018-12-02 09:10:55.965970", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", "line": 252, "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", "type": "InsertBefore", "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-02 03:10:43.749131167 -0500\n+++ /tmp/RSRepair_Defects4J_Math_39/patches_k55r/Patch_690/patched/tmp/RSRepair_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-02 04:05:08.403495773 -0500\n@@ -248,7 +248,15 @@\n \n         stepSize = hNew;\n \n-        // next stages\n+        if (!isLastStep) {\n+\t\t\tinterpolator.storeTime(stepStart);\n+\t\t\tfinal double nextT = stepStart + stepSize;\n+\t\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\t\tif (nextIsLast) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\t}\n+\t\t// next stages\n         for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"}]}}, {"bug_id": "40", "tool": "GenProg-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 19:38:05.845558", "repair_begin": "2018-12-02 18:37:47.038024", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java", "line": 86, "faulty": "return context.getLocalizedMessage();", "type": "Replace", "seed": "return context.getMessage();"}, {"path": "src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java", "line": 174, "faulty": "for (int i=0; i < len; i++) {\n  final Localizable pat=msgPatterns.get(i);\n  final Object[] args=msgArguments.get(i);\n  final MessageFormat fmt=new MessageFormat(pat.getLocalizedString(locale),locale);\n  sb.append(fmt.format(args));\n  if (++count < len) {\n    sb.append(separator);\n  }\n}", "type": "Replace", "seed": "for (int i=0; i < len; i++) {\n  final Localizable pat=msgPatterns.get(i);\n  final Object[] args=msgArguments.get(i);\n  final MessageFormat fmt=new MessageFormat(pat.getLocalizedString(locale),locale);\n  sb.append(fmt.format(args));\n  if (++count < len) {\n    sb.append(separator);\n  }\n}"}, {"path": "src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java", "line": 179, "faulty": "sb.append(fmt.format(args));", "type": "Replace", "seed": "msgPatterns=new ArrayList<Localizable>();"}, {"path": "src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java", "line": 137, "faulty": "return getMessage(Locale.getDefault());", "type": "InsertBefore", "seed": "this.throwable=throwable;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}], "patch": "--- /tmp/GenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java\t2018-12-02 12:37:26.975197430 -0500\n+++ /tmp/GenProg_Defects4J_Math_40/patches_oq16/Patch_388/patched/tmp/GenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java\t2018-12-02 13:10:07.801276941 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        this.throwable = throwable;\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n@@ -172,16 +173,15 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n-            final Object[] args = msgArguments.get(i);\n-            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n-                                                        locale);\n-            sb.append(fmt.format(args));\n-            if (++count < len) {\n-                // Add a separator if there are other messages.\n-                sb.append(separator);\n-            }\n-        }\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n+\t\t\tfinal Object[] args = msgArguments.get(i);\n+\t\t\tfinal MessageFormat fmt = new MessageFormat(\n+\t\t\t\t\tpat.getLocalizedString(locale), locale);\n+\t\t\tsb.append(fmt.format(args));\n+\t\t\tif (++count < len) {\n+\t\t\t\tsb.append(separator);\n+\t\t\t}\n+\t\t}\n \n         return sb.toString();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\t2018-12-02 12:37:26.971197430 -0500\n+++ /tmp/GenProg_Defects4J_Math_40/patches_oq16/Patch_388/patched/tmp/GenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\t2018-12-02 13:10:07.821277503 -0500\n@@ -83,6 +83,6 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return context.getLocalizedMessage();\n+        return context.getMessage();\n     }\n }\n\n\n--- /tmp/GenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2018-12-02 12:37:30.667197300 -0500\n+++ /tmp/GenProg_Defects4J_Math_40/patches_oq16/Patch_388/patched/tmp/GenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2018-12-02 13:10:07.821277503 -0500\n@@ -261,7 +261,12 @@\n                         // we have more points before the sign change, drop the lowest point\n                         ++start;\n                     } else {\n-                        // we have more points after sign change, drop the highest point\n+                        if (signChangeIndex - start >= end - signChangeIndex) {\n+\t\t\t\t\t\t\t++start;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t--end;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// we have more points after sign change, drop the highest point\n                         --end;\n                     }\n \n\n\n"}]}}, {"bug_id": "40", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 23:01:16.946552", "repair_begin": "2018-12-01 22:49:33.121414", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java\\n@@ -260,7 +260,7 @@\\n \\t\\t\\t\\t\\tif ((signChangeIndex - start) >= (end - signChangeIndex)) {\\n \\n \\t\\t\\t\\t\\t\\t++start;\\n-\\t\\t\\t\\t\\t}else {\\n+\\t\\t\\t\\t\\t}else { \\t\\t\\t\\t\\t\\tdo { \\t\\t\\t\\t\\t\\t\\tjava.lang.System.arraycopy(x, start, tmpX, start, (end - start)); \\t\\t\\t\\t\\t\\t\\tnextX = guessX(targetY, tmpX, y, start, end); \\t\\t\\t\\t\\t\\t\\tif (!((nextX > xA) && (nextX < xB))) { \\t\\t\\t\\t\\t\\t\\t\\tif ((signChangeIndex - start) >= (end - signChangeIndex)) { \\t\\t\\t\\t\\t\\t\\t\\t\\t++start;}else {\\n \\n \\t\\t\\t\\t\\t\\t--end;\\n \\t\\t\\t\\t\\t}\\n@@ -270,7 +270,7 @@\\n \\n \\t\\t\\t\\t}\\n \\n-\\t\\t\\t} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) );\\n+\\t\\t\\t\\t\\t\\t} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) ); \\t\\t\\t\\t\\t\\t--end;} \\t\\t\\t\\t\\tnextX = java.lang.Double.NaN;}} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) );\\n \\n \\t\\t\\tif (java.lang.Double.isNaN(nextX)) {\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "--end", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "do {\\n\\n\\n\\tjava.lang.System.arraycopy(x, start, tmpX, start, (end - start));\\n\\tnextX = guessX(targetY, tmpX, y, start, end);\\n\\n\\tif (!((nextX > xA) && (nextX < xB))) {\\n\\n\\n\\n\\n\\n\\t\\tif ((signChangeIndex - start) >= (end - signChangeIndex)) {\\n\\n\\t\\t\\t++start;\\n\\t\\t}else {\\n\\n\\t\\t\\t--end;\\n\\t\\t}\\n\\n\\n\\t\\tnextX = java.lang.Double.NaN;\\n\\n\\t}\\n\\n} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) )", "INGREDIENT_PARENT": "do {\\n\\n\\n\\tjava.lang.System.arraycopy(x, start, tmpX, start, (end - start));\\n\\tnextX = guessX(targetY, tmpX, y, start, end);\\n\\n\\tif (!((nextX > xA) && (nextX < xB))) {\\n\\n\\n\\n\\n\\n\\t\\tif ((signChangeIndex - start) >= (end - signChangeIndex)) {\\n\\n\\t\\t\\t++start;\\n\\t\\t}else {\\n\\n\\t\\t\\t--end;\\n\\t\\t}\\n\\n\\n\\t\\tnextX = java.lang.Double.NaN;\\n\\n\\t}\\n\\n} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) )", "LOCATION": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_40\\/.\\/output_astor\\/AstorMain-Math-40\\/\\/src\\/\\/variant-38_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_40\\/output_astor\\/AstorMain-Math-40\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java", "LINE": "265", "MP_RANKING": "19", "SUSPICIOUNESS": "0.189", "PATCH_HUNK_TYPE": "CtDoImpl|CtBlockImpl"}], "GENERATION": "19", "VARIANT_ID": "38", "TIME": "257", "VALIDATION": "|true|0|3199|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_40\\/.\\/output_astor\\/AstorMain-Math-40\\/\\/bin\\/\\/variant-38"}]}}, {"bug_id": "41", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:26:22.221581", "repair_begin": "2018-12-01 16:21:43.177119", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 513, "class": "org.apache.commons.math.stat.descriptive.moment.Variance"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (mean <= length) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n"}]}}, {"bug_id": "41", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 05:28:39.386676", "repair_begin": "2018-11-29 05:22:18.376387", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 217, "class": "org.apache.commons.math.stat.descriptive.moment.Mean"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if (xbarw < length) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n"}]}}, {"bug_id": "42", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 05:22:45.867081", "repair_begin": "2018-11-29 05:18:18.068942", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 347, "class": "org.apache.commons.math.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -346,3 +346,5 @@\n           if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n+            if (0 < org.apache.commons.math.optimization.linear.SimplexTableau.this.numSlackVariables) {\n+                columnsToDrop.add(col);\n+            }\n           }\n"}]}}, {"bug_id": "49", "tool": "ARJA", "nb_patch": 64, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:32:19.170067", "repair_begin": "2018-12-02 08:51:35.253846", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 399, "faulty": "++count;", "type": "Delete", "seed": "if (index < 0) {\n  throw MathRuntimeException.createArrayIndexOutOfBoundsException(LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX,index);\n}"}, {"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 532, "faulty": "if (current < 0) {\n  throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);\n}", "type": "Delete", "seed": "growTable();"}, {"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 397, "faulty": "values[index]=missingEntries;", "type": "Replace", "seed": "if (states[index] == FULL) {\n  return changeIndexSign(index);\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_49/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\t2018-12-02 02:51:20.079187851 -0500\n+++ /tmp/Arja_Defects4J_Math_49/patches_4ok3/Patch_279/patched/tmp/Arja_Defects4J_Math_49/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\t2018-12-02 03:09:43.597460123 -0500\n@@ -394,9 +394,10 @@\n         keys[index]   = 0;\n         states[index] = REMOVED;\n         final double previous = values[index];\n-        values[index] = missingEntries;\n+        if (states[index] == FULL) {\n+\t\t\treturn changeIndexSign(index);\n+\t\t}\n         --size;\n-        ++count;\n         return previous;\n     }\n \n@@ -529,9 +530,6 @@\n             if (referenceCount != count) {\n                 throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);\n             }\n-            if (current < 0) {\n-                throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);\n-            }\n             return keys[current];\n         }\n \n\n\n"}]}}, {"bug_id": "49", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 21:45:58.259652", "repair_begin": "2018-12-28 21:34:04.874002", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/OpenMapRealVector.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/OpenMapRealVector.java\\n@@ -663,8 +663,8 @@\\n \\t\\tcheckIndex(index);\\n \\t\\tif (!(isDefaultValue(value))) {\\n \\t\\t\\tentries.put(index, value);\\n-\\t\\t}else \\t\\t\\tif (entries.containsKey(index)) {\\n-\\t\\t\\t\\tentries.remove(index);\\n+\\t\\t}else \\t\\t\\tif (entries.containsKey(index)) { \\t\\t\\t\\tentries.put(index, value);\\n+\\n \\t\\t\\t}\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "entries.remove(index)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "entries.put(index, value)", "INGREDIENT_PARENT": "_OpenIntToDoubleHashMap_0.put(_int_1, _double_2)", "LOCATION": "org.apache.commons.math.linear.OpenMapRealVector", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_49\\/.\\/output_astor\\/AstorMain-Math-49\\/\\/src\\/\\/variant-136_f\\/org\\/apache\\/commons\\/math\\/linear\\/OpenMapRealVector.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_49\\/output_astor\\/AstorMain-Math-49\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/OpenMapRealVector.java", "LINE": "667", "MP_RANKING": "14", "SUSPICIOUNESS": "0.408", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "68", "VARIANT_ID": "136", "TIME": "269", "VALIDATION": "|true|0|2954|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_49\\/.\\/output_astor\\/AstorMain-Math-49\\/\\/bin\\/\\/variant-136"}]}}, {"bug_id": "49", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:25:36.539848", "repair_begin": "2018-12-01 16:21:36.365348", "patches": [{"nb_test_that_execute_statement": 15, "patchLocation": {"line": 399, "class": "org.apache.commons.math.util.OpenIntToDoubleHashMap"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n+++ b/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n@@ -398,3 +398,5 @@\n         --size;\n-        ++count;\n+        if (false) {\n+            ++count;\n+        }\n         return previous;\n"}]}}, {"bug_id": "49", "tool": "GenProg-A", "nb_patch": 109, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 18:35:57.461523", "repair_begin": "2018-12-02 17:57:36.028534", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 532, "faulty": "if (current < 0) {\n  throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);\n}", "type": "Replace", "seed": "boolean negate=false;"}, {"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 399, "faulty": "++count;", "type": "Delete", "seed": "int idx=0;"}, {"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 396, "faulty": "final double previous=values[index];", "type": "InsertBefore", "seed": "keys[index]=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java", "line": 480, "faulty": "return entries.get(index);", "type": "InsertBefore", "seed": "double tmp=0;"}], "patch": "--- /tmp/GenProg_Defects4J_Math_49/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\t2018-12-02 11:57:17.233422805 -0500\n+++ /tmp/GenProg_Defects4J_Math_49/patches_gsv7/Patch_973/patched/tmp/GenProg_Defects4J_Math_49/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\t2018-12-02 12:34:38.567345817 -0500\n@@ -393,10 +393,10 @@\n     private double doRemove(int index) {\n         keys[index]   = 0;\n         states[index] = REMOVED;\n-        final double previous = values[index];\n+        keys[index] = 0;\n+\t\tfinal double previous = values[index];\n         values[index] = missingEntries;\n         --size;\n-        ++count;\n         return previous;\n     }\n \n@@ -529,9 +529,7 @@\n             if (referenceCount != count) {\n                 throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);\n             }\n-            if (current < 0) {\n-                throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);\n-            }\n+            boolean negate = false;\n             return keys[current];\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\t2018-12-02 11:57:20.881422677 -0500\n+++ /tmp/GenProg_Defects4J_Math_49/patches_gsv7/Patch_973/patched/tmp/GenProg_Defects4J_Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\t2018-12-02 12:34:38.567345817 -0500\n@@ -477,7 +477,8 @@\n     /** {@inheritDoc} */\n     public double getEntry(int index) {\n         checkIndex(index);\n-        return entries.get(index);\n+        double tmp = 0;\n+\t\treturn entries.get(index);\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "49", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:21:35.459035", "repair_begin": "2018-12-01 22:02:59.773593", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/OpenIntToDoubleHashMap.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/OpenIntToDoubleHashMap.java\\n@@ -396,7 +396,7 @@\\n \\t\\tfinal double previous = values[index];\\n \\t\\tvalues[index] = missingEntries;\\n \\t\\t--(size);\\n-\\t\\t++(count);\\n+\\n \\t\\treturn previous;\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "++(count)", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.util.OpenIntToDoubleHashMap", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_49\\/.\\/output_astor\\/AstorMain-Math-49\\/\\/src\\/\\/variant-354_f\\/org\\/apache\\/commons\\/math\\/util\\/OpenIntToDoubleHashMap.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_49\\/output_astor\\/AstorMain-Math-49\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/OpenIntToDoubleHashMap.java", "LINE": "399", "MP_RANKING": "34", "SUSPICIOUNESS": "0.183"}], "GENERATION": "177", "VARIANT_ID": "354", "TIME": "536", "VALIDATION": "|true|0|2954|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_49\\/.\\/output_astor\\/AstorMain-Math-49\\/\\/bin\\/\\/variant-354"}]}}, {"bug_id": "49", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-06 23:58:59.973174", "repair_begin": "2018-12-06 23:51:44.052213", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/OpenMapRealVector.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/OpenMapRealVector.java\\n@@ -661,10 +661,10 @@\\n \\n \\tpublic void setEntry(int index, double value) {\\n \\t\\tcheckIndex(index);\\n-\\t\\tif (!(isDefaultValue(value))) {\\n-\\t\\t\\tentries.put(index, value);\\n-\\t\\t}else \\t\\t\\tif (entries.containsKey(index)) {\\n-\\t\\t\\t\\tentries.remove(index);\\n+\\t\\tif (true) {\\n+\\t\\t\\tthis.entries.put(index, value);\\n+\\t\\t}else \\t\\t\\tif (this.entries.containsKey(index)) {\\n+\\t\\t\\t\\tthis.entries.remove(index);\\n \\t\\t\\t}\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (!(isDefaultValue(value))) {\\n\\tentries.put(index, value);\\n}else \\tif (entries.containsKey(index)) {\\n\\t\\tentries.remove(index);\\n\\t}", "PATCH_HUNK_CODE": "if (true) {\\n\\tthis.entries.put(index, value);\\n}else \\tif (this.entries.containsKey(index)) {\\n\\t\\tthis.entries.remove(index);\\n\\t}", "LOCATION": "org.apache.commons.math.linear.OpenMapRealVector", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_49\\/.\\/output_astor\\/AstorMain-Math-49\\/\\/src\\/\\/variant-15_f\\/org\\/apache\\/commons\\/math\\/linear\\/OpenMapRealVector.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_49\\/output_astor\\/AstorMain-Math-49\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/OpenMapRealVector.java", "LINE": "664", "MP_RANKING": "12", "SUSPICIOUNESS": "0.267", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "15", "TIME": "10", "VALIDATION": "|true|0|2954|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_49\\/.\\/output_astor\\/AstorMain-Math-49\\/\\/bin\\/\\/variant-15"}]}}, {"bug_id": "49", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 23:19:11.779780", "repair_begin": "2018-12-01 23:08:22.288229", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java", "line": 664, "faulty": "if (!isDefaultValue(value)) {\n  entries.put(index,value);\n}\n else if (entries.containsKey(index)) {\n  entries.remove(index);\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\t2018-12-01 17:08:14.175600876 -0500\n+++ /tmp/Kali_Defects4J_Math_49/patches_kb7n/Patch_7/patched/tmp/Kali_Defects4J_Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\t2018-12-01 17:19:11.413853881 -0500\n@@ -661,7 +661,7 @@\n     /** {@inheritDoc} */\n     public void setEntry(int index, double value) {\n         checkIndex(index);\n-        if (!isDefaultValue(value)) {\n+        if (true) {\n             entries.put(index, value);\n         } else if (entries.containsKey(index)) {\n             entries.remove(index);\n\n\n"}]}}, {"bug_id": "49", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 05:09:40.878994", "repair_begin": "2018-11-29 05:06:18.373407", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 667, "class": "org.apache.commons.math.linear.OpenMapRealVector"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -666,3 +666,5 @@\n         } else if (entries.containsKey(index)) {\n-            entries.remove(index);\n+            if (org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == org.apache.commons.math.linear.OpenMapRealVector.this.epsilon) {\n+                entries.remove(index);\n+            }\n         }\n"}]}}, {"bug_id": "49", "tool": "RSRepair-A", "nb_patch": 11, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:30:32.870052", "repair_begin": "2018-12-02 09:05:26.273819", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 529, "faulty": "if (referenceCount != count) {\n  throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);\n}", "type": "Delete", "seed": "return LazyHolder.INSTANCE;"}, {"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 399, "faulty": "++count;", "type": "Delete", "seed": "final double pia=1.5707963267948966 * 2.0;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_49/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\t2018-12-02 03:05:11.284594068 -0500\n+++ /tmp/RSRepair_Defects4J_Math_49/patches_mc96/Patch_257/patched/tmp/RSRepair_Defects4J_Math_49/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\t2018-12-02 03:23:10.242240243 -0500\n@@ -396,7 +396,6 @@\n         final double previous = values[index];\n         values[index] = missingEntries;\n         --size;\n-        ++count;\n         return previous;\n     }\n \n@@ -526,9 +525,6 @@\n          */\n         public int key()\n             throws ConcurrentModificationException, NoSuchElementException {\n-            if (referenceCount != count) {\n-                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);\n-            }\n             if (current < 0) {\n                 throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);\n             }\n\n\n"}]}}, {"bug_id": "50", "tool": "ARJA", "nb_patch": 117, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 12:34:37.694843", "repair_begin": "2018-12-01 12:06:27.444849", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 239, "faulty": "return x1;", "type": "Replace", "seed": "return x1;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 371, "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", "type": "InsertBefore", "seed": "verifyInterval(lower,upper);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 188, "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", "type": "Delete", "seed": "x1=x;"}], "patch": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_377/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:18.332375335 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_377/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:18.336375326 -0500\n@@ -368,7 +368,8 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n"}]}}, {"bug_id": "50", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 21:42:59.578403", "repair_begin": "2018-12-28 21:33:43.307962", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java\\n@@ -185,7 +185,7 @@\\n \\t\\t\\t\\t\\tcase REGULA_FALSI :\\n \\n \\t\\t\\t\\t\\t\\tif (x == x1) {\\n-\\t\\t\\t\\t\\t\\t\\tx0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)));\\n+\\t\\t\\t\\t\\t\\t\\tx0 = (x * (x - x)) \\/ (x - x);\\n \\t\\t\\t\\t\\t\\t\\tf0 = computeObjectiveValue(x0);\\n \\t\\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t\\tbreak;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtAssignmentImpl", "ORIGINAL_CODE": "0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "(x * (x - x)) \\/ (x - x)", "INGREDIENT_PARENT": "((_double_0 * (_double_1 - _double_2)) \\/ (_double_0 - _double_3))", "LOCATION": "org.apache.commons.math.analysis.solvers.BaseSecantSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_50\\/.\\/output_astor\\/AstorMain-Math-50\\/\\/src\\/\\/variant-44_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_50\\/output_astor\\/AstorMain-Math-50\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java", "LINE": "188", "MP_RANKING": "5", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtAssignmentImpl"}], "GENERATION": "22", "VARIANT_ID": "44", "TIME": "179", "VALIDATION": "|true|0|2952|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_50\\/.\\/output_astor\\/AstorMain-Math-50\\/\\/bin\\/\\/variant-44"}]}}, {"bug_id": "50", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:24:05.264418", "repair_begin": "2018-12-01 16:20:46.556865", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 188, "class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -187,3 +187,5 @@\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (false) {\n+                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        }\n                         f0 = computeObjectiveValue(x0);\n"}]}}, {"bug_id": "50", "tool": "GenProg-A", "nb_patch": 438, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 18:30:05.444171", "repair_begin": "2018-12-02 17:55:50.673896", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 188, "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", "type": "Replace", "seed": "final double eps=getRelativeAccuracy();"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 198, "faulty": "x1=x;", "type": "InsertBefore", "seed": "double x2=0.5 * (x0 + x1);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 188, "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", "type": "Replace", "seed": "if (f1 * fx < 0) {\n  x0=x1;\n  f0=f1;\n  inverted=!inverted;\n}\n else {\nswitch (method) {\ncase ILLINOIS:\n    f0*=0.5;\n  break;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}\n}"}], "patch": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 11:55:35.505022862 -0500\n+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_215/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 12:16:34.649729465 -0500\n@@ -185,7 +185,29 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (f1 * fx < 0) {\n+\t\t\t\t\t\t\tx0 = x1;\n+\t\t\t\t\t\t\tf0 = f1;\n+\t\t\t\t\t\t\tinverted = !inverted;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tswitch (method) {\n+\t\t\t\t\t\t\tcase ILLINOIS:\n+\t\t\t\t\t\t\t\tf0 *= 0.5;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase PEGASUS:\n+\t\t\t\t\t\t\t\tf0 *= f1 / (f1 + fx);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase REGULA_FALSI:\n+\t\t\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\t\t\t\tx0 = 0.5 * (x0 + x1 - FastMath.max(rtol\n+\t\t\t\t\t\t\t\t\t\t\t* FastMath.abs(x1), atol));\n+\t\t\t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tthrow new MathInternalError();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n@@ -194,7 +216,8 @@\n                     throw new MathInternalError();\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            double x2 = 0.5 * (x0 + x1);\n+\t\t\t// Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n \n\n\n"}]}}, {"bug_id": "50", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:10:33.450104", "repair_begin": "2018-12-01 21:59:57.780903", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java\\n@@ -184,10 +184,10 @@\\n \\t\\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t\\tcase REGULA_FALSI :\\n \\n-\\t\\t\\t\\t\\t\\tif (x == x1) {\\n-\\t\\t\\t\\t\\t\\t\\tx0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)));\\n+\\t\\t\\t\\t\\t\\tif (x == x1)\\n+\\n \\t\\t\\t\\t\\t\\t\\tf0 = computeObjectiveValue(x0);\\n-\\t\\t\\t\\t\\t\\t}\\n+\\n \\t\\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t\\tdefault :\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "x0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)))", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.analysis.solvers.BaseSecantSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_50\\/.\\/output_astor\\/AstorMain-Math-50\\/\\/src\\/\\/variant-58_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_50\\/output_astor\\/AstorMain-Math-50\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java", "LINE": "188", "MP_RANKING": "0", "SUSPICIOUNESS": "0.707"}], "GENERATION": "29", "VARIANT_ID": "58", "TIME": "295", "VALIDATION": "|true|0|2952|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_50\\/.\\/output_astor\\/AstorMain-Math-50\\/\\/bin\\/\\/variant-58"}]}}, {"bug_id": "50", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 18:59:37.772665", "repair_begin": "2018-12-07 18:52:09.230637", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java\\n@@ -184,7 +184,7 @@\\n \\t\\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t\\tcase REGULA_FALSI :\\n \\n-\\t\\t\\t\\t\\t\\tif (x == x1) {\\n+\\t\\t\\t\\t\\t\\tif (x > x1) {\\n \\t\\t\\t\\t\\t\\t\\tx0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)));\\n \\t\\t\\t\\t\\t\\t\\tf0 = computeObjectiveValue(x0);\\n \\t\\t\\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "x == x1", "PATCH_HUNK_CODE": "x > x1", "LOCATION": "org.apache.commons.math.analysis.solvers.BaseSecantSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_50\\/.\\/output_astor\\/AstorMain-Math-50\\/\\/src\\/\\/variant-4_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_50\\/output_astor\\/AstorMain-Math-50\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java", "LINE": "187", "MP_RANKING": "0", "SUSPICIOUNESS": "0.267", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "4", "TIME": "1", "VALIDATION": "|true|0|2952|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_50\\/.\\/output_astor\\/AstorMain-Math-50\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "50", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 23:18:52.271537", "repair_begin": "2018-12-01 23:08:16.328372", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 187, "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 17:08:08.863378056 -0500\n+++ /tmp/Kali_Defects4J_Math_50/patches_tjun/Patch_2/patched/tmp/Kali_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 17:18:51.905209748 -0500\n@@ -184,7 +184,7 @@\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n+                    if (false) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n\n\n"}]}}, {"bug_id": "50", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 05:16:18.806333", "repair_begin": "2018-11-29 05:05:43.048340", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 187, "class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,5 +186,7 @@\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                    if (-1 == 0) {\n+                        if (x == x1) {\n+                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                            f0 = computeObjectiveValue(x0);\n+                        }\n                     }\n"}]}}, {"bug_id": "50", "tool": "RSRepair-A", "nb_patch": 58, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:28:50.922505", "repair_begin": "2018-12-02 09:04:49.637884", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 188, "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", "type": "Replace", "seed": "final double functionValueAccuracy=getFunctionValueAccuracy();"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 03:04:37.768641066 -0500\n+++ /tmp/RSRepair_Defects4J_Math_50/patches_loid/Patch_17/patched/tmp/RSRepair_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-02 03:18:34.768437110 -0500\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        final double functionValueAccuracy = getFunctionValueAccuracy();\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n"}]}}, {"bug_id": "53", "tool": "ARJA", "nb_patch": 9, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 12:44:53.179672", "repair_begin": "2018-12-01 12:05:39.745697", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/complex/Complex.java", "line": 152, "faulty": "MathUtils.checkNotNull(rhs);", "type": "InsertBefore", "seed": "if (isNaN || rhs.isNaN) {\n  return NaN;\n}"}, {"path": "src/main/java/org/apache/commons/math/complex/Complex.java", "line": 997, "faulty": "return new Complex(realPart,imaginaryPart);", "type": "Replace", "seed": "return new Complex(realPart,imaginaryPart);"}], "patch": "--- /tmp/Arja_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complex.java\t2018-12-01 06:05:28.593004488 -0500\n+++ /tmp/Arja_Defects4J_Math_53/patches_hhsr/Patch_540/patched/tmp/Arja_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complex.java\t2018-12-01 06:27:16.673857164 -0500\n@@ -149,7 +149,10 @@\n      */\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n+        if (isNaN || rhs.isNaN) {\n+\t\t\t\treturn NaN;\n+\t\t\t}\n+\t\tMathUtils.checkNotNull(rhs);\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n\n\n"}]}}, {"bug_id": "53", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:02:17.122388", "repair_begin": "2018-12-01 21:54:50.659480", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/complex\\/Complex.java\\n+++ org\\/apache\\/commons\\/math\\/complex\\/Complex.java\\n@@ -149,10 +149,6 @@\\n \\n \\tpublic org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex rhs) throws \\n \\torg.apache.commons.math.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs);\\n-\\t\\treturn createComplex(((real) + (rhs.getReal())), \\n-\\t\\t((imaginary) + (rhs.getImaginary())));\\n-\\t}\\n \\n \\n \\n@@ -168,12 +164,6 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math.complex.Complex conjugate() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real, (-(imaginary)));\\n-\\t}\\n \\n \\n \\n@@ -210,12 +200,22 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex rhs) throws \\n-\\torg.apache.commons.math.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\tif ((isNaN) || (rhs.isNaN)) {\\n \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;\\n-\\t\\t}\\n+\\t\\t} \\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs); \\t\\treturn createComplex(((real) + (rhs.getReal())), ((imaginary) + (rhs.getImaginary())));} \\tpublic org.apache.commons.math.complex.Complex conjugate() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;} \\t\\treturn createComplex(real, (-(imaginary)));} \\tpublic org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex rhs) throws org.apache.commons.math.exception.NullArgumentException { \\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs); \\t\\tif ((isNaN) || (rhs.isNaN)) { \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;}\\n \\n \\t\\tdouble c = rhs.getReal();\\n \\t\\tdouble d = rhs.getImaginary();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "org.apache.commons.math.util.MathUtils.checkNotNull(rhs)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if ((isNaN) || (rhs.isNaN)) {\\n\\treturn org.apache.commons.math.complex.Complex.NaN;\\n}", "INGREDIENT_PARENT": "if ((isNaN) || (rhs.isNaN)) {\\n\\treturn org.apache.commons.math.complex.Complex.NaN;\\n}", "LOCATION": "org.apache.commons.math.complex.Complex", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_53\\/.\\/output_astor\\/AstorMain-Math-53\\/\\/src\\/\\/variant-660_f\\/org\\/apache\\/commons\\/math\\/complex\\/Complex.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_53\\/output_astor\\/AstorMain-Math-53\\/src\\/default\\/org\\/apache\\/commons\\/math\\/complex\\/Complex.java", "LINE": "152", "MP_RANKING": "0", "SUSPICIOUNESS": "0.158", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "330", "VARIANT_ID": "660", "TIME": "177", "VALIDATION": "|true|0|2525|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_53\\/.\\/output_astor\\/AstorMain-Math-53\\/\\/bin\\/\\/variant-660"}]}}, {"bug_id": "53", "tool": "RSRepair-A", "nb_patch": 3, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:14:38.776665", "repair_begin": "2018-12-02 08:58:29.294527", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/complex/Complex.java", "line": 153, "faulty": "return createComplex(real + rhs.getReal(),imaginary + rhs.getImaginary());", "type": "InsertBefore", "seed": "if (isNaN || rhs.isNaN) {\n  return NaN;\n}"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complex.java\t2018-12-02 02:58:21.899863054 -0500\n+++ /tmp/RSRepair_Defects4J_Math_53/patches_mkwu/Patch_88/patched/tmp/RSRepair_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complex.java\t2018-12-02 03:08:14.129954165 -0500\n@@ -150,7 +150,10 @@\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n+        if (isNaN || rhs.isNaN) {\n+\t\t\treturn NaN;\n+\t\t}\n+\t\treturn createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n \n\n\n"}]}}, {"bug_id": "56", "tool": "ARJA", "nb_patch": 4, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:13:59.291065", "repair_begin": "2018-12-02 08:52:10.764760", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java", "line": 281, "faulty": "return totalSize;", "type": "Replace", "seed": "return -1;"}, {"path": "src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java", "line": 94, "faulty": "if (counter[i] != size[i] - 1) {\n  return true;\n}", "type": "Replace", "seed": "if ((i & 1) != 0) {\n  continue;\n}"}, {"path": "src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java", "line": 225, "faulty": "for (int i=0; i < last; i++) {\n  int idx=0;\n  final int offset=uniCounterOffset[i];\n  while (count <= index) {\n    count+=offset;\n    ++idx;\n  }\n  --idx;\n  count-=offset;\n  indices[i]=idx;\n}", "type": "Replace", "seed": "if (index < 0 || index >= totalSize) {\n  throw new OutOfRangeException(index,0,totalSize);\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\t2018-12-02 02:52:00.326051854 -0500\n+++ /tmp/Arja_Defects4J_Math_56/patches_ys43/Patch_1127/patched/tmp/Arja_Defects4J_Math_56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\t2018-12-02 03:12:24.393227721 -0500\n@@ -91,9 +91,9 @@\n          */\n         public boolean hasNext() {\n             for (int i = 0; i < dimension; i++) {\n-                if (counter[i] != size[i] - 1) {\n-                    return true;\n-                }\n+                if ((i & 1) != 0) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n             }\n             return false;\n         }\n@@ -222,17 +222,9 @@\n         final int[] indices = new int[dimension];\n \n         int count = 0;\n-        for (int i = 0; i < last; i++) {\n-            int idx = 0;\n-            final int offset = uniCounterOffset[i];\n-            while (count <= index) {\n-                count += offset;\n-                ++idx;\n-            }\n-            --idx;\n-            count -= offset;\n-            indices[i] = idx;\n-        }\n+        if (index < 0 || index >= totalSize) {\n+\t\t\tthrow new OutOfRangeException(index, 0, totalSize);\n+\t\t}\n \n         int idx = 1;\n         while (count < index) {\n@@ -278,7 +270,7 @@\n      * @return the total size of the unidimensional counter.\n      */\n     public int getSize() {\n-        return totalSize;\n+        return -1;\n     }\n     /**\n      * Get the number of multidimensional counter slots in each dimension.\n\n\n"}]}}, {"bug_id": "56", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:35:38.677335", "repair_begin": "2018-12-01 21:52:43.010188", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/MultidimensionalCounter.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/MultidimensionalCounter.java\\n@@ -236,9 +236,9 @@\\n \\n \\t\\tint idx = 1;\\n \\t\\twhile (count < index) {\\n-\\t\\t\\tcount += idx;\\n+\\t\\t\\tcount += idx; \\t\\t\\twhile (count < index) { \\t\\t\\t\\tcount += idx;\\n \\t\\t\\t++idx;\\n-\\t\\t} \\n+\\t\\t\\t} \\t\\t\\t++idx;} \\n \\t\\t--idx;\\n \\t\\tindices[last] = idx;\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "++idx", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "while (count < index) {\\n\\tcount += idx;\\n\\t++idx;\\n} ", "INGREDIENT_PARENT": "while (count < index) {\\n\\tcount += idx;\\n\\t++idx;\\n} ", "LOCATION": "org.apache.commons.math.util.MultidimensionalCounter", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_56\\/.\\/output_astor\\/AstorMain-Math-56\\/\\/src\\/\\/variant-5174_f\\/org\\/apache\\/commons\\/math\\/util\\/MultidimensionalCounter.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_56\\/output_astor\\/AstorMain-Math-56\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/MultidimensionalCounter.java", "LINE": "240", "MP_RANKING": "14", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtWhileImpl|CtBlockImpl"}], "GENERATION": "2587", "VARIANT_ID": "5174", "TIME": "2191", "VALIDATION": "|true|0|2400|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_56\\/.\\/output_astor\\/AstorMain-Math-56\\/\\/bin\\/\\/variant-5174"}]}}, {"bug_id": "56", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:57:08.310790", "repair_begin": "2018-12-02 09:00:19.729466", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java", "line": 93, "faulty": "for (int i=0; i < dimension; i++) {\n  if (counter[i] != size[i] - 1) {\n    return true;\n  }\n}", "type": "Delete", "seed": "final double result[]=new double[2];"}, {"path": "src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java", "line": 281, "faulty": "return totalSize;", "type": "Replace", "seed": "return 0;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\t2018-12-02 03:00:12.220809069 -0500\n+++ /tmp/RSRepair_Defects4J_Math_56/patches_lsk0/Patch_108/patched/tmp/RSRepair_Defects4J_Math_56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\t2018-12-02 03:17:24.731941821 -0500\n@@ -90,11 +90,6 @@\n          * {@inheritDoc}\n          */\n         public boolean hasNext() {\n-            for (int i = 0; i < dimension; i++) {\n-                if (counter[i] != size[i] - 1) {\n-                    return true;\n-                }\n-            }\n             return false;\n         }\n \n@@ -278,7 +273,7 @@\n      * @return the total size of the unidimensional counter.\n      */\n     public int getSize() {\n-        return totalSize;\n+        return 0;\n     }\n     /**\n      * Get the number of multidimensional counter slots in each dimension.\n\n\n"}]}}, {"bug_id": "57", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 19:01:17.206794", "repair_begin": "2018-12-07 18:51:53.424999", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/stat\\/clustering\\/EuclideanIntegerPoint.java\\n+++ org\\/apache\\/commons\\/math\\/stat\\/clustering\\/EuclideanIntegerPoint.java\\n@@ -82,7 +82,7 @@\\n \\t\\t\\treturn false;\\n \\t\\t}\\n \\t\\tfor (int i = 0; i < (point.length); i++) {\\n-\\t\\t\\tif ((point[i]) != (otherPoint[i])) {\\n+\\t\\t\\tif ((this.point[i]) > (otherPoint[i])) {\\n \\t\\t\\t\\treturn false;\\n \\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(point[i]) != (otherPoint[i])", "PATCH_HUNK_CODE": "(this.point[i]) > (otherPoint[i])", "LOCATION": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_57\\/.\\/output_astor\\/AstorMain-Math-57\\/\\/src\\/\\/variant-23_f\\/org\\/apache\\/commons\\/math\\/stat\\/clustering\\/EuclideanIntegerPoint.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_57\\/output_astor\\/AstorMain-Math-57\\/src\\/default\\/org\\/apache\\/commons\\/math\\/stat\\/clustering\\/EuclideanIntegerPoint.java", "LINE": "85", "MP_RANKING": "4", "SUSPICIOUNESS": "0.316", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "23", "TIME": "186", "VALIDATION": "|true|0|2383|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_57\\/.\\/output_astor\\/AstorMain-Math-57\\/\\/bin\\/\\/variant-23"}]}}, {"bug_id": "58", "tool": "ARJA", "nb_patch": 143, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:18:45.562990", "repair_begin": "2018-12-02 08:52:07.227629", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "line": 121, "faulty": "return fit(new Gaussian.Parametric(),guess);", "type": "Replace", "seed": "return fit((new ParameterGuesser(getObservations())).guess());"}, {"path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "line": 274, "faulty": "minY=Math.min(minY,point.getY());", "type": "InsertBefore", "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1744/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:16:54.239291077 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,12 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 4) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t\t}\n+\t\t\t\tminY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n"}]}}, {"bug_id": "58", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:28:06.446484", "repair_begin": "2018-12-01 16:17:59.252595", "patches": [{"nb_test_that_execute_statement": 19, "patchLocation": {"line": 605, "class": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -604,3 +604,5 @@\n             }\n-            sum2 = 0;\n+            if (this.costRelativeTolerance <= gNorm) {\n+                sum2 = 0;\n+            }\n             for (int j = 0; j < solvedCols; ++j) {\n"}]}}, {"bug_id": "58", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 18:58:26.170310", "repair_begin": "2018-12-07 18:51:49.224034", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/function\\/Gaussian.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/function\\/Gaussian.java\\n@@ -179,7 +179,7 @@\\n \\t\\t\\tif ((param.length) != 3) {\\n \\t\\t\\t\\tthrow new org.apache.commons.math.exception.DimensionMismatchException(param.length, 3);\\n \\t\\t\\t}\\n-\\t\\t\\tif ((param[2]) <= 0) {\\n+\\t\\t\\tif ((param[2]) == 0) {\\n \\t\\t\\t\\tthrow new org.apache.commons.math.exception.NotStrictlyPositiveException(param[2]);\\n \\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(param[2]) <= 0", "PATCH_HUNK_CODE": "(param[2]) == 0", "LOCATION": "org.apache.commons.math.analysis.function.Gaussian", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_58\\/.\\/output_astor\\/AstorMain-Math-58\\/\\/src\\/\\/variant-77_f\\/org\\/apache\\/commons\\/math\\/analysis\\/function\\/Gaussian.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_58\\/output_astor\\/AstorMain-Math-58\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/function\\/Gaussian.java", "LINE": "182", "MP_RANKING": "12", "SUSPICIOUNESS": "0.224", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "77", "TIME": "29", "VALIDATION": "|true|0|2354|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_58\\/.\\/output_astor\\/AstorMain-Math-58\\/\\/bin\\/\\/variant-77"}]}}, {"bug_id": "58", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:57:45.691244", "repair_begin": "2018-11-29 04:53:13.115283", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 182, "class": "org.apache.commons.math.analysis.function.Gaussian$Parametric"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n@@ -181,4 +181,6 @@\n             }\n-            if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+            if ((param[2]) == 0) {\n+                if (param[2] <= 0) {\n+                    throw new NotStrictlyPositiveException(param[2]);\n+                }\n             }\n"}]}}, {"bug_id": "58", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:10:50.309780", "repair_begin": "2018-12-02 08:58:36.774703", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "line": 121, "faulty": "return fit(new Gaussian.Parametric(),guess);", "type": "Replace", "seed": "return fit((new ParameterGuesser(getObservations())).guess());"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:58:29.614571791 -0500\n+++ /tmp/RSRepair_Defects4J_Math_58/patches_hk4p/Patch_244/patched/tmp/RSRepair_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:23.092885763 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n"}]}}, {"bug_id": "60", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 21:32:25.140440", "repair_begin": "2018-12-28 21:19:59.845061", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java\\n@@ -160,7 +160,7 @@\\n \\t\\t\\t\\t\\tlastScaleFactor = scaleFactor;\\n \\t\\t\\t\\t\\tscaleFactor *= scale;\\n \\t\\t\\t\\t\\tif ((a != 0.0) && (a > b)) {\\n-\\t\\t\\t\\t\\t\\tp2 = (p1 \\/ lastScaleFactor) + ((b \\/ scaleFactor) * p0);\\n+\\t\\t\\t\\t\\t\\tp2 = org.apache.commons.math.util.FastMath.max(b, b);\\n \\t\\t\\t\\t\\t\\tq2 = (q1 \\/ lastScaleFactor) + ((b \\/ scaleFactor) * q0);\\n \\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\tif (b != 0) {\\n \\t\\t\\t\\t\\t\\t\\tp2 = ((a \\/ scaleFactor) * p1) + (p0 \\/ lastScaleFactor);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtAssignmentImpl", "ORIGINAL_CODE": "(p1 \\/ lastScaleFactor) + ((b \\/ scaleFactor) * p0)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "org.apache.commons.math.util.FastMath.max(b, b)", "INGREDIENT_PARENT": "org.apache.commons.math.util.FastMath.max(_double_0, _double_1)", "LOCATION": "org.apache.commons.math.util.ContinuedFraction", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_60\\/.\\/output_astor\\/AstorMain-Math-60\\/\\/src\\/\\/variant-482_f\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_60\\/output_astor\\/AstorMain-Math-60\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "LINE": "163", "MP_RANKING": "3", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtAssignmentImpl"}], "GENERATION": "241", "VARIANT_ID": "482", "TIME": "338", "VALIDATION": "|true|0|2218|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_60\\/.\\/output_astor\\/AstorMain-Math-60\\/\\/bin\\/\\/variant-482"}]}}, {"bug_id": "60", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 21:53:18.272190", "repair_begin": "2018-12-01 21:48:23.515167", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java\\n@@ -183,24 +183,24 @@\\n \\t\\t\\tdouble r = p2 \\/ q2;\\n \\n \\t\\t\\tif (java.lang.Double.isNaN(r)) {\\n-\\t\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, \\n-\\t\\t\\t\\tx);\\n-\\t\\t\\t}\\n-\\t\\t\\trelativeError = org.apache.commons.math.util.FastMath.abs(((r \\/ c) - 1.0));\\n \\n \\n-\\t\\t\\tc = p2 \\/ q2;\\n-\\t\\t\\tp0 = p1;\\n-\\t\\t\\tp1 = p2;\\n-\\t\\t\\tq0 = q1;\\n-\\t\\t\\tq1 = q2;\\n-\\t\\t} \\n \\n-\\t\\tif (n >= maxIterations) {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\tthrow new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\n \\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\n-\\t\\t\\tx);\\n+\\t\\t\\t\\tx);} \\t\\t\\trelativeError = org.apache.commons.math.util.FastMath.abs(((r \\/ c) - 1.0)); \\t\\t\\tc = p2 \\/ q2; \\t\\t\\tp0 = p1; \\t\\t\\tp1 = p2; \\t\\t\\tq0 = q1; \\t\\t\\tq1 = q2;} \\t\\tif (n >= maxIterations) { \\t\\t\\tthrow new org.apache.commons.math.MaxIterationsExceededException(maxIterations, org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, x);\\n \\t\\t}\\n \\n \\t\\treturn c;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtThrowImpl|CtBlockImpl", "ORIGINAL_CODE": "throw new org.apache.commons.math.ConvergenceException(\\norg.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, \\nx)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\norg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\nx)", "INGREDIENT_PARENT": "throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\norg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\nx)", "LOCATION": "org.apache.commons.math.util.ContinuedFraction", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_60\\/.\\/output_astor\\/AstorMain-Math-60\\/\\/src\\/\\/variant-156_f\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_60\\/output_astor\\/AstorMain-Math-60\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "LINE": "186", "MP_RANKING": "2", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtThrowImpl|CtBlockImpl"}], "GENERATION": "78", "VARIANT_ID": "156", "TIME": "85", "VALIDATION": "|true|0|2218|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_60\\/.\\/output_astor\\/AstorMain-Math-60\\/\\/bin\\/\\/variant-156"}]}}, {"bug_id": "60", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 10:25:22.071091", "repair_begin": "2018-12-02 08:59:18.710271", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/util/ContinuedFraction.java", "line": 186, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "Replace", "seed": "continue;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_60/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\t2018-12-02 02:59:08.701775532 -0500\n+++ /tmp/RSRepair_Defects4J_Math_60/patches_np7n/Patch_28/patched/tmp/RSRepair_Defects4J_Math_60/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\t2018-12-02 03:17:24.425376662 -0500\n@@ -183,9 +183,7 @@\n             double r = p2 / q2;\n \n             if (Double.isNaN(r)) {\n-                throw new ConvergenceException(\n-                  LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                  x);\n+                continue;\n             }\n             relativeError = FastMath.abs(r / c - 1.0);\n \n\n\n"}]}}, {"bug_id": "63", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 21:08:26.226663", "repair_begin": "2018-12-28 21:06:38.141079", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/MathUtils.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/MathUtils.java\\n@@ -414,8 +414,435 @@\\n \\n \\n \\tpublic static boolean equals(double x, double y) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);\\n-\\t}\\n+\\t\\treturn (\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n \\n@@ -425,9 +852,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));\\n-\\t}\\n \\n \\n \\n@@ -438,9 +862,6 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double x, double y, double eps) {\\n-\\t\\treturn (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);\\n-\\t}\\n \\n \\n \\n@@ -452,9 +873,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) {\\n-\\t\\treturn (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);\\n-\\t}\\n \\n \\n \\n@@ -473,26 +891,13 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double x, double y, int maxUlps) {\\n \\n \\n-\\t\\tassert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));\\n \\n-\\t\\tlong xInt = java.lang.Double.doubleToLongBits(x);\\n-\\t\\tlong yInt = java.lang.Double.doubleToLongBits(y);\\n \\n \\n-\\t\\tif (xInt < 0) {\\n-\\t\\t\\txInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;\\n-\\t\\t}\\n-\\t\\tif (yInt < 0) {\\n-\\t\\t\\tyInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;\\n-\\t\\t}\\n \\n-\\t\\tfinal boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;\\n \\n-\\t\\treturn (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));\\n-\\t}\\n \\n \\n \\n@@ -505,9 +910,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));\\n-\\t}\\n \\n \\n \\n@@ -519,20 +921,6 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double[] x, double[] y) {\\n-\\t\\tif ((x == null) || (y == null)) {\\n-\\t\\t\\treturn !((x == null) ^ (y == null));\\n-\\t\\t}\\n-\\t\\tif ((x.length) != (y.length)) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < (x.length); ++i) {\\n-\\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}\\n \\n \\n \\n@@ -544,20 +932,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) {\\n-\\t\\tif ((x == null) || (y == null)) {\\n-\\t\\t\\treturn !((x == null) ^ (y == null));\\n-\\t\\t}\\n-\\t\\tif ((x.length) != (y.length)) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < (x.length); ++i) {\\n-\\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}\\n \\n \\n \\n@@ -581,18 +955,6 @@\\n \\n \\n \\n-\\tpublic static long factorial(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n > 20) {\\n-\\t\\t\\tthrow new java.lang.ArithmeticException(\\n-\\t\\t\\t\\\"factorial value is too large to fit in a long\\\");\\n-\\t\\t}\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];\\n-\\t}\\n \\n \\n \\n@@ -614,17 +976,6 @@\\n \\n \\n \\n-\\tpublic static double factorialDouble(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n < 21) {\\n-\\t\\t\\treturn org.apache.commons.math.util.MathUtils.factorial(n);\\n-\\t\\t}\\n-\\t\\treturn org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));\\n-\\t}\\n \\n \\n \\n@@ -639,21 +990,6 @@\\n \\n \\n \\n-\\tpublic static double factorialLog(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n < 21) {\\n-\\t\\t\\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));\\n-\\t\\t}\\n-\\t\\tdouble logSum = 0;\\n-\\t\\tfor (int i = 2; i <= n; i++) {\\n-\\t\\t\\tlogSum += org.apache.commons.math.util.FastMath.log(i);\\n-\\t\\t}\\n-\\t\\treturn logSum;\\n-\\t}\\n \\n \\n \\n@@ -684,65 +1020,23 @@\\n \\n \\n \\n-\\tpublic static int gcd(final int p, final int q) {\\n-\\t\\tint u = p;\\n-\\t\\tint v = q;\\n-\\t\\tif ((u == 0) || (v == 0)) {\\n-\\t\\t\\tif ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \\n-\\t\\t\\t\\tp, q);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));\\n-\\t\\t}\\n \\n \\n \\n \\n \\n-\\t\\tif (u > 0) {\\n-\\t\\t\\tu = -u;\\n-\\t\\t}\\n-\\t\\tif (v > 0) {\\n-\\t\\t\\tv = -v;\\n-\\t\\t}\\n \\n-\\t\\tint k = 0;\\n-\\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\\n \\n-\\t\\t\\tu \\/= 2;\\n-\\t\\t\\tv \\/= 2;\\n-\\t\\t\\tk++;\\n-\\t\\t} \\n-\\t\\tif (k == 31) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \\n-\\t\\t\\tp, q);\\n-\\t\\t}\\n \\n \\n-\\t\\tint t = ((u & 1) == 1) ? v : -(u \\/ 2);\\n \\n \\n-\\t\\tdo {\\n \\n \\n-\\t\\t\\twhile ((t & 1) == 0) {\\n-\\t\\t\\t\\tt \\/= 2;\\n-\\t\\t\\t} \\n \\n-\\t\\t\\tif (t > 0) {\\n-\\t\\t\\t\\tu = -t;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tv = t;\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tt = (v - u) \\/ 2;\\n \\n \\n-\\t\\t} while (t != 0 );\\n-\\t\\treturn (-u) * (1 << k);\\n-\\t}\\n \\n \\n \\n@@ -773,65 +1067,23 @@\\n \\n \\n \\n-\\tpublic static long gcd(final long p, final long q) {\\n-\\t\\tlong u = p;\\n-\\t\\tlong v = q;\\n-\\t\\tif ((u == 0) || (v == 0)) {\\n-\\t\\t\\tif ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \\n-\\t\\t\\t\\tp, q);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));\\n-\\t\\t}\\n \\n \\n \\n \\n \\n-\\t\\tif (u > 0) {\\n-\\t\\t\\tu = -u;\\n-\\t\\t}\\n-\\t\\tif (v > 0) {\\n-\\t\\t\\tv = -v;\\n-\\t\\t}\\n \\n-\\t\\tint k = 0;\\n-\\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {\\n \\n-\\t\\t\\tu \\/= 2;\\n-\\t\\t\\tv \\/= 2;\\n-\\t\\t\\tk++;\\n-\\t\\t} \\n-\\t\\tif (k == 63) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \\n-\\t\\t\\tp, q);\\n-\\t\\t}\\n \\n \\n-\\t\\tlong t = ((u & 1) == 1) ? v : -(u \\/ 2);\\n \\n \\n-\\t\\tdo {\\n \\n \\n-\\t\\t\\twhile ((t & 1) == 0) {\\n-\\t\\t\\t\\tt \\/= 2;\\n-\\t\\t\\t} \\n \\n-\\t\\t\\tif (t > 0) {\\n-\\t\\t\\t\\tu = -t;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tv = t;\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tt = (v - u) \\/ 2;\\n \\n \\n-\\t\\t} while (t != 0 );\\n-\\t\\treturn (-u) * (1L << k);\\n-\\t}\\n \\n \\n \\n@@ -839,9 +1091,6 @@\\n \\n \\n \\n-\\tpublic static int hash(double value) {\\n-\\t\\treturn new java.lang.Double(value).hashCode();\\n-\\t}\\n \\n \\n \\n@@ -850,9 +1099,6 @@\\n \\n \\n \\n-\\tpublic static int hash(double[] value) {\\n-\\t\\treturn java.util.Arrays.hashCode(value);\\n-\\t}\\n \\n \\n \\n@@ -861,9 +1107,6 @@\\n \\n \\n \\n-\\tpublic static byte indicator(final byte x) {\\n-\\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n-\\t}\\n \\n \\n \\n@@ -873,12 +1116,6 @@\\n \\n \\n \\n-\\tpublic static double indicator(final double x) {\\n-\\t\\tif (java.lang.Double.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t}\\n-\\t\\treturn x >= 0.0 ? 1.0 : -1.0;\\n-\\t}\\n \\n \\n \\n@@ -887,12 +1124,6 @@\\n \\n \\n \\n-\\tpublic static float indicator(final float x) {\\n-\\t\\tif (java.lang.Float.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Float.NaN;\\n-\\t\\t}\\n-\\t\\treturn x >= 0.0F ? 1.0F : -1.0F;\\n-\\t}\\n \\n \\n \\n@@ -900,9 +1131,6 @@\\n \\n \\n \\n-\\tpublic static int indicator(final int x) {\\n-\\t\\treturn x >= 0 ? 1 : -1;\\n-\\t}\\n \\n \\n \\n@@ -910,9 +1138,6 @@\\n \\n \\n \\n-\\tpublic static long indicator(final long x) {\\n-\\t\\treturn x >= 0L ? 1L : -1L;\\n-\\t}\\n \\n \\n \\n@@ -921,9 +1146,6 @@\\n \\n \\n \\n-\\tpublic static short indicator(final short x) {\\n-\\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\\n-\\t}\\n \\n \\n \\n@@ -948,18 +1170,6 @@\\n \\n \\n \\n-\\tpublic static int lcm(int a, int b) {\\n-\\t\\tif ((a == 0) || (b == 0)) {\\n-\\t\\t\\treturn 0;\\n-\\t\\t}\\n-\\t\\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));\\n-\\t\\tif (lcm == (java.lang.Integer.MIN_VALUE)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, \\n-\\t\\t\\ta, b);\\n-\\t\\t}\\n-\\t\\treturn lcm;\\n-\\t}\\n \\n \\n \\n@@ -983,18 +1193,6 @@\\n \\n \\n \\n-\\tpublic static long lcm(long a, long b) {\\n-\\t\\tif ((a == 0) || (b == 0)) {\\n-\\t\\t\\treturn 0;\\n-\\t\\t}\\n-\\t\\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));\\n-\\t\\tif (lcm == (java.lang.Long.MIN_VALUE)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, \\n-\\t\\t\\ta, b);\\n-\\t\\t}\\n-\\t\\treturn lcm;\\n-\\t}\\n \\n \\n \\n@@ -1012,9 +1210,6 @@\\n \\n \\n \\n-\\tpublic static double log(double base, double x) {\\n-\\t\\treturn (org.apache.commons.math.util.FastMath.log(x)) \\/ (org.apache.commons.math.util.FastMath.log(base));\\n-\\t}\\n \\n \\n \\n@@ -1026,13 +1221,6 @@\\n \\n \\n \\n-\\tpublic static int mulAndCheck(int x, int y) {\\n-\\t\\tlong m = ((long) (x)) * ((long) (y));\\n-\\t\\tif ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {\\n-\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"overflow: mul\\\");\\n-\\t\\t}\\n-\\t\\treturn ((int) (m));\\n-\\t}\\n \\n \\n \\n@@ -1044,50 +1232,14 @@\\n \\n \\n \\n-\\tpublic static long mulAndCheck(long a, long b) {\\n-\\t\\tlong ret;\\n-\\t\\tjava.lang.String msg = \\\"overflow: multiply\\\";\\n-\\t\\tif (a > b) {\\n-\\n-\\t\\t\\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);\\n-\\t\\t}else {\\n-\\t\\t\\tif (a < 0) {\\n-\\t\\t\\t\\tif (b < 0) {\\n-\\n-\\t\\t\\t\\t\\tif (a >= ((java.lang.Long.MAX_VALUE) \\/ b)) {\\n-\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else \\t\\t\\t\\t\\tif (b > 0) {\\n \\n-\\t\\t\\t\\t\\t\\tif (((java.lang.Long.MIN_VALUE) \\/ b) <= a) {\\n-\\t\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n \\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\t\\tret = 0;\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}else \\t\\t\\t\\tif (a > 0) {\\n \\n \\n \\n \\n-\\t\\t\\t\\t\\tif (a <= ((java.lang.Long.MAX_VALUE) \\/ b)) {\\n-\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\tret = 0;\\n-\\t\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn ret;\\n-\\t}\\n \\n \\n \\n@@ -1098,23 +1250,13 @@\\n \\n \\n \\n-\\tpublic static double scalb(final double d, final int scaleFactor) {\\n \\n \\n-\\t\\tif (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {\\n-\\t\\t\\treturn d;\\n-\\t\\t}\\n \\n \\n-\\t\\tfinal long bits = java.lang.Double.doubleToLongBits(d);\\n-\\t\\tfinal long exponent = bits & 9218868437227405312L;\\n-\\t\\tfinal long rest = bits & -9218868437227405313L;\\n \\n \\n-\\t\\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));\\n-\\t\\treturn java.lang.Double.longBitsToDouble(newBits);\\n \\n-\\t}\\n \\n \\n \\n@@ -1135,9 +1277,6 @@\\n \\n \\n \\n-\\tpublic static double normalizeAngle(double a, double center) {\\n-\\t\\treturn a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) \\/ (org.apache.commons.math.util.MathUtils.TWO_PI)))));\\n-\\t}\\n \\n \\n \\n@@ -1160,40 +1299,6 @@\\n \\n \\n \\n-\\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws \\n-\\tjava.lang.ArithmeticException, java.lang.IllegalArgumentException {\\n-\\t\\tif (java.lang.Double.isInfinite(normalizedSum)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);\\n-\\t\\t}\\n-\\t\\tif (java.lang.Double.isNaN(normalizedSum)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);\\n-\\t\\t}\\n-\\t\\tdouble sum = 0.0;\\n-\\t\\tfinal int len = values.length;\\n-\\t\\tdouble[] out = new double[len];\\n-\\t\\tfor (int i = 0; i < len; i++) {\\n-\\t\\t\\tif (java.lang.Double.isInfinite(values[i])) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\\n-\\t\\t\\t}\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(values[i]))) {\\n-\\t\\t\\t\\tsum += values[i];\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tif (sum == 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < len; i++) {\\n-\\t\\t\\tif (java.lang.Double.isNaN(values[i])) {\\n-\\t\\t\\t\\tout[i] = java.lang.Double.NaN;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tout[i] = ((values[i]) * normalizedSum) \\/ sum;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn out;\\n-\\t}\\n \\n \\n \\n@@ -1204,9 +1309,6 @@\\n \\n \\n \\n-\\tpublic static double round(double x, int scale) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\\n-\\t}\\n \\n \\n \\n@@ -1220,20 +1322,6 @@\\n \\n \\n \\n-\\tpublic static double round(double x, int scale, int roundingMethod) {\\n-\\t\\ttry {\\n-\\t\\t\\treturn new java.math.BigDecimal(\\n-\\t\\t\\tjava.lang.Double.toString(x)).setScale(\\n-\\t\\t\\tscale, roundingMethod).doubleValue();\\n-\\n-\\t\\t} catch (java.lang.NumberFormatException ex) {\\n-\\t\\t\\tif (java.lang.Double.isInfinite(x)) {\\n-\\t\\t\\t\\treturn x;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -1244,9 +1332,6 @@\\n \\n \\n \\n-\\tpublic static float round(float x, int scale) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\\n-\\t}\\n \\n \\n \\n@@ -1260,11 +1345,6 @@\\n \\n \\n \\n-\\tpublic static float round(float x, int scale, int roundingMethod) {\\n-\\t\\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x);\\n-\\t\\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;\\n-\\t\\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) \\/ factor;\\n-\\t}\\n \\n \\n \\n@@ -1278,86 +1358,7 @@\\n \\n \\n \\n-\\tprivate static double roundUnscaled(double unscaled, double sign, \\n-\\tint roundingMethod) {\\n-\\t\\tswitch (roundingMethod) {\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_CEILING :\\n-\\t\\t\\t\\tif (sign == (-1)) {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_DOWN :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_FLOOR :\\n-\\t\\t\\t\\tif (sign == (-1)) {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction > 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction > 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\tif (fraction < 0.5) {\\n-\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\n-\\t\\t\\t\\t\\t\\t\\tif (((org.apache.commons.math.util.FastMath.floor(unscaled)) \\/ 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(\\n-\\t\\t\\t\\t\\t\\t\\tunscaled)) \\/ 2.0)))) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_UP : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction >= 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_UNNECESSARY :\\n-\\t\\t\\t\\tif (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) {\\n-\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"Inexact result from rounding\\\");\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_UP :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tdefault :\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, \\n-\\t\\t\\t\\troundingMethod, \\n-\\t\\t\\t\\t\\\"ROUND_CEILING\\\", java.math.BigDecimal.ROUND_CEILING, \\n-\\t\\t\\t\\t\\\"ROUND_DOWN\\\", java.math.BigDecimal.ROUND_DOWN, \\n-\\t\\t\\t\\t\\\"ROUND_FLOOR\\\", java.math.BigDecimal.ROUND_FLOOR, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_DOWN\\\", java.math.BigDecimal.ROUND_HALF_DOWN, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_EVEN\\\", java.math.BigDecimal.ROUND_HALF_EVEN, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_UP\\\", java.math.BigDecimal.ROUND_HALF_UP, \\n-\\t\\t\\t\\t\\\"ROUND_UNNECESSARY\\\", java.math.BigDecimal.ROUND_UNNECESSARY, \\n-\\t\\t\\t\\t\\\"ROUND_UP\\\", java.math.BigDecimal.ROUND_UP);}\\n \\n-\\t\\treturn unscaled;\\n-\\t}\\n \\n \\n \\n@@ -1369,8 +1370,7 @@\\n \\n \\n \\n-\\tpublic static byte sign(final byte x) {\\n-\\t\\treturn x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n+\\t\\t((NB) == (org.apache.commons.math.util.MathUtils.ZB)) && (java.lang.Double.isNaN(y))) || (x == y);} \\tpublic static boolean equalsIncludingNaN(double x, double y) { \\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));} \\tpublic static boolean equals(double x, double y, double eps) { \\t\\treturn (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} \\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) { \\t\\treturn (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} \\tpublic static boolean equals(double x, double y, int maxUlps) { \\t\\tassert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP)); \\t\\tlong xInt = java.lang.Double.doubleToLongBits(x); \\t\\tlong yInt = java.lang.Double.doubleToLongBits(y); \\t\\tif (xInt < 0) { \\t\\t\\txInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;} \\t\\tif (yInt < 0) { \\t\\t\\tyInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;} \\t\\tfinal boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps; \\t\\treturn (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));} \\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) { \\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));} \\tpublic static boolean equals(double[] x, double[] y) { \\t\\tif ((x == null) || (y == null)) { \\t\\t\\treturn !((x == null) ^ (y == null));} \\t\\tif ((x.length) != (y.length)) { \\t\\t\\treturn false;} \\t\\tfor (int i = 0; i < (x.length); ++i) { \\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) { \\t\\t\\t\\treturn false;}} \\t\\treturn true;} \\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) { \\t\\tif ((x == null) || (y == null)) { \\t\\t\\treturn !((x == null) ^ (y == null));} \\t\\tif ((x.length) != (y.length)) { \\t\\t\\treturn false;} \\t\\tfor (int i = 0; i < (x.length); ++i) { \\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) { \\t\\t\\t\\treturn false;}} \\t\\treturn true;} \\tpublic static long factorial(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n > 20) { \\t\\t\\tthrow new java.lang.ArithmeticException(\\\"factorial value is too large to fit in a long\\\");} \\t\\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];} \\tpublic static double factorialDouble(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n < 21) { \\t\\t\\treturn org.apache.commons.math.util.MathUtils.factorial(n);} \\t\\treturn org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));} \\tpublic static double factorialLog(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n < 21) { \\t\\t\\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} \\t\\tdouble logSum = 0; \\t\\tfor (int i = 2; i <= n; i++) { \\t\\t\\tlogSum += org.apache.commons.math.util.FastMath.log(i);} \\t\\treturn logSum;} \\tpublic static int gcd(final int p, final int q) { \\t\\tint u = p; \\t\\tint v = q; \\t\\tif ((u == 0) || (v == 0)) { \\t\\t\\tif ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} \\t\\tif (u > 0) { \\t\\t\\tu = -u;} \\t\\tif (v > 0) { \\t\\t\\tv = -v;} \\t\\tint k = 0; \\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { \\t\\t\\tu \\/= 2; \\t\\t\\tv \\/= 2; \\t\\t\\tk++;} \\t\\tif (k == 31) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \\t\\tint t = ((u & 1) == 1) ? v : -(u \\/ 2); \\t\\tdo { \\t\\t\\twhile ((t & 1) == 0) { \\t\\t\\t\\tt \\/= 2;} \\t\\t\\tif (t > 0) { \\t\\t\\t\\tu = -t;}else { \\t\\t\\t\\tv = t;} \\t\\t\\tt = (v - u) \\/ 2;} while (t != 0 ); \\t\\treturn (-u) * (1 << k);} \\tpublic static long gcd(final long p, final long q) { \\t\\tlong u = p; \\t\\tlong v = q; \\t\\tif ((u == 0) || (v == 0)) { \\t\\t\\tif ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} \\t\\tif (u > 0) { \\t\\t\\tu = -u;} \\t\\tif (v > 0) { \\t\\t\\tv = -v;} \\t\\tint k = 0; \\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { \\t\\t\\tu \\/= 2; \\t\\t\\tv \\/= 2; \\t\\t\\tk++;} \\t\\tif (k == 63) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \\t\\tlong t = ((u & 1) == 1) ? v : -(u \\/ 2); \\t\\tdo { \\t\\t\\twhile ((t & 1) == 0) { \\t\\t\\t\\tt \\/= 2;} \\t\\t\\tif (t > 0) { \\t\\t\\t\\tu = -t;}else { \\t\\t\\t\\tv = t;} \\t\\t\\tt = (v - u) \\/ 2;} while (t != 0 ); \\t\\treturn (-u) * (1L << k);} \\tpublic static int hash(double value) { \\t\\treturn new java.lang.Double(value).hashCode();} \\tpublic static int hash(double[] value) { \\t\\treturn java.util.Arrays.hashCode(value);} \\tpublic static byte indicator(final byte x) { \\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} \\tpublic static double indicator(final double x) { \\t\\tif (java.lang.Double.isNaN(x)) { \\t\\t\\treturn java.lang.Double.NaN;} \\t\\treturn x >= 0.0 ? 1.0 : -1.0;} \\tpublic static float indicator(final float x) { \\t\\tif (java.lang.Float.isNaN(x)) { \\t\\t\\treturn java.lang.Float.NaN;} \\t\\treturn x >= 0.0F ? 1.0F : -1.0F;} \\tpublic static int indicator(final int x) { \\t\\treturn x >= 0 ? 1 : -1;} \\tpublic static long indicator(final long x) { \\t\\treturn x >= 0L ? 1L : -1L;} \\tpublic static short indicator(final short x) { \\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} \\tpublic static int lcm(int a, int b) { \\t\\tif ((a == 0) || (b == 0)) { \\t\\t\\treturn 0;} \\t\\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); \\t\\tif (lcm == (java.lang.Integer.MIN_VALUE)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} \\t\\treturn lcm;} \\tpublic static long lcm(long a, long b) { \\t\\tif ((a == 0) || (b == 0)) { \\t\\t\\treturn 0;} \\t\\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); \\t\\tif (lcm == (java.lang.Long.MIN_VALUE)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} \\t\\treturn lcm;} \\tpublic static double log(double base, double x) { \\t\\treturn (org.apache.commons.math.util.FastMath.log(x)) \\/ (org.apache.commons.math.util.FastMath.log(base));} \\tpublic static int mulAndCheck(int x, int y) { \\t\\tlong m = ((long) (x)) * ((long) (y)); \\t\\tif ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) { \\t\\t\\tthrow new java.lang.ArithmeticException(\\\"overflow: mul\\\");} \\t\\treturn ((int) (m));} \\tpublic static long mulAndCheck(long a, long b) { \\t\\tlong ret; \\t\\tjava.lang.String msg = \\\"overflow: multiply\\\"; \\t\\tif (a > b) { \\t\\t\\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);}else { \\t\\t\\tif (a < 0) { \\t\\t\\t\\tif (b < 0) { \\t\\t\\t\\t\\tif (a >= ((java.lang.Long.MAX_VALUE) \\/ b)) { \\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else \\t\\t\\t\\t\\tif (b > 0) { \\t\\t\\t\\t\\t\\tif (((java.lang.Long.MIN_VALUE) \\/ b) <= a) { \\t\\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else { \\t\\t\\t\\t\\t\\tret = 0;}}else \\t\\t\\t\\tif (a > 0) { \\t\\t\\t\\t\\tif (a <= ((java.lang.Long.MAX_VALUE) \\/ b)) { \\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else { \\t\\t\\t\\t\\tret = 0;}} \\t\\treturn ret;} \\tpublic static double scalb(final double d, final int scaleFactor) { \\t\\tif (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) { \\t\\t\\treturn d;} \\t\\tfinal long bits = java.lang.Double.doubleToLongBits(d); \\t\\tfinal long exponent = bits & 9218868437227405312L; \\t\\tfinal long rest = bits & -9218868437227405313L; \\t\\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); \\t\\treturn java.lang.Double.longBitsToDouble(newBits);} \\tpublic static double normalizeAngle(double a, double center) { \\t\\treturn a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) \\/ (org.apache.commons.math.util.MathUtils.TWO_PI)))));} \\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { \\t\\tif (java.lang.Double.isInfinite(normalizedSum)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} \\t\\tif (java.lang.Double.isNaN(normalizedSum)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} \\t\\tdouble sum = 0.0; \\t\\tfinal int len = values.length; \\t\\tdouble[] out = new double[len]; \\t\\tfor (int i = 0; i < len; i++) { \\t\\t\\tif (java.lang.Double.isInfinite(values[i])) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} \\t\\t\\tif (!(java.lang.Double.isNaN(values[i]))) { \\t\\t\\t\\tsum += values[i];}} \\t\\tif (sum == 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} \\t\\tfor (int i = 0; i < len; i++) { \\t\\t\\tif (java.lang.Double.isNaN(values[i])) { \\t\\t\\t\\tout[i] = java.lang.Double.NaN;}else { \\t\\t\\t\\tout[i] = ((values[i]) * normalizedSum) \\/ sum;}} \\t\\treturn out;} \\tpublic static double round(double x, int scale) { \\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \\tpublic static double round(double x, int scale, int roundingMethod) { \\t\\ttry { \\t\\t\\treturn new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { \\t\\t\\tif (java.lang.Double.isInfinite(x)) { \\t\\t\\t\\treturn x;}else { \\t\\t\\t\\treturn java.lang.Double.NaN;}}} \\tpublic static float round(float x, int scale) { \\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \\tpublic static float round(float x, int scale, int roundingMethod) { \\t\\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x); \\t\\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; \\t\\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) \\/ factor;} \\tprivate static double roundUnscaled(double unscaled, double sign, int roundingMethod) { \\t\\tswitch (roundingMethod) { \\t\\t\\tcase java.math.BigDecimal.ROUND_CEILING : \\t\\t\\t\\tif (sign == (-1)) { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));}else { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_DOWN : \\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_FLOOR : \\t\\t\\t\\tif (sign == (-1)) { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));}else { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction > 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction > 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else \\t\\t\\t\\t\\t\\tif (fraction < 0.5) { \\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { \\t\\t\\t\\t\\t\\t\\tif (((org.apache.commons.math.util.FastMath.floor(unscaled)) \\/ 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(unscaled)) \\/ 2.0)))) { \\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { \\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_UP : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY); \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction >= 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_UNNECESSARY : \\t\\t\\t\\tif (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) { \\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"Inexact result from rounding\\\");} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_UP : \\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)); \\t\\t\\t\\tbreak; \\t\\t\\tdefault : \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, \\\"ROUND_CEILING\\\", java.math.BigDecimal.ROUND_CEILING, \\\"ROUND_DOWN\\\", java.math.BigDecimal.ROUND_DOWN, \\\"ROUND_FLOOR\\\", java.math.BigDecimal.ROUND_FLOOR, \\\"ROUND_HALF_DOWN\\\", java.math.BigDecimal.ROUND_HALF_DOWN, \\\"ROUND_HALF_EVEN\\\", java.math.BigDecimal.ROUND_HALF_EVEN, \\\"ROUND_HALF_UP\\\", java.math.BigDecimal.ROUND_HALF_UP, \\\"ROUND_UNNECESSARY\\\", java.math.BigDecimal.ROUND_UNNECESSARY, \\\"ROUND_UP\\\", java.math.BigDecimal.ROUND_UP);} \\t\\treturn unscaled;} \\tpublic static byte sign(final byte x) { \\t\\treturn x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(java.lang.Double.isNaN(x))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "((org.apache.commons.math.util.MathUtils.NB) == (org.apache.commons.math.util.MathUtils.ZB))", "INGREDIENT_PARENT": "_byte_0 == (org.apache.commons.math.util.MathUtils.ZB)", "LOCATION": "org.apache.commons.math.util.MathUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_63\\/.\\/output_astor\\/AstorMain-Math-63\\/\\/src\\/\\/variant-10_f\\/org\\/apache\\/commons\\/math\\/util\\/MathUtils.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_63\\/output_astor\\/AstorMain-Math-63\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/MathUtils.java", "LINE": "417", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtBinaryOperatorImpl"}], "GENERATION": "5", "VARIANT_ID": "10", "TIME": "29", "VALIDATION": "|true|0|2282|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_63\\/.\\/output_astor\\/AstorMain-Math-63\\/\\/bin\\/\\/variant-10"}]}}, {"bug_id": "64", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:03:53.637269", "repair_begin": "2018-12-01 21:41:56.885887", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java\\n@@ -431,7 +431,7 @@\\n \\t\\t\\t\\t\\ttmpVec = residuals;\\n \\t\\t\\t\\t\\tresiduals = oldRes;\\n \\t\\t\\t\\t\\toldRes = tmpVec;\\n-\\t\\t\\t\\t}\\n+\\t\\t\\t\\t} \\t\\t\\t\\tcurrent = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\\n \\t\\t\\t\\tif ((checker) == null) {\\n \\t\\t\\t\\t\\tif (((((java.lang.Math.abs(actRed)) <= (costRelativeTolerance)) && \\n \\t\\t\\t\\t\\t(preRed <= (costRelativeTolerance))) && \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (ratio >= 1.0E-4) {\\n\\n\\tfirstIteration = false;\\n\\txNorm = 0;\\n\\tfor (int k = 0; k < (cols); ++k) {\\n\\t\\tdouble xK = (diag[k]) * (point[k]);\\n\\t\\txNorm += xK * xK;\\n\\t}\\n\\txNorm = java.lang.Math.sqrt(xNorm);\\n\\n\\n\\n}else {\\n\\n\\tcost = previousCost;\\n\\tfor (int j = 0; j < (solvedCols); ++j) {\\n\\t\\tint pj = permutation[j];\\n\\t\\tpoint[pj] = oldX[pj];\\n\\t}\\n\\ttmpVec = residuals;\\n\\tresiduals = oldRes;\\n\\toldRes = tmpVec;\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)", "INGREDIENT_PARENT": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)", "LOCATION": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_64\\/.\\/output_astor\\/AstorMain-Math-64\\/\\/src\\/\\/variant-4872_f\\/org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_64\\/output_astor\\/AstorMain-Math-64\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java", "LINE": "412", "MP_RANKING": "210", "SUSPICIOUNESS": "0.2", "PATCH_HUNK_TYPE": "CtAssignmentImpl|CtBlockImpl"}], "GENERATION": "2436", "VARIANT_ID": "4872", "TIME": "1251", "VALIDATION": "|true|0|2274|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_64\\/.\\/output_astor\\/AstorMain-Math-64\\/\\/bin\\/\\/variant-4872"}]}}, {"bug_id": "68", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:12:26.354878", "repair_begin": "2018-12-02 09:00:37.425194", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java", "line": 405, "faulty": "point[pj]=oldX[pj];", "type": "InsertBefore", "seed": "if (((Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance) && (ratio <= 2.0)) || (delta <= parRelativeTolerance * xNorm)) {\n  return new VectorialPointValuePair(point,objective);\n}"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\t2018-12-02 03:00:30.049365470 -0500\n+++ /tmp/RSRepair_Defects4J_Math_68/patches_xrdd/Patch_1046/patched/tmp/RSRepair_Defects4J_Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\t2018-12-02 03:11:54.959169242 -0500\n@@ -402,7 +402,12 @@\n                     cost = previousCost;\n                     for (int j = 0; j < solvedCols; ++j) {\n                         int pj = permutation[j];\n-                        point[pj] = oldX[pj];\n+                        if (((Math.abs(actRed) <= costRelativeTolerance)\n+\t\t\t\t\t\t\t\t&& (preRed <= costRelativeTolerance) && (ratio <= 2.0))\n+\t\t\t\t\t\t\t\t|| (delta <= parRelativeTolerance * xNorm)) {\n+\t\t\t\t\t\t\treturn new VectorialPointValuePair(point, objective);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tpoint[pj] = oldX[pj];\n                     }\n                     tmpVec    = residuals;\n                     residuals = oldRes;\n\n\n"}]}}, {"bug_id": "69", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:39:12.906581", "repair_begin": "2018-11-29 04:38:29.627176", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 193, "class": "org.apache.commons.math.stat.correlation.PearsonsCorrelation"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n@@ -192,3 +192,5 @@\n               outMatrix.setEntry(i, j, corr);\n-              outMatrix.setEntry(j, i, corr);\n+              if ((2) != (nVars)) {\n+                  outMatrix.setEntry(j, i, corr);\n+              }\n             }\n"}]}}, {"bug_id": "70", "tool": "ARJA", "nb_patch": 100, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 12:07:40.642494", "repair_begin": "2018-12-01 12:01:16.497626", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 66, "faulty": "return solve(f,min,max);", "type": "InsertBefore", "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 72, "faulty": "return solve(min,max);", "type": "Replace", "seed": "return solve(f,min,max);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 79, "faulty": "clearResult();", "type": "Delete", "seed": "setResult(min,0);"}], "patch": "--- /tmp/Arja_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2018-12-01 06:01:05.830275922 -0500\n+++ /tmp/Arja_Defects4J_Math_70/patches_7h0v/Patch_903/patched/tmp/Arja_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2018-12-01 06:05:47.453168737 -0500\n@@ -63,20 +63,22 @@\n     @Deprecated\n     public double solve(double min, double max)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(f, min, max);\n+        if (f.value(max) == 0.0) {\n+\t\t\t\treturn max;\n+\t\t\t}\n+\t\treturn solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifyInterval(min,max);\n         double m;\n         double fm;\n\n\n"}]}}, {"bug_id": "70", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 20:44:27.918831", "repair_begin": "2018-12-28 20:43:06.721273", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java\\n@@ -69,7 +69,7 @@\\n \\n \\tpublic double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double min, double max, double initial) throws \\n \\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {\\n-\\t\\treturn solve(min, max);\\n+\\t\\treturn solve(f, min, max);\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtReturnImpl", "ORIGINAL_CODE": "solve(min, max)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "solve(f, min, max)", "INGREDIENT_PARENT": "solve(_UnivariateRealFunction_0, _double_1, _double_2)", "LOCATION": "org.apache.commons.math.analysis.solvers.BisectionSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_70\\/.\\/output_astor\\/AstorMain-Math-70\\/\\/src\\/\\/variant-106_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_70\\/output_astor\\/AstorMain-Math-70\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java", "LINE": "72", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtReturnImpl"}], "GENERATION": "53", "VARIANT_ID": "106", "TIME": "35", "VALIDATION": "|true|0|2184|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_70\\/.\\/output_astor\\/AstorMain-Math-70\\/\\/bin\\/\\/variant-106"}]}}, {"bug_id": "70", "tool": "GenProg-A", "nb_patch": 54, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 17:35:28.442161", "repair_begin": "2018-12-02 17:28:17.750127", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 79, "faulty": "clearResult();", "type": "Replace", "seed": "iterationCount+=this.iterationCount;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 72, "faulty": "return solve(min,max);", "type": "Replace", "seed": "return solve(f,min,max);"}], "patch": "--- /tmp/GenProg_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2018-12-02 11:28:06.301991189 -0500\n+++ /tmp/GenProg_Defects4J_Math_70/patches_n4g1/Patch_1034/patched/tmp/GenProg_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2018-12-02 11:33:42.578738050 -0500\n@@ -69,14 +69,14 @@\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        iterationCount += this.iterationCount;\n         verifyInterval(min,max);\n         double m;\n         double fm;\n\n\n"}]}}, {"bug_id": "70", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 21:39:46.697566", "repair_begin": "2018-12-01 21:38:24.621830", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java\\n@@ -68,8 +68,8 @@\\n \\n \\n \\tpublic double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double min, double max, double initial) throws \\n-\\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {\\n-\\t\\treturn solve(min, max);\\n+\\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException { \\t\\treturn solve(f, min, max);\\n+\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return solve(min, max)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return solve(f, min, max)", "INGREDIENT_PARENT": "return solve(f, min, max)", "LOCATION": "org.apache.commons.math.analysis.solvers.BisectionSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_70\\/.\\/output_astor\\/AstorMain-Math-70\\/\\/src\\/\\/variant-34_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_70\\/output_astor\\/AstorMain-Math-70\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java", "LINE": "72", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "17", "VARIANT_ID": "34", "TIME": "26", "VALIDATION": "|true|0|2184|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_70\\/.\\/output_astor\\/AstorMain-Math-70\\/\\/bin\\/\\/variant-34"}]}}, {"bug_id": "70", "tool": "NPEFix", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2019-05-05 00:42:13.394128", "repair_begin": "2019-05-05 00:40:51.549561", "patches": [{"locations": [{"executionCount": 0, "line": 89, "class": "org.apache.commons.math.analysis.solvers.BisectionSolver", "sourceStart": 3098, "sourceEnd": 3098}, {"executionCount": 0, "line": 88, "class": "org.apache.commons.math.analysis.solvers.BisectionSolver", "sourceStart": 3068, "sourceEnd": 3068}], "patch": "--- analysis/solvers/BisectionSolver.java\n+++ analysis/solvers/BisectionSolver.java\n@@ -87,4 +87,12 @@\n             m = UnivariateRealSolverUtils.midpoint(min, max);\n-           fmin = f.value(min);\n-           fm = f.value(m);\n+           if (f == null) {\n+               fmin = new SinFunction().value(min);\n+           } else {\n+               fmin = f.value(min);\n+           }\n+           if (f == null) {\n+               fm = new SinFunction().value(m);\n+           } else {\n+               fm = f.value(m);\n+           }\n \n"}]}}, {"bug_id": "70", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:02:48.458976", "repair_begin": "2018-12-02 08:59:45.670770", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 72, "faulty": "return solve(min,max);", "type": "InsertBefore", "seed": "this.f=f;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2018-12-02 02:59:38.292128321 -0500\n+++ /tmp/RSRepair_Defects4J_Math_70/patches_acbg/Patch_120/patched/tmp/RSRepair_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2018-12-02 03:01:22.832543693 -0500\n@@ -69,7 +69,8 @@\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        this.f = f;\n+\t\treturn solve(min, max);\n     }\n \n     /** {@inheritDoc} */\n\n\n"}]}}, {"bug_id": "71", "tool": "ARJA", "nb_patch": 135, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 14:00:17.637751", "repair_begin": "2018-12-01 12:00:15.584422", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java", "line": 211, "faulty": "return forward ? initialStep : -initialStep;", "type": "Replace", "seed": "stepStart=t0;"}, {"path": "src/main/java/org/apache/commons/math/ode/events/EventState.java", "line": 212, "faulty": "increasing=gb >= ga;", "type": "InsertBefore", "seed": "pendingEvent=true;"}], "patch": "--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java\t2018-12-01 06:00:01.503483649 -0500\n+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_559/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java\t2018-12-01 06:48:35.070384829 -0500\n@@ -208,7 +208,8 @@\n                         }\n                     }\n \n-                    // variation direction, with respect to the integration direction\n+                    pendingEvent = true;\n+\t\t\t\t\t// variation direction, with respect to the integration direction\n                     increasing = gb >= ga;\n \n                     final UnivariateRealFunction f = new UnivariateRealFunction() {\n\n\n--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\t2018-12-01 06:00:01.507483649 -0500\n+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_559/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\t2018-12-01 06:48:35.070384829 -0500\n@@ -207,8 +207,7 @@\n       throws DerivativeException {\n \n     if (initialStep > 0) {\n-      // use the user provided value\n-      return forward ? initialStep : -initialStep;\n+      stepStart = t0;\n     }\n \n     // very rough first guess : h = 0.01 * ||y/scale|| / ||y'/scale||\n\n\n"}]}}, {"bug_id": "71", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:23:17.392261", "repair_begin": "2018-12-01 16:17:11.212134", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 211, "class": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n@@ -210,3 +210,5 @@\n       // use the user provided value\n-      return forward ? initialStep : -initialStep;\n+      if (false) {\n+        return forward ? initialStep : -initialStep;\n+      }\n     }\n"}]}}, {"bug_id": "71", "tool": "RSRepair-A", "nb_patch": 9, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 10:40:39.108431", "repair_begin": "2018-12-02 08:58:25.542721", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/ode/events/EventState.java", "line": 235, "faulty": "if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {\n  pendingEventTime=root;\n  if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n    return false;\n  }\n  pendingEvent=true;\n  return true;\n}", "type": "InsertBefore", "seed": "if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n  return false;\n}"}, {"path": "src/main/java/org/apache/commons/math/ode/events/EventState.java", "line": 230, "faulty": "if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {\n  ta=tb;\n  ga=gb;\n}\n else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {\n  pendingEventTime=root;\n  if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n    return false;\n  }\n  pendingEvent=true;\n  return true;\n}", "type": "InsertBefore", "seed": "interpolator.setInterpolatedTime(ta);"}, {"path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java", "line": 153, "faulty": "initialStep=initialStepSize;", "type": "InsertBefore", "seed": "double hNew=stepSize;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\t2018-12-02 02:58:11.597856320 -0500\n+++ /tmp/RSRepair_Defects4J_Math_71/patches_qzqe/Patch_670/patched/tmp/RSRepair_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\t2018-12-02 04:01:48.713784116 -0500\n@@ -150,7 +150,8 @@\n     if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {\n       initialStep = -1.0;\n     } else {\n-      initialStep = initialStepSize;\n+      double hNew = stepSize;\n+\tinitialStep = initialStepSize;\n     }\n   }\n \n\n\n--- /tmp/RSRepair_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java\t2018-12-02 02:58:11.597856320 -0500\n+++ /tmp/RSRepair_Defects4J_Math_71/patches_qzqe/Patch_670/patched/tmp/RSRepair_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java\t2018-12-02 04:01:48.717784150 -0500\n@@ -227,26 +227,28 @@\n                     solver.setAbsoluteAccuracy(convergence);\n                     solver.setMaximalIterationCount(maxIterationCount);\n                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n+                    interpolator.setInterpolatedTime(ta);\n+\t\t\t\t\tif ((Math.abs(root - ta) <= convergence) &&\n                          (Math.abs(root - previousEventTime) <= convergence)) {\n                         // we have either found nothing or found (again ?) a past event, we simply ignore it\n                         ta = tb;\n                         ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n-                    }\n+                    } else {\n+\t\t\t\t\t\tif (pendingEvent\n+\t\t\t\t\t\t\t\t&& (Math.abs(t1 - pendingEventTime) <= convergence)) {\n+\t\t\t\t\t\t\treturn false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (Double.isNaN(previousEventTime)\n+\t\t\t\t\t\t\t\t|| (Math.abs(previousEventTime - root) > convergence)) {\n+\t\t\t\t\t\t\tpendingEventTime = root;\n+\t\t\t\t\t\t\tif (pendingEvent\n+\t\t\t\t\t\t\t\t\t&& (Math.abs(t1 - pendingEventTime) <= convergence)) {\n+\t\t\t\t\t\t\t\treturn false;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tpendingEvent = true;\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \n                 } else {\n                     // no sign change: there is no event for now\n\n\n"}]}}, {"bug_id": "73", "tool": "ARJA", "nb_patch": 130, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 13:40:29.470869", "repair_begin": "2018-12-01 12:00:19.731949", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 287, "faulty": "oldDelta=delta;", "type": "Delete", "seed": "p=dx * r3;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 132, "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}], "patch": "--- /tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-01 06:00:09.289104123 -0500\n+++ /tmp/Arja_Defects4J_Math_73/patches_pxsy/Patch_1141/patched/tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-01 06:56:35.555528070 -0500\n@@ -128,7 +128,8 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n@@ -284,7 +285,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n"}]}}, {"bug_id": "73", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 20:42:32.314832", "repair_begin": "2018-12-28 20:36:04.909212", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java\\n@@ -135,7 +135,7 @@\\n \\n \\n \\n-\\t\\treturn solve(f, min, yMin, max, yMax, initial, yInitial);\\n+\\t\\treturn solve(f, max, max, max);\\n \\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtReturnImpl", "ORIGINAL_CODE": "solve(f, min, yMin, max, yMax, initial, yInitial)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "solve(f, max, max, max)", "INGREDIENT_PARENT": "solve(_UnivariateRealFunction_0, _double_1, _double_2, _double_3)", "LOCATION": "org.apache.commons.math.analysis.solvers.BrentSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_73\\/.\\/output_astor\\/AstorMain-Math-73\\/\\/src\\/\\/variant-32_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_73\\/output_astor\\/AstorMain-Math-73\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "LINE": "138", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtReturnImpl"}], "GENERATION": "16", "VARIANT_ID": "32", "TIME": "349", "VALIDATION": "|true|0|2140|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_73\\/.\\/output_astor\\/AstorMain-Math-73\\/\\/bin\\/\\/variant-32"}]}}, {"bug_id": "73", "tool": "GenProg-A", "nb_patch": 75, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 18:35:23.027679", "repair_begin": "2018-12-02 17:24:20.124576", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 114, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 176, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(min,0);\n  ret=min;\n}\n else if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);\n}", "type": "InsertBefore", "seed": "resultComputed=true;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 176, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(min,0);\n  ret=min;\n}\n else if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);\n}", "type": "InsertBefore", "seed": "resultComputed=true;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 107, "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", "type": "InsertBefore", "seed": "clearResult();"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 138, "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", "type": "InsertBefore", "seed": "checkResultComputed();"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 114, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 176, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(min,0);\n  ret=min;\n}\n else if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);\n}", "type": "InsertBefore", "seed": "resultComputed=true;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 107, "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", "type": "InsertBefore", "seed": "clearResult();"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 138, "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", "type": "InsertBefore", "seed": "checkResultComputed();"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 114, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 114, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", "type": "Delete", "seed": "setup(f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 176, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(min,0);\n  ret=min;\n}\n else if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);\n}", "type": "InsertBefore", "seed": "ret=solve(f,min,yMin,max,yMax,min,yMin);"}], "patch": "--- /tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-02 11:24:09.151526925 -0500\n+++ /tmp/GenProg_Defects4J_Math_73/patches_p045/Patch_1046/patched/tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-02 12:21:15.666301758 -0500\n@@ -104,19 +104,19 @@\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        clearResult();\n+\t\tclearResult();\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -134,7 +134,9 @@\n         }\n \n \n-        // full Brent algorithm starting with provided initial guess\n+        checkResultComputed();\n+\t\tcheckResultComputed();\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -172,7 +174,11 @@\n         // Verify bracketing\n         double sign = yMin * yMax;\n         if (sign > 0) {\n-            // check if either value is close to a zero\n+            resultComputed = true;\n+\t\t\tresultComputed = true;\n+\t\t\tresultComputed = true;\n+\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t// check if either value is close to a zero\n             if (Math.abs(yMin) <= functionValueAccuracy) {\n                 setResult(min, 0);\n                 ret = min;\n\n\n"}]}}, {"bug_id": "73", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 21:33:29.049654", "repair_begin": "2018-12-01 21:32:23.552944", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java\\n@@ -131,11 +131,11 @@\\n \\n \\t\\tif ((yInitial * yMax) < 0) {\\n \\t\\t\\treturn solve(f, initial, yInitial, max, yMax, initial, yInitial);\\n-\\t\\t}\\n+\\t\\t} \\t\\treturn solve(f, min, max);\\n+\\n \\n \\n \\n-\\t\\treturn solve(f, min, yMin, max, yMax, initial, yInitial);\\n \\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return solve(f, min, yMin, max, yMax, initial, yInitial)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return solve(f, min, max)", "INGREDIENT_PARENT": "return solve(f, min, max)", "LOCATION": "org.apache.commons.math.analysis.solvers.BrentSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_73\\/.\\/output_astor\\/AstorMain-Math-73\\/\\/src\\/\\/variant-170_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_73\\/output_astor\\/AstorMain-Math-73\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "LINE": "138", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "85", "VARIANT_ID": "170", "TIME": "32", "VALIDATION": "|true|0|2140|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_73\\/.\\/output_astor\\/AstorMain-Math-73\\/\\/bin\\/\\/variant-170"}]}}, {"bug_id": "73", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:34:25.058314", "repair_begin": "2018-11-29 04:33:55.348166", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 225, "class": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n@@ -224,6 +224,6 @@\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        if ((!(lower < initial)) || ((org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.this.result <= lower) && (1 == lower))) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n-                    lower, initial, upper);\n+            \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n+            lower, initial, upper);\n         }\n"}]}}, {"bug_id": "73", "tool": "RSRepair-A", "nb_patch": 5, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:50:34.241303", "repair_begin": "2018-12-02 08:59:25.046179", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 132, "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-02 02:59:14.663477620 -0500\n+++ /tmp/RSRepair_Defects4J_Math_73/patches_iucc/Patch_443/patched/tmp/RSRepair_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-02 03:24:36.821453784 -0500\n@@ -128,7 +128,8 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n\n\n"}]}}, {"bug_id": "74", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:16:29.495828", "repair_begin": "2018-12-02 08:59:28.783966", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java", "line": 240, "faulty": "interpolator.rescale(hNew);", "type": "Replace", "seed": "setMaxGrowth(10.0);"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\t2018-12-02 02:59:15.678254218 -0500\n+++ /tmp/RSRepair_Defects4J_Math_74/patches_ej9v/Patch_230/patched/tmp/RSRepair_Defects4J_Math_74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\t2018-12-02 03:07:11.384181913 -0500\n@@ -237,7 +237,7 @@\n         interpolator.storeTime(stepStart);\n \n         double hNew = stepSize;\n-        interpolator.rescale(hNew);\n+        setMaxGrowth(10.0);\n \n         boolean lastStep = false;\n         while (!lastStep) {\n\n\n"}]}}, {"bug_id": "76", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:33:06.982454", "repair_begin": "2018-11-29 04:30:11.177897", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 339, "class": "org.apache.commons.math.random.RandomDataImpl"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n@@ -340,3 +340,3 @@\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"the Poisson mean must be positive ({0})\", mean);\n+            \"the Poisson mean must be positive ({0})\", mean);\n         }\n"}]}}, {"bug_id": "78", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:26:29.802589", "repair_begin": "2018-11-29 04:25:46.444315", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 282, "class": "org.apache.commons.math.analysis.solvers.BrentSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -281,3 +281,5 @@\n                     // Fall back to bisection.\n-                    delta = 0.5 * dx;\n+                    if (y0 < 1) {\n+                        delta = 0.5 * dx;\n+                    }\n                     oldDelta = delta;\n"}]}}, {"bug_id": "80", "tool": "ARJA", "nb_patch": 609, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 12:11:53.805308", "repair_begin": "2018-12-01 11:57:25.733019", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1137, "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", "type": "Replace", "seed": "squaredSecondary=new double[secondary.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1414, "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", "type": "InsertBefore", "seed": "tau=0.0;"}], "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_331/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:51.619785357 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                squaredSecondary = new double[secondary.length];\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,8 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = 0.0;\n+\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"}]}}, {"bug_id": "80", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 19:46:06.030673", "repair_begin": "2018-12-28 19:35:52.407421", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1132,7 +1132,7 @@\\n \\tprivate boolean flipIfWarranted(final int n, final int step) {\\n \\t\\tif ((1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])) {\\n \\n-\\t\\t\\tint j = (4 * n) - 1;\\n+\\t\\t\\tint j = ((pingPong) - (2 * (pingPong))) - 1;\\n \\t\\t\\tfor (int i = 0; i < j; i += 4) {\\n \\t\\t\\t\\tfor (int k = 0; k < 4; k += step) {\\n \\t\\t\\t\\t\\tfinal double tmp = work[(i + k)];\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtLocalVariableImpl", "ORIGINAL_CODE": "(4 * n) - 1", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "((pingPong) - (2 * (pingPong))) - 1", "INGREDIENT_PARENT": "(_int_0 - (2 * (_int_1))) - 1", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/src\\/\\/variant-134_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_80\\/output_astor\\/AstorMain-Math-80\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1135", "MP_RANKING": "29", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtLocalVariableImpl"}], "GENERATION": "67", "VARIANT_ID": "134", "TIME": "151", "VALIDATION": "|true|0|2102|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/bin\\/\\/variant-134"}]}}, {"bug_id": "80", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:15:52.154578", "repair_begin": "2018-12-01 16:15:11.763395", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 1139, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1138,3 +1138,5 @@\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n+                    if (false) {\n+                        work[i + k] = work[j - k];\n+                    }\n                     work[j - k] = tmp;\n"}]}}, {"bug_id": "80", "tool": "GenProg-A", "nb_patch": 649, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 17:25:03.696454", "repair_begin": "2018-12-02 17:13:23.363644", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 944, "faulty": "work[i + 2]=-0.0;", "type": "Delete", "seed": "return copy().mapAddToSelf(d);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1106, "faulty": "tType-=12;", "type": "Delete", "seed": "luDecompose();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1093, "faulty": "return deflatedEnd;", "type": "InsertBefore", "seed": "tType=-7;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "Delete", "seed": "double sum=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1093, "faulty": "return deflatedEnd;", "type": "InsertBefore", "seed": "tType=-7;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "Delete", "seed": "double sum=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1415, "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", "type": "Delete", "seed": "final int columns=getColumnDimension();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1404, "faulty": "work[j4]=0.0;", "type": "Delete", "seed": "g=0.25 * 0.333;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "Replace", "seed": "final double[][] iData=new double[n][];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1386, "faulty": "dMin=dN1;", "type": "Replace", "seed": "tau=0.0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1415, "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", "type": "Delete", "seed": "double sum=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1407, "faulty": "eMin=0.0;", "type": "Delete", "seed": "final double tmp=work[j4 + 2] / work[j4 - 3];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1138, "faulty": "final double tmp=work[i + k];", "type": "Replace", "seed": "final double absoluteTolerance=4 * minPivot;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1406, "faulty": "dMin=dN;", "type": "Replace", "seed": "g+=0.333 * (1 - g);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1406, "faulty": "dMin=dN;", "type": "Delete", "seed": "final double tmp=work[j4 + 2] / work[j4 - 3];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 959, "faulty": "work[j + 2]=0.0;", "type": "Replace", "seed": "work[j]=d + work[i];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1055, "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", "type": "InsertBefore", "seed": "double lower=Double.POSITIVE_INFINITY;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1407, "faulty": "eMin=0.0;", "type": "Delete", "seed": "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1093, "faulty": "return deflatedEnd;", "type": "InsertBefore", "seed": "tType=-7;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "Delete", "seed": "double sum=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 957, "faulty": "work[i]=-0.0;", "type": "Replace", "seed": "int dataPos=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 960, "faulty": "d=work[i + 2];", "type": "Delete", "seed": "upperSpectra=Double.NEGATIVE_INFINITY;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "Replace", "seed": "final double[][] iData=new double[n][];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1386, "faulty": "dMin=dN1;", "type": "Replace", "seed": "tau=0.0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1415, "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", "type": "Delete", "seed": "double sum=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1407, "faulty": "eMin=0.0;", "type": "Delete", "seed": "final double tmp=work[j4 + 2] / work[j4 - 3];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1138, "faulty": "final double tmp=work[i + k];", "type": "Replace", "seed": "final double absoluteTolerance=4 * minPivot;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1090, "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", "type": "Delete", "seed": "double trace=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "InsertBefore", "seed": "final double cnst2=1.010;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1142, "faulty": "j-=4;", "type": "InsertBefore", "seed": "final ArrayRealVector v=eigenvectors[i];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1405, "faulty": "dN=work[j4p2 + 2];", "type": "Delete", "seed": "OpenMapRealVector res=new OpenMapRealVector(getDimension());"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 958, "faulty": "work[j]=d;", "type": "Delete", "seed": "final double[] vK=eigenvectors[k].getDataRef();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1091, "faulty": "dMin=0.0;", "type": "Delete", "seed": "double absDCurrent=Math.abs(main[0]);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 872, "faulty": "break;", "type": "Delete", "seed": "int j=4 * n - 1;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 944, "faulty": "work[i + 2]=-0.0;", "type": "Delete", "seed": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1063, "faulty": "dMin=-0.0;", "type": "Delete", "seed": "work[4 * deflatedEnd - 3 - pingPong]=0.0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1056, "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", "type": "InsertBefore", "seed": "double n2=1;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1142, "faulty": "j-=4;", "type": "InsertBefore", "seed": "return copy().mapSignumToSelf();"}], "patch": "--- /tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-02 11:13:12.598989360 -0500\n+++ /tmp/GenProg_Defects4J_Math_80/patches_fgqj/Patch_904/patched/tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-02 11:21:14.888761865 -0500\n@@ -869,7 +869,6 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -941,7 +940,6 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -954,10 +952,8 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n-                    work[j]     = d;\n-                    work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    int dataPos = 0;\n+                    work[j] = d + work[i];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1052,15 +1048,16 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                double lower = Double.POSITIVE_INFINITY;\n+\t\t\t\tdMin2 = Math.min(dMin2, work[l - 1]);\n+                double n2 = 1;\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n             }\n         }\n \n@@ -1086,11 +1083,11 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n-                    updateSigma(tau);\n-                    return deflatedEnd;\n+                   updateSigma(tau);\n+                    tType = -7;\n+\t\t\t\t\ttType = -7;\n+\t\t\t\t\ttType = -7;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1103,7 +1100,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1133,14 +1129,8 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            final double cnst2 = 1.010;\n+\t\t\tfinal double[][] iData = new double[n][];\n             return true;\n         }\n         return false;\n@@ -1383,7 +1373,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            tau = 0.0;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1401,10 +1391,6 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n-            dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n@@ -1412,7 +1398,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"}]}}, {"bug_id": "80", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 20:35:32.442006", "repair_begin": "2018-12-01 20:28:30.548166", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1136,7 +1136,7 @@\\n \\t\\t\\tfor (int i = 0; i < j; i += 4) {\\n \\t\\t\\t\\tfor (int k = 0; k < 4; k += step) {\\n \\t\\t\\t\\t\\tfinal double tmp = work[(i + k)];\\n-\\t\\t\\t\\t\\twork[(i + k)] = work[(j - k)];\\n+\\n \\t\\t\\t\\t\\twork[(j - k)] = tmp;\\n \\t\\t\\t\\t}\\n \\t\\t\\t\\tj -= 4;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "work[(i + k)] = work[(j - k)]", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/src\\/\\/variant-98_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_80\\/output_astor\\/AstorMain-Math-80\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1139", "MP_RANKING": "17", "SUSPICIOUNESS": "1"}], "GENERATION": "49", "VARIANT_ID": "98", "TIME": "116", "VALIDATION": "|true|0|2102|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/bin\\/\\/variant-98"}]}}, {"bug_id": "80", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-06 23:47:15.968663", "repair_begin": "2018-12-06 23:45:00.572814", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1133,14 +1133,14 @@\\n \\t\\tif ((1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])) {\\n \\n \\t\\t\\tint j = (4 * n) - 1;\\n-\\t\\t\\tfor (int i = 0; i < j; i += 4) {\\n-\\t\\t\\t\\tfor (int k = 0; k < 4; k += step) {\\n-\\t\\t\\t\\t\\tfinal double tmp = work[(i + k)];\\n-\\t\\t\\t\\t\\twork[(i + k)] = work[(j - k)];\\n-\\t\\t\\t\\t\\twork[(j - k)] = tmp;\\n-\\t\\t\\t\\t}\\n+\\t\\t\\tfor (int i = 0; i < j; i += 4)\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\t\\tj -= 4;\\n-\\t\\t\\t}\\n+\\n \\t\\t\\treturn true;\\n \\t\\t}\\n \\t\\treturn false;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", "ORIGINAL_CODE": "for (int k = 0; k < 4; k += step) {\\n\\tfinal double tmp = work[(i + k)];\\n\\twork[(i + k)] = work[(j - k)];\\n\\twork[(j - k)] = tmp;\\n}", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/src\\/\\/variant-59_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_80\\/output_astor\\/AstorMain-Math-80\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1137", "MP_RANKING": "70", "SUSPICIOUNESS": "0.577"}], "GENERATION": "1", "VARIANT_ID": "59", "TIME": "60", "VALIDATION": "|true|0|2102|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/bin\\/\\/variant-59"}]}}, {"bug_id": "80", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 18:54:07.884788", "repair_begin": "2018-12-07 18:47:39.491374", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1130,7 +1130,7 @@\\n \\n \\n \\tprivate boolean flipIfWarranted(final int n, final int step) {\\n-\\t\\tif ((1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])) {\\n+\\t\\tif ((1.5 * (this.work[this.pingPong])) == (this.work[((4 * (n - 1)) + (this.pingPong))])) {\\n \\n \\t\\t\\tint j = (4 * n) - 1;\\n \\t\\t\\tfor (int i = 0; i < j; i += 4) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])", "PATCH_HUNK_CODE": "(1.5 * (this.work[this.pingPong])) == (this.work[((4 * (n - 1)) + (this.pingPong))])", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/src\\/\\/variant-306_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_80\\/output_astor\\/AstorMain-Math-80\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1133", "MP_RANKING": "31", "SUSPICIOUNESS": "0.243", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "306", "TIME": "328", "VALIDATION": "|true|0|2102|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/bin\\/\\/variant-306"}]}}, {"bug_id": "80", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:44:55.084077", "repair_begin": "2018-12-01 22:43:15.326591", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1138, "faulty": "final double tmp=work[i + k];", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 16:43:04.613721010 -0500\n+++ /tmp/Kali_Defects4J_Math_80/patches_8w5w/Patch_5/patched/tmp/Kali_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 16:44:54.681989926 -0500\n@@ -1135,7 +1135,9 @@\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n+                    if (true)\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tfinal double tmp = work[i + k];\n                     work[i + k] = work[j - k];\n                     work[j - k] = tmp;\n                 }\n\n\n"}]}}, {"bug_id": "80", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:23:15.966880", "repair_begin": "2018-11-29 04:22:42.599668", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 1139, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1138,3 +1138,5 @@\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n+                    if (org.apache.commons.math.linear.EigenDecompositionImpl.this.cachedV!=null) {\n+                        work[i + k] = work[j - k];\n+                    }\n                     work[j - k] = tmp;\n"}]}}, {"bug_id": "80", "tool": "RSRepair-A", "nb_patch": 65, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:58:45.568160", "repair_begin": "2018-12-02 08:59:44.289539", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1387, "faulty": "eMin=0.0;", "type": "Delete", "seed": "double norm=getNorm();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "Delete", "seed": "squaredSecondary=new double[secondary.length];"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-02 02:59:33.532536160 -0500\n+++ /tmp/RSRepair_Defects4J_Math_80/patches_izn3/Patch_262/patched/tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-02 03:15:17.546851491 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1384,7 +1376,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"}]}}, {"bug_id": "81", "tool": "ARJA", "nb_patch": 518, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 12:29:10.558754", "repair_begin": "2018-12-01 11:57:40.506668", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1543, "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", "type": "Replace", "seed": "if (b2 == 0.0) {\n  break;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1520, "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", "type": "Delete", "seed": "a2=a2 + b2;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1480, "faulty": "a2=0.0;", "type": "Delete", "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1014/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:33.538486114 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1534,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"}]}}, {"bug_id": "81", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:15:37.016142", "repair_begin": "2018-12-01 16:15:06.557043", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1544, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1543,3 +1543,5 @@\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    if (false) {\n+                        b2 = work[nn - 13] / work[nn - 15];\n+                    }\n                     a2 = a2 + b2;\n"}]}}, {"bug_id": "81", "tool": "GenProg-A", "nb_patch": 595, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 17:28:19.661791", "repair_begin": "2018-12-02 17:12:44.882098", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1480, "faulty": "a2=0.0;", "type": "Replace", "seed": "dN1=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1507, "faulty": "b1=b2;", "type": "Replace", "seed": "int lastPos=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1507, "faulty": "b1=b2;", "type": "Delete", "seed": "work=new double[6 * main.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1485, "faulty": "np=nn - 9;", "type": "InsertBefore", "seed": "this.splitTolerance=splitTolerance;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1586, "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", "type": "Delete", "seed": "tType=-3;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1507, "faulty": "b1=b2;", "type": "Replace", "seed": "int lastPos=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1507, "faulty": "b1=b2;", "type": "Delete", "seed": "work=new double[6 * main.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1485, "faulty": "np=nn - 9;", "type": "InsertBefore", "seed": "this.splitTolerance=splitTolerance;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1529, "faulty": "tType=-5;", "type": "InsertBefore", "seed": "this.secondary=secondary.clone();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1544, "faulty": "b2=work[nn - 13] / work[nn - 15];", "type": "Delete", "seed": "double s=0.333 * dMin1;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1625, "faulty": "tType=-9;", "type": "Delete", "seed": "updateSigma(tau);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1537, "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", "type": "InsertBefore", "seed": "int k=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1517, "faulty": "a2=cnst3 * a2;", "type": "Delete", "seed": "double b1=work[np - 2];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1508, "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", "type": "Delete", "seed": "double gamma=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1625, "faulty": "tType=-9;", "type": "Delete", "seed": "SparseFieldVector<T> res=new SparseFieldVector<T>(this);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1484, "faulty": "b2=work[nn - 5] / work[nn - 7];", "type": "InsertBefore", "seed": "double n2=1;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1480, "faulty": "a2=0.0;", "type": "Delete", "seed": "double z=1;"}], "patch": "--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-02 11:12:34.491681081 -0500\n+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_1430/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-02 11:25:54.078670605 -0500\n@@ -1477,12 +1477,14 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n-                        np = nn - 9;\n+                        double n2 = 1;\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+                        this.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tthis.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tnp = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n                         b2 = work[np - 2];\n@@ -1504,18 +1506,12 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n-\n                     // rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1525,7 +1521,8 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                this.secondary = secondary.clone();\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n@@ -1534,14 +1531,14 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+                int k = 0;\n+\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n@@ -1583,47 +1580,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"}]}}, {"bug_id": "81", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 20:32:57.770654", "repair_begin": "2018-12-01 20:26:35.966718", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1523,61 +1523,61 @@\\n \\t\\t\\t\\t\\t\\ttau = s;\\n \\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else \\t\\t\\t\\t\\tif ((dMin) == (dN2)) {\\n+\\t\\t\\t\\t}else {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n-\\t\\t\\t\\t\\t\\ttType = -5;\\n-\\t\\t\\t\\t\\t\\tdouble s = 0.25 * (dMin);\\n \\n \\n-\\t\\t\\t\\t\\t\\tfinal int np = nn - (2 * (pingPong));\\n-\\t\\t\\t\\t\\t\\tdouble b1 = work[(np - 2)];\\n-\\t\\t\\t\\t\\t\\tdouble b2 = work[(np - 6)];\\n-\\t\\t\\t\\t\\t\\tfinal double gam = dN2;\\n-\\t\\t\\t\\t\\t\\tif (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n-\\t\\t\\t\\t\\t\\t\\treturn;\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\tdouble a2 = ((work[(np - 8)]) \\/ b2) * (1 + ((work[(np - 4)]) \\/ b1));\\n \\n \\n-\\t\\t\\t\\t\\t\\tif ((end - start) > 2) {\\n-\\t\\t\\t\\t\\t\\t\\tb2 = (work[(nn - 13)]) \\/ (work[(nn - 15)]);\\n-\\t\\t\\t\\t\\t\\t\\ta2 = a2 + b2;\\n-\\t\\t\\t\\t\\t\\t\\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tif (b2 == 0.0) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t\\tb1 = b2;\\n-\\t\\t\\t\\t\\t\\t\\t\\tif ((work[i4]) > (work[(i4 - 2)])) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t\\tb2 = b2 * ((work[i4]) \\/ (work[(i4 - 2)]));\\n-\\t\\t\\t\\t\\t\\t\\t\\ta2 = a2 + b2;\\n-\\t\\t\\t\\t\\t\\t\\t\\tif (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\ta2 = cnst3 * a2;\\n-\\t\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\t\\tif (a2 < cnst1) {\\n-\\t\\t\\t\\t\\t\\t\\ttau = (gam * (1 - (java.lang.Math.sqrt(a2)))) \\/ (1 + a2);\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\ttau = s;\\n-\\t\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\t}else {\\n \\n \\n-\\t\\t\\t\\t\\t\\tif ((tType) == (-6)) {\\n-\\t\\t\\t\\t\\t\\t\\tg += 0.333 * (1 - (g));\\n-\\t\\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\t\\tif ((tType) == (-18)) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tg = 0.25 * 0.333;\\n-\\t\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\t\\tg = 0.25;\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\ttau = (g) * (dMin);\\n-\\t\\t\\t\\t\\t\\ttType = -6;\\n \\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\tbreak;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((dMin) == (dN2)) {\\n\\n\\n\\ttType = -5;\\n\\tdouble s = 0.25 * (dMin);\\n\\n\\n\\tfinal int np = nn - (2 * (pingPong));\\n\\tdouble b1 = work[(np - 2)];\\n\\tdouble b2 = work[(np - 6)];\\n\\tfinal double gam = dN2;\\n\\tif (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n\\t\\treturn;\\n\\t}\\n\\tdouble a2 = ((work[(np - 8)]) \\/ b2) * (1 + ((work[(np - 4)]) \\/ b1));\\n\\n\\n\\tif ((end - start) > 2) {\\n\\t\\tb2 = (work[(nn - 13)]) \\/ (work[(nn - 15)]);\\n\\t\\ta2 = a2 + b2;\\n\\t\\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {\\n\\t\\t\\tif (b2 == 0.0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tb1 = b2;\\n\\t\\t\\tif ((work[i4]) > (work[(i4 - 2)])) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tb2 = b2 * ((work[i4]) \\/ (work[(i4 - 2)]));\\n\\t\\t\\ta2 = a2 + b2;\\n\\t\\t\\tif (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ta2 = cnst3 * a2;\\n\\t}\\n\\n\\tif (a2 < cnst1) {\\n\\t\\ttau = (gam * (1 - (java.lang.Math.sqrt(a2)))) \\/ (1 + a2);\\n\\t}else {\\n\\t\\ttau = s;\\n\\t}\\n\\n}else {\\n\\n\\n\\tif ((tType) == (-6)) {\\n\\t\\tg += 0.333 * (1 - (g));\\n\\t}else \\t\\tif ((tType) == (-18)) {\\n\\t\\t\\tg = 0.25 * 0.333;\\n\\t\\t}else {\\n\\t\\t\\tg = 0.25;\\n\\t\\t}\\n\\ttau = (g) * (dMin);\\n\\ttType = -6;\\n\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_81\\/.\\/output_astor\\/AstorMain-Math-81\\/\\/src\\/\\/variant-62_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_81\\/output_astor\\/AstorMain-Math-81\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1526", "MP_RANKING": "260", "SUSPICIOUNESS": "0.25"}], "GENERATION": "31", "VARIANT_ID": "62", "TIME": "91", "VALIDATION": "|true|0|2101|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_81\\/.\\/output_astor\\/AstorMain-Math-81\\/\\/bin\\/\\/variant-62"}]}}, {"bug_id": "81", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-06 23:46:34.809670", "repair_begin": "2018-12-06 23:45:15.851835", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1534,7 +1534,7 @@\\n \\t\\t\\t\\t\\t\\tdouble b1 = work[(np - 2)];\\n \\t\\t\\t\\t\\t\\tdouble b2 = work[(np - 6)];\\n \\t\\t\\t\\t\\t\\tfinal double gam = dN2;\\n-\\t\\t\\t\\t\\t\\tif (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n+\\t\\t\\t\\t\\t\\tif (true) {\\n \\t\\t\\t\\t\\t\\t\\treturn;\\n \\t\\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t\\tdouble a2 = ((work[(np - 8)]) \\/ b2) * (1 + ((work[(np - 4)]) \\/ b1));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n\\treturn;\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\treturn;\\n}", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_81\\/.\\/output_astor\\/AstorMain-Math-81\\/\\/src\\/\\/variant-4_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_81\\/output_astor\\/AstorMain-Math-81\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1537", "MP_RANKING": "7", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "4", "TIME": "3", "VALIDATION": "|true|0|2101|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_81\\/.\\/output_astor\\/AstorMain-Math-81\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "81", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 18:48:04.108917", "repair_begin": "2018-12-07 18:47:02.460539", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1534,7 +1534,7 @@\\n \\t\\t\\t\\t\\t\\tdouble b1 = work[(np - 2)];\\n \\t\\t\\t\\t\\t\\tdouble b2 = work[(np - 6)];\\n \\t\\t\\t\\t\\t\\tfinal double gam = dN2;\\n-\\t\\t\\t\\t\\t\\tif (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n+\\t\\t\\t\\t\\t\\tif (((this.work[(np - 8)]) != b2) || ((this.work[(np - 4)]) > b1)) {\\n \\t\\t\\t\\t\\t\\t\\treturn;\\n \\t\\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t\\tdouble a2 = ((work[(np - 8)]) \\/ b2) * (1 + ((work[(np - 4)]) \\/ b1));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)", "PATCH_HUNK_CODE": "(\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(this.work[(np - 8)]) != b2) || ((this.work[(np - 4)]) > b1)", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_81\\/.\\/output_astor\\/AstorMain-Math-81\\/\\/src\\/\\/variant-4_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_81\\/output_astor\\/AstorMain-Math-81\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1537", "MP_RANKING": "0", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "4", "TIME": "3", "VALIDATION": "|true|0|2101|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_81\\/.\\/output_astor\\/AstorMain-Math-81\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "81", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:41:41.438435", "repair_begin": "2018-12-01 22:40:26.788484", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1537, "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 16:40:19.601381786 -0500\n+++ /tmp/Kali_Defects4J_Math_81/patches_jirz/Patch_1/patched/tmp/Kali_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 16:41:41.081385555 -0500\n@@ -1534,7 +1534,7 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+                if (true) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n\n"}]}}, {"bug_id": "81", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:21:18.094307", "repair_begin": "2018-11-29 04:20:42.277545", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1586, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1585,4 +1585,4 @@\n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n+            if (org.apache.commons.math.linear.EigenDecompositionImpl.this.main!=null) {\n+                \n                 // cases 7 and 8.\n@@ -1618,3 +1618,3 @@\n             } else {\n-\n+                \n                 // case 9.\n"}]}}, {"bug_id": "81", "tool": "RSRepair-A", "nb_patch": 76, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:16:53.741478", "repair_begin": "2018-12-02 08:59:14.080105", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1543, "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", "type": "Replace", "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-02 02:59:03.224542878 -0500\n+++ /tmp/RSRepair_Defects4J_Math_81/patches_cedi/Patch_589/patched/tmp/RSRepair_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-02 03:11:06.800407842 -0500\n@@ -1539,26 +1539,11 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (a2 < cnst1) {\n+\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t} else {\n+\t\t\t\t\ttau = s;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"}]}}, {"bug_id": "82", "tool": "ARJA", "nb_patch": 40, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 11:57:33.864120", "repair_begin": "2018-12-01 11:45:16.183411", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 80, "faulty": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);", "type": "InsertBefore", "seed": "this.goalType=goalType;"}, {"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 63, "faulty": "minValue=tableau.getEntry(0,i);", "type": "Delete", "seed": "incrementIterationsCounter();"}], "patch": "--- /tmp/Arja_Defects4J_Math_82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-01 05:45:05.425613151 -0500\n+++ /tmp/Arja_Defects4J_Math_82/patches_cvr8/Patch_577/patched/tmp/Arja_Defects4J_Math_82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-01 05:51:16.901783845 -0500\n@@ -60,7 +60,6 @@\n         Integer minPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n-                minValue = tableau.getEntry(0, i);\n                 minPos = i;\n             }\n         }\n@@ -77,7 +76,8 @@\n         double minRatio = Double.MAX_VALUE;\n         Integer minRatioPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n+            this.goalType = goalType;\n+\t\t\tfinal double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                 final double ratio = rhs / entry;\n\n\n"}]}}, {"bug_id": "82", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:16:08.131696", "repair_begin": "2018-12-01 16:14:56.058392", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 63, "class": "org.apache.commons.math.optimization.linear.SimplexSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -62,3 +62,5 @@\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n-                minValue = tableau.getEntry(0, i);\n+                if (false) {\n+                    minValue = tableau.getEntry(0, i);\n+                }\n                 minPos = i;\n"}]}}, {"bug_id": "82", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 20:21:32.221707", "repair_begin": "2018-12-01 20:19:49.589942", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -59,10 +59,10 @@\\n \\t\\tdouble minValue = 0;\\n \\t\\tjava.lang.Integer minPos = null;\\n \\t\\tfor (int i = tableau.getNumObjectiveFunctions(); i < ((tableau.getWidth()) - 1); i++) {\\n-\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0)\\n+\\n \\t\\t\\t\\tminPos = i;\\n-\\t\\t\\t}\\n+\\n \\t\\t}\\n \\t\\treturn minPos;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "minValue = tableau.getEntry(0, i)", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_82\\/.\\/output_astor\\/AstorMain-Math-82\\/\\/src\\/\\/variant-156_f\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_82\\/output_astor\\/AstorMain-Math-82\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "63", "MP_RANKING": "39", "SUSPICIOUNESS": "0.267"}], "GENERATION": "78", "VARIANT_ID": "156", "TIME": "48", "VALIDATION": "|true|0|2056|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_82\\/.\\/output_astor\\/AstorMain-Math-82\\/\\/bin\\/\\/variant-156"}]}}, {"bug_id": "82", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-06 23:46:47.050094", "repair_begin": "2018-12-06 23:45:29.428911", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -59,10 +59,10 @@\\n \\t\\tdouble minValue = 0;\\n \\t\\tjava.lang.Integer minPos = null;\\n \\t\\tfor (int i = tableau.getNumObjectiveFunctions(); i < ((tableau.getWidth()) - 1); i++) {\\n-\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0)\\n+\\n \\t\\t\\t\\tminPos = i;\\n-\\t\\t\\t}\\n+\\n \\t\\t}\\n \\t\\treturn minPos;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "minValue = tableau.getEntry(0, i)", "LOCATION": "org.apache.commons.math.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_82\\/.\\/output_astor\\/AstorMain-Math-82\\/\\/src\\/\\/variant-36_f\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_82\\/output_astor\\/AstorMain-Math-82\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "63", "MP_RANKING": "39", "SUSPICIOUNESS": "0.267"}], "GENERATION": "1", "VARIANT_ID": "36", "TIME": "29", "VALIDATION": "|true|0|2056|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_82\\/.\\/output_astor\\/AstorMain-Math-82\\/\\/bin\\/\\/variant-36"}]}}, {"bug_id": "82", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 18:47:40.576860", "repair_begin": "2018-12-07 18:46:41.236049", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -79,7 +79,7 @@\\n \\t\\tfor (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getHeight()); i++) {\\n \\t\\t\\tfinal double rhs = tableau.getEntry(i, ((tableau.getWidth()) - 1));\\n \\t\\t\\tfinal double entry = tableau.getEntry(i, col);\\n-\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon)) >= 0) {\\n+\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(entry, 0, this.epsilon)) > 0) {\\n \\t\\t\\t\\tfinal double ratio = rhs \\/ entry;\\n \\t\\t\\t\\tif (ratio < minRatio) {\\n \\t\\t\\t\\t\\tminRatio = ratio;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon)) >= 0", "PATCH_HUNK_CODE": "(org.apache.commons.math.util.MathUtils.compareTo(entry, 0, this.epsilon)) > 0", "LOCATION": "org.apache.commons.math.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_82\\/.\\/output_astor\\/AstorMain-Math-82\\/\\/src\\/\\/variant-29_f\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_82\\/output_astor\\/AstorMain-Math-82\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "82", "MP_RANKING": "5", "SUSPICIOUNESS": "0.267", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "29", "TIME": "15", "VALIDATION": "|true|0|2056|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_82\\/.\\/output_astor\\/AstorMain-Math-82\\/\\/bin\\/\\/variant-29"}]}}, {"bug_id": "82", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:23:29.718613", "repair_begin": "2018-11-29 04:19:37.699194", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 63, "class": "org.apache.commons.math.optimization.linear.SimplexSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -62,3 +62,5 @@\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n-                minValue = tableau.getEntry(0, i);\n+                if (org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON == minValue) {\n+                    minValue = tableau.getEntry(0, i);\n+                }\n                 minPos = i;\n"}]}}, {"bug_id": "84", "tool": "ARJA", "nb_patch": 24, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:12:50.468108", "repair_begin": "2018-12-02 08:51:03.737527", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", "line": 120, "faulty": "simplex[0]=original[0];", "type": "InsertBefore", "seed": "simplex=new RealPointValuePair[n + 1];"}, {"path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", "line": 90, "faulty": "if (comparator.compare(contracted,best) < 0) {\n  return;\n}", "type": "Replace", "seed": "break;"}], "patch": "--- /tmp/Arja_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2018-12-02 02:50:53.636433660 -0500\n+++ /tmp/Arja_Defects4J_Math_84/patches_l8im/Patch_1415/patched/tmp/Arja_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2018-12-02 03:11:45.273695319 -0500\n@@ -87,12 +87,7 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+            break;\n \n         }\n \n@@ -117,7 +112,8 @@\n \n         // create the linearly transformed simplex\n         simplex = new RealPointValuePair[n + 1];\n-        simplex[0] = original[0];\n+        simplex = new RealPointValuePair[n + 1];\n+\t\tsimplex[0] = original[0];\n         for (int i = 1; i <= n; ++i) {\n             final double[] xOriginal    = original[i].getPointRef();\n             final double[] xTransformed = new double[n];\n\n\n"}]}}, {"bug_id": "84", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 20:19:54.743042", "repair_begin": "2018-12-01 20:08:10.687422", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java\\n@@ -92,7 +92,7 @@\\n \\n \\n \\t\\t\\t\\treturn;\\n-\\t\\t\\t}\\n+\\t\\t\\t} \\t\\t\\treturn;\\n \\n \\t\\t} \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((comparator.compare(contracted, best)) < 0) {\\n\\n\\n\\n\\treturn;\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return", "INGREDIENT_PARENT": "return", "LOCATION": "org.apache.commons.math.optimization.direct.MultiDirectional", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_84\\/.\\/output_astor\\/AstorMain-Math-84\\/\\/src\\/\\/variant-1952_f\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_84\\/output_astor\\/AstorMain-Math-84\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java", "LINE": "90", "MP_RANKING": "6", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "976", "VARIANT_ID": "1952", "TIME": "670", "VALIDATION": "|true|0|2054|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_84\\/.\\/output_astor\\/AstorMain-Math-84\\/\\/bin\\/\\/variant-1952"}]}}, {"bug_id": "84", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-06 23:45:53.278883", "repair_begin": "2018-12-06 23:44:55.102828", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java\\n@@ -87,7 +87,7 @@\\n \\n \\n \\t\\t\\tfinal org.apache.commons.math.optimization.RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\\n-\\t\\t\\tif ((comparator.compare(contracted, best)) < 0) {\\n+\\t\\t\\tif (true) {\\n \\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((comparator.compare(contracted, best)) < 0) {\\n\\n\\n\\n\\treturn;\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\n\\n\\n\\treturn;\\n}", "LOCATION": "org.apache.commons.math.optimization.direct.MultiDirectional", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_84\\/.\\/output_astor\\/AstorMain-Math-84\\/\\/src\\/\\/variant-6_f\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_84\\/output_astor\\/AstorMain-Math-84\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java", "LINE": "90", "MP_RANKING": "6", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "6", "TIME": "11", "VALIDATION": "|true|0|2054|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_84\\/.\\/output_astor\\/AstorMain-Math-84\\/\\/bin\\/\\/variant-6"}]}}, {"bug_id": "84", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 18:47:41.640416", "repair_begin": "2018-12-07 18:46:55.330399", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java\\n@@ -87,7 +87,7 @@\\n \\n \\n \\t\\t\\tfinal org.apache.commons.math.optimization.RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\\n-\\t\\t\\tif ((comparator.compare(contracted, best)) < 0) {\\n+\\t\\t\\tif ((comparator.compare(contracted, best)) == 0) {\\n \\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(comparator.compare(contracted, best)) < 0", "PATCH_HUNK_CODE": "(comparator.compare(contracted, best)) == 0", "LOCATION": "org.apache.commons.math.optimization.direct.MultiDirectional", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_84\\/.\\/output_astor\\/AstorMain-Math-84\\/\\/src\\/\\/variant-8_f\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_84\\/output_astor\\/AstorMain-Math-84\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java", "LINE": "90", "MP_RANKING": "1", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "8", "TIME": "2", "VALIDATION": "|true|0|2054|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_84\\/.\\/output_astor\\/AstorMain-Math-84\\/\\/bin\\/\\/variant-8"}]}}, {"bug_id": "84", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:41:31.114186", "repair_begin": "2018-12-01 22:40:31.294342", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", "line": 90, "faulty": "if (comparator.compare(contracted,best) < 0) {\n  return;\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2018-12-01 16:40:24.033434484 -0500\n+++ /tmp/Kali_Defects4J_Math_84/patches_sijd/Patch_1/patched/tmp/Kali_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2018-12-01 16:41:30.749436738 -0500\n@@ -87,7 +87,7 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (true) {\n                 // accept the contracted simplex\n \n             // check convergence\n\n\n"}]}}, {"bug_id": "84", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:11:42.982174", "repair_begin": "2018-12-02 08:59:08.352246", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", "line": 90, "faulty": "if (comparator.compare(contracted,best) < 0) {\n  return;\n}", "type": "Replace", "seed": "return;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2018-12-02 02:58:57.891763827 -0500\n+++ /tmp/RSRepair_Defects4J_Math_84/patches_0asy/Patch_682/patched/tmp/RSRepair_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2018-12-02 03:09:40.502202665 -0500\n@@ -87,12 +87,7 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+            return;\n \n         }\n \n\n\n"}]}}, {"bug_id": "85", "tool": "ARJA", "nb_patch": 171, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 12:12:40.022797", "repair_begin": "2018-12-01 11:44:16.452159", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 82, "faulty": "double upperBound=getDomainUpperBound(p);", "type": "InsertBefore", "seed": "if (p == 0) {\n  return -1;\n}"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Replace", "seed": "if (function == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:44:06.180110217 -0500\n+++ /tmp/Arja_Defects4J_Math_85/patches_4w3i/Patch_1311/patched/tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:05:08.776411750 -0500\n@@ -79,7 +79,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 0) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n--- /tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 05:44:06.180110217 -0500\n+++ /tmp/Arja_Defects4J_Math_85/patches_4w3i/Patch_1311/patched/tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:05:08.776411750 -0500\n@@ -196,12 +196,10 @@\n                 ((a > lowerBound) || (b < upperBound)));\n    \n         if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            if (function == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function is null\");\n+\t\t\t}\n         }\n         \n         return new double[]{a, b};\n\n\n"}]}}, {"bug_id": "85", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 19:29:51.599154", "repair_begin": "2018-12-28 19:23:17.919264", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n@@ -195,7 +195,7 @@\\n \\t\\t} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && \\n \\t\\t((a > lowerBound) || (b < upperBound)) );\\n \\n-\\t\\tif ((fa * fb) >= 0.0) {\\n+\\t\\tif (function == null) {\\n \\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n \\t\\t\\t(\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n \\t\\t\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(fa * fb) >= 0.0", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "function == null", "INGREDIENT_PARENT": "_UnivariateRealFunction_0 == null", "LOCATION": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/src\\/\\/variant-612_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_85\\/output_astor\\/AstorMain-Math-85\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "LINE": "198", "MP_RANKING": "52", "SUSPICIOUNESS": "0.243", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "306", "VARIANT_ID": "612", "TIME": "356", "VALIDATION": "|true|0|1983|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/bin\\/\\/variant-612"}]}}, {"bug_id": "85", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:12:53.456480", "repair_begin": "2018-12-01 16:12:31.209700", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 199, "class": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -198,8 +198,10 @@\n         if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            if (false) {\n+                throw new ConvergenceException(\n+                \"number of iterations={0}, maximum iterations={1}, \" +\n+                \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                numIterations, maximumIterations, initial,\n+                lowerBound, upperBound, a, b, fa, fb);\n+            }\n         }\n"}]}}, {"bug_id": "85", "tool": "GenProg-A", "nb_patch": 167, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 17:19:00.416652", "repair_begin": "2018-12-02 17:08:50.217142", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 97, "faulty": "if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n  return lowerBound;\n}", "type": "Replace", "seed": "double value=0;"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "int iterationCount=0;"}, {"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 104, "faulty": "throw new MathException(ex);", "type": "InsertBefore", "seed": "if (p < 0.0 || p > 1.0) {\n  throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\",p,0.0,1.0);\n}"}, {"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 97, "faulty": "if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n  return lowerBound;\n}", "type": "InsertBefore", "seed": "bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "int iterationCount=0;"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "int iterationCount=0;"}, {"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 97, "faulty": "if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n  return lowerBound;\n}", "type": "Replace", "seed": "double value=0;"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "int iterationCount=0;"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "int iterationCount=0;"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "int iterationCount=0;"}, {"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 97, "faulty": "if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n  return lowerBound;\n}", "type": "Replace", "seed": "double value=0;"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "int iterationCount=0;"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Replace", "seed": "return new double[]{a,b};"}, {"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 97, "faulty": "if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n  return lowerBound;\n}", "type": "Delete", "seed": "return 0.0d;"}, {"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 97, "faulty": "if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n  return lowerBound;\n}", "type": "Delete", "seed": "return 0.0d;"}], "patch": "--- /tmp/GenProg_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:08:39.989549467 -0500\n+++ /tmp/GenProg_Defects4J_Math_85/patches_sd6k/Patch_825/patched/tmp/GenProg_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 11:18:57.272557911 -0500\n@@ -196,12 +196,7 @@\n                 ((a > lowerBound) || (b < upperBound)));\n    \n         if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            return new double[] { a, b };\n         }\n         \n         return new double[]{a, b};\n\n\n--- /tmp/GenProg_Defects4J_Math_85/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 11:08:39.989549467 -0500\n+++ /tmp/GenProg_Defects4J_Math_85/patches_sd6k/Patch_825/patched/tmp/GenProg_Defects4J_Math_85/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 11:18:57.276557928 -0500\n@@ -86,21 +86,16 @@\n                     rootFindingFunction, getInitialDomain(p),\n                     lowerBound, upperBound);\n         }  catch (ConvergenceException ex) {\n-            /* \n-             * Check domain endpoints to see if one gives value that is within\n-             * the default solver's defaultAbsoluteAccuracy of 0 (will be the\n-             * case if density has bounded support and p is 0 or 1).\n-             * \n-             * TODO: expose the default solver, defaultAbsoluteAccuracy as\n-             * a constant.\n-             */ \n-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n-                return lowerBound;\n-            }\n-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {\n+            bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,\n+\t\t\t\t\tgetInitialDomain(p), lowerBound, upperBound);\n+\t\t\tif (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {\n                 return upperBound;\n             }     \n-            // Failed bracket convergence was not because of corner solution\n+            if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"{0} out of [{1}, {2}] range\", p, 0.0, 1.0);\n+\t\t\t}\n+\t\t\t// Failed bracket convergence was not because of corner solution\n             throw new MathException(ex);\n         }\n \n\n\n"}]}}, {"bug_id": "85", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 20:01:26.803550", "repair_begin": "2018-12-01 20:00:36.821070", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n@@ -196,12 +196,12 @@\\n \\t\\t((a > lowerBound) || (b < upperBound)) );\\n \\n \\t\\tif ((fa * fb) >= 0.0) {\\n-\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t(\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n-\\t\\t\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n-\\t\\t\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\")), \\n-\\t\\t\\tnumIterations, maximumIterations, initial, \\n-\\t\\t\\tlowerBound, upperBound, a, b, fa, fb);\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t}\\n \\n \\t\\treturn new double[]{ a, b };\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtThrowImpl|CtBlockImpl", "ORIGINAL_CODE": "throw new org.apache.commons.math.ConvergenceException(\\n(\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n\\\"final b value={6}, f(a)={7}, f(b)={8}\\\")), \\nnumIterations, maximumIterations, initial, \\nlowerBound, upperBound, a, b, fa, fb)", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/src\\/\\/variant-58_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_85\\/output_astor\\/AstorMain-Math-85\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "LINE": "199", "MP_RANKING": "3", "SUSPICIOUNESS": "1"}], "GENERATION": "29", "VARIANT_ID": "58", "TIME": "18", "VALIDATION": "|true|0|1983|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/bin\\/\\/variant-58"}]}}, {"bug_id": "85", "tool": "jKali", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-06 23:45:25.941918", "repair_begin": "2018-12-06 23:44:34.924467", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n@@ -196,12 +196,12 @@\\n \\t\\t((a > lowerBound) || (b < upperBound)) );\\n \\n \\t\\tif ((fa * fb) >= 0.0) {\\n-\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t(\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n-\\t\\t\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n-\\t\\t\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\")), \\n-\\t\\t\\tnumIterations, maximumIterations, initial, \\n-\\t\\t\\tlowerBound, upperBound, a, b, fa, fb);\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t}\\n \\n \\t\\treturn new double[]{ a, b };\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtThrowImpl|CtBlockImpl", "ORIGINAL_CODE": "throw new org.apache.commons.math.ConvergenceException(\\n(\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n\\\"final b value={6}, f(a)={7}, f(b)={8}\\\")), \\nnumIterations, maximumIterations, initial, \\nlowerBound, upperBound, a, b, fa, fb)", "LOCATION": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/src\\/\\/variant-9_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_Defects4J_Math_85\\/output_astor\\/AstorMain-Math-85\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "LINE": "199", "MP_RANKING": "3", "SUSPICIOUNESS": "1"}], "GENERATION": "1", "VARIANT_ID": "9", "TIME": "3", "VALIDATION": "|true|0|1983|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/bin\\/\\/variant-9"}]}}, {"bug_id": "85", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 18:47:53.862673", "repair_begin": "2018-12-07 18:46:49.990580", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n@@ -195,7 +195,7 @@\\n \\t\\t} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && \\n \\t\\t((a > lowerBound) || (b < upperBound)) );\\n \\n-\\t\\tif ((fa * fb) >= 0.0) {\\n+\\t\\tif ((fa * fb) > 0.0) {\\n \\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n \\t\\t\\t(\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n \\t\\t\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(fa * fb) >= 0.0", "PATCH_HUNK_CODE": "(fa * fb) > 0.0", "LOCATION": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/src\\/\\/variant-70_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_85\\/output_astor\\/AstorMain-Math-85\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "LINE": "198", "MP_RANKING": "11", "SUSPICIOUNESS": "0.243", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "70", "TIME": "20", "VALIDATION": "|true|0|1983|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/bin\\/\\/variant-70"}]}}, {"bug_id": "85", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 23:13:20.874213", "repair_begin": "2018-11-29 23:10:07.810799", "patches": [{"edits": [{"path": "", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete /tmp/Kali_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java"}]}]}}, {"bug_id": "85", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:18:43.028790", "repair_begin": "2018-11-29 04:18:10.631099", "patches": [{"nb_test_that_execute_statement": 17, "patchLocation": {"line": 198, "class": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"}, "patchType": "CONDITIONAL", "patch": "--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -197,9 +197,9 @@\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (-1 == fb) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            \"number of iterations={0}, maximum iterations={1}, \" +\n+            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+            \"final b value={6}, f(a)={7}, f(b)={8}\",\n+            numIterations, maximumIterations, initial,\n+            lowerBound, upperBound, a, b, fa, fb);\n         }\n"}]}}, {"bug_id": "85", "tool": "RSRepair-A", "nb_patch": 12, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 09:07:30.949166", "repair_begin": "2018-12-02 08:58:44.532783", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 97, "faulty": "if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n  return lowerBound;\n}", "type": "Delete", "seed": "return Double.MAX_VALUE;"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "Complex G2=null;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 02:58:34.231180826 -0500\n+++ /tmp/RSRepair_Defects4J_Math_85/patches_xvmy/Patch_132/patched/tmp/RSRepair_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-02 03:02:46.642444848 -0500\n@@ -196,12 +196,6 @@\n                 ((a > lowerBound) || (b < upperBound)));\n    \n         if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n         }\n         \n         return new double[]{a, b};\n\n\n--- /tmp/RSRepair_Defects4J_Math_85/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 02:58:34.231180826 -0500\n+++ /tmp/RSRepair_Defects4J_Math_85/patches_xvmy/Patch_132/patched/tmp/RSRepair_Defects4J_Math_85/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-02 03:02:46.646444950 -0500\n@@ -86,17 +86,6 @@\n                     rootFindingFunction, getInitialDomain(p),\n                     lowerBound, upperBound);\n         }  catch (ConvergenceException ex) {\n-            /* \n-             * Check domain endpoints to see if one gives value that is within\n-             * the default solver's defaultAbsoluteAccuracy of 0 (will be the\n-             * case if density has bounded support and p is 0 or 1).\n-             * \n-             * TODO: expose the default solver, defaultAbsoluteAccuracy as\n-             * a constant.\n-             */ \n-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {\n-                return lowerBound;\n-            }\n             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {\n                 return upperBound;\n             }     \n\n\n"}]}}, {"bug_id": "87", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:17:24.654117", "repair_begin": "2018-11-29 04:13:36.864211", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 161, "class": "org.apache.commons.math.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -160,4 +160,6 @@\n                     if (!restrictToNonNegative) {\n-                        matrix[row][getSlackVariableOffset() - 1] =\n+                        if (org.apache.commons.math.optimization.linear.SimplexTableau.this.numDecisionVariables < height) {\n+                            matrix[row][getSlackVariableOffset() - 1] =\n                             getInvertedCoeffiecientSum(constraint.getCoefficients());\n+                        }\n                     }\n"}]}}, {"bug_id": "88", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-07 18:46:59.169343", "repair_begin": "2018-12-07 18:45:47.518994", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -80,7 +80,7 @@\\n \\t\\t\\tdouble rhs = tableau.getEntry(i, ((tableau.getWidth()) - 1));\\n \\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon)) >= 0) {\\n \\t\\t\\t\\tdouble ratio = rhs \\/ (tableau.getEntry(i, col));\\n-\\t\\t\\t\\tif (ratio < minRatio) {\\n+\\t\\t\\t\\tif (ratio <= minRatio) {\\n \\t\\t\\t\\t\\tminRatio = ratio;\\n \\t\\t\\t\\t\\tminRatioPos = i;\\n \\t\\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "ratio < minRatio", "PATCH_HUNK_CODE": "ratio <= minRatio", "LOCATION": "org.apache.commons.math.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_88\\/.\\/output_astor\\/AstorMain-Math-88\\/\\/src\\/\\/variant-61_f\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_Defects4J_Math_88\\/output_astor\\/AstorMain-Math-88\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "83", "MP_RANKING": "10", "SUSPICIOUNESS": "0.302", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "61", "TIME": "30", "VALIDATION": "|true|0|1880|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_Defects4J_Math_88\\/.\\/output_astor\\/AstorMain-Math-88\\/\\/bin\\/\\/variant-61"}]}}, {"bug_id": "88", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 04:12:21.033872", "repair_begin": "2018-11-29 04:12:00.109669", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 339, "class": "org.apache.commons.math.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -338,3 +338,5 @@\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                         if ((org.apache.commons.math.optimization.linear.SimplexTableau.this.constraints.size()) != (coefficients.length)) {\n+                             coefficients[i] = 0;\n+                         }\n                     }\n"}]}}, {"bug_id": "91", "tool": "NPEFix", "nb_patch": 18, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2019-05-05 00:33:48.524044", "repair_begin": "2019-05-05 00:32:52.511997", "patches": [{"locations": [{"executionCount": 0, "line": 64, "class": "org.apache.commons.math.MathRuntimeException", "sourceStart": 2184, "sourceEnd": 2198}], "patch": "--- MathRuntimeException.java\n+++ MathRuntimeException.java\n@@ -63,2 +63,5 @@\n         try {\n+            if (cachedResources == null) {\n+                return s;\n+            }\n             if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {\n"}]}}, {"bug_id": "95", "tool": "ARJA", "nb_patch": 152, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 12:05:55.220970", "repair_begin": "2018-12-01 11:43:23.042055", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return denominatorDegreesOfFreedom;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 100, "faulty": "if (p == 0) {\n  return 0d;\n}", "type": "InsertBefore", "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1310/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:59:01.567818650 -0500\n@@ -97,7 +97,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n"}]}}, {"bug_id": "95", "tool": "Cardumen", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-28 19:16:51.450554", "repair_begin": "2018-12-28 19:14:56.458177", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java\\n@@ -144,7 +144,7 @@\\n \\t\\tdouble ret;\\n \\t\\tdouble d = getDenominatorDegreesOfFreedom();\\n \\n-\\t\\tret = d \\/ (d - 2.0);\\n+\\t\\tret = 0.5 * p;\\n \\t\\treturn ret;\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtAssignmentImpl", "ORIGINAL_CODE": "d \\/ (d - 2.0)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "0.5 * p", "INGREDIENT_PARENT": "(0.5 * _double_0)", "LOCATION": "org.apache.commons.math.distribution.FDistributionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_Defects4J_Math_95\\/.\\/output_astor\\/AstorMain-Math-95\\/\\/src\\/\\/variant-218_f\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_Defects4J_Math_95\\/output_astor\\/AstorMain-Math-95\\/src\\/default\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java", "LINE": "147", "MP_RANKING": "3", "SUSPICIOUNESS": "0.258", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtAssignmentImpl"}], "GENERATION": "109", "VARIANT_ID": "218", "TIME": "83", "VALIDATION": "|true|0|1301|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_Defects4J_Math_95\\/.\\/output_astor\\/AstorMain-Math-95\\/\\/bin\\/\\/variant-218"}]}}, {"bug_id": "95", "tool": "GenProg-A", "nb_patch": 88, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 17:02:48.234079", "repair_begin": "2018-12-02 16:50:23.841699", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 78, "faulty": "ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);", "type": "InsertBefore", "seed": "if (x < 0) return 0;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 147, "faulty": "ret=d / (d - 2.0);", "type": "Delete", "seed": "if (p < .5) {\n  ret=getAlpha() * getBeta() * .5;\n}\n else {\n  ret=getAlpha() * getBeta();\n}"}], "patch": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:50:15.340967631 -0500\n+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_1061/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 10:59:19.762803289 -0500\n@@ -75,7 +75,9 @@\n             double n = getNumeratorDegreesOfFreedom();\n             double m = getDenominatorDegreesOfFreedom();\n             \n-            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+            if (x < 0)\n+\t\t\t\treturn 0;\n+\t\t\tret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n                 0.5 * m);\n         }\n@@ -143,9 +145,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+            return 0;\n     }\n     \n     /**\n\n\n"}]}}, {"bug_id": "95", "tool": "jGenProg", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 19:36:47.217805", "repair_begin": "2018-12-01 19:35:14.536313", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java\\n@@ -145,8 +145,6 @@\\n \\t\\tdouble d = getDenominatorDegreesOfFreedom();\\n \\n \\t\\tret = d \\/ (d - 2.0);\\n-\\t\\treturn ret;\\n-\\t}\\n \\n \\n \\n@@ -154,20 +152,22 @@\\n \\n \\n \\n-\\tpublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\\n-\\t\\tif (degreesOfFreedom <= 0.0) {\\n-\\t\\t\\tthrow new java.lang.IllegalArgumentException(\\n-\\t\\t\\t\\\"degrees of freedom must be positive.\\\");\\n-\\t\\t}\\n-\\t\\tthis.numeratorDegreesOfFreedom = degreesOfFreedom;\\n-\\t}\\n \\n \\n \\n \\n \\n-\\tpublic double getNumeratorDegreesOfFreedom() {\\n-\\t\\treturn numeratorDegreesOfFreedom;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\treturn numeratorDegreesOfFreedom;} \\tpublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { \\t\\tif (degreesOfFreedom <= 0.0) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"degrees of freedom must be positive.\\\");} \\t\\tthis.numeratorDegreesOfFreedom = degreesOfFreedom;} \\tpublic double getNumeratorDegreesOfFreedom() { \\t\\treturn numeratorDegreesOfFreedom;\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return ret", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return numeratorDegreesOfFreedom", "INGREDIENT_PARENT": "return numeratorDegreesOfFreedom", "LOCATION": "org.apache.commons.math.distribution.FDistributionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_95\\/.\\/output_astor\\/AstorMain-Math-95\\/\\/src\\/\\/variant-206_f\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_95\\/output_astor\\/AstorMain-Math-95\\/src\\/default\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java", "LINE": "148", "MP_RANKING": "5", "SUSPICIOUNESS": "0.258", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "103", "VARIANT_ID": "206", "TIME": "55", "VALIDATION": "|true|0|1301|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_95\\/.\\/output_astor\\/AstorMain-Math-95\\/\\/bin\\/\\/variant-206"}]}}, {"bug_id": "95", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 22:38:55.934168", "repair_begin": "2018-12-01 22:37:51.261691", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 145, "faulty": "double d=getDenominatorDegreesOfFreedom();", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 16:37:45.439471652 -0500\n+++ /tmp/Kali_Defects4J_Math_95/patches_wycb/Patch_25/patched/tmp/Kali_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 16:38:55.571474896 -0500\n@@ -142,7 +142,9 @@\n      */\n     protected double getInitialDomain(double p) {\n         double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        if (true)\n+\t\t\treturn 0;\n+\t\tdouble d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n         return ret;\n\n\n"}]}}, {"bug_id": "95", "tool": "RSRepair-A", "nb_patch": 3, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 08:56:28.298950", "repair_begin": "2018-12-02 08:50:47.421452", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 147, "faulty": "ret=d / (d - 2.0);", "type": "Replace", "seed": "ret=0.5;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 02:50:41.603317274 -0500\n+++ /tmp/RSRepair_Defects4J_Math_95/patches_mkqx/Patch_175/patched/tmp/RSRepair_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-02 02:53:26.976926811 -0500\n@@ -143,8 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n+            ret = 0.5;\n         return ret;\n     }\n     \n\n\n"}]}}, {"bug_id": "98", "tool": "ARJA", "nb_patch": 31, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 11:50:37.032909", "repair_begin": "2018-12-01 11:41:39.294742", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java", "line": 989, "faulty": "final int nRows=this.getRowDimension();", "type": "InsertBefore", "seed": "parity=1;"}, {"path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java", "line": 991, "faulty": "final BigDecimal[] out=new BigDecimal[v.length];", "type": "Replace", "seed": "final BigDecimal[] out=new BigDecimal[nRows];"}, {"path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java", "line": 995, "faulty": "sum=sum.add(data[row][i].multiply(v[i]));", "type": "InsertBefore", "seed": "lu=null;"}, {"path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java", "line": 779, "faulty": "final double[] out=new double[v.length];", "type": "Replace", "seed": "final double[] out=new double[nRows];"}], "patch": "--- /tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\t2018-12-01 05:41:32.402671471 -0500\n+++ /tmp/Arja_Defects4J_Math_98/patches_pldq/Patch_1612/patched/tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\t2018-12-01 05:49:38.749691872 -0500\n@@ -986,13 +986,15 @@\n         if (v.length != this.getColumnDimension()) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n-        final int nRows = this.getRowDimension();\n+        parity = 1;\n+\t\tfinal int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n-        final BigDecimal[] out = new BigDecimal[v.length];\n+        final BigDecimal[] out = new BigDecimal[nRows];\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {\n-                sum = sum.add(data[row][i].multiply(v[i]));\n+                lu = null;\n+\t\t\t\tsum = sum.add(data[row][i].multiply(v[i]));\n             }\n             out[row] = sum;\n         }\n\n\n--- /tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\t2018-12-01 05:41:32.402671471 -0500\n+++ /tmp/Arja_Defects4J_Math_98/patches_pldq/Patch_1612/patched/tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\t2018-12-01 05:49:38.749691872 -0500\n@@ -776,7 +776,7 @@\n         if (v.length != nCols) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n-        final double[] out = new double[v.length];\n+        final double[] out = new double[nRows];\n         for (int row = 0; row < nRows; row++) {\n             final double[] dataRow = data[row];\n             double sum = 0;\n\n\n"}]}}, {"bug_id": "98", "tool": "NPEFix", "nb_patch": 2, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2019-05-05 00:29:09.723005", "repair_begin": "2019-05-05 00:28:30.208256", "patches": [{"locations": [{"executionCount": 0, "line": 665, "class": "org.apache.commons.math.linear.BigMatrixImpl", "sourceStart": 25233, "sourceEnd": 25241}], "patch": "--- linear/BigMatrixImpl.java\n+++ linear/BigMatrixImpl.java\n@@ -664,3 +664,8 @@\n         }\n-        final int nRows = subMatrix.length;\n+        final int nRows;\n+        if (subMatrix == null) {\n+            nRows = data.length;\n+        } else {\n+            nRows = subMatrix.length;\n+        }\n         if (nRows == 0) {\n@@ -669,3 +674,5 @@\n         }\n-        final int nCols = subMatrix[0].length;\n+        if (subMatrix != null) {\n+            final int nCols = subMatrix[0].length;\n+        }\n         if (nCols == 0) {\n"}]}}, {"bug_id": "103", "tool": "ARJA", "nb_patch": 25, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 12:11:33.585537", "repair_begin": "2018-12-01 11:42:24.523189", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 161, "faulty": "ret=0.0;", "type": "InsertBefore", "seed": "if (x == 0.0) {\n  ret=0.0;\n}\n else if (a >= 1.0 && x > a) {\n  ret=1.0 - regularizedGammaQ(a,x,epsilon,maxIterations);\n}\n else {\n  double n=0.0;\n  double an=1.0 / a;\n  double sum=an;\n  while (Math.abs(an) > epsilon && n < maxIterations) {\n    n=n + 1.0;\n    an=an * (x / (a + n));\n    sum=sum + an;\n  }\n  if (n >= maxIterations) {\n    throw new MaxIterationsExceededException(maxIterations);\n  }\n else {\n    ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n  }\n}"}, {"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 180, "faulty": "throw new MaxIterationsExceededException(maxIterations);", "type": "Replace", "seed": "ret=1.0;"}, {"path": "src/java/org/apache/commons/math/MathException.java", "line": 265, "faulty": "synchronized (out) {\n  super.printStackTrace(out);\n  if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n    out.print(\"Caused by: \");\n    rootCause.printStackTrace(out);\n  }\n}", "type": "InsertBefore", "seed": "if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n  out.print(\"Caused by: \");\n  rootCause.printStackTrace(out);\n}"}], "patch": "--- /tmp/Arja_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2018-12-01 05:42:13.764560256 -0500\n+++ /tmp/Arja_Defects4J_Math_103/patches_qdd1/Patch_566/patched/tmp/Arja_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2018-12-01 05:52:49.507820325 -0500\n@@ -158,7 +158,26 @@\n         if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n             ret = Double.NaN;\n         } else if (x == 0.0) {\n-            ret = 0.0;\n+            if (x == 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else if (a >= 1.0 && x > a) {\n+\t\t\t\tret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n+\t\t\t} else {\n+\t\t\t\tdouble n = 0.0;\n+\t\t\t\tdouble an = 1.0 / a;\n+\t\t\t\tdouble sum = an;\n+\t\t\t\twhile (Math.abs(an) > epsilon && n < maxIterations) {\n+\t\t\t\t\tn = n + 1.0;\n+\t\t\t\t\tan = an * (x / (a + n));\n+\t\t\t\t\tsum = sum + an;\n+\t\t\t\t}\n+\t\t\t\tif (n >= maxIterations) {\n+\t\t\t\t\tthrow new MaxIterationsExceededException(maxIterations);\n+\t\t\t\t} else {\n+\t\t\t\t\tret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tret = 0.0;\n         } else if (a >= 1.0 && x > a) {\n             // use regularizedGammaQ because it should converge faster in this\n             // case.\n@@ -177,7 +196,7 @@\n                 sum = sum + an;\n             }\n             if (n >= maxIterations) {\n-                throw new MaxIterationsExceededException(maxIterations);\n+                ret = 1.0;\n             } else {\n                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n             }\n\n\n--- /tmp/Arja_Defects4J_Math_103/src/java/org/apache/commons/math/MathException.java\t2018-12-01 05:42:13.740560255 -0500\n+++ /tmp/Arja_Defects4J_Math_103/patches_qdd1/Patch_566/patched/tmp/Arja_Defects4J_Math_103/src/java/org/apache/commons/math/MathException.java\t2018-12-01 05:52:49.511820301 -0500\n@@ -262,7 +262,11 @@\n      * @param out  the <code>PrintWriter</code> to use for output\n      */\n     public void printStackTrace(PrintWriter out) {\n-        synchronized (out) {\n+        if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n+\t\t\tout.print(\"Caused by: \");\n+\t\t\trootCause.printStackTrace(out);\n+\t\t}\n+\t\tsynchronized (out) {\n             super.printStackTrace(out);\n             if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n                 out.print(\"Caused by: \");\n\n\n"}]}}, {"bug_id": "103", "tool": "GenProg-A", "nb_patch": 7, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 17:01:32.844878", "repair_begin": "2018-12-02 16:44:12.668911", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java", "line": 109, "faulty": "return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));", "type": "InsertBefore", "seed": "setMean(mean);"}, {"path": "src/java/org/apache/commons/math/MathException.java", "line": 267, "faulty": "if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n  out.print(\"Caused by: \");\n  rootCause.printStackTrace(out);\n}", "type": "Delete", "seed": "return ((Double)getArguments()[0]).doubleValue();"}, {"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 180, "faulty": "throw new MaxIterationsExceededException(maxIterations);", "type": "Replace", "seed": "ret=1.0;"}, {"path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java", "line": 93, "faulty": "if (sd <= 0.0) {\n  throw new IllegalArgumentException(\"Standard deviation must be positive.\");\n}", "type": "InsertBefore", "seed": "this.mean=mean;"}], "patch": "--- /tmp/GenProg_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2018-12-02 10:44:01.108521889 -0500\n+++ /tmp/GenProg_Defects4J_Math_103/patches_zr8r/Patch_1770/patched/tmp/GenProg_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2018-12-02 11:01:30.642940579 -0500\n@@ -177,7 +177,7 @@\n                 sum = sum + an;\n             }\n             if (n >= maxIterations) {\n-                throw new MaxIterationsExceededException(maxIterations);\n+                ret = 1.0;\n             } else {\n                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n             }\n\n\n--- /tmp/GenProg_Defects4J_Math_103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\t2018-12-02 10:44:03.496521833 -0500\n+++ /tmp/GenProg_Defects4J_Math_103/patches_zr8r/Patch_1770/patched/tmp/GenProg_Defects4J_Math_103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\t2018-12-02 11:01:30.642940579 -0500\n@@ -90,7 +90,8 @@\n      * @throws IllegalArgumentException if <code>sd</code> is not positive.\n      */\n     public void setStandardDeviation(double sd) {\n-        if (sd <= 0.0) {\n+        this.mean = mean;\n+\t\tif (sd <= 0.0) {\n             throw new IllegalArgumentException(\n                 \"Standard deviation must be positive.\");\n         }       \n@@ -106,7 +107,8 @@\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n+            setMean(mean);\n+\t\t\treturn 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n     }\n     \n\n\n--- /tmp/GenProg_Defects4J_Math_103/src/java/org/apache/commons/math/MathException.java\t2018-12-02 10:44:01.080521889 -0500\n+++ /tmp/GenProg_Defects4J_Math_103/patches_zr8r/Patch_1770/patched/tmp/GenProg_Defects4J_Math_103/src/java/org/apache/commons/math/MathException.java\t2018-12-02 11:01:30.646940587 -0500\n@@ -264,10 +264,6 @@\n     public void printStackTrace(PrintWriter out) {\n         synchronized (out) {\n             super.printStackTrace(out);\n-            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n-                out.print(\"Caused by: \");\n-                rootCause.printStackTrace(out);\n-            }\n         }\n     }\n \n\n\n"}]}}, {"bug_id": "103", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-02 08:55:19.549605", "repair_begin": "2018-12-02 08:44:39.316009", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 180, "faulty": "throw new MaxIterationsExceededException(maxIterations);", "type": "Replace", "seed": "ret=1.0;"}], "patch": "--- /tmp/RSRepair_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2018-12-02 02:44:27.936415164 -0500\n+++ /tmp/RSRepair_Defects4J_Math_103/patches_nzo8/Patch_41/patched/tmp/RSRepair_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2018-12-02 02:46:13.064419700 -0500\n@@ -177,7 +177,7 @@\n                 sum = sum + an;\n             }\n             if (n >= maxIterations) {\n-                throw new MaxIterationsExceededException(maxIterations);\n+                ret = 1.0;\n             } else {\n                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n             }\n\n\n"}]}}, {"bug_id": "105", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-12-01 16:10:47.363713", "repair_begin": "2018-12-01 16:07:16.634348", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 107, "class": "org.apache.commons.math.stat.regression.SimpleRegression"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -106,3 +106,5 @@\n         if (n == 0) {\n-            xbar = x;\n+            if ((x <= 1) || (y <= x)) {\n+                xbar = x;\n+            }\n             ybar = y;\n"}]}}, {"bug_id": "105", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Math", "result": {"repair_end": "2018-11-29 03:42:22.744726", "repair_begin": "2018-11-29 03:41:51.117676", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 108, "class": "org.apache.commons.math.stat.regression.SimpleRegression"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -107,3 +107,5 @@\n             xbar = x;\n-            ybar = y;\n+            if (y <= x) {\n+                ybar = y;\n+            }\n         } else {\n"}]}}, {"bug_id": "6", "tool": "NPEFix", "nb_patch": 60, "benchmark": "Defects4J", "project": "Mockito", "result": {"repair_end": "2019-05-04 23:46:19.399801", "repair_begin": "2019-05-04 23:44:39.287878", "patches": [{"locations": [{"executionCount": 0, "line": 22, "class": "org.mockito.internal.invocation.ArgumentsProcessor", "sourceStart": 766, "sourceEnd": 786}], "patch": "--- internal/invocation/ArgumentsProcessor.java\n+++ internal/invocation/ArgumentsProcessor.java\n@@ -21,4 +21,10 @@\n     public static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\n-        if (!isVarArgs || new ArrayUtils().isEmpty(args) || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n-            return args == null ? new Object[0] : args;\n+        if (args[args.length - 1] == null) {\n+            if (!isVarArgs || new ArrayUtils().isEmpty(args) || args[args.length - 1] != null && ! args.getClass().isArray()) {\n+                return args == null ? new Object[0] : args;\n+            }\n+        } else {\n+            if (!isVarArgs || new ArrayUtils().isEmpty(args) || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n+                return args == null ? new Object[0] : args;\n+            }\n         }\n"}]}}, {"bug_id": "8", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Mockito", "result": {"repair_end": "2018-12-01 22:48:19.353174", "repair_begin": "2018-12-01 22:47:04.331399", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 377, "class": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType"}, "patchType": "PRECONDITION", "patch": "--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,3 +376,5 @@\n             for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n+                if (false) {\n+                    registerTypeVariablesOn(type);\n+                }\n             }\n"}]}}, {"bug_id": "10", "tool": "ARJA", "nb_patch": 1179, "benchmark": "Defects4J", "project": "Mockito", "result": {"repair_end": "2018-12-01 15:02:12.531330", "repair_begin": "2018-12-01 14:43:00.115970", "patches": [{"edits": [{"path": "src/org/mockito/internal/util/MockCreationValidator.java", "line": 63, "faulty": "new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);", "type": "Delete", "seed": "NULL"}], "patch": "--- /tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/util/MockCreationValidator.java\t2018-12-01 08:41:42.641290161 -0500\n+++ /tmp/Arja_Defects4J_Mockito_10/patches_jed8/Patch_2485/patched/tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/util/MockCreationValidator.java\t2018-12-01 08:59:37.154211887 -0500\n@@ -60,7 +60,6 @@\n                 && !(Serializable.class.isAssignableFrom(classToMock))\n                 && Constructors.noArgConstructorOf(classToMock) == null\n                 ) {\n-            new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);\n         }\n     }\n }\n\\ No newline at end of file\n\n\n"}]}}, {"bug_id": "10", "tool": "Kali-A", "nb_patch": 1, "benchmark": "Defects4J", "project": "Mockito", "result": {"repair_end": "2018-12-02 01:18:27.436273", "repair_begin": "2018-12-02 01:17:42.715756", "patches": [{"edits": [{"path": "src/org/mockito/internal/util/MockCreationValidator.java", "line": 63, "faulty": "new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);", "type": "InsertReturn false"}], "patch": "--- /tmp/Kali_Defects4J_Mockito_10/src/org/mockito/internal/util/MockCreationValidator.java\t2018-12-01 19:16:40.031000510 -0500\n+++ /tmp/Kali_Defects4J_Mockito_10/patches_q2uo/Patch_12/patched/tmp/Kali_Defects4J_Mockito_10/src/org/mockito/internal/util/MockCreationValidator.java\t2018-12-01 19:18:27.075015048 -0500\n@@ -60,7 +60,9 @@\n                 && !(Serializable.class.isAssignableFrom(classToMock))\n                 && Constructors.noArgConstructorOf(classToMock) == null\n                 ) {\n-            new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);\n+            if (true)\n+\t\t\t\t\t\treturn;\n+\t\t\tnew Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);\n         }\n     }\n }\n\\ No newline at end of file\n\n\n"}]}}, {"bug_id": "11", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "Defects4J", "project": "Time", "result": {"repair_end": "2018-11-29 07:50:36.042080", "repair_begin": "2018-11-29 06:52:37.609126", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1460, "class": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n@@ -1459,5 +1459,7 @@\n                     .equals(tailZone.iEndRecurrence.getNameKey())) {\n-                    if (ZoneInfoCompiler.verbose()) {\n-                        System.out.println(\"Fixing duplicate recurrent name key - \" +\n-                                           tailZone.iStartRecurrence.getNameKey());\n+                    if (false) {\n+                        if (ZoneInfoCompiler.verbose()) {\n+                            System.out.println(\"Fixing duplicate recurrent name key - \" +\n+                            tailZone.iStartRecurrence.getNameKey());\n+                        }\n                     }\n"}]}}, {"bug_id": "14", "tool": "Nopol", "nb_patch": 1, "benchmark": "Defects4J", "project": "Time", "result": {"repair_end": "2018-11-29 00:10:02.079952", "repair_begin": "2018-11-29 00:08:38.178369", "patches": [{"nb_test_that_execute_statement": 63, "patchLocation": {"line": 210, "class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -209,3 +209,3 @@\n             // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        if ((org.joda.time.chrono.BasicMonthOfYearDateTimeField.MIN <= fieldIndex) || ((!(1 == valueToAdd)) && ((valueToAdd) != (-1)))) {\n             long instant = 0L;\n"}]}}, {"bug_id": "e23b96b6bab26bd14316cefafcbaa16dd8eafcfb97a7159a7772f3c8bb3e78fb353dea728f6b4df6528286af5f0b85fd134c79886c9c2a352fe80d8204c69111_005", "tool": "ARJA", "nb_patch": 2, "benchmark": "IntroClassJava", "project": "checksum", "result": {"repair_end": "2018-12-03 00:23:29.130501", "repair_begin": "2018-12-02 23:59:27.208157", "patches": [{"edits": [{"path": "src/main/java/introclassJava/checksum_e23b96b6_005.java", "line": 69, "faulty": "letter.value='\\n';", "type": "InsertBefore", "seed": "sum.value=sum.value % 64 + 22;"}, {"path": "src/main/java/introclassJava/checksum_e23b96b6_005.java", "line": 73, "faulty": "sum.value=sum.value % 64 + 22;", "type": "Delete", "seed": "letter.value='\\n';"}, {"path": "src/main/java/introclassJava/checksum_e23b96b6_005.java", "line": 76, "faulty": "return;", "type": "Delete", "seed": ";"}], "patch": "--- /tmp/Arja_IntroClassJava_checksum_e23b96b6bab26bd14316cefafcbaa16dd8eafcfb97a7159a7772f3c8bb3e78fb353dea728f6b4df6528286af5f0b85fd134c79886c9c2a352fe80d8204c69111_005/src/main/java/introclassJava/checksum_e23b96b6_005.java\t2018-11-05 17:59:09.677645000 -0500\n+++ /tmp/Arja_IntroClassJava_checksum_e23b96b6bab26bd14316cefafcbaa16dd8eafcfb97a7159a7772f3c8bb3e78fb353dea728f6b4df6528286af5f0b85fd134c79886c9c2a352fe80d8204c69111_005/patches_gldo/Patch_1663/patched/tmp/Arja_IntroClassJava_checksum_e23b96b6bab26bd14316cefafcbaa16dd8eafcfb97a7159a7772f3c8bb3e78fb353dea728f6b4df6528286af5f0b85fd134c79886c9c2a352fe80d8204c69111_005/src/main/java/introclassJava/checksum_e23b96b6_005.java\t2018-12-02 18:21:50.309436537 -0500\n@@ -66,13 +66,13 @@\n             try {\n                 letter.value = scanner.findInLine (\".\").charAt (0);\n             } catch (java.lang.NullPointerException e) {\n-                letter.value = '\\n';\n+                sum.value = sum.value % 64 + 22;\n+\t\t\t\tletter.value = '\\n';\n             };\n             sum.value = sum.value + (int) letter.value;\n         }\n-        sum.value = sum.value % 64 + 22;\n         output += (String.format (\"Check sum is %c\\n\", (char) sum.value));\n         if (true)\n-            return;;\n+\t\t\t;;\n     }\n }\n\n\n"}]}}, {"bug_id": "0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_005", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 23:21:48.339241", "repair_begin": "2018-12-05 23:21:39.824065", "patches": [{"nb_test_that_execute_statement": 15, "patchLocation": {"line": 69, "class": "introclassJava.digits_0cdfa335_005"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/digits_0cdfa335_005.java\n+++ b/src/main/java/introclassJava/digits_0cdfa335_005.java\n@@ -68,3 +68,5 @@\n         if (i.value / i.value == 1) {\n-            i.value += 1.00;\n+            if (false) {\n+                i.value += 1.00;\n+            }\n         }\n"}]}}, {"bug_id": "5b504b3547416bfd54f138b3caa529ad72d157744b787e0e6f4745a2ff0fc5cc33bc87904b2d7cda9c7858087b2e04ece46d53fe9edd208f68d30a0ae70f363f_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-08 04:59:14.331177", "repair_begin": "2018-12-08 04:59:04.184818", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_5b504b35_000.java\\n+++ introclassJava\\/digits_5b504b35_000.java\\n@@ -69,7 +69,7 @@\\n \\t\\t\\tif (((input.value) < 0) && (!((input.value) == (digit.value)))) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"%d\\\\n\\\", (((-(inter.value)) * 10) \\/ (n.value)));\\n \\t\\t\\t}\\n-\\t\\t\\tif (((input.value) < 0) && ((input.value) == (digit.value))) {\\n+\\t\\t\\tif (((input.value) <= 0) && ((input.value) == (digit.value))) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"%d\\\\n\\\", (((inter.value) * 10) \\/ (n.value)));\\n \\t\\t\\t}\\n \\t\\t\\tif ((input.value) > 0) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((input.value) < 0) && ((input.value) == (digit.value))", "PATCH_HUNK_CODE": "(\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(input.value) <= 0) && ((input.value) == (digit.value))", "LOCATION": "introclassJava.digits_5b504b35_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_digits_5b504b3547416bfd54f138b3caa529ad72d157744b787e0e6f4745a2ff0fc5cc33bc87904b2d7cda9c7858087b2e04ece46d53fe9edd208f68d30a0ae70f363f_000\\/.\\/output_astor\\/AstorMain-digits-5b504b3547416bfd54f138b3caa529ad72d157744b787e0e6f4745a2ff0fc5cc33bc87904b2d7cda9c7858087b2e04ece46d53fe9edd208f68d30a0ae70f363f_000\\/\\/src\\/\\/variant-15_f\\/introclassJava\\/digits_5b504b35_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_digits_5b504b3547416bfd54f138b3caa529ad72d157744b787e0e6f4745a2ff0fc5cc33bc87904b2d7cda9c7858087b2e04ece46d53fe9edd208f68d30a0ae70f363f_000\\/output_astor\\/AstorMain-digits-5b504b3547416bfd54f138b3caa529ad72d157744b787e0e6f4745a2ff0fc5cc33bc87904b2d7cda9c7858087b2e04ece46d53fe9edd208f68d30a0ae70f363f_000\\/src\\/default\\/introclassJava\\/digits_5b504b35_000.java", "LINE": "72", "MP_RANKING": "1", "SUSPICIOUNESS": "0.25", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "15", "TIME": "4", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_digits_5b504b3547416bfd54f138b3caa529ad72d157744b787e0e6f4745a2ff0fc5cc33bc87904b2d7cda9c7858087b2e04ece46d53fe9edd208f68d30a0ae70f363f_000\\/.\\/output_astor\\/AstorMain-digits-5b504b3547416bfd54f138b3caa529ad72d157744b787e0e6f4745a2ff0fc5cc33bc87904b2d7cda9c7858087b2e04ece46d53fe9edd208f68d30a0ae70f363f_000\\/\\/bin\\/\\/variant-15"}]}}, {"bug_id": "6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_004", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 22:02:41.318516", "repair_begin": "2018-12-05 22:02:33.654544", "patches": [{"nb_test_that_execute_statement": 15, "patchLocation": {"line": 71, "class": "introclassJava.digits_6e464f2b_004"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/digits_6e464f2b_004.java\n+++ b/src/main/java/introclassJava/digits_6e464f2b_004.java\n@@ -70,3 +70,3 @@\n             i.value = i.value / 10;\n-            if (n.value < 0 && i.value == 0) {\n+            if (((introclassJava.digits_6e464f2b_004.this.scanner!=null) && (!(((n.value) < 0)))) || (((i.value) == 0))) {\n                 output += (String.format (\"%d\\n\", j.value));\n"}]}}, {"bug_id": "48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-08 04:50:55.309695", "repair_begin": "2018-12-08 04:50:47.793708", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_48b82975_000.java\\n+++ introclassJava\\/digits_48b82975_000.java\\n@@ -60,7 +60,7 @@\\n \\t\\tintroclassJava.IntObj num = new introclassJava.IntObj();\\n \\t\\toutput += java.lang.String.format(\\\"Enter an integer > \\\");\\n \\t\\tnum.value = scanner.nextInt();\\n-\\t\\tif ((num.value) < 0) {\\n+\\t\\tif ((num.value) <= 0) {\\n \\t\\t\\tnum.value = java.lang.Math.abs(num.value);\\n \\t\\t\\twhile ((num.value) > 10) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"%d\\\\n\\\", ((num.value) % 10));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(num.value) < 0", "PATCH_HUNK_CODE": "(num.value) <= 0", "LOCATION": "introclassJava.digits_48b82975_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_digits_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/.\\/output_astor\\/AstorMain-digits-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/\\/src\\/\\/variant-6_f\\/introclassJava\\/digits_48b82975_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_digits_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/output_astor\\/AstorMain-digits-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/src\\/default\\/introclassJava\\/digits_48b82975_000.java", "LINE": "63", "MP_RANKING": "0", "SUSPICIOUNESS": "0.25", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "6", "TIME": "1", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_digits_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/.\\/output_astor\\/AstorMain-digits-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/\\/bin\\/\\/variant-6"}]}}, {"bug_id": "90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004", "tool": "jGenProg", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-07 05:06:02.314413", "repair_begin": "2018-12-07 05:05:06.758273", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_90a14c1a_004.java\\n+++ introclassJava\\/digits_90a14c1a_004.java\\n@@ -72,7 +72,7 @@\\n \\t\\t\\t\\t\\tdigit.value = java.lang.Math.abs(((value.value) % 10));\\n \\t\\t\\t\\t\\tvalue.value = (value.value) \\/ 10;\\n \\t\\t\\t\\t\\tthis.output += java.lang.String.format(\\\"%d\\\\n\\\", digit.value);\\n-\\t\\t\\t\\t} \\n+\\t\\t\\t\\t} \\t\\t\\t\\twhile ((value.value) != 0) { \\t\\t\\t\\t\\tdigit.value = (value.value) % 10; \\t\\t\\t\\t\\tvalue.value = (value.value) \\/ 10; \\t\\t\\t\\t\\toutput += java.lang.String.format(\\\"%d\\\\n\\\", digit.value);} \\n \\t\\t\\t}else \\t\\t\\t\\tif ((value.value) == 0) {\\n \\t\\t\\t\\t\\tdigit.value = 0;\\n \\t\\t\\t\\t\\tthis.output += java.lang.String.format(\\\"%d\\\\n\\\", digit.value);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtWhileImpl|CtBlockImpl", "ORIGINAL_CODE": "while ((value.value) < (-10)) {\\n\\tdigit.value = java.lang.Math.abs(((value.value) % 10));\\n\\tvalue.value = (value.value) \\/ 10;\\n\\tthis.output += java.lang.String.format(\\\"%d\\\\n\\\", digit.value);\\n} ", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "while ((value.value) != 0) {\\n\\tdigit.value = (value.value) % 10;\\n\\tvalue.value = (value.value) \\/ 10;\\n\\toutput += java.lang.String.format(\\\"%d\\\\n\\\", digit.value);\\n} ", "INGREDIENT_PARENT": "while ((value.value) != 0) {\\n\\tdigit.value = (value.value) % 10;\\n\\tvalue.value = (value.value) \\/ 10;\\n\\toutput += java.lang.String.format(\\\"%d\\\\n\\\", digit.value);\\n} ", "LOCATION": "introclassJava.digits_90a14c1a_004", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_IntroClassJava_digits_90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004\\/.\\/output_astor\\/AstorMain-digits-90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004\\/\\/src\\/\\/variant-172_f\\/introclassJava\\/digits_90a14c1a_004.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_IntroClassJava_digits_90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004\\/output_astor\\/AstorMain-digits-90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004\\/src\\/default\\/introclassJava\\/digits_90a14c1a_004.java", "LINE": "71", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtWhileImpl|CtBlockImpl"}], "GENERATION": "86", "VARIANT_ID": "172", "TIME": "45", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_IntroClassJava_digits_90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004\\/.\\/output_astor\\/AstorMain-digits-90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004\\/\\/bin\\/\\/variant-172"}]}}, {"bug_id": "90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 00:47:31.271691", "repair_begin": "2018-12-05 00:34:52.046631", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_90a14c1a_004.java", "line": 80, "faulty": "output+=(String.format(\"That's all, have a nice day!\\n\"));", "type": "InsertBefore", "seed": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_digits_90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004/src/main/java/introclassJava/digits_90a14c1a_004.java\t2018-11-28 17:54:19.627964000 -0500\n+++ /tmp/RSRepair_IntroClassJava_digits_90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004/patches_i3bg/Patch_181/patched/tmp/RSRepair_IntroClassJava_digits_90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_004/src/main/java/introclassJava/digits_90a14c1a_004.java\t2018-12-04 18:36:20.991219950 -0500\n@@ -77,7 +77,12 @@\n             digit.value = 0;\n             output += (String.format (\"%d\\n\", digit.value));\n         }\n-        output += (String.format (\"That's all, have a nice day!\\n\"));\n+        while (value.value != 0) {\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\tvalue.value = value.value / 10;\n+\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t}\n+\t\toutput += (String.format (\"That's all, have a nice day!\\n\"));\n         if (true)\n             return;;\n     }\n\n\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_004", "tool": "ARJA", "nb_patch": 58, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-03 00:49:42.244022", "repair_begin": "2018-12-03 00:41:26.856565", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_317aa705_004.java", "line": 65, "faulty": "digit.value=integer.value % 10;", "type": "InsertBefore", "seed": "if (Math.abs(integer.value) < 10 && integer.value != 0) {\n  output+=(String.format(\"%d\\n\",integer.value));\n  break;\n}"}], "patch": "--- /tmp/Arja_IntroClassJava_digits_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_004/src/main/java/introclassJava/digits_317aa705_004.java\t2018-11-05 17:59:09.877649000 -0500\n+++ /tmp/Arja_IntroClassJava_digits_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_004/patches_m3mn/Patch_559/patched/tmp/Arja_IntroClassJava_digits_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_004/src/main/java/introclassJava/digits_317aa705_004.java\t2018-12-02 18:43:59.676063871 -0500\n@@ -62,7 +62,11 @@\n         integer.value = scanner.nextInt ();\n         digit.value = 0;\n         for (i.value = 1; i.value <= 10; i.value += 1) {\n-            digit.value = integer.value % 10;\n+            if (Math.abs(integer.value) < 10 && integer.value != 0) {\n+\t\t\t\toutput += (String.format(\"%d\\n\", integer.value));\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdigit.value = integer.value % 10;\n             if (integer.value == 0) {\n                 output += (String.format (\"0\\n\"));\n                 break;\n\n\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_004", "tool": "RSRepair-A", "nb_patch": 4, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 00:28:25.274440", "repair_begin": "2018-12-05 00:18:44.220515", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_317aa705_004.java", "line": 65, "faulty": "digit.value=integer.value % 10;", "type": "InsertBefore", "seed": "if (Math.abs(integer.value) < 10 && integer.value != 0) {\n  output+=(String.format(\"%d\\n\",integer.value));\n  break;\n}"}, {"path": "src/main/java/introclassJava/digits_317aa705_004.java", "line": 67, "faulty": "output+=(String.format(\"0\\n\"));", "type": "Replace", "seed": "if (integer.value == 0) {\n  output+=(String.format(\"0\\n\"));\n  break;\n}\n else if (Math.abs(digit.value) < 10) {\n  digit.value=Math.abs(digit.value);\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_digits_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_004/src/main/java/introclassJava/digits_317aa705_004.java\t2018-11-28 17:54:19.471964000 -0500\n+++ /tmp/RSRepair_IntroClassJava_digits_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_004/patches_wgw8/Patch_1198/patched/tmp/RSRepair_IntroClassJava_digits_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_004/src/main/java/introclassJava/digits_317aa705_004.java\t2018-12-04 18:25:41.738273439 -0500\n@@ -62,9 +62,19 @@\n         integer.value = scanner.nextInt ();\n         digit.value = 0;\n         for (i.value = 1; i.value <= 10; i.value += 1) {\n-            digit.value = integer.value % 10;\n+            if (Math.abs(integer.value) < 10 && integer.value != 0) {\n+\t\t\t\toutput += (String.format(\"%d\\n\", integer.value));\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdigit.value = integer.value % 10;\n             if (integer.value == 0) {\n-                output += (String.format (\"0\\n\"));\n+                if (integer.value == 0) {\n+\t\t\t\t\toutput += (String.format(\"0\\n\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t} else if (Math.abs(digit.value) < 10) {\n+\t\t\t\t\tdigit.value = Math.abs(digit.value);\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n                 break;\n             } else if (Math.abs (digit.value) < 10) {\n                 digit.value = Math.abs (digit.value);\n\n\n"}]}}, {"bug_id": "070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002", "tool": "ARJA", "nb_patch": 49, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-03 00:48:41.258112", "repair_begin": "2018-12-03 00:41:23.879149", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_07045530_002.java", "line": 63, "faulty": "while (n.value != 0) {\n  if (n.value < 0) {\n    n.value=-n.value;\n    while (n.value != 0) {\n      r.value=n.value % 10;\n      nn.value=n.value / 10;\n      if (n.value < 10) {\n        output+=(String.format(\"\\n-%d\",r.value));\n      }\n else       if (n.value >= 10) {\n        output+=(String.format(\"\\n%d\",r.value));\n      }\n      n.value=nn.value;\n    }\n  }\n else {\n    r.value=n.value % 10;\n    nn.value=n.value / 10;\n    n.value=nn.value;\n    output+=(String.format(\"\\n%d\",r.value));\n  }\n}", "type": "InsertBefore", "seed": "if (n.value < 0) {\n  n.value=-n.value;\n  while (n.value != 0) {\n    r.value=n.value % 10;\n    nn.value=n.value / 10;\n    if (n.value < 10) {\n      output+=(String.format(\"\\n-%d\",r.value));\n    }\n else     if (n.value >= 10) {\n      output+=(String.format(\"\\n%d\",r.value));\n    }\n    n.value=nn.value;\n  }\n}\n else {\n  r.value=n.value % 10;\n  nn.value=n.value / 10;\n  n.value=nn.value;\n  output+=(String.format(\"\\n%d\",r.value));\n}"}, {"path": "src/main/java/introclassJava/digits_07045530_002.java", "line": 85, "faulty": "return;", "type": "Delete", "seed": "output+=(String.format(\"\\n-%d\",r.value));"}, {"path": "src/main/java/introclassJava/digits_07045530_002.java", "line": 85, "faulty": ";", "type": "Replace", "seed": "nn.value=n.value / 10;"}], "patch": "--- /tmp/Arja_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/src/main/java/introclassJava/digits_07045530_002.java\t2018-11-05 17:59:09.713646000 -0500\n+++ /tmp/Arja_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/patches_ns00/Patch_530/patched/tmp/Arja_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/src/main/java/introclassJava/digits_07045530_002.java\t2018-12-02 18:43:34.889279306 -0500\n@@ -60,7 +60,25 @@\n         IntObj n = new IntObj (), r = new IntObj (), nn = new IntObj ();\n         output += (String.format (\"\\nEnter an integer > \"));\n         n.value = scanner.nextInt ();\n-        while (n.value != 0) {\n+        if (n.value < 0) {\n+\t\t\tn.value = -n.value;\n+\t\t\twhile (n.value != 0) {\n+\t\t\t\tr.value = n.value % 10;\n+\t\t\t\tnn.value = n.value / 10;\n+\t\t\t\tif (n.value < 10) {\n+\t\t\t\t\toutput += (String.format(\"\\n-%d\", r.value));\n+\t\t\t\t} else if (n.value >= 10) {\n+\t\t\t\t\toutput += (String.format(\"\\n%d\", r.value));\n+\t\t\t\t}\n+\t\t\t\tn.value = nn.value;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tr.value = n.value % 10;\n+\t\t\tnn.value = n.value / 10;\n+\t\t\tn.value = nn.value;\n+\t\t\toutput += (String.format(\"\\n%d\", r.value));\n+\t\t}\n+\t\twhile (n.value != 0) {\n             if (n.value < 0) {\n                 n.value = -n.value;\n                 while (n.value != 0) {\n@@ -82,6 +100,6 @@\n         }\n         output += (String.format (\"\\nThat's all, have a nice day!\\n\"));\n         if (true)\n-            return;;\n+\t\t\t;nn.value = n.value / 10;\n     }\n }\n\n\n"}]}}, {"bug_id": "070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002", "tool": "GenProg-A", "nb_patch": 29, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-02 21:19:14.889397", "repair_begin": "2018-12-02 21:11:05.583488", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_07045530_002.java", "line": 63, "faulty": "while (n.value != 0) {\n  if (n.value < 0) {\n    n.value=-n.value;\n    while (n.value != 0) {\n      r.value=n.value % 10;\n      nn.value=n.value / 10;\n      if (n.value < 10) {\n        output+=(String.format(\"\\n-%d\",r.value));\n      }\n else       if (n.value >= 10) {\n        output+=(String.format(\"\\n%d\",r.value));\n      }\n      n.value=nn.value;\n    }\n  }\n else {\n    r.value=n.value % 10;\n    nn.value=n.value / 10;\n    n.value=nn.value;\n    output+=(String.format(\"\\n%d\",r.value));\n  }\n}", "type": "InsertBefore", "seed": "if (n.value < 0) {\n  n.value=-n.value;\n  while (n.value != 0) {\n    r.value=n.value % 10;\n    nn.value=n.value / 10;\n    if (n.value < 10) {\n      output+=(String.format(\"\\n-%d\",r.value));\n    }\n else     if (n.value >= 10) {\n      output+=(String.format(\"\\n%d\",r.value));\n    }\n    n.value=nn.value;\n  }\n}\n else {\n  r.value=n.value % 10;\n  nn.value=n.value / 10;\n  n.value=nn.value;\n  output+=(String.format(\"\\n%d\",r.value));\n}"}, {"path": "src/main/java/introclassJava/digits_07045530_002.java", "line": 62, "faulty": "n.value=scanner.nextInt();", "type": "Replace", "seed": "n.value=scanner.nextInt();"}], "patch": "--- /tmp/GenProg_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/src/main/java/introclassJava/digits_07045530_002.java\t2018-11-05 17:59:09.713646000 -0500\n+++ /tmp/GenProg_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/patches_zjpl/Patch_1147/patched/tmp/GenProg_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/src/main/java/introclassJava/digits_07045530_002.java\t2018-12-02 15:15:53.291835094 -0500\n@@ -59,8 +59,26 @@\n     public void exec () throws Exception {\n         IntObj n = new IntObj (), r = new IntObj (), nn = new IntObj ();\n         output += (String.format (\"\\nEnter an integer > \"));\n-        n.value = scanner.nextInt ();\n-        while (n.value != 0) {\n+        n.value = scanner.nextInt();\n+        if (n.value < 0) {\n+\t\t\tn.value = -n.value;\n+\t\t\twhile (n.value != 0) {\n+\t\t\t\tr.value = n.value % 10;\n+\t\t\t\tnn.value = n.value / 10;\n+\t\t\t\tif (n.value < 10) {\n+\t\t\t\t\toutput += (String.format(\"\\n-%d\", r.value));\n+\t\t\t\t} else if (n.value >= 10) {\n+\t\t\t\t\toutput += (String.format(\"\\n%d\", r.value));\n+\t\t\t\t}\n+\t\t\t\tn.value = nn.value;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tr.value = n.value % 10;\n+\t\t\tnn.value = n.value / 10;\n+\t\t\tn.value = nn.value;\n+\t\t\toutput += (String.format(\"\\n%d\", r.value));\n+\t\t}\n+\t\twhile (n.value != 0) {\n             if (n.value < 0) {\n                 n.value = -n.value;\n                 while (n.value != 0) {\n\n\n"}]}}, {"bug_id": "070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 00:29:54.265466", "repair_begin": "2018-12-05 00:22:17.224042", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_07045530_002.java", "line": 63, "faulty": "while (n.value != 0) {\n  if (n.value < 0) {\n    n.value=-n.value;\n    while (n.value != 0) {\n      r.value=n.value % 10;\n      nn.value=n.value / 10;\n      if (n.value < 10) {\n        output+=(String.format(\"\\n-%d\",r.value));\n      }\n else       if (n.value >= 10) {\n        output+=(String.format(\"\\n%d\",r.value));\n      }\n      n.value=nn.value;\n    }\n  }\n else {\n    r.value=n.value % 10;\n    nn.value=n.value / 10;\n    n.value=nn.value;\n    output+=(String.format(\"\\n%d\",r.value));\n  }\n}", "type": "InsertBefore", "seed": "if (n.value < 0) {\n  n.value=-n.value;\n  while (n.value != 0) {\n    r.value=n.value % 10;\n    nn.value=n.value / 10;\n    if (n.value < 10) {\n      output+=(String.format(\"\\n-%d\",r.value));\n    }\n else     if (n.value >= 10) {\n      output+=(String.format(\"\\n%d\",r.value));\n    }\n    n.value=nn.value;\n  }\n}\n else {\n  r.value=n.value % 10;\n  nn.value=n.value / 10;\n  n.value=nn.value;\n  output+=(String.format(\"\\n%d\",r.value));\n}"}, {"path": "src/main/java/introclassJava/digits_07045530_002.java", "line": 83, "faulty": "output+=(String.format(\"\\nThat's all, have a nice day!\\n\"));", "type": "InsertBefore", "seed": "r.value=n.value % 10;"}], "patch": "--- /tmp/RSRepair_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/src/main/java/introclassJava/digits_07045530_002.java\t2018-11-28 17:54:19.275965000 -0500\n+++ /tmp/RSRepair_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/patches_awwq/Patch_1423/patched/tmp/RSRepair_IntroClassJava_digits_070455301c2e18c7c89b850c2e86c311ac5fd223c84e723591012e163d60f11f5fd030343a444049a44940f8607d36c463f30556bf1efa98916d7417c2b4393c_002/src/main/java/introclassJava/digits_07045530_002.java\t2018-12-04 18:28:50.694752895 -0500\n@@ -60,7 +60,25 @@\n         IntObj n = new IntObj (), r = new IntObj (), nn = new IntObj ();\n         output += (String.format (\"\\nEnter an integer > \"));\n         n.value = scanner.nextInt ();\n-        while (n.value != 0) {\n+        if (n.value < 0) {\n+\t\t\tn.value = -n.value;\n+\t\t\twhile (n.value != 0) {\n+\t\t\t\tr.value = n.value % 10;\n+\t\t\t\tnn.value = n.value / 10;\n+\t\t\t\tif (n.value < 10) {\n+\t\t\t\t\toutput += (String.format(\"\\n-%d\", r.value));\n+\t\t\t\t} else if (n.value >= 10) {\n+\t\t\t\t\toutput += (String.format(\"\\n%d\", r.value));\n+\t\t\t\t}\n+\t\t\t\tn.value = nn.value;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tr.value = n.value % 10;\n+\t\t\tnn.value = n.value / 10;\n+\t\t\tn.value = nn.value;\n+\t\t\toutput += (String.format(\"\\n%d\", r.value));\n+\t\t}\n+\t\twhile (n.value != 0) {\n             if (n.value < 0) {\n                 n.value = -n.value;\n                 while (n.value != 0) {\n@@ -80,7 +98,8 @@\n                 output += (String.format (\"\\n%d\", r.value));\n             }\n         }\n-        output += (String.format (\"\\nThat's all, have a nice day!\\n\"));\n+        r.value = n.value % 10;\n+\t\toutput += (String.format (\"\\nThat's all, have a nice day!\\n\"));\n         if (true)\n             return;;\n     }\n\n\n"}]}}, {"bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "ARJA", "nb_patch": 83, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-03 00:43:27.418465", "repair_begin": "2018-12-03 00:27:05.161480", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 66, "faulty": "if (number.value < 0) {\n  number.value=number.value * -1;\n  state.value=-1;\n}", "type": "InsertBefore", "seed": "if (number.value <= 9) {\n  store.value=number.value * state.value;\n}"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 75, "faulty": "number.value=number.value / 10;", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "number.value=number.value / 10;"}], "patch": "--- /tmp/Arja_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/src/main/java/introclassJava/digits_c5d8f924_003.java\t2018-11-05 17:59:10.077654000 -0500\n+++ /tmp/Arja_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/patches_3g0a/Patch_1076/patched/tmp/Arja_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/src/main/java/introclassJava/digits_c5d8f924_003.java\t2018-12-02 18:34:42.852951323 -0500\n@@ -63,7 +63,10 @@\n         number.value = scanner.nextInt ();\n         output += (String.format (\"\\n\"));\n         while (i.value < 9) {\n-            if (number.value < 0) {\n+            if (number.value <= 9) {\n+\t\t\t\tstore.value = number.value * state.value;\n+\t\t\t}\n+\t\t\tif (number.value < 0) {\n                 number.value = number.value * -1;\n                 state.value = -1;\n             }\n@@ -72,8 +75,8 @@\n                 store.value = number.value * state.value;\n             }\n             output += (String.format (\"%d\\n\", store.value));\n-            number.value = number.value / 10;\n-            i.value++;\n+            ;\n+\t\t\tnumber.value = number.value / 10;\n             if (number.value == 0) {\n                 output += (String.format (\"That's all, have a nice day!\\n\"));\n                 break;\n\n\n"}]}}, {"bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 23:16:27.248009", "repair_begin": "2018-12-05 23:16:21.582987", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.digits_c5d8f924_003"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/digits_c5d8f924_003.java\n+++ b/src/main/java/introclassJava/digits_c5d8f924_003.java\n@@ -75,3 +75,5 @@\n             number.value = number.value / 10;\n-            i.value++;\n+            if (false) {\n+                i.value++;\n+            }\n             if (number.value == 0) {\n"}]}}, {"bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "GenProg-A", "nb_patch": 144, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-02 21:03:49.925690", "repair_begin": "2018-12-02 20:52:54.901129", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Replace", "seed": "store.value=number.value * state.value;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "i.value++;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 64, "faulty": "output+=(String.format(\"\\n\"));", "type": "Delete", "seed": "IntObj number=new IntObj(0), i=new IntObj(0), store=new IntObj(0), state=new IntObj(1);"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 64, "faulty": "output+=(String.format(\"\\n\"));", "type": "Delete", "seed": "IntObj number=new IntObj(0), i=new IntObj(0), store=new IntObj(0), state=new IntObj(1);"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 64, "faulty": "output+=(String.format(\"\\n\"));", "type": "InsertBefore", "seed": "store.value=number.value * state.value;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "i.value++;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Replace", "seed": "store.value=number.value * state.value;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Replace", "seed": "store.value=number.value * state.value;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "i.value++;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 66, "faulty": "if (number.value < 0) {\n  number.value=number.value * -1;\n  state.value=-1;\n}", "type": "Replace", "seed": "if (number.value < 0) {\n  number.value=number.value * -1;\n  state.value=-1;\n}"}], "patch": "--- /tmp/GenProg_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/src/main/java/introclassJava/digits_c5d8f924_003.java\t2018-11-05 17:59:10.077654000 -0500\n+++ /tmp/GenProg_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/patches_sdld/Patch_1142/patched/tmp/GenProg_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/src/main/java/introclassJava/digits_c5d8f924_003.java\t2018-12-02 14:58:12.778874610 -0500\n@@ -61,19 +61,18 @@\n             new IntObj (0), state = new IntObj (1);\n         output += (String.format (\"\\nEnter an integer > \"));\n         number.value = scanner.nextInt ();\n-        output += (String.format (\"\\n\"));\n-        while (i.value < 9) {\n+        store.value = number.value * state.value;\n+\t\twhile (i.value < 9) {\n             if (number.value < 0) {\n-                number.value = number.value * -1;\n-                state.value = -1;\n-            }\n+\t\t\t\tnumber.value = number.value * -1;\n+\t\t\t\tstate.value = -1;\n+\t\t\t}\n             store.value = number.value % 10;\n             if (number.value <= 9) {\n                 store.value = number.value * state.value;\n             }\n             output += (String.format (\"%d\\n\", store.value));\n             number.value = number.value / 10;\n-            i.value++;\n             if (number.value == 0) {\n                 output += (String.format (\"That's all, have a nice day!\\n\"));\n                 break;\n\n\n"}]}}, {"bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "jGenProg", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-07 02:58:37.590942", "repair_begin": "2018-12-07 02:58:28.165529", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_c5d8f924_003.java\\n+++ introclassJava\\/digits_c5d8f924_003.java\\n@@ -73,7 +73,7 @@\\n \\t\\t\\t}\\n \\t\\t\\tthis.output += java.lang.String.format(\\\"%d\\\\n\\\", store.value);\\n \\t\\t\\tnumber.value = (number.value) \\/ 10;\\n-\\t\\t\\t(i.value)++;\\n+\\n \\t\\t\\tif ((number.value) == 0) {\\n \\t\\t\\t\\tthis.output += java.lang.String.format(\\\"That\\\\'s all, have a nice day!\\\\n\\\");\\n \\t\\t\\t\\tbreak;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "(i.value)++", "INGREDIENT_SCOPE": "-", "LOCATION": "introclassJava.digits_c5d8f924_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/.\\/output_astor\\/AstorMain-digits-c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/\\/src\\/\\/variant-68_f\\/introclassJava\\/digits_c5d8f924_003.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/output_astor\\/AstorMain-digits-c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/src\\/default\\/introclassJava\\/digits_c5d8f924_003.java", "LINE": "76", "MP_RANKING": "13", "SUSPICIOUNESS": "0.25"}], "GENERATION": "34", "VARIANT_ID": "68", "TIME": "5", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/.\\/output_astor\\/AstorMain-digits-c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/\\/bin\\/\\/variant-68"}]}}, {"bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "jKali", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 02:38:24.127027", "repair_begin": "2018-12-05 02:38:13.045760", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_c5d8f924_003.java\\n+++ introclassJava\\/digits_c5d8f924_003.java\\n@@ -73,7 +73,7 @@\\n \\t\\t\\t}\\n \\t\\t\\toutput += java.lang.String.format(\\\"%d\\\\n\\\", store.value);\\n \\t\\t\\tnumber.value = (number.value) \\/ 10;\\n-\\t\\t\\t(i.value)++;\\n+\\n \\t\\t\\tif ((number.value) == 0) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"That\\\\'s all, have a nice day!\\\\n\\\");\\n \\t\\t\\t\\tbreak;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "(i.value)++", "LOCATION": "introclassJava.digits_c5d8f924_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/.\\/output_astor\\/AstorMain-digits-c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/\\/src\\/\\/variant-15_f\\/introclassJava\\/digits_c5d8f924_003.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/output_astor\\/AstorMain-digits-c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/src\\/default\\/introclassJava\\/digits_c5d8f924_003.java", "LINE": "76", "MP_RANKING": "13", "SUSPICIOUNESS": "0.25"}], "GENERATION": "1", "VARIANT_ID": "15", "TIME": "4", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/.\\/output_astor\\/AstorMain-digits-c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003\\/\\/bin\\/\\/variant-15"}]}}, {"bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "Kali-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-11-28 16:03:48.427066", "repair_begin": "2018-11-28 16:03:31.194484", "patches": [{"edits": [{"path": "", "line": 76, "faulty": "i.value++;", "type": "Delete /tmp/Kali_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/src/main/java/introclassJava/digits_c5d8f924_003.java"}]}]}}, {"bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 22:06:12.584402", "repair_begin": "2018-12-05 22:06:06.723556", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.digits_c5d8f924_003"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/digits_c5d8f924_003.java\n+++ b/src/main/java/introclassJava/digits_c5d8f924_003.java\n@@ -75,3 +75,5 @@\n             number.value = number.value / 10;\n-            i.value++;\n+            if (introclassJava.digits_c5d8f924_003.this.scanner.hasNext()) {\n+                i.value++;\n+            }\n             if (number.value == 0) {\n"}]}}, {"bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "RSRepair-A", "nb_patch": 12, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 00:34:48.083015", "repair_begin": "2018-12-05 00:26:56.949996", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Replace", "seed": "if (number.value <= 9) {\n  store.value=number.value * state.value;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/src/main/java/introclassJava/digits_c5d8f924_003.java\t2018-11-28 17:54:19.727964000 -0500\n+++ /tmp/RSRepair_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/patches_yan5/Patch_434/patched/tmp/RSRepair_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/src/main/java/introclassJava/digits_c5d8f924_003.java\t2018-12-04 18:29:06.737987766 -0500\n@@ -73,7 +73,9 @@\n             }\n             output += (String.format (\"%d\\n\", store.value));\n             number.value = number.value / 10;\n-            i.value++;\n+            if (number.value <= 9) {\n+\t\t\t\tstore.value = number.value * state.value;\n+\t\t\t}\n             if (number.value == 0) {\n                 output += (String.format (\"That's all, have a nice day!\\n\"));\n                 break;\n\n\n"}]}}, {"bug_id": "c9d718f379a877bd04e4544ee830a1c4c256bb4f104f214afd1ccaf81e7b25dea689895678bb1e6f817d8b0939eb175f8e847130f30a9a22e980d38125933516_001", "tool": "ARJA", "nb_patch": 5, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-03 00:40:58.223789", "repair_begin": "2018-12-03 00:27:14.527702", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "InsertBefore", "seed": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Delete", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}], "patch": "--- /tmp/Arja_IntroClassJava_digits_c9d718f379a877bd04e4544ee830a1c4c256bb4f104f214afd1ccaf81e7b25dea689895678bb1e6f817d8b0939eb175f8e847130f30a9a22e980d38125933516_001/src/main/java/introclassJava/digits_c9d718f3_001.java\t2018-11-05 17:59:10.093654000 -0500\n+++ /tmp/Arja_IntroClassJava_digits_c9d718f379a877bd04e4544ee830a1c4c256bb4f104f214afd1ccaf81e7b25dea689895678bb1e6f817d8b0939eb175f8e847130f30a9a22e980d38125933516_001/patches_y0sj/Patch_1744/patched/tmp/Arja_IntroClassJava_digits_c9d718f379a877bd04e4544ee830a1c4c256bb4f104f214afd1ccaf81e7b25dea689895678bb1e6f817d8b0939eb175f8e847130f30a9a22e980d38125933516_001/src/main/java/introclassJava/digits_c9d718f3_001.java\t2018-12-02 18:40:04.209972853 -0500\n@@ -60,7 +60,11 @@\n         IntObj value = new IntObj (), digit = new IntObj ();\n         output += (String.format (\"\\nEnter an integer > \"));\n         value.value = scanner.nextInt ();\n-        output += (String.format (\"\\n\"));\n+        if (value.value == 0) {\n+\t\t\tdigit.value = value.value;\n+\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t}\n+\t\toutput += (String.format (\"\\n\"));\n         if (value.value > 0) {\n             while (value.value != 0) {\n                 digit.value = value.value % 10;\n@@ -78,10 +82,6 @@\n             digit.value = value.value % 10;\n             output += (String.format (\"-%d\\n\", digit.value));\n         }\n-        if (value.value == 0) {\n-            digit.value = value.value;\n-            output += (String.format (\"%d\\n\", digit.value));\n-        }\n         output += (String.format (\"That's all, have a nice day!\\n\"));\n         if (true)\n             return;;\n\n\n"}]}}, {"bug_id": "c9d718f379a877bd04e4544ee830a1c4c256bb4f104f214afd1ccaf81e7b25dea689895678bb1e6f817d8b0939eb175f8e847130f30a9a22e980d38125933516_001", "tool": "GenProg-A", "nb_patch": 195, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-02 21:02:16.503129", "repair_begin": "2018-12-02 20:51:25.335238", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 85, "faulty": "output+=(String.format(\"That's all, have a nice day!\\n\"));", "type": "Replace", "seed": "output+=(String.format(\"That's all, have a nice day!\\n\"));"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Delete", "seed": "digit.value=value.value % 10;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 71, "faulty": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 82, "faulty": "digit.value=value.value;", "type": "Delete", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 85, "faulty": "output+=(String.format(\"That's all, have a nice day!\\n\"));", "type": "Replace", "seed": "output+=(String.format(\"That's all, have a nice day!\\n\"));"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 85, "faulty": "output+=(String.format(\"That's all, have a nice day!\\n\"));", "type": "Replace", "seed": "output+=(String.format(\"That's all, have a nice day!\\n\"));"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Delete", "seed": "digit.value=value.value % 10;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value % 10;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 71, "faulty": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 71, "faulty": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 71, "faulty": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 82, "faulty": "digit.value=value.value;", "type": "Delete", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "InsertBefore", "seed": "digit.value=value.value % 10;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 60, "faulty": "IntObj value=new IntObj(), digit=new IntObj();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 71, "faulty": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 82, "faulty": "digit.value=value.value;", "type": "Delete", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 82, "faulty": "digit.value=value.value;", "type": "Delete", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 62, "faulty": "value.value=scanner.nextInt();", "type": "InsertBefore", "seed": "while (value.value > 10) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "InsertBefore", "seed": "output+=(String.format(\"\\n\"));"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 64, "faulty": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}", "type": "InsertBefore", "seed": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 83, "faulty": "output+=(String.format(\"%d\\n\",digit.value));", "type": "Delete", "seed": "value.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 66, "faulty": "digit.value=value.value % 10;", "type": "Delete", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 68, "faulty": "output+=(String.format(\"%d\\n\",digit.value));", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 82, "faulty": "digit.value=value.value;", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 87, "faulty": "return;", "type": "Delete", "seed": "return;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 60, "faulty": "IntObj value=new IntObj(), digit=new IntObj();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 68, "faulty": "output+=(String.format(\"%d\\n\",digit.value));", "type": "Delete", "seed": "value.value=Math.abs(value.value);"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 68, "faulty": "output+=(String.format(\"%d\\n\",digit.value));", "type": "InsertBefore", "seed": "while (value.value > 10) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 87, "faulty": "return;", "type": "InsertBefore", "seed": "while (value.value > 10) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value % 10;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 87, "faulty": "return;", "type": "Delete", "seed": "return;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 87, "faulty": "return;", "type": "Delete", "seed": "return;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 87, "faulty": "return;", "type": "Delete", "seed": "return;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 87, "faulty": "return;", "type": "Delete", "seed": "return;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 83, "faulty": "output+=(String.format(\"%d\\n\",digit.value));", "type": "Replace", "seed": "IntObj value=new IntObj(), digit=new IntObj();"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value > 0) {\n  while (value.value != 0) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 67, "faulty": "value.value=value.value / 10;", "type": "InsertBefore", "seed": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 81, "faulty": "if (value.value == 0) {\n  digit.value=value.value;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 71, "faulty": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 82, "faulty": "digit.value=value.value;", "type": "Delete", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "InsertBefore", "seed": "digit.value=value.value % 10;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 60, "faulty": "IntObj value=new IntObj(), digit=new IntObj();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 71, "faulty": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}", "type": "InsertBefore", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 82, "faulty": "digit.value=value.value;", "type": "Delete", "seed": "digit.value=value.value;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "InsertBefore", "seed": "digit.value=value.value % 10;"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 60, "faulty": "IntObj value=new IntObj(), digit=new IntObj();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 68, "faulty": "output+=(String.format(\"%d\\n\",digit.value));", "type": "Delete", "seed": "value.value=Math.abs(value.value);"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 68, "faulty": "output+=(String.format(\"%d\\n\",digit.value));", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 71, "faulty": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}", "type": "Delete", "seed": "if (value.value < 0) {\n  value.value=Math.abs(value.value);\n  while (value.value > 10) {\n    digit.value=value.value % 10;\n    value.value=value.value / 10;\n    output+=(String.format(\"%d\\n\",digit.value));\n  }\n  digit.value=value.value % 10;\n  output+=(String.format(\"-%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Replace", "seed": "while (value.value > 10) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 65, "faulty": "while (value.value != 0) {\n  digit.value=value.value % 10;\n  value.value=value.value / 10;\n  output+=(String.format(\"%d\\n\",digit.value));\n}", "type": "Delete", "seed": "value.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 82, "faulty": "digit.value=value.value;", "type": "InsertBefore", "seed": "output+=(String.format(\"\\nEnter an integer > \"));"}, {"path": "src/main/java/introclassJava/digits_c9d718f3_001.java", "line": 63, "faulty": "output+=(String.format(\"\\n\"));", "type": "Delete", "seed": "value.value=Math.abs(value.value);"}], "patch": "--- /tmp/GenProg_IntroClassJava_digits_c9d718f379a877bd04e4544ee830a1c4c256bb4f104f214afd1ccaf81e7b25dea689895678bb1e6f817d8b0939eb175f8e847130f30a9a22e980d38125933516_001/src/main/java/introclassJava/digits_c9d718f3_001.java\t2018-11-05 17:59:10.093654000 -0500\n+++ /tmp/GenProg_IntroClassJava_digits_c9d718f379a877bd04e4544ee830a1c4c256bb4f104f214afd1ccaf81e7b25dea689895678bb1e6f817d8b0939eb175f8e847130f30a9a22e980d38125933516_001/patches_jegk/Patch_1154/patched/tmp/GenProg_IntroClassJava_digits_c9d718f379a877bd04e4544ee830a1c4c256bb4f104f214afd1ccaf81e7b25dea689895678bb1e6f817d8b0939eb175f8e847130f30a9a22e980d38125933516_001/src/main/java/introclassJava/digits_c9d718f3_001.java\t2018-12-02 14:59:16.546394641 -0500\n@@ -57,33 +57,167 @@\n     }\n \n     public void exec () throws Exception {\n-        IntObj value = new IntObj (), digit = new IntObj ();\n+        ;\n+\t\t;\n+\t\t;\n+\t\t;\n+\t\tIntObj value = new IntObj (), digit = new IntObj ();\n         output += (String.format (\"\\nEnter an integer > \"));\n-        value.value = scanner.nextInt ();\n-        output += (String.format (\"\\n\"));\n-        if (value.value > 0) {\n-            while (value.value != 0) {\n-                digit.value = value.value % 10;\n-                value.value = value.value / 10;\n-                output += (String.format (\"%d\\n\", digit.value));\n-            }\n+        while (value.value > 10) {\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\tvalue.value = value.value / 10;\n+\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t}\n+\t\tvalue.value = scanner.nextInt ();\n+        digit.value = value.value % 10;\n+\t\toutput += (String.format(\"\\n\"));\n+\t\tdigit.value = value.value % 10;\n+\t\tdigit.value = value.value % 10;\n+\t\tif (value.value == 0) {\n+\t\t\tdigit.value = value.value;\n+\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t}\n+\t\tif (value.value > 0) {\n+            if (value.value > 0) {\n+\t\t\t\twhile (value.value != 0) {\n+\t\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (value.value > 0) {\n+\t\t\t\twhile (value.value != 0) {\n+\t\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (value.value > 0) {\n+\t\t\t\twhile (value.value != 0) {\n+\t\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (value.value > 0) {\n+\t\t\t\twhile (value.value != 0) {\n+\t\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (value.value > 0) {\n+\t\t\t\twhile (value.value != 0) {\n+\t\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (value.value > 0) {\n+\t\t\t\twhile (value.value != 0) {\n+\t\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (value.value > 0) {\n+\t\t\t\twhile (value.value != 0) {\n+\t\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (value.value > 0) {\n+\t\t\t\twhile (value.value != 0) {\n+\t\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t\t}\n+\t\t\t}\n         }\n         if (value.value < 0) {\n-            value.value = Math.abs (value.value);\n-            while (value.value > 10) {\n-                digit.value = value.value % 10;\n-                value.value = value.value / 10;\n-                output += (String.format (\"%d\\n\", digit.value));\n-            }\n-            digit.value = value.value % 10;\n-            output += (String.format (\"-%d\\n\", digit.value));\n-        }\n-        if (value.value == 0) {\n-            digit.value = value.value;\n-            output += (String.format (\"%d\\n\", digit.value));\n-        }\n-        output += (String.format (\"That's all, have a nice day!\\n\"));\n+\t\t\tvalue.value = Math.abs(value.value);\n+\t\t\twhile (value.value > 10) {\n+\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t}\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\toutput += (String.format(\"-%d\\n\", digit.value));\n+\t\t}\n+\t\tif (value.value < 0) {\n+\t\t\tvalue.value = Math.abs(value.value);\n+\t\t\twhile (value.value > 10) {\n+\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t}\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\toutput += (String.format(\"-%d\\n\", digit.value));\n+\t\t}\n+\t\tif (value.value < 0) {\n+\t\t\tvalue.value = Math.abs(value.value);\n+\t\t\twhile (value.value > 10) {\n+\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t}\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\toutput += (String.format(\"-%d\\n\", digit.value));\n+\t\t}\n+\t\tif (value.value < 0) {\n+\t\t\tvalue.value = Math.abs(value.value);\n+\t\t\twhile (value.value > 10) {\n+\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t}\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\toutput += (String.format(\"-%d\\n\", digit.value));\n+\t\t}\n+\t\tif (value.value < 0) {\n+\t\t\tvalue.value = Math.abs(value.value);\n+\t\t\twhile (value.value > 10) {\n+\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t}\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\toutput += (String.format(\"-%d\\n\", digit.value));\n+\t\t}\n+\t\tif (value.value < 0) {\n+\t\t\tvalue.value = Math.abs(value.value);\n+\t\t\twhile (value.value > 10) {\n+\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t}\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\toutput += (String.format(\"-%d\\n\", digit.value));\n+\t\t}\n+\t\tif (value.value < 0) {\n+\t\t\tvalue.value = Math.abs(value.value);\n+\t\t\twhile (value.value > 10) {\n+\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t}\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\toutput += (String.format(\"-%d\\n\", digit.value));\n+\t\t}\n+\t\tif (value.value < 0) {\n+\t\t\tvalue.value = Math.abs(value.value);\n+\t\t\twhile (value.value > 10) {\n+\t\t\t\tdigit.value = value.value % 10;\n+\t\t\t\tvalue.value = value.value / 10;\n+\t\t\t\toutput += (String.format(\"%d\\n\", digit.value));\n+\t\t\t}\n+\t\t\tdigit.value = value.value % 10;\n+\t\t\toutput += (String.format(\"-%d\\n\", digit.value));\n+\t\t}\n+\t\tdigit.value = value.value;\n+        output += (String.format(\"That's all, have a nice day!\\n\"));\n         if (true)\n-            return;;\n+\t\t\t;;\n     }\n }\n\n\n"}]}}, {"bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "ARJA", "nb_patch": 50, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-03 00:34:30.021844", "repair_begin": "2018-12-03 00:27:03.599190", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 63, "faulty": "digit.value=Math.abs(num.value) % 10;", "type": "Delete", "seed": "digit.value=num.value % 10;"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 98, "faulty": ";", "type": "Delete", "seed": "output+=(String.format(\"\\nEnter an integer > \"));"}], "patch": "--- /tmp/Arja_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/src/main/java/introclassJava/digits_d5059e2b_000.java\t2018-11-05 17:59:10.257658000 -0500\n+++ /tmp/Arja_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/patches_pgew/Patch_77/patched/tmp/Arja_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/src/main/java/introclassJava/digits_d5059e2b_000.java\t2018-12-02 18:27:26.891669014 -0500\n@@ -60,7 +60,6 @@\n         IntObj num = new IntObj (), digit = new IntObj ();\n         output += (String.format (\"\\nEnter an integer > \"));\n         num.value = scanner.nextInt ();\n-        digit.value = Math.abs (num.value) % 10;\n         if (num.value < 0) {\n             num.value = Math.abs (num.value);\n             while (num.value != digit.value) {\n@@ -95,6 +94,6 @@\n         }\n         output += (String.format (\"\\nThat's all, have a nice day!\\n\"));\n         if (true)\n-            return;;\n+            return;\n     }\n }\n\n\n"}]}}, {"bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 23:26:27.398515", "repair_begin": "2018-12-05 23:26:19.402978", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 63, "class": "introclassJava.digits_d5059e2b_000"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/digits_d5059e2b_000.java\n+++ b/src/main/java/introclassJava/digits_d5059e2b_000.java\n@@ -62,3 +62,5 @@\n         num.value = scanner.nextInt ();\n-        digit.value = Math.abs (num.value) % 10;\n+        if (false) {\n+            digit.value = Math.abs (num.value) % 10;\n+        }\n         if (num.value < 0) {\n"}]}}, {"bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "GenProg-A", "nb_patch": 120, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-02 20:59:52.366897", "repair_begin": "2018-12-02 20:51:54.967930", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 83, "faulty": "if (num.value >= 0) {\n  while (num.value != digit.value) {\n    digit.value=num.value % 10;\n    output+=(String.format(\"\\n%d\",digit.value));\n    num.value=(num.value - digit.value) / 10;\n    if (num.value == 0) {\n      break;\n    }\n    if (num.value == digit.value) {\n      output+=(String.format(\"\\n%d\",num.value));\n    }\n  }\n}", "type": "InsertBefore", "seed": "if (num.value == digit.value) {\n  output+=(String.format(\"\\n%d\",num.value));\n}"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 83, "faulty": "if (num.value >= 0) {\n  while (num.value != digit.value) {\n    digit.value=num.value % 10;\n    output+=(String.format(\"\\n%d\",digit.value));\n    num.value=(num.value - digit.value) / 10;\n    if (num.value == 0) {\n      break;\n    }\n    if (num.value == digit.value) {\n      output+=(String.format(\"\\n%d\",num.value));\n    }\n  }\n}", "type": "InsertBefore", "seed": "if (num.value == digit.value) {\n  output+=(String.format(\"\\n%d\",num.value));\n}"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 83, "faulty": "if (num.value >= 0) {\n  while (num.value != digit.value) {\n    digit.value=num.value % 10;\n    output+=(String.format(\"\\n%d\",digit.value));\n    num.value=(num.value - digit.value) / 10;\n    if (num.value == 0) {\n      break;\n    }\n    if (num.value == digit.value) {\n      output+=(String.format(\"\\n%d\",num.value));\n    }\n  }\n}", "type": "InsertBefore", "seed": "if (num.value == digit.value) {\n  output+=(String.format(\"\\n%d\",num.value));\n}"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 60, "faulty": "IntObj num=new IntObj(), digit=new IntObj();", "type": "Replace", "seed": "IntObj num=new IntObj(), digit=new IntObj();"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 83, "faulty": "if (num.value >= 0) {\n  while (num.value != digit.value) {\n    digit.value=num.value % 10;\n    output+=(String.format(\"\\n%d\",digit.value));\n    num.value=(num.value - digit.value) / 10;\n    if (num.value == 0) {\n      break;\n    }\n    if (num.value == digit.value) {\n      output+=(String.format(\"\\n%d\",num.value));\n    }\n  }\n}", "type": "InsertBefore", "seed": "if (num.value == digit.value) {\n  output+=(String.format(\"\\n%d\",num.value));\n}"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 98, "faulty": "return;", "type": "InsertBefore", "seed": "num.value=Math.abs(num.value);"}], "patch": "--- /tmp/GenProg_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/src/main/java/introclassJava/digits_d5059e2b_000.java\t2018-11-05 17:59:10.257658000 -0500\n+++ /tmp/GenProg_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/patches_o0y7/Patch_1014/patched/tmp/GenProg_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/src/main/java/introclassJava/digits_d5059e2b_000.java\t2018-12-02 14:55:59.194540199 -0500\n@@ -57,7 +57,7 @@\n     }\n \n     public void exec () throws Exception {\n-        IntObj num = new IntObj (), digit = new IntObj ();\n+        IntObj num = new IntObj(), digit = new IntObj();\n         output += (String.format (\"\\nEnter an integer > \"));\n         num.value = scanner.nextInt ();\n         digit.value = Math.abs (num.value) % 10;\n@@ -80,21 +80,28 @@\n             }\n         } else if (num.value == 0) {\n             output += (String.format (\"\\n0\"));\n-        } else if (num.value >= 0) {\n-            while (num.value != digit.value) {\n-                digit.value = num.value % 10;\n-                output += (String.format (\"\\n%d\", digit.value));\n-                num.value = (num.value - digit.value) / 10;\n-                if (num.value == 0) {\n-                    break;\n-                }\n-                if (num.value == digit.value) {\n-                    output += (String.format (\"\\n%d\", num.value));\n-                }\n-            }\n-        }\n+        } else {\n+\t\t\tif (num.value == digit.value) {\n+\t\t\t\toutput += (String.format(\"\\n%d\", num.value));\n+\t\t\t}\n+\t\t\tif (num.value >= 0) {\n+\t\t\t\twhile (num.value != digit.value) {\n+\t\t\t\t\tdigit.value = num.value % 10;\n+\t\t\t\t\toutput += (String.format(\"\\n%d\", digit.value));\n+\t\t\t\t\tnum.value = (num.value - digit.value) / 10;\n+\t\t\t\t\tif (num.value == 0) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (num.value == digit.value) {\n+\t\t\t\t\t\toutput += (String.format(\"\\n%d\", num.value));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         output += (String.format (\"\\nThat's all, have a nice day!\\n\"));\n-        if (true)\n-            return;;\n+        if (true) {\n+\t\t\tnum.value = Math.abs(num.value);\n+\t\t\treturn;\n+\t\t};\n     }\n }\n\n\n"}]}}, {"bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "jGenProg", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-07 02:57:56.135288", "repair_begin": "2018-12-07 02:57:48.800821", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_d5059e2b_000.java\\n+++ introclassJava\\/digits_d5059e2b_000.java\\n@@ -60,7 +60,7 @@\\n \\t\\tintroclassJava.IntObj num = new introclassJava.IntObj(); \\t\\tintroclassJava.IntObj digit = new introclassJava.IntObj();\\n \\t\\toutput += java.lang.String.format(\\\"\\\\nEnter an integer > \\\");\\n \\t\\tnum.value = scanner.nextInt();\\n-\\t\\tdigit.value = (java.lang.Math.abs(num.value)) % 10;\\n+\\n \\t\\tif ((num.value) < 0) {\\n \\t\\t\\tnum.value = java.lang.Math.abs(num.value);\\n \\t\\t\\twhile ((num.value) != (digit.value)) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "digit.value = (java.lang.Math.abs(num.value)) % 10", "INGREDIENT_SCOPE": "-", "LOCATION": "introclassJava.digits_d5059e2b_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/.\\/output_astor\\/AstorMain-digits-d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/\\/src\\/\\/variant-2_f\\/introclassJava\\/digits_d5059e2b_000.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/output_astor\\/AstorMain-digits-d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/src\\/default\\/introclassJava\\/digits_d5059e2b_000.java", "LINE": "63", "MP_RANKING": "7", "SUSPICIOUNESS": "0.25"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "1", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/.\\/output_astor\\/AstorMain-digits-d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "jKali", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 02:37:20.667093", "repair_begin": "2018-12-05 02:37:10.964676", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_d5059e2b_000.java\\n+++ introclassJava\\/digits_d5059e2b_000.java\\n@@ -60,7 +60,7 @@\\n \\t\\tintroclassJava.IntObj num = new introclassJava.IntObj(); \\t\\tintroclassJava.IntObj digit = new introclassJava.IntObj();\\n \\t\\toutput += java.lang.String.format(\\\"\\\\nEnter an integer > \\\");\\n \\t\\tnum.value = scanner.nextInt();\\n-\\t\\tdigit.value = (java.lang.Math.abs(num.value)) % 10;\\n+\\n \\t\\tif ((num.value) < 0) {\\n \\t\\t\\tnum.value = java.lang.Math.abs(num.value);\\n \\t\\t\\twhile ((num.value) != (digit.value)) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "digit.value = (java.lang.Math.abs(num.value)) % 10", "LOCATION": "introclassJava.digits_d5059e2b_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/.\\/output_astor\\/AstorMain-digits-d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/\\/src\\/\\/variant-11_f\\/introclassJava\\/digits_d5059e2b_000.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/output_astor\\/AstorMain-digits-d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/src\\/default\\/introclassJava\\/digits_d5059e2b_000.java", "LINE": "63", "MP_RANKING": "7", "SUSPICIOUNESS": "0.25"}], "GENERATION": "1", "VARIANT_ID": "11", "TIME": "3", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/.\\/output_astor\\/AstorMain-digits-d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000\\/\\/bin\\/\\/variant-11"}]}}, {"bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "Kali-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-11-28 16:03:45.364698", "repair_begin": "2018-11-28 16:03:30.589847", "patches": [{"edits": [{"path": "", "line": 63, "faulty": "digit.value=Math.abs(num.value) % 10;", "type": "Delete /tmp/Kali_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/src/main/java/introclassJava/digits_d5059e2b_000.java"}]}]}}, {"bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "RSRepair-A", "nb_patch": 7, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 00:49:49.457695", "repair_begin": "2018-12-05 00:42:11.149740", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 63, "faulty": "digit.value=Math.abs(num.value) % 10;", "type": "Delete", "seed": "return;"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 98, "faulty": ";", "type": "Replace", "seed": "digit.value=Math.abs(num.value) % 10;"}], "patch": "--- /tmp/RSRepair_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/src/main/java/introclassJava/digits_d5059e2b_000.java\t2018-11-28 17:54:19.867964000 -0500\n+++ /tmp/RSRepair_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/patches_wrmz/Patch_344/patched/tmp/RSRepair_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/src/main/java/introclassJava/digits_d5059e2b_000.java\t2018-12-04 18:43:51.215256018 -0500\n@@ -60,7 +60,6 @@\n         IntObj num = new IntObj (), digit = new IntObj ();\n         output += (String.format (\"\\nEnter an integer > \"));\n         num.value = scanner.nextInt ();\n-        digit.value = Math.abs (num.value) % 10;\n         if (num.value < 0) {\n             num.value = Math.abs (num.value);\n             while (num.value != digit.value) {\n@@ -95,6 +94,6 @@\n         }\n         output += (String.format (\"\\nThat's all, have a nice day!\\n\"));\n         if (true)\n-            return;;\n+            return;digit.value = Math.abs(num.value) % 10;\n     }\n }\n\n\n"}]}}, {"bug_id": "e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-08 04:55:34.299912", "repair_begin": "2018-12-08 04:55:26.762036", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_e79f832f_000.java\\n+++ introclassJava\\/digits_e79f832f_000.java\\n@@ -61,7 +61,7 @@\\n \\t\\toutput += java.lang.String.format(\\\"\\\\nEnter an integer > \\\");\\n \\t\\tnumber.value = scanner.nextInt();\\n \\t\\toutput += java.lang.String.format(\\\"\\\\n\\\");\\n-\\t\\tif ((number.value) < 0) {\\n+\\t\\tif ((number.value) <= 0) {\\n \\t\\t\\tnumber.value = java.lang.Math.abs(number.value);\\n \\t\\t\\twhile ((number.value) > 10) {\\n \\t\\t\\t\\trem.value = (number.value) % 10;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(number.value) < 0", "PATCH_HUNK_CODE": "(number.value) <= 0", "LOCATION": "introclassJava.digits_e79f832f_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_digits_e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_000\\/.\\/output_astor\\/AstorMain-digits-e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_000\\/\\/src\\/\\/variant-6_f\\/introclassJava\\/digits_e79f832f_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_digits_e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_000\\/output_astor\\/AstorMain-digits-e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_000\\/src\\/default\\/introclassJava\\/digits_e79f832f_000.java", "LINE": "64", "MP_RANKING": "0", "SUSPICIOUNESS": "0.25", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "6", "TIME": "1", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_digits_e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_000\\/.\\/output_astor\\/AstorMain-digits-e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_000\\/\\/bin\\/\\/variant-6"}]}}, {"bug_id": "e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_002", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-08 04:55:32.815670", "repair_begin": "2018-12-08 04:55:25.142374", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/digits_e79f832f_002.java\\n+++ introclassJava\\/digits_e79f832f_002.java\\n@@ -61,7 +61,7 @@\\n \\t\\toutput += java.lang.String.format(\\\"\\\\nEnter an integer > \\\");\\n \\t\\tnumber.value = scanner.nextInt();\\n \\t\\toutput += java.lang.String.format(\\\"\\\\n\\\");\\n-\\t\\tif ((number.value) < 0) {\\n+\\t\\tif ((number.value) <= 0) {\\n \\t\\t\\tnumber.value = java.lang.Math.abs(number.value);\\n \\t\\t\\twhile ((number.value) > 10) {\\n \\t\\t\\t\\trem.value = (number.value) % 10;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(number.value) < 0", "PATCH_HUNK_CODE": "(number.value) <= 0", "LOCATION": "introclassJava.digits_e79f832f_002", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_digits_e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_002\\/.\\/output_astor\\/AstorMain-digits-e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_002\\/\\/src\\/\\/variant-6_f\\/introclassJava\\/digits_e79f832f_002.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_digits_e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_002\\/output_astor\\/AstorMain-digits-e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_002\\/src\\/default\\/introclassJava\\/digits_e79f832f_002.java", "LINE": "64", "MP_RANKING": "0", "SUSPICIOUNESS": "0.25", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "6", "TIME": "1", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_digits_e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_002\\/.\\/output_astor\\/AstorMain-digits-e79f832ff314d3658c07e164d7866db707eafc8c97f209cf1d5cdb3b0cfc6738e7bd533c426a4887122d853ffa152b8861f30c41642a180152ba50c983de66dc_002\\/\\/bin\\/\\/variant-6"}]}}, {"bug_id": "f2997e14a460c6df0ed10aa9f6e792666e37d5c06a9a81445f14509e4a0113f59f5589ef37774dfea1f7d0ae9bb6c388e6eeb44e745e35f8511bbd4b82709d9a_002", "tool": "ARJA", "nb_patch": 42, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-03 01:05:08.448773", "repair_begin": "2018-12-03 00:41:24.063794", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_f2997e14_002.java", "line": 65, "faulty": "digit.value=input.value % 10;", "type": "InsertBefore", "seed": "if (Math.abs(input.value) < 10 && input.value != 0) {\n  output+=(String.format(\"%d\\n\",input.value));\n  break;\n}"}, {"path": "src/main/java/introclassJava/digits_f2997e14_002.java", "line": 73, "faulty": "input.value=input.value / 10;", "type": "InsertBefore", "seed": "digit.value=input.value % 10;"}], "patch": "--- /tmp/Arja_IntroClassJava_digits_f2997e14a460c6df0ed10aa9f6e792666e37d5c06a9a81445f14509e4a0113f59f5589ef37774dfea1f7d0ae9bb6c388e6eeb44e745e35f8511bbd4b82709d9a_002/src/main/java/introclassJava/digits_f2997e14_002.java\t2018-11-05 17:59:10.329659000 -0500\n+++ /tmp/Arja_IntroClassJava_digits_f2997e14a460c6df0ed10aa9f6e792666e37d5c06a9a81445f14509e4a0113f59f5589ef37774dfea1f7d0ae9bb6c388e6eeb44e745e35f8511bbd4b82709d9a_002/patches_zlhi/Patch_410/patched/tmp/Arja_IntroClassJava_digits_f2997e14a460c6df0ed10aa9f6e792666e37d5c06a9a81445f14509e4a0113f59f5589ef37774dfea1f7d0ae9bb6c388e6eeb44e745e35f8511bbd4b82709d9a_002/src/main/java/introclassJava/digits_f2997e14_002.java\t2018-12-02 18:49:06.035349222 -0500\n@@ -62,7 +62,11 @@\n         input.value = scanner.nextInt ();\n         output += (String.format (\"\\n\"));\n         while (true) {\n-            digit.value = input.value % 10;\n+            if (Math.abs(input.value) < 10 && input.value != 0) {\n+\t\t\t\toutput += (String.format(\"%d\\n\", input.value));\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdigit.value = input.value % 10;\n             if (input.value == 0) {\n                 output += (String.format (\"0\\n\"));\n                 break;\n@@ -70,7 +74,8 @@\n                 digit.value = Math.abs (digit.value);\n                 output += (String.format (\"%d\\n\", digit.value));\n             }\n-            input.value = input.value / 10;\n+            digit.value = input.value % 10;\n+\t\t\tinput.value = input.value / 10;\n             if (Math.abs (input.value) < 10 && input.value != 0) {\n                 output += (String.format (\"%d\\n\", input.value));\n                 break;\n\n\n"}]}}, {"bug_id": "f2997e14a460c6df0ed10aa9f6e792666e37d5c06a9a81445f14509e4a0113f59f5589ef37774dfea1f7d0ae9bb6c388e6eeb44e745e35f8511bbd4b82709d9a_002", "tool": "RSRepair-A", "nb_patch": 3, "benchmark": "IntroClassJava", "project": "digits", "result": {"repair_end": "2018-12-05 01:00:21.626349", "repair_begin": "2018-12-05 00:40:11.277689", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_f2997e14_002.java", "line": 71, "faulty": "output+=(String.format(\"%d\\n\",digit.value));", "type": "InsertBefore", "seed": "if (Math.abs(input.value) < 10 && input.value != 0) {\n  output+=(String.format(\"%d\\n\",input.value));\n  break;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_digits_f2997e14a460c6df0ed10aa9f6e792666e37d5c06a9a81445f14509e4a0113f59f5589ef37774dfea1f7d0ae9bb6c388e6eeb44e745e35f8511bbd4b82709d9a_002/src/main/java/introclassJava/digits_f2997e14_002.java\t2018-11-28 17:54:19.955964000 -0500\n+++ /tmp/RSRepair_IntroClassJava_digits_f2997e14a460c6df0ed10aa9f6e792666e37d5c06a9a81445f14509e4a0113f59f5589ef37774dfea1f7d0ae9bb6c388e6eeb44e745e35f8511bbd4b82709d9a_002/patches_6zkp/Patch_1148/patched/tmp/RSRepair_IntroClassJava_digits_f2997e14a460c6df0ed10aa9f6e792666e37d5c06a9a81445f14509e4a0113f59f5589ef37774dfea1f7d0ae9bb6c388e6eeb44e745e35f8511bbd4b82709d9a_002/src/main/java/introclassJava/digits_f2997e14_002.java\t2018-12-04 18:53:41.029980441 -0500\n@@ -68,7 +68,11 @@\n                 break;\n             } else if (Math.abs (digit.value) < 10) {\n                 digit.value = Math.abs (digit.value);\n-                output += (String.format (\"%d\\n\", digit.value));\n+                if (Math.abs(input.value) < 10 && input.value != 0) {\n+\t\t\t\t\toutput += (String.format(\"%d\\n\", input.value));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\toutput += (String.format (\"%d\\n\", digit.value));\n             }\n             input.value = input.value / 10;\n             if (Math.abs (input.value) < 10 && input.value != 0) {\n\n\n"}]}}, {"bug_id": "b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "grade", "result": {"repair_end": "2018-12-08 05:11:32.828338", "repair_begin": "2018-12-08 05:11:17.866762", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/grade_b1924d63_001.java\\n+++ introclassJava\\/grade_b1924d63_001.java\\n@@ -71,7 +71,7 @@\\n \\t\\tscore.value = scanner.nextFloat();\\n \\t\\tif ((score.value) >= (a.value)) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"Student has an A grade\\\\n\\\");\\n-\\t\\t}else \\t\\t\\tif (((score.value) >= (b.value)) && ((score.value) > (a.value))) {\\n+\\t\\t}else \\t\\t\\tif (((score.value) >= (b.value)) && ((score.value) != (a.value))) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"Student has an B grade\\\\n\\\");\\n \\t\\t\\t}else \\t\\t\\t\\tif (((score.value) >= (c.value)) && ((score.value) < (b.value))) {\\n \\t\\t\\t\\t\\toutput += java.lang.String.format(\\\"Student has an C grade\\\\n\\\");\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((score.value) >= (b.value)) && ((score.value) > (a.value))", "PATCH_HUNK_CODE": "((score.value) >= (b.value)) && ((score.value) != (a.value))", "LOCATION": "introclassJava.grade_b1924d63_001", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_grade_b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001\\/.\\/output_astor\\/AstorMain-grade-b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001\\/\\/src\\/\\/variant-29_f\\/introclassJava\\/grade_b1924d63_001.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_grade_b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001\\/output_astor\\/AstorMain-grade-b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001\\/src\\/default\\/introclassJava\\/grade_b1924d63_001.java", "LINE": "74", "MP_RANKING": "2", "SUSPICIOUNESS": "0.535", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "29", "TIME": "8", "VALIDATION": "|true|0|18|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_grade_b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001\\/.\\/output_astor\\/AstorMain-grade-b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001\\/\\/bin\\/\\/variant-29"}]}}, {"bug_id": "b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "grade", "result": {"repair_end": "2018-12-05 21:31:40.974269", "repair_begin": "2018-12-05 21:31:34.442879", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 74, "class": "introclassJava.grade_b1924d63_001"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/grade_b1924d63_001.java\n+++ b/src/main/java/introclassJava/grade_b1924d63_001.java\n@@ -73,3 +73,3 @@\n             output += (String.format (\"Student has an A grade\\n\"));\n-        } else if ((score.value >= b.value) && (score.value > a.value)) {\n+        } else if (((score.value) >= (b.value))) {\n             output += (String.format (\"Student has an B grade\\n\"));\n"}]}}, {"bug_id": "b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "grade", "result": {"repair_end": "2018-12-08 05:11:27.846995", "repair_begin": "2018-12-08 05:11:13.183699", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/grade_b1924d63_003.java\\n+++ introclassJava\\/grade_b1924d63_003.java\\n@@ -71,7 +71,7 @@\\n \\t\\tscore.value = scanner.nextDouble();\\n \\t\\tif ((score.value) >= (a.value)) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"Student has an A grade\\\\n\\\");\\n-\\t\\t}else \\t\\t\\tif (((score.value) >= (b.value)) && ((score.value) > (a.value))) {\\n+\\t\\t}else \\t\\t\\tif (((score.value) >= (b.value)) && ((score.value) != (a.value))) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"Student has an B grade\\\\n\\\");\\n \\t\\t\\t}else \\t\\t\\t\\tif (((score.value) >= (c.value)) && ((score.value) < (b.value))) {\\n \\t\\t\\t\\t\\toutput += java.lang.String.format(\\\"Student has an C grade\\\\n\\\");\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "((score.value) >= (b.value)) && ((score.value) > (a.value))", "PATCH_HUNK_CODE": "((score.value) >= (b.value)) && ((score.value) != (a.value))", "LOCATION": "introclassJava.grade_b1924d63_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_grade_b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003\\/.\\/output_astor\\/AstorMain-grade-b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003\\/\\/src\\/\\/variant-29_f\\/introclassJava\\/grade_b1924d63_003.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_grade_b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003\\/output_astor\\/AstorMain-grade-b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003\\/src\\/default\\/introclassJava\\/grade_b1924d63_003.java", "LINE": "74", "MP_RANKING": "2", "SUSPICIOUNESS": "0.535", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "29", "TIME": "8", "VALIDATION": "|true|0|18|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_grade_b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003\\/.\\/output_astor\\/AstorMain-grade-b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003\\/\\/bin\\/\\/variant-29"}]}}, {"bug_id": "b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "grade", "result": {"repair_end": "2018-12-05 21:31:38.111939", "repair_begin": "2018-12-05 21:31:31.562243", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 74, "class": "introclassJava.grade_b1924d63_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/grade_b1924d63_003.java\n+++ b/src/main/java/introclassJava/grade_b1924d63_003.java\n@@ -73,3 +73,3 @@\n             output += (String.format (\"Student has an A grade\\n\"));\n-        } else if ((score.value >= b.value) && (score.value > a.value)) {\n+        } else if (((score.value) >= (b.value))) {\n             output += (String.format (\"Student has an B grade\\n\"));\n"}]}}, {"bug_id": "bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "grade", "result": {"repair_end": "2018-12-08 05:25:47.171936", "repair_begin": "2018-12-08 05:25:39.838321", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/grade_bfad6d21_000.java\\n+++ introclassJava\\/grade_bfad6d21_000.java\\n@@ -69,7 +69,7 @@\\n \\t\\toutput += \\n \\t\\tjava.lang.String.format(\\\"Thank you. Now enter student score (percent) >\\\");\\n \\t\\tstuscore.value = scanner.nextFloat();\\n-\\t\\tif ((stuscore.value) > (thresha.value)) {\\n+\\t\\tif ((stuscore.value) >= (thresha.value)) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"Student has an A grade\\\\n\\\");\\n \\t\\t}\\n \\t\\tif (((stuscore.value) < (thresha.value)) && ((stuscore.value) >= (threshb.value))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(stuscore.value) > (thresha.value)", "PATCH_HUNK_CODE": "(stuscore.value) >= (thresha.value)", "LOCATION": "introclassJava.grade_bfad6d21_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_grade_bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_000\\/.\\/output_astor\\/AstorMain-grade-bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_000\\/\\/src\\/\\/variant-4_f\\/introclassJava\\/grade_bfad6d21_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_grade_bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_000\\/output_astor\\/AstorMain-grade-bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_000\\/src\\/default\\/introclassJava\\/grade_bfad6d21_000.java", "LINE": "72", "MP_RANKING": "0", "SUSPICIOUNESS": "0.333", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "4", "TIME": "1", "VALIDATION": "|true|0|18|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_grade_bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_000\\/.\\/output_astor\\/AstorMain-grade-bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_000\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_001", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "grade", "result": {"repair_end": "2018-12-08 05:25:42.454966", "repair_begin": "2018-12-08 05:25:35.319382", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/grade_bfad6d21_001.java\\n+++ introclassJava\\/grade_bfad6d21_001.java\\n@@ -69,7 +69,7 @@\\n \\t\\toutput += \\n \\t\\tjava.lang.String.format(\\\"Thank you. Now enter student score (percent) >\\\");\\n \\t\\tstuscore.value = scanner.nextFloat();\\n-\\t\\tif ((stuscore.value) > (thresha.value)) {\\n+\\t\\tif ((stuscore.value) >= (thresha.value)) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"Student has an A grade\\\\n\\\");\\n \\t\\t}\\n \\t\\tif (((stuscore.value) < (thresha.value)) && ((stuscore.value) >= (threshb.value))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(stuscore.value) > (thresha.value)", "PATCH_HUNK_CODE": "(stuscore.value) >= (thresha.value)", "LOCATION": "introclassJava.grade_bfad6d21_001", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_grade_bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_001\\/.\\/output_astor\\/AstorMain-grade-bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_001\\/\\/src\\/\\/variant-4_f\\/introclassJava\\/grade_bfad6d21_001.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_grade_bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_001\\/output_astor\\/AstorMain-grade-bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_001\\/src\\/default\\/introclassJava\\/grade_bfad6d21_001.java", "LINE": "72", "MP_RANKING": "0", "SUSPICIOUNESS": "0.333", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "4", "TIME": "1", "VALIDATION": "|true|0|18|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_grade_bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_001\\/.\\/output_astor\\/AstorMain-grade-bfad6d21d636def8e9e72910c3eb0815f5747669e3a60fb10c6f7f421082d18e548dcfc5d4717bb6da075c36f067b37858d11528ce796b3226ae33719c5007ce_001\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003", "tool": "ARJA", "nb_patch": 32, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-03 00:19:23.543864", "repair_begin": "2018-12-03 00:12:25.501881", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 60, "faulty": "IntObj a=new IntObj(), b=new IntObj(), c=new IntObj(), median=new IntObj();", "type": "InsertBefore", "seed": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 62, "faulty": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 67, "faulty": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}", "type": "InsertBefore", "seed": "if ((b.value >= a.value && b.value <= c.value) || (b.value >= c.value && b.value <= a.value)) {\n  median.value=b.value;\n}\n else {\n  median.value=c.value;\n}"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 75, "faulty": "median.value=c.value;", "type": "Delete", "seed": "return;"}], "patch": "--- /tmp/Arja_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/src/main/java/introclassJava/median_0cdfa335_003.java\t2018-11-05 17:59:11.189679000 -0500\n+++ /tmp/Arja_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/patches_xaet/Patch_1836/patched/tmp/Arja_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/src/main/java/introclassJava/median_0cdfa335_003.java\t2018-12-02 18:19:02.645491631 -0500\n@@ -57,14 +57,21 @@\n     }\n \n     public void exec () throws Exception {\n-        IntObj a = new IntObj (), b = new IntObj (), c = new IntObj (), median =\n+        output += (String\n+\t\t\t\t.format(\"Please enter 3 numbers separated by spaces > \"));\n+\t\tIntObj a = new IntObj (), b = new IntObj (), c = new IntObj (), median =\n             new IntObj ();\n-        output +=\n-            (String.format (\"Please enter 3 numbers separated by spaces > \"));\n+        ;\n         a.value = scanner.nextInt ();\n         b.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n-        if ((a.value >= b.value && a.value <= c.value)\n+        if ((b.value >= a.value && b.value <= c.value)\n+\t\t\t\t|| (b.value >= c.value && b.value <= a.value)) {\n+\t\t\tmedian.value = b.value;\n+\t\t} else {\n+\t\t\tmedian.value = c.value;\n+\t\t}\n+\t\tif ((a.value >= b.value && a.value <= c.value)\n                 || (a.value >= c.value && a.value <= b.value)) {\n             median.value = a.value;\n         }\n@@ -72,7 +79,6 @@\n                 || (b.value >= c.value && b.value <= a.value)) {\n             median.value = b.value;\n         } else {\n-            median.value = c.value;\n         }\n         output += (String.format (\"%d is the median\\n\", median.value));\n         if (true)\n\n\n"}]}}, {"bug_id": "0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003", "tool": "GenProg-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-02 20:43:29.060720", "repair_begin": "2018-12-02 20:36:28.292840", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 67, "faulty": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}", "type": "Delete", "seed": "median.value=a.value;"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 79, "faulty": ";", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 79, "faulty": ";", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 67, "faulty": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}", "type": "Delete", "seed": "median.value=c.value;"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 67, "faulty": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}", "type": "Delete", "seed": "median.value=a.value;"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 79, "faulty": ";", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 79, "faulty": ";", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 67, "faulty": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}", "type": "Delete", "seed": "median.value=c.value;"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 69, "faulty": "median.value=a.value;", "type": "Replace", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 77, "faulty": "output+=(String.format(\"%d is the median\\n\",median.value));", "type": "InsertBefore", "seed": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}"}], "patch": "--- /tmp/GenProg_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/src/main/java/introclassJava/median_0cdfa335_003.java\t2018-11-05 17:59:11.189679000 -0500\n+++ /tmp/GenProg_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/patches_q8p1/Patch_1256/patched/tmp/GenProg_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/src/main/java/introclassJava/median_0cdfa335_003.java\t2018-12-02 14:41:08.396008856 -0500\n@@ -64,17 +64,17 @@\n         a.value = scanner.nextInt ();\n         b.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n-        if ((a.value >= b.value && a.value <= c.value)\n-                || (a.value >= c.value && a.value <= b.value)) {\n-            median.value = a.value;\n-        }\n         if ((b.value >= a.value && b.value <= c.value)\n                 || (b.value >= c.value && b.value <= a.value)) {\n             median.value = b.value;\n         } else {\n             median.value = c.value;\n         }\n-        output += (String.format (\"%d is the median\\n\", median.value));\n+        if ((a.value >= b.value && a.value <= c.value)\n+\t\t\t\t|| (a.value >= c.value && a.value <= b.value)) {\n+\t\t\tmedian.value = a.value;\n+\t\t}\n+\t\toutput += (String.format (\"%d is the median\\n\", median.value));\n         if (true)\n             return;;\n     }\n\n\n"}]}}, {"bug_id": "0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003", "tool": "RSRepair-A", "nb_patch": 3, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 00:19:21.790288", "repair_begin": "2018-12-05 00:12:22.956433", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 77, "faulty": "output+=(String.format(\"%d is the median\\n\",median.value));", "type": "InsertBefore", "seed": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/src/main/java/introclassJava/median_0cdfa335_003.java\t2018-11-28 17:54:20.835963000 -0500\n+++ /tmp/RSRepair_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/patches_j38a/Patch_168/patched/tmp/RSRepair_IntroClassJava_median_0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003/src/main/java/introclassJava/median_0cdfa335_003.java\t2018-12-04 18:13:10.807532386 -0500\n@@ -74,7 +74,11 @@\n         } else {\n             median.value = c.value;\n         }\n-        output += (String.format (\"%d is the median\\n\", median.value));\n+        if ((a.value >= b.value && a.value <= c.value)\n+\t\t\t\t|| (a.value >= c.value && a.value <= b.value)) {\n+\t\t\tmedian.value = a.value;\n+\t\t}\n+\t\toutput += (String.format (\"%d is the median\\n\", median.value));\n         if (true)\n             return;;\n     }\n\n\n"}]}}, {"bug_id": "0cea42f9680f35f5a84c724c396d4d588b65c303453f9585562f2e2af8db74f5096a83a70b17c5126538222b111a0795a34e9fb6db95d62d771d01592abe3ff6_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:54:44.159739", "repair_begin": "2018-12-05 21:54:31.030745", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 66, "class": "introclassJava.median_0cea42f9_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_0cea42f9_003.java\n+++ b/src/main/java/introclassJava/median_0cea42f9_003.java\n@@ -65,10 +65,9 @@\n         c.value = scanner.nextInt ();\n-        if (((a.value > b.value) && (a.value < c.value))\n-                || ((a.value < b.value) && (a.value > c.value))) {\n+        if (!(((((a.value) < (b.value))) && (((a.value) < (c.value)))) || ((((a.value) > (c.value))) && (((a.value) > (b.value)))))) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if (((b.value > a.value) && (b.value < c.value))\n-                   || ((b.value < a.value) && (b.value > c.value))) {\n+        || ((b.value < a.value) && (b.value > c.value))) {\n             output += (String.format (\"%d is the median\\n\", b.value));\n         } else if (((c.value > a.value) && (c.value < b.value))\n-                   || ((c.value < a.value) && (c.value > b.value))) {\n+        || ((c.value < a.value) && (c.value > b.value))) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n"}]}}, {"bug_id": "1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000", "tool": "ARJA", "nb_patch": 34, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-03 00:06:14.034303", "repair_begin": "2018-12-02 23:59:17.045457", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 64, "faulty": "num2.value=scanner.nextInt();", "type": "InsertBefore", "seed": "if ((((num2.value > num1.value) && (num2.value < num3.value))) || ((num2.value > num3.value) && (num2.value < num1.value))) {\n  output+=(String.format(\"%d is the median\\n\",num2.value));\n  if (true)   return;\n  ;\n}\n else if ((((num3.value > num2.value) && (num3.value < num1.value))) || ((num3.value > num1.value) && (num3.value < num2.value))) {\n  output+=(String.format(\"%d is the median\\n\",num3.value));\n  if (true)   return;\n  ;\n}"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": "return;", "type": "InsertBefore", "seed": "output+=(String.format(\"%d is the median\\n\",num1.value));"}], "patch": "--- /tmp/Arja_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/src/main/java/introclassJava/median_1b31fa5c_000.java\t2018-11-05 17:59:11.273681000 -0500\n+++ /tmp/Arja_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/patches_uqv0/Patch_727/patched/tmp/Arja_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/src/main/java/introclassJava/median_1b31fa5c_000.java\t2018-12-02 18:02:01.868883854 -0500\n@@ -61,7 +61,20 @@\n         output +=\n             (String.format (\"Please enter 3 numbers separated by spaces > \"));\n         num1.value = scanner.nextInt ();\n-        num2.value = scanner.nextInt ();\n+        if ((((num2.value > num1.value) && (num2.value < num3.value)))\n+\t\t\t\t|| ((num2.value > num3.value) && (num2.value < num1.value))) {\n+\t\t\toutput += (String.format(\"%d is the median\\n\", num2.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if ((((num3.value > num2.value) && (num3.value < num1.value)))\n+\t\t\t\t|| ((num3.value > num1.value) && (num3.value < num2.value))) {\n+\t\t\toutput += (String.format(\"%d is the median\\n\", num3.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tnum2.value = scanner.nextInt ();\n         num3.value = scanner.nextInt ();\n         if ((((num1.value > num2.value) && (num1.value < num3.value)))\n                 || ((num1.value > num3.value) && (num1.value < num2.value))) {\n@@ -79,7 +92,9 @@\n             if (true)\n                 return;;\n         }\n-        if (true)\n-            return;;\n+        if (true) {\n+\t\t\toutput += (String.format(\"%d is the median\\n\", num1.value));\n+\t\t\treturn;\n+\t\t};\n     }\n }\n\n\n"}]}}, {"bug_id": "1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000", "tool": "GenProg-A", "nb_patch": 129, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-02 20:30:39.192072", "repair_begin": "2018-12-02 20:22:14.716889", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 71, "faulty": "if ((((num2.value > num1.value) && (num2.value < num3.value))) || ((num2.value > num3.value) && (num2.value < num1.value))) {\n  output+=(String.format(\"%d is the median\\n\",num2.value));\n  if (true)   return;\n  ;\n}\n else if ((((num3.value > num2.value) && (num3.value < num1.value))) || ((num3.value > num1.value) && (num3.value < num2.value))) {\n  output+=(String.format(\"%d is the median\\n\",num3.value));\n  if (true)   return;\n  ;\n}", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": "return;", "type": "InsertBefore", "seed": "output+=(String.format(\"%d is the median\\n\",num3.value));"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 63, "faulty": "num1.value=scanner.nextInt();", "type": "InsertBefore", "seed": "if ((((num2.value > num1.value) && (num2.value < num3.value))) || ((num2.value > num3.value) && (num2.value < num1.value))) {\n  output+=(String.format(\"%d is the median\\n\",num2.value));\n  if (true)   return;\n  ;\n}\n else if ((((num3.value > num2.value) && (num3.value < num1.value))) || ((num3.value > num1.value) && (num3.value < num2.value))) {\n  output+=(String.format(\"%d is the median\\n\",num3.value));\n  if (true)   return;\n  ;\n}"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 61, "faulty": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));", "type": "Replace", "seed": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 76, "faulty": "if ((((num3.value > num2.value) && (num3.value < num1.value))) || ((num3.value > num1.value) && (num3.value < num2.value))) {\n  output+=(String.format(\"%d is the median\\n\",num3.value));\n  if (true)   return;\n  ;\n}", "type": "Delete", "seed": "if ((((num1.value > num2.value) && (num1.value < num3.value))) || ((num1.value > num3.value) && (num1.value < num2.value))) {\n  output+=(String.format(\"%d is the median\\n\",num1.value));\n  if (true)   return;\n  ;\n}\n else if ((((num2.value > num1.value) && (num2.value < num3.value))) || ((num2.value > num3.value) && (num2.value < num1.value))) {\n  output+=(String.format(\"%d is the median\\n\",num2.value));\n  if (true)   return;\n  ;\n}\n else if ((((num3.value > num2.value) && (num3.value < num1.value))) || ((num3.value > num1.value) && (num3.value < num2.value))) {\n  output+=(String.format(\"%d is the median\\n\",num3.value));\n  if (true)   return;\n  ;\n}"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": "return;", "type": "Replace", "seed": "output+=(String.format(\"%d is the median\\n\",num1.value));"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": "return;", "type": "Replace", "seed": "output+=(String.format(\"%d is the median\\n\",num1.value));"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": ";", "type": "Delete", "seed": "IntObj num1=new IntObj(), num2=new IntObj(), num3=new IntObj();"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": ";", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": ";", "type": "Delete", "seed": "output+=(String.format(\"%d is the median\\n\",num3.value));"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 60, "faulty": "IntObj num1=new IntObj(), num2=new IntObj(), num3=new IntObj();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 76, "faulty": "if ((((num3.value > num2.value) && (num3.value < num1.value))) || ((num3.value > num1.value) && (num3.value < num2.value))) {\n  output+=(String.format(\"%d is the median\\n\",num3.value));\n  if (true)   return;\n  ;\n}", "type": "InsertBefore", "seed": "output+=(String.format(\"%d is the median\\n\",num3.value));"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": ";", "type": "Delete", "seed": "if ((((num2.value > num1.value) && (num2.value < num3.value))) || ((num2.value > num3.value) && (num2.value < num1.value))) {\n  output+=(String.format(\"%d is the median\\n\",num2.value));\n  if (true)   return;\n  ;\n}\n else if ((((num3.value > num2.value) && (num3.value < num1.value))) || ((num3.value > num1.value) && (num3.value < num2.value))) {\n  output+=(String.format(\"%d is the median\\n\",num3.value));\n  if (true)   return;\n  ;\n}"}, {"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": ";", "type": "Delete", "seed": "num3.value=scanner.nextInt();"}], "patch": "--- /tmp/GenProg_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/src/main/java/introclassJava/median_1b31fa5c_000.java\t2018-11-05 17:59:11.273681000 -0500\n+++ /tmp/GenProg_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/patches_4lc2/Patch_1806/patched/tmp/GenProg_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/src/main/java/introclassJava/median_1b31fa5c_000.java\t2018-12-02 14:30:01.201189383 -0500\n@@ -57,10 +57,24 @@\n     }\n \n     public void exec () throws Exception {\n-        IntObj num1 = new IntObj (), num2 = new IntObj (), num3 = new IntObj ();\n-        output +=\n-            (String.format (\"Please enter 3 numbers separated by spaces > \"));\n-        num1.value = scanner.nextInt ();\n+        ;\n+\t\tIntObj num1 = new IntObj (), num2 = new IntObj (), num3 = new IntObj ();\n+        output += (String\n+\t\t\t\t.format(\"Please enter 3 numbers separated by spaces > \"));\n+        if ((((num2.value > num1.value) && (num2.value < num3.value)))\n+\t\t\t\t|| ((num2.value > num3.value) && (num2.value < num1.value))) {\n+\t\t\toutput += (String.format(\"%d is the median\\n\", num2.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if ((((num3.value > num2.value) && (num3.value < num1.value)))\n+\t\t\t\t|| ((num3.value > num1.value) && (num3.value < num2.value))) {\n+\t\t\toutput += (String.format(\"%d is the median\\n\", num3.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tnum1.value = scanner.nextInt ();\n         num2.value = scanner.nextInt ();\n         num3.value = scanner.nextInt ();\n         if ((((num1.value > num2.value) && (num1.value < num3.value)))\n@@ -68,18 +82,23 @@\n             output += (String.format (\"%d is the median\\n\", num1.value));\n             if (true)\n                 return;;\n-        } else if ((((num2.value > num1.value) && (num2.value < num3.value)))\n-                   || ((num2.value > num3.value) && (num2.value < num1.value))) {\n-            output += (String.format (\"%d is the median\\n\", num2.value));\n-            if (true)\n-                return;;\n-        } else if ((((num3.value > num2.value) && (num3.value < num1.value)))\n-                   || ((num3.value > num1.value) && (num3.value < num2.value))) {\n-            output += (String.format (\"%d is the median\\n\", num3.value));\n-            if (true)\n-                return;;\n-        }\n+        } else {\n+\t\t\t;\n+\t\t\tif ((((num2.value > num1.value) && (num2.value < num3.value)))\n+\t\t\t\t\t|| ((num2.value > num3.value) && (num2.value < num1.value))) {\n+\t\t\t\toutput += (String.format(\"%d is the median\\n\", num2.value));\n+\t\t\t\tif (true)\n+\t\t\t\t\treturn;\n+\t\t\t\t;\n+\t\t\t} else if ((((num3.value > num2.value) && (num3.value < num1.value)))\n+\t\t\t\t\t|| ((num3.value > num1.value) && (num3.value < num2.value))) {\n+\t\t\t\toutput += (String.format(\"%d is the median\\n\", num3.value));\n+\t\t\t\tif (true)\n+\t\t\t\t\treturn;\n+\t\t\t\t;\n+\t\t\t}\n+\t\t}\n         if (true)\n-            return;;\n+\t\t\toutput += (String.format(\"%d is the median\\n\", num1.value));;\n     }\n }\n\n\n"}]}}, {"bug_id": "1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:52:05.525776", "repair_begin": "2018-12-05 21:51:55.010561", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 66, "class": "introclassJava.median_1b31fa5c_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_1b31fa5c_000.java\n+++ b/src/main/java/introclassJava/median_1b31fa5c_000.java\n@@ -65,17 +65,16 @@\n         num3.value = scanner.nextInt ();\n-        if ((((num1.value > num2.value) && (num1.value < num3.value)))\n-                || ((num1.value > num3.value) && (num1.value < num2.value))) {\n+        if (((!(((num1.value) > (num2.value)))) && (!((((num1.value) < (num2.value))) && (((num1.value) < (num3.value)))))) || ((((num1.value) > (num2.value)) && ((num1.value) < (num3.value))))) {\n             output += (String.format (\"%d is the median\\n\", num1.value));\n             if (true)\n-                return;;\n+            return;;\n         } else if ((((num2.value > num1.value) && (num2.value < num3.value)))\n-                   || ((num2.value > num3.value) && (num2.value < num1.value))) {\n+        || ((num2.value > num3.value) && (num2.value < num1.value))) {\n             output += (String.format (\"%d is the median\\n\", num2.value));\n             if (true)\n-                return;;\n+            return;;\n         } else if ((((num3.value > num2.value) && (num3.value < num1.value)))\n-                   || ((num3.value > num1.value) && (num3.value < num2.value))) {\n+        || ((num3.value > num1.value) && (num3.value < num2.value))) {\n             output += (String.format (\"%d is the median\\n\", num3.value));\n             if (true)\n-                return;;\n+            return;;\n         }\n"}]}}, {"bug_id": "1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 00:13:27.451127", "repair_begin": "2018-12-05 00:06:38.671200", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_1b31fa5c_000.java", "line": 83, "faulty": "return;", "type": "InsertBefore", "seed": "output+=(String.format(\"%d is the median\\n\",num1.value));"}], "patch": "--- /tmp/RSRepair_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/src/main/java/introclassJava/median_1b31fa5c_000.java\t2018-11-28 17:54:20.863963000 -0500\n+++ /tmp/RSRepair_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/patches_e6n8/Patch_5/patched/tmp/RSRepair_IntroClassJava_median_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000/src/main/java/introclassJava/median_1b31fa5c_000.java\t2018-12-04 18:06:44.670065083 -0500\n@@ -79,7 +79,9 @@\n             if (true)\n                 return;;\n         }\n-        if (true)\n-            return;;\n+        if (true) {\n+\t\t\toutput += (String.format(\"%d is the median\\n\", num1.value));\n+\t\t\treturn;\n+\t\t};\n     }\n }\n\n\n"}]}}, {"bug_id": "1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-08 04:23:25.387477", "repair_begin": "2018-12-08 04:23:18.226016", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/median_1bf73a9c_003.java\\n+++ introclassJava\\/median_1bf73a9c_003.java\\n@@ -67,7 +67,7 @@\\n \\t\\tif ((((first.value) > (second.value)) && ((first.value) < (third.value))) || \\n \\t\\t(((first.value) > (third.value)) && ((first.value) < (second.value)))) {\\n \\t\\t\\tans.value = first.value;\\n-\\t\\t}else \\t\\t\\tif ((((second.value) > (first.value)) && ((second.value) < (third.value))) || \\n+\\t\\t}else \\t\\t\\tif ((((second.value) >= (first.value)) && ((second.value) < (third.value))) || \\n \\t\\t\\t(((second.value) > (third.value)) && ((second.value) < (first.value)))) {\\n \\t\\t\\t\\tans.value = second.value;\\n \\t\\t\\t}else {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((second.value) > (first.value)) && ((second.value) < (third.value))) || \\n(((second.value) > (third.value)) && ((second.value) < (first.value)))", "PATCH_HUNK_CODE": "((\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(second.value) >= (first.value)) && ((second.value) < (third.value))) || \\n(((second.value) > (third.value)) && ((second.value) < (first.value)))", "LOCATION": "introclassJava.median_1bf73a9c_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003\\/.\\/output_astor\\/AstorMain-median-1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003\\/\\/src\\/\\/variant-5_f\\/introclassJava\\/median_1bf73a9c_003.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003\\/output_astor\\/AstorMain-median-1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003\\/src\\/default\\/introclassJava\\/median_1bf73a9c_003.java", "LINE": "70", "MP_RANKING": "0", "SUSPICIOUNESS": "0.302", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "1", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_median_1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003\\/.\\/output_astor\\/AstorMain-median-1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:45:51.891491", "repair_begin": "2018-12-05 21:45:31.513523", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 70, "class": "introclassJava.median_1bf73a9c_003"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/median_1bf73a9c_003.java\n+++ b/src/main/java/introclassJava/median_1bf73a9c_003.java\n@@ -69,7 +69,11 @@\n             ans.value = first.value;\n-        } else if ((second.value > first.value && second.value < third.value)\n-                   || (second.value > third.value && second.value < first.value)) {\n-            ans.value = second.value;\n         } else {\n-            ans.value = third.value;\n+            if ((!(((second.value) < (third.value)))) || ((((second.value) > (first.value))) || (((second.value) < (first.value))))) {\n+                if ((second.value > first.value && second.value < third.value)\n+                || (second.value > third.value && second.value < first.value)) {\n+                    ans.value = second.value;\n+                } else {\n+                    ans.value = third.value;\n+                }\n+            }\n         }\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-08 04:23:25.027451", "repair_begin": "2018-12-08 04:23:17.559434", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/median_3b2376ab_003.java\\n+++ introclassJava\\/median_3b2376ab_003.java\\n@@ -77,7 +77,7 @@\\n \\t\\t\\tsmall.value = n2.value;\\n \\t\\t\\tif ((small.value) > (n3.value)) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"%d is the median\\\\n\\\", n2.value);\\n-\\t\\t\\t}else \\t\\t\\t\\tif ((n3.value) > (n1.value)) {\\n+\\t\\t\\t}else \\t\\t\\t\\tif ((n3.value) <= (n1.value)) {\\n \\t\\t\\t\\t\\toutput += java.lang.String.format(\\\"%d is the median\\\\n\\\", n3.value);\\n \\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\toutput += java.lang.String.format(\\\"%d is the median\\\\n\\\", n1.value);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(n3.value) > (n1.value)", "PATCH_HUNK_CODE": "(n3.value) <= (n1.value)", "LOCATION": "introclassJava.median_3b2376ab_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003\\/.\\/output_astor\\/AstorMain-median-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003\\/\\/src\\/\\/variant-5_f\\/introclassJava\\/median_3b2376ab_003.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003\\/output_astor\\/AstorMain-median-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003\\/src\\/default\\/introclassJava\\/median_3b2376ab_003.java", "LINE": "80", "MP_RANKING": "0", "SUSPICIOUNESS": "0.816", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "1", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003\\/.\\/output_astor\\/AstorMain-median-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:52:44.549908", "repair_begin": "2018-12-05 21:52:38.885215", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 80, "class": "introclassJava.median_3b2376ab_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_3b2376ab_003.java\n+++ b/src/main/java/introclassJava/median_3b2376ab_003.java\n@@ -79,3 +79,3 @@\n                 output += (String.format (\"%d is the median\\n\", n2.value));\n-            } else if (n3.value > n1.value) {\n+            } else if (!((n3.value) > (n1.value))) {\n                 output += (String.format (\"%d is the median\\n\", n3.value));\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_006", "tool": "GenProg-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-02 20:29:11.935603", "repair_begin": "2018-12-02 20:22:06.462385", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_3b2376ab_006.java", "line": 77, "faulty": "small.value=n2.value;", "type": "InsertBefore", "seed": "small.value=n2.value;"}, {"path": "src/main/java/introclassJava/median_3b2376ab_006.java", "line": 87, "faulty": ";", "type": "Replace", "seed": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));"}, {"path": "src/main/java/introclassJava/median_3b2376ab_006.java", "line": 83, "faulty": "output+=(String.format(\"%d IS the median\\n\",n3.value));", "type": "Replace", "seed": "output+=(String.format(\"%d is the median\\n\",n3.value));"}], "patch": "--- /tmp/GenProg_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_006/src/main/java/introclassJava/median_3b2376ab_006.java\t2018-11-05 17:59:11.389683000 -0500\n+++ /tmp/GenProg_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_006/patches_imkq/Patch_259/patched/tmp/GenProg_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_006/src/main/java/introclassJava/median_3b2376ab_006.java\t2018-12-02 14:23:08.577559088 -0500\n@@ -75,15 +75,17 @@\n             }\n         } else {\n             small.value = n2.value;\n+\t\t\tsmall.value = n2.value;\n             if (small.value > n3.value) {\n                 output += (String.format (\"%d is the median\\n\", n2.value));\n             } else if (n3.value > n1.value) {\n                 output += (String.format (\"%d is the median\\n\", n1.value));\n             } else {\n-                output += (String.format (\"%d IS the median\\n\", n3.value));\n+                output += (String.format(\"%d is the median\\n\", n3.value));\n             }\n         }\n         if (true)\n-            return;;\n+            return;output += (String\n+\t\t\t\t\t.format(\"Please enter 3 numbers separated by spaces > \"));\n     }\n }\n\n\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_006", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 00:15:27.375905", "repair_begin": "2018-12-05 00:06:38.512727", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_3b2376ab_006.java", "line": 83, "faulty": "output+=(String.format(\"%d IS the median\\n\",n3.value));", "type": "Replace", "seed": "output+=(String.format(\"%d is the median\\n\",n3.value));"}], "patch": "--- /tmp/RSRepair_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_006/src/main/java/introclassJava/median_3b2376ab_006.java\t2018-11-28 17:54:20.967962000 -0500\n+++ /tmp/RSRepair_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_006/patches_8hjc/Patch_751/patched/tmp/RSRepair_IntroClassJava_median_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_006/src/main/java/introclassJava/median_3b2376ab_006.java\t2018-12-04 18:10:30.298747533 -0500\n@@ -80,7 +80,7 @@\n             } else if (n3.value > n1.value) {\n                 output += (String.format (\"%d is the median\\n\", n1.value));\n             } else {\n-                output += (String.format (\"%d IS the median\\n\", n3.value));\n+                output += (String.format(\"%d is the median\\n\", n3.value));\n             }\n         }\n         if (true)\n\n\n"}]}}, {"bug_id": "3cf6d33ab0357953aa5826c67dc74c4aa483f16ef04c973a68d58cda6f19ea712954b24f366f880b9c18b628c6605eabc4d3e80dc4aa120fac80fe680e2e708f_007", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:54:26.831994", "repair_begin": "2018-12-05 21:54:15.079062", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 69, "class": "introclassJava.median_3cf6d33a_007"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_3cf6d33a_007.java\n+++ b/src/main/java/introclassJava/median_3cf6d33a_007.java\n@@ -68,7 +68,6 @@\n             output += (String.format (\"%d is the median\\n\", b.value));\n-        } else if ((b.value > a.value && a.value > c.value)\n-                   || (c.value > a.value && a.value > b.value)) {\n+        } else if ((introclassJava.median_3cf6d33a_007.this.output.length()==0) || (!(((((c.value) > (a.value))) && (((b.value) > (a.value)))) || ((((a.value) > (b.value))) && (((a.value) > (c.value))))))) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if ((a.value > c.value && c.value > b.value)\n-                   || (b.value > c.value && c.value > a.value)) {\n+        || (b.value > c.value && c.value > a.value)) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n"}]}}, {"bug_id": "6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-08 04:23:27.380965", "repair_begin": "2018-12-08 04:23:20.458288", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/median_6aaeaf2f_000.java\\n+++ introclassJava\\/median_6aaeaf2f_000.java\\n@@ -67,7 +67,7 @@\\n \\t\\tif ((((a.value) > (b.value)) && ((a.value) < (c.value))) || \\n \\t\\t(((a.value) < (b.value)) && ((a.value) > (c.value)))) {\\n \\t\\t\\tmedian.value = a.value;\\n-\\t\\t}else \\t\\t\\tif ((((b.value) > (a.value)) && ((c.value) > (b.value))) || \\n+\\t\\t}else \\t\\t\\tif ((((b.value) >= (a.value)) && ((c.value) > (b.value))) || \\n \\t\\t\\t(((b.value) < (a.value)) && ((b.value) > (c.value)))) {\\n \\t\\t\\t\\tmedian.value = b.value;\\n \\t\\t\\t}else {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((b.value) > (a.value)) && ((c.value) > (b.value))) || \\n(((b.value) < (a.value)) && ((b.value) > (c.value)))", "PATCH_HUNK_CODE": "((\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(b.value) >= (a.value)) && ((c.value) > (b.value))) || \\n(((b.value) < (a.value)) && ((b.value) > (c.value)))", "LOCATION": "introclassJava.median_6aaeaf2f_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000\\/.\\/output_astor\\/AstorMain-median-6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000\\/\\/src\\/\\/variant-5_f\\/introclassJava\\/median_6aaeaf2f_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000\\/output_astor\\/AstorMain-median-6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000\\/src\\/default\\/introclassJava\\/median_6aaeaf2f_000.java", "LINE": "70", "MP_RANKING": "0", "SUSPICIOUNESS": "0.302", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "1", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_median_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000\\/.\\/output_astor\\/AstorMain-median-6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:49:16.506309", "repair_begin": "2018-12-05 21:48:52.757022", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 70, "class": "introclassJava.median_6aaeaf2f_000"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/median_6aaeaf2f_000.java\n+++ b/src/main/java/introclassJava/median_6aaeaf2f_000.java\n@@ -69,7 +69,11 @@\n             median.value = a.value;\n-        } else if (((b.value > a.value) && (c.value > b.value))\n-                   || ((b.value < a.value) && (b.value > c.value))) {\n-            median.value = b.value;\n         } else {\n-            median.value = c.value;\n+            if ((!(((!((((b.value) > (a.value))) || (((b.value) < (a.value))))) && (((c.value) > (b.value)))) || (1 == introclassJava.median_6aaeaf2f_000.this.output.length()))) && (a!=null)) {\n+                if (((b.value > a.value) && (c.value > b.value))\n+                || ((b.value < a.value) && (b.value > c.value))) {\n+                    median.value = b.value;\n+                } else {\n+                    median.value = c.value;\n+                }\n+            }\n         }\n"}]}}, {"bug_id": "6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003", "tool": "ARJA", "nb_patch": 19, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-03 00:19:21.367753", "repair_begin": "2018-12-03 00:12:36.046623", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_6e464f2b_003.java", "line": 63, "faulty": "a.value=scanner.nextInt();", "type": "InsertBefore", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_6e464f2b_003.java", "line": 65, "faulty": "c.value=scanner.nextInt();", "type": "Delete", "seed": ";"}, {"path": "src/main/java/introclassJava/median_6e464f2b_003.java", "line": 76, "faulty": ";", "type": "Replace", "seed": "output+=(String.format(\"%d is the median\\n\",c.value));"}], "patch": "--- /tmp/Arja_IntroClassJava_median_6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003/src/main/java/introclassJava/median_6e464f2b_003.java\t2018-11-05 17:59:11.421684000 -0500\n+++ /tmp/Arja_IntroClassJava_median_6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003/patches_cm8s/Patch_231/patched/tmp/Arja_IntroClassJava_median_6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003/src/main/java/introclassJava/median_6e464f2b_003.java\t2018-12-02 18:13:33.325868531 -0500\n@@ -60,9 +60,9 @@\n         IntObj a = new IntObj (), b = new IntObj (), c = new IntObj ();\n         output +=\n             (String.format (\"Please enter 3 numbers separated by spaces > \"));\n-        a.value = scanner.nextInt ();\n+        c.value = scanner.nextInt();\n+\t\ta.value = scanner.nextInt ();\n         b.value = scanner.nextInt ();\n-        c.value = scanner.nextInt ();\n         if ((a.value > b.value && a.value < c.value)\n                 || (a.value < b.value && a.value > c.value)) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n@@ -73,6 +73,6 @@\n             output += (String.format (\"%d is the median\\n\", c.value));\n         }\n         if (true)\n-            return;;\n+            return;output += (String.format(\"%d is the median\\n\", c.value));\n     }\n }\n\n\n"}]}}, {"bug_id": "6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-08 04:35:57.182405", "repair_begin": "2018-12-08 04:35:50.138912", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/median_6e464f2b_003.java\\n+++ introclassJava\\/median_6e464f2b_003.java\\n@@ -66,7 +66,7 @@\\n \\t\\tif ((((a.value) > (b.value)) && ((a.value) < (c.value))) || \\n \\t\\t(((a.value) < (b.value)) && ((a.value) > (c.value)))) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"%d is the median\\\\n\\\", a.value);\\n-\\t\\t}else \\t\\t\\tif ((((b.value) > (a.value)) && ((b.value) < (c.value))) || \\n+\\t\\t}else \\t\\t\\tif ((((b.value) >= (a.value)) && ((b.value) < (c.value))) || \\n \\t\\t\\t(((b.value) < (a.value)) && ((b.value) > (c.value)))) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"%d is the median\\\\n\\\", b.value);\\n \\t\\t\\t}else {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((b.value) > (a.value)) && ((b.value) < (c.value))) || \\n(((b.value) < (a.value)) && ((b.value) > (c.value)))", "PATCH_HUNK_CODE": "((\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(b.value) >= (a.value)) && ((b.value) < (c.value))) || \\n(((b.value) < (a.value)) && ((b.value) > (c.value)))", "LOCATION": "introclassJava.median_6e464f2b_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003\\/.\\/output_astor\\/AstorMain-median-6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003\\/\\/src\\/\\/variant-5_f\\/introclassJava\\/median_6e464f2b_003.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003\\/output_astor\\/AstorMain-median-6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003\\/src\\/default\\/introclassJava\\/median_6e464f2b_003.java", "LINE": "69", "MP_RANKING": "0", "SUSPICIOUNESS": "0.302", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "1", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_median_6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003\\/.\\/output_astor\\/AstorMain-median-6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:47:31.767586", "repair_begin": "2018-12-05 21:47:25.857180", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 69, "class": "introclassJava.median_6e464f2b_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_6e464f2b_003.java\n+++ b/src/main/java/introclassJava/median_6e464f2b_003.java\n@@ -68,4 +68,3 @@\n             output += (String.format (\"%d is the median\\n\", a.value));\n-        } else if ((b.value > a.value && b.value < c.value)\n-                   || (b.value < a.value && b.value > c.value)) {\n+        } else if (((((b.value) < (a.value)) && ((b.value) > (c.value)))) || ((!(((b.value) < (a.value)))) && (((b.value) < (c.value))))) {\n             output += (String.format (\"%d is the median\\n\", b.value));\n"}]}}, {"bug_id": "36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-08 04:31:23.261319", "repair_begin": "2018-12-08 04:31:16.100950", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/median_36d8008b_000.java\\n+++ introclassJava\\/median_36d8008b_000.java\\n@@ -67,7 +67,7 @@\\n \\t\\tif ((((a.value) < (b.value)) && ((a.value) > (c.value))) || (((a.value) > (b.value)) && \\n \\t\\t((a.value) < (c.value)))) {\\n \\t\\t\\td.value = a.value;\\n-\\t\\t}else \\t\\t\\tif ((((b.value) > (a.value)) && ((b.value) < (c.value))) || (((b.value) < (a.value)) && \\n+\\t\\t}else \\t\\t\\tif ((((b.value) >= (a.value)) && ((b.value) < (c.value))) || (((b.value) < (a.value)) && \\n \\t\\t\\t((b.value) > (c.value)))) {\\n \\t\\t\\t\\td.value = b.value;\\n \\t\\t\\t}else {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((b.value) > (a.value)) && ((b.value) < (c.value))) || (((b.value) < (a.value)) && \\n((b.value) > (c.value)))", "PATCH_HUNK_CODE": "((\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n(b.value) >= (a.value)) && ((b.value) < (c.value))) || (((b.value) < (a.value)) && \\n((b.value) > (c.value)))", "LOCATION": "introclassJava.median_36d8008b_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000\\/.\\/output_astor\\/AstorMain-median-36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000\\/\\/src\\/\\/variant-5_f\\/introclassJava\\/median_36d8008b_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000\\/output_astor\\/AstorMain-median-36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000\\/src\\/default\\/introclassJava\\/median_36d8008b_000.java", "LINE": "70", "MP_RANKING": "0", "SUSPICIOUNESS": "0.302", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "5", "TIME": "1", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_median_36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000\\/.\\/output_astor\\/AstorMain-median-36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000\\/\\/bin\\/\\/variant-5"}]}}, {"bug_id": "36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:49:25.837182", "repair_begin": "2018-12-05 21:49:03.339623", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 70, "class": "introclassJava.median_36d8008b_000"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/median_36d8008b_000.java\n+++ b/src/main/java/introclassJava/median_36d8008b_000.java\n@@ -69,7 +69,11 @@\n             d.value = a.value;\n-        } else if (b.value > a.value && b.value < c.value || b.value < a.value\n-                   && b.value > c.value) {\n-            d.value = b.value;\n         } else {\n-            d.value = c.value;\n+            if ((((((b.value) > (a.value)) && ((b.value) < (c.value))) || (((b.value) < (a.value)) && ((b.value) > (c.value)))) && ((((b.value) > (a.value)) && ((b.value) < (c.value))))) || ((!(((b.value) < (c.value)))) || (((b.value) < (a.value))))) {\n+                if (b.value > a.value && b.value < c.value || b.value < a.value\n+                && b.value > c.value) {\n+                    d.value = b.value;\n+                } else {\n+                    d.value = c.value;\n+                }\n+            }\n         }\n"}]}}, {"bug_id": "48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000", "tool": "jGenProg", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-06 22:43:34.995282", "repair_begin": "2018-12-06 22:42:56.774329", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/median_48b82975_000.java\\n+++ introclassJava\\/median_48b82975_000.java\\n@@ -66,13 +66,13 @@\\n \\t\\tif ((((a.value) <= (b.value)) && ((b.value) <= (c.value))) || \\n \\t\\t(((c.value) <= (b.value)) && ((b.value) <= (a.value)))) {\\n \\t\\t\\tthis.output += java.lang.String.format(\\\"%d is the median\\\\n\\\", b.value);\\n-\\t\\t}\\n-\\t\\tif ((((b.value) <= (a.value)) && ((a.value) <= (c.value))) || \\n-\\t\\t(((c.value) <= (a.value)) && ((a.value) <= (b.value)))) {\\n-\\t\\t\\tthis.output += java.lang.String.format(\\\"%d is the median\\\\n\\\", a.value);\\n-\\t\\t}else {\\n-\\t\\t\\tthis.output += java.lang.String.format(\\\"%d is the median\\\\n\\\", c.value);\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\tif (true) \\n-\\t\\t{ \\t\\t\\treturn;}\\n+\\t\\t\\t\\treturn;} \\t\\tif ((((b.value) <= (a.value)) && ((a.value) <= (c.value))) || (((c.value) <= (a.value)) && ((a.value) <= (b.value)))) { \\t\\t\\tthis.output += java.lang.String.format(\\\"%d is the median\\\\n\\\", a.value);}else { \\t\\t\\tthis.output += java.lang.String.format(\\\"%d is the median\\\\n\\\", c.value);} \\t\\tif (true) { \\t\\t\\treturn;}\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtOperatorAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "this.output += java.lang.String.format(\\\"%d is the median\\\\n\\\", b.value)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (true)\\n\\treturn;", "INGREDIENT_PARENT": "if (true)\\n\\treturn;", "LOCATION": "introclassJava.median_48b82975_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_IntroClassJava_median_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/.\\/output_astor\\/AstorMain-median-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/\\/src\\/\\/variant-450_f\\/introclassJava\\/median_48b82975_000.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_IntroClassJava_median_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/output_astor\\/AstorMain-median-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/src\\/default\\/introclassJava\\/median_48b82975_000.java", "LINE": "68", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "225", "VARIANT_ID": "450", "TIME": "34", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_IntroClassJava_median_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/.\\/output_astor\\/AstorMain-median-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_000\\/\\/bin\\/\\/variant-450"}]}}, {"bug_id": "89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010", "tool": "GenProg-A", "nb_patch": 2, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-02 20:45:18.908357", "repair_begin": "2018-12-02 20:36:38.701802", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 76, "faulty": "m.value=b.value;", "type": "Delete", "seed": "if (b.value == c.value || b.value == a.value) {\n  m.value=b.value;\n}\n else if (c.value == a.value || c.value == b.value) {\n  m.value=c.value;\n}\n else {\n  if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n    m.value=b.value;\n  }\n else   if ((b.value >= a.value && b.value <= c.value) || (b.value >= c.value && b.value <= a.value)) {\n    m.value=b.value;\n  }\n else   if ((c.value >= a.value && c.value <= b.value) || (c.value >= b.value && c.value <= a.value)) {\n    m.value=c.value;\n  }\n}"}, {"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 65, "faulty": "b.value=scanner.nextInt();", "type": "InsertBefore", "seed": "m.value=a.value;"}], "patch": "--- /tmp/GenProg_IntroClassJava_median_89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010/src/main/java/introclassJava/median_89b1a701_010.java\t2018-11-05 17:59:11.441684000 -0500\n+++ /tmp/GenProg_IntroClassJava_median_89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010/patches_uarm/Patch_452/patched/tmp/GenProg_IntroClassJava_median_89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010/src/main/java/introclassJava/median_89b1a701_010.java\t2018-12-02 14:38:46.920210395 -0500\n@@ -62,7 +62,8 @@\n         output +=\n             (String.format (\"Please enter 3 numbers separated by spaces > \"));\n         a.value = scanner.nextInt ();\n-        b.value = scanner.nextInt ();\n+        m.value = a.value;\n+\t\tb.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n         if (a.value == b.value || a.value == c.value) {\n             m.value = a.value;\n@@ -73,7 +74,6 @@\n         } else {\n             if ((a.value >= b.value && a.value <= c.value)\n                     || (a.value >= c.value && a.value <= b.value)) {\n-                m.value = b.value;\n             } else if ((b.value >= a.value && b.value <= c.value)\n                        || (b.value >= c.value && b.value <= a.value)) {\n                 m.value = b.value;\n\n\n"}]}}, {"bug_id": "89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 00:07:11.038573", "repair_begin": "2018-12-04 23:58:25.278215", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 65, "faulty": "b.value=scanner.nextInt();", "type": "InsertBefore", "seed": "m.value=a.value;"}, {"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 76, "faulty": "m.value=b.value;", "type": "Replace", "seed": "m.value=a.value;"}], "patch": "--- /tmp/RSRepair_IntroClassJava_median_89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010/src/main/java/introclassJava/median_89b1a701_010.java\t2018-11-28 17:54:21.039963000 -0500\n+++ /tmp/RSRepair_IntroClassJava_median_89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010/patches_j5iz/Patch_1273/patched/tmp/RSRepair_IntroClassJava_median_89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010/src/main/java/introclassJava/median_89b1a701_010.java\t2018-12-04 18:04:52.621098866 -0500\n@@ -62,7 +62,8 @@\n         output +=\n             (String.format (\"Please enter 3 numbers separated by spaces > \"));\n         a.value = scanner.nextInt ();\n-        b.value = scanner.nextInt ();\n+        m.value = a.value;\n+\t\tb.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n         if (a.value == b.value || a.value == c.value) {\n             m.value = a.value;\n@@ -73,7 +74,7 @@\n         } else {\n             if ((a.value >= b.value && a.value <= c.value)\n                     || (a.value >= c.value && a.value <= b.value)) {\n-                m.value = b.value;\n+                m.value = a.value;\n             } else if ((b.value >= a.value && b.value <= c.value)\n                        || (b.value >= c.value && b.value <= a.value)) {\n                 m.value = b.value;\n\n\n"}]}}, {"bug_id": "90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_000", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:53:11.297582", "repair_begin": "2018-12-05 21:52:54.500639", "patches": [{"nb_test_that_execute_statement": 8, "patchLocation": {"line": 75, "class": "introclassJava.median_90a14c1a_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_90a14c1a_000.java\n+++ b/src/main/java/introclassJava/median_90a14c1a_000.java\n@@ -74,10 +74,9 @@\n             output += (String.format (\"%d is the median\\n\", n3.value));\n-        } else if ((n2.value > n1.value) && (n2.value > n3.value)\n-                   && (n1.value > n3.value)) {\n+        } else if ((n2!=null) && ((((n2.value) > (n3.value))) || (!(((n2.value) > (n1.value)))))) {\n             output += (String.format (\"%d is the median\\n\", n1.value));\n         } else if ((n3.value > n1.value) && (n3.value > n2.value)\n-                   && (n1.value > n2.value)) {\n+        && (n1.value > n2.value)) {\n             output += (String.format (\"%d is the median\\n\", n1.value));\n         } else if ((n3.value > n1.value) && (n3.value > n2.value)\n-                   && (n2.value > n1.value)) {\n+        && (n2.value > n1.value)) {\n             output += (String.format (\"%d is the median\\n\", n2.value));\n"}]}}, {"bug_id": "93f87bf20be12abd3b52e14015efb6d78b6038d2022e0ab5889979f9c6b6c8c757d6b5a59feae9f8415158057992ae837da76609dc156ea76b5cca7a43a4678b_012", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:51:09.298657", "repair_begin": "2018-12-05 21:51:01.631622", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 66, "class": "introclassJava.median_93f87bf2_012"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_93f87bf2_012.java\n+++ b/src/main/java/introclassJava/median_93f87bf2_012.java\n@@ -65,10 +65,9 @@\n         int3.value = scanner.nextInt ();\n-        if (((int1.value <= int2.value) && (int1.value >= int3.value))\n-                || ((int1.value <= int2.value) && (int1.value >= int3.value))) {\n+        if ((!((((int1.value) >= (int3.value))) || (((int1.value) <= (int2.value))))) || ((((int1.value) <= (int2.value)) && ((int1.value) >= (int3.value))))) {\n             output += (String.format (\"%d is the median\\n\", int1.value));\n         } else if ((((int2.value <= int1.value)) && (int2.value >= int3.value))\n-                   || ((int2.value <= int3.value) && (int2.value >= int1.value))) {\n+        || ((int2.value <= int3.value) && (int2.value >= int1.value))) {\n             output += (String.format (\"%d is the median\\n\", int2.value));\n         } else if (((int3.value <= int1.value) && (int3.value >= int2.value))\n-                   || ((int3.value <= int2.value) && (int3.value >= int1.value))) {\n+        || ((int3.value <= int2.value) && (int3.value >= int1.value))) {\n             output += (String.format (\"%d is the median\\n\", int3.value));\n"}]}}, {"bug_id": "93f87bf20be12abd3b52e14015efb6d78b6038d2022e0ab5889979f9c6b6c8c757d6b5a59feae9f8415158057992ae837da76609dc156ea76b5cca7a43a4678b_015", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:51:14.068822", "repair_begin": "2018-12-05 21:51:04.353865", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 66, "class": "introclassJava.median_93f87bf2_015"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_93f87bf2_015.java\n+++ b/src/main/java/introclassJava/median_93f87bf2_015.java\n@@ -65,10 +65,9 @@\n         int3.value = scanner.nextInt ();\n-        if (((int1.value <= int2.value) && (int1.value >= int3.value))\n-                || ((int1.value <= int2.value) && (int1.value >= int3.value))) {\n+        if (!((((((int1.value) >= (int3.value))) || (((int1.value) <= (int2.value)))) || (introclassJava.median_93f87bf2_015.this.output.length()==0)) && (!((((int1.value) <= (int2.value)) && ((int1.value) >= (int3.value))) || (((int1.value) <= (int2.value)) && ((int1.value) >= (int3.value))))))) {\n             output += (String.format (\"%d is the median \\n\", int1.value));\n         } else if ((((int2.value <= int1.value)) && (int2.value >= int3.value))\n-                   || ((int2.value <= int3.value) && (int2.value >= int1.value))) {\n+        || ((int2.value <= int3.value) && (int2.value >= int1.value))) {\n             output += (String.format (\"%d is the median \\n\", int2.value));\n         } else if (((int3.value <= int1.value) && (int3.value >= int2.value))\n-                   || ((int3.value <= int2.value) && (int3.value >= int1.value))) {\n+        || ((int3.value <= int2.value) && (int3.value >= int1.value))) {\n             output += (String.format (\"%d is the median \\n\", int3.value));\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000", "tool": "ARJA", "nb_patch": 80, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-03 00:21:06.174067", "repair_begin": "2018-12-03 00:12:47.026832", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 83, "faulty": ";", "type": "InsertBefore", "seed": "b.value=c.value;"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 68, "faulty": "temp2.value=b.value;", "type": "InsertBefore", "seed": "temp1.value=a.value;"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 73, "faulty": "if (b.value > c.value) {\n  b.value=c.value;\n  c.value=temp2.value;\n}", "type": "InsertBefore", "seed": "temp1.value=a.value;"}], "patch": "--- /tmp/Arja_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/src/main/java/introclassJava/median_317aa705_000.java\t2018-11-05 17:59:11.345682000 -0500\n+++ /tmp/Arja_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/patches_n01o/Patch_1386/patched/tmp/Arja_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/src/main/java/introclassJava/median_317aa705_000.java\t2018-12-02 18:18:42.349383163 -0500\n@@ -65,12 +65,14 @@\n         b.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n         temp1.value = a.value;\n-        temp2.value = b.value;\n+        temp1.value = a.value;\n+\t\ttemp2.value = b.value;\n         if (a.value > b.value) {\n             a.value = b.value;\n             b.value = temp1.value;\n         }\n-        if (b.value > c.value) {\n+        temp1.value = a.value;\n+\t\tif (b.value > c.value) {\n             b.value = c.value;\n             c.value = temp2.value;\n         }\n@@ -80,6 +82,7 @@\n         }\n         output += (String.format (\"%d is the median\", b.value));\n         if (true)\n-            return;;\n+            return;b.value = c.value;\n+\t\t\t;\n     }\n }\n\n\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000", "tool": "GenProg-A", "nb_patch": 276, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-02 20:43:31.865359", "repair_begin": "2018-12-02 20:36:24.608576", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 70, "faulty": "a.value=b.value;", "type": "Delete", "seed": "if (a.value > b.value) {\n  a.value=b.value;\n  b.value=temp1.value;\n}"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 71, "faulty": "b.value=temp1.value;", "type": "InsertBefore", "seed": "if (b.value > c.value) {\n  b.value=c.value;\n  c.value=temp2.value;\n}"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 71, "faulty": "b.value=temp1.value;", "type": "InsertBefore", "seed": "a.value=b.value;"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 83, "faulty": "return;", "type": "Replace", "seed": "a.value=b.value;"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 75, "faulty": "c.value=temp2.value;", "type": "Delete", "seed": "if (a.value > b.value) {\n  a.value=b.value;\n  b.value=temp1.value;\n}"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 70, "faulty": "a.value=b.value;", "type": "Delete", "seed": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 70, "faulty": "a.value=b.value;", "type": "Delete", "seed": "b.value=c.value;"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 83, "faulty": ";", "type": "Delete", "seed": "output+=(String.format(\"%d is the median\",b.value));"}], "patch": "--- /tmp/GenProg_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/src/main/java/introclassJava/median_317aa705_000.java\t2018-11-05 17:59:11.345682000 -0500\n+++ /tmp/GenProg_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/patches_990g/Patch_1611/patched/tmp/GenProg_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/src/main/java/introclassJava/median_317aa705_000.java\t2018-12-02 14:41:41.641209898 -0500\n@@ -67,12 +67,15 @@\n         temp1.value = a.value;\n         temp2.value = b.value;\n         if (a.value > b.value) {\n-            a.value = b.value;\n-            b.value = temp1.value;\n+            if (b.value > c.value) {\n+\t\t\t\tb.value = c.value;\n+\t\t\t\tc.value = temp2.value;\n+\t\t\t}\n+\t\t\ta.value = b.value;\n+\t\t\tb.value = temp1.value;\n         }\n         if (b.value > c.value) {\n             b.value = c.value;\n-            c.value = temp2.value;\n         }\n         if (a.value > b.value) {\n             a.value = b.value;\n@@ -80,6 +83,6 @@\n         }\n         output += (String.format (\"%d is the median\", b.value));\n         if (true)\n-            return;;\n+\t\t\ta.value = b.value;\n     }\n }\n\n\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000", "tool": "RSRepair-A", "nb_patch": 13, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 00:07:21.158004", "repair_begin": "2018-12-05 00:00:07.912936", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 71, "faulty": "b.value=temp1.value;", "type": "InsertBefore", "seed": "if (b.value > c.value) {\n  b.value=c.value;\n  c.value=temp2.value;\n}"}, {"path": "src/main/java/introclassJava/median_317aa705_000.java", "line": 78, "faulty": "a.value=b.value;", "type": "Replace", "seed": "if (a.value > b.value) {\n  a.value=b.value;\n  b.value=temp1.value;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/src/main/java/introclassJava/median_317aa705_000.java\t2018-11-28 17:54:20.919963000 -0500\n+++ /tmp/RSRepair_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/patches_ttek/Patch_1238/patched/tmp/RSRepair_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_000/src/main/java/introclassJava/median_317aa705_000.java\t2018-12-04 18:05:15.418153063 -0500\n@@ -68,14 +68,21 @@\n         temp2.value = b.value;\n         if (a.value > b.value) {\n             a.value = b.value;\n-            b.value = temp1.value;\n+            if (b.value > c.value) {\n+\t\t\t\tb.value = c.value;\n+\t\t\t\tc.value = temp2.value;\n+\t\t\t}\n+\t\t\tb.value = temp1.value;\n         }\n         if (b.value > c.value) {\n             b.value = c.value;\n             c.value = temp2.value;\n         }\n         if (a.value > b.value) {\n-            a.value = b.value;\n+            if (a.value > b.value) {\n+\t\t\t\ta.value = b.value;\n+\t\t\t\tb.value = temp1.value;\n+\t\t\t}\n             b.value = temp1.value;\n         }\n         output += (String.format (\"%d is the median\", b.value));\n\n\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002", "tool": "ARJA", "nb_patch": 60, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-03 00:21:02.138285", "repair_begin": "2018-12-03 00:12:12.058012", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_317aa705_002.java", "line": 83, "faulty": ";", "type": "Replace", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_317aa705_002.java", "line": 71, "faulty": "b.value=temp1.value;", "type": "InsertBefore", "seed": "if (b.value > c.value) {\n  b.value=c.value;\n  c.value=temp2.value;\n}"}], "patch": "--- /tmp/Arja_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/src/main/java/introclassJava/median_317aa705_002.java\t2018-11-05 17:59:11.361683000 -0500\n+++ /tmp/Arja_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/patches_9k23/Patch_566/patched/tmp/Arja_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/src/main/java/introclassJava/median_317aa705_002.java\t2018-12-02 18:14:55.852619321 -0500\n@@ -68,7 +68,11 @@\n         temp2.value = b.value;\n         if (a.value > c.value) {\n             a.value = b.value;\n-            b.value = temp1.value;\n+            if (b.value > c.value) {\n+\t\t\t\tb.value = c.value;\n+\t\t\t\tc.value = temp2.value;\n+\t\t\t}\n+\t\t\tb.value = temp1.value;\n         }\n         if (b.value > c.value) {\n             b.value = c.value;\n@@ -80,6 +84,6 @@\n         }\n         output += (String.format (\"%d is the median\", b.value));\n         if (true)\n-            return;;\n+            return;b.value = scanner.nextInt();\n     }\n }\n\n\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002", "tool": "GenProg-A", "nb_patch": 365, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-02 20:43:36.909107", "repair_begin": "2018-12-02 20:36:23.737988", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_317aa705_002.java", "line": 70, "faulty": "a.value=b.value;", "type": "InsertBefore", "seed": "if (b.value > c.value) {\n  b.value=c.value;\n  c.value=temp2.value;\n}"}, {"path": "src/main/java/introclassJava/median_317aa705_002.java", "line": 70, "faulty": "a.value=b.value;", "type": "Replace", "seed": "if (a.value > b.value) {\n  a.value=b.value;\n  b.value=temp1.value;\n}"}, {"path": "src/main/java/introclassJava/median_317aa705_002.java", "line": 71, "faulty": "b.value=temp1.value;", "type": "Replace", "seed": "b.value=temp1.value;"}, {"path": "src/main/java/introclassJava/median_317aa705_002.java", "line": 78, "faulty": "a.value=b.value;", "type": "InsertBefore", "seed": "c.value=temp2.value;"}, {"path": "src/main/java/introclassJava/median_317aa705_002.java", "line": 78, "faulty": "a.value=b.value;", "type": "Replace", "seed": "a.value=b.value;"}], "patch": "--- /tmp/GenProg_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/src/main/java/introclassJava/median_317aa705_002.java\t2018-11-05 17:59:11.361683000 -0500\n+++ /tmp/GenProg_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/patches_hf97/Patch_702/patched/tmp/GenProg_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/src/main/java/introclassJava/median_317aa705_002.java\t2018-12-02 14:38:46.792955490 -0500\n@@ -67,7 +67,14 @@\n         temp1.value = a.value;\n         temp2.value = b.value;\n         if (a.value > c.value) {\n-            a.value = b.value;\n+            if (b.value > c.value) {\n+\t\t\t\tb.value = c.value;\n+\t\t\t\tc.value = temp2.value;\n+\t\t\t}\n+\t\t\tif (a.value > b.value) {\n+\t\t\t\ta.value = b.value;\n+\t\t\t\tb.value = temp1.value;\n+\t\t\t}\n             b.value = temp1.value;\n         }\n         if (b.value > c.value) {\n@@ -75,7 +82,8 @@\n             c.value = temp2.value;\n         }\n         if (a.value > b.value) {\n-            a.value = b.value;\n+            c.value = temp2.value;\n+\t\t\ta.value = b.value;\n             b.value = temp1.value;\n         }\n         output += (String.format (\"%d is the median\", b.value));\n\n\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002", "tool": "RSRepair-A", "nb_patch": 4, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 00:09:24.135350", "repair_begin": "2018-12-05 00:00:42.230372", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_317aa705_002.java", "line": 69, "faulty": "if (a.value > c.value) {\n  a.value=b.value;\n  b.value=temp1.value;\n}", "type": "InsertBefore", "seed": "if (b.value > c.value) {\n  b.value=c.value;\n  c.value=temp2.value;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/src/main/java/introclassJava/median_317aa705_002.java\t2018-11-28 17:54:20.927963000 -0500\n+++ /tmp/RSRepair_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/patches_ddy5/Patch_1308/patched/tmp/RSRepair_IntroClassJava_median_317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_002/src/main/java/introclassJava/median_317aa705_002.java\t2018-12-04 18:07:18.397756904 -0500\n@@ -66,7 +66,11 @@\n         c.value = scanner.nextInt ();\n         temp1.value = a.value;\n         temp2.value = b.value;\n-        if (a.value > c.value) {\n+        if (b.value > c.value) {\n+\t\t\tb.value = c.value;\n+\t\t\tc.value = temp2.value;\n+\t\t}\n+\t\tif (a.value > c.value) {\n             a.value = b.value;\n             b.value = temp1.value;\n         }\n\n\n"}]}}, {"bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:46:02.314698", "repair_begin": "2018-12-05 21:45:52.598831", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 74, "class": "introclassJava.median_317aa705_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_317aa705_003.java\n+++ b/src/main/java/introclassJava/median_317aa705_003.java\n@@ -73,4 +73,3 @@\n         }\n-        if ((a.value > b.value && a.value < c.value)\n-                || (a.value < b.value && a.value > c.value)) {\n+        if (!(((((a.value) > (c.value))) && (((a.value) > (b.value)))) || (((((a.value) < (c.value))) && (((a.value) < (b.value)))) || (introclassJava.median_317aa705_003.this.output.length()==0)))) {\n             output += (String.format (\"%d is the median\", a.value));\n"}]}}, {"bug_id": "9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010", "tool": "ARJA", "nb_patch": 26, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-03 00:06:18.905697", "repair_begin": "2018-12-02 23:59:15.035776", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_90834803_010.java", "line": 67, "faulty": "if ((b.value >= a.value && a.value >= c.value) || (c.value <= a.value && a.value <= b.value)) {\n  output+=(String.format(\"%d is the median\\n\",a.value));\n}\n else if ((a.value >= b.value && b.value >= c.value) || (a.value <= b.value && b.value <= c.value)) {\n  output+=(String.format(\"%d is the median\\n\",b.value));\n}\n else if ((a.value >= c.value && c.value >= b.value) || (a.value <= c.value && c.value <= b.value)) {\n  output+=(String.format(\"%d is the median\\n\",c.value));\n}\n else {\n  if (true)   return;\n  ;\n}", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/median_90834803_010.java", "line": 78, "faulty": "return;", "type": "Delete", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_90834803_010.java", "line": 78, "faulty": ";", "type": "InsertBefore", "seed": "output+=(String.format(\"%d is the median\\n\",a.value));"}], "patch": "--- /tmp/Arja_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/src/main/java/introclassJava/median_90834803_010.java\t2018-11-05 17:59:11.465685000 -0500\n+++ /tmp/Arja_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/patches_xjtb/Patch_138/patched/tmp/Arja_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/src/main/java/introclassJava/median_90834803_010.java\t2018-12-02 17:59:51.903137764 -0500\n@@ -64,7 +64,8 @@\n         a.value = scanner.nextInt ();\n         b.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n-        if ((b.value >= a.value && a.value >= c.value)\n+        ;\n+\t\tif ((b.value >= a.value && a.value >= c.value)\n                 || (c.value <= a.value && a.value <= b.value)) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if ((a.value >= b.value && b.value >= c.value)\n@@ -75,7 +76,8 @@\n             output += (String.format (\"%d is the median\\n\", c.value));\n         } else {\n             if (true)\n-                return;;\n+\t\t\t\t;output += (String.format(\"%d is the median\\n\", a.value));\n+\t\t\t\t;\n         }\n         if (true)\n             return;;\n\n\n"}]}}, {"bug_id": "9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010", "tool": "GenProg-A", "nb_patch": 5, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-02 20:30:56.561125", "repair_begin": "2018-12-02 20:22:19.330160", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_90834803_010.java", "line": 78, "faulty": "return;", "type": "Delete", "seed": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));"}, {"path": "src/main/java/introclassJava/median_90834803_010.java", "line": 78, "faulty": "return;", "type": "Replace", "seed": "output+=(String.format(\"%d is the median\\n\",a.value));"}], "patch": "--- /tmp/GenProg_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/src/main/java/introclassJava/median_90834803_010.java\t2018-11-05 17:59:11.465685000 -0500\n+++ /tmp/GenProg_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/patches_gp5f/Patch_1150/patched/tmp/GenProg_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/src/main/java/introclassJava/median_90834803_010.java\t2018-12-02 14:27:29.225222272 -0500\n@@ -75,7 +75,7 @@\n             output += (String.format (\"%d is the median\\n\", c.value));\n         } else {\n             if (true)\n-                return;;\n+\t\t\t\toutput += (String.format(\"%d is the median\\n\", a.value));;\n         }\n         if (true)\n             return;;\n\n\n"}]}}, {"bug_id": "9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:51:48.327738", "repair_begin": "2018-12-05 21:51:38.770644", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 67, "class": "introclassJava.median_90834803_010"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_90834803_010.java\n+++ b/src/main/java/introclassJava/median_90834803_010.java\n@@ -66,10 +66,9 @@\n         c.value = scanner.nextInt ();\n-        if ((b.value >= a.value && a.value >= c.value)\n-                || (c.value <= a.value && a.value <= b.value)) {\n+        if ((!((((a.value) <= (b.value))) || ((((c.value) <= (a.value))) && (introclassJava.median_90834803_010.this.output!=null)))) || ((((c.value) <= (a.value)) && ((a.value) <= (b.value))))) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if ((a.value >= b.value && b.value >= c.value)\n-                   || (a.value <= b.value && b.value <= c.value)) {\n+        || (a.value <= b.value && b.value <= c.value)) {\n             output += (String.format (\"%d is the median\\n\", b.value));\n         } else if ((a.value >= c.value && c.value >= b.value)\n-                   || (a.value <= c.value && c.value <= b.value)) {\n+        || (a.value <= c.value && c.value <= b.value)) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n@@ -77,3 +76,3 @@\n             if (true)\n-                return;;\n+            return;;\n         }\n"}]}}, {"bug_id": "9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 00:13:50.328734", "repair_begin": "2018-12-05 00:06:47.025099", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_90834803_010.java", "line": 78, "faulty": "return;", "type": "InsertBefore", "seed": "output+=(String.format(\"%d is the median\\n\",a.value));"}], "patch": "--- /tmp/RSRepair_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/src/main/java/introclassJava/median_90834803_010.java\t2018-11-28 17:54:21.067962000 -0500\n+++ /tmp/RSRepair_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/patches_25m1/Patch_495/patched/tmp/RSRepair_IntroClassJava_median_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010/src/main/java/introclassJava/median_90834803_010.java\t2018-12-04 18:08:51.959991096 -0500\n@@ -74,8 +74,10 @@\n                    || (a.value <= c.value && c.value <= b.value)) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n         } else {\n-            if (true)\n-                return;;\n+            if (true) {\n+\t\t\t\toutput += (String.format(\"%d is the median\\n\", a.value));\n+\t\t\t\treturn;\n+\t\t\t};\n         }\n         if (true)\n             return;;\n\n\n"}]}}, {"bug_id": "cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-08 04:23:33.853845", "repair_begin": "2018-12-08 04:23:23.364239", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/median_cd2d9b5b_010.java\\n+++ introclassJava\\/median_cd2d9b5b_010.java\\n@@ -67,8 +67,8 @@\\n \\t\\tif ((((num1.value) < (num2.value)) && ((num1.value) > (num3.value))) || \\n \\t\\t(((num1.value) > (num2.value)) && ((num1.value) < (num3.value)))) {\\n \\t\\t\\tmedian.value = num1.value;\\n-\\t\\t}else \\t\\t\\tif ((((num2.value) < (num1.value)) && ((num2.value) > (num3.value))) || \\n-\\t\\t\\t(((num2.value) > (num1.value)) && ((num2.value) < (num3.value)))) {\\n+\\t\\t}else \\t\\t\\tif ((((num2.value) < (num1.value)) && ((num2.value) > (num3.value))) || ((\\n+\\t\\t\\t(num2.value) >= (num1.value)) && ((num2.value) < (num3.value)))) {\\n \\t\\t\\t\\tmedian.value = num2.value;\\n \\t\\t\\t}else {\\n \\t\\t\\t\\tmedian.value = num3.value;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((num2.value) < (num1.value)) && ((num2.value) > (num3.value))) || \\n(((num2.value) > (num1.value)) && ((num2.value) < (num3.value)))", "PATCH_HUNK_CODE": "(((num2.value) < (num1.value)) && ((num2.value) > (num3.value))) || ((\\n(num2.value) >= (num1.value)) && ((num2.value) < (num3.value)))", "LOCATION": "introclassJava.median_cd2d9b5b_010", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010\\/.\\/output_astor\\/AstorMain-median-cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010\\/\\/src\\/\\/variant-19_f\\/introclassJava\\/median_cd2d9b5b_010.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010\\/output_astor\\/AstorMain-median-cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010\\/src\\/default\\/introclassJava\\/median_cd2d9b5b_010.java", "LINE": "70", "MP_RANKING": "0", "SUSPICIOUNESS": "0.302", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "19", "TIME": "4", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_median_cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010\\/.\\/output_astor\\/AstorMain-median-cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010\\/\\/bin\\/\\/variant-19"}]}}, {"bug_id": "cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:55:00.584469", "repair_begin": "2018-12-05 21:54:46.071362", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 70, "class": "introclassJava.median_cd2d9b5b_010"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/median_cd2d9b5b_010.java\n+++ b/src/main/java/introclassJava/median_cd2d9b5b_010.java\n@@ -69,7 +69,11 @@\n             median.value = num1.value;\n-        } else if ((num2.value < num1.value && num2.value > num3.value)\n-                   || (num2.value > num1.value && num2.value < num3.value)) {\n-            median.value = num2.value;\n         } else {\n-            median.value = num3.value;\n+            if (((((num2.value) < (num1.value)) && ((num2.value) > (num3.value))) || (((num2.value) > (num1.value)) && ((num2.value) < (num3.value)))) || (((!((((num2.value) > (num1.value)) && ((num2.value) < (num3.value))))) && (!(((num2.value) < (num3.value))))) || ((((num2.value) < (num1.value))) && (((num2.value) < (num3.value)))))) {\n+                if ((num2.value < num1.value && num2.value > num3.value)\n+                || (num2.value > num1.value && num2.value < num3.value)) {\n+                    median.value = num2.value;\n+                } else {\n+                    median.value = num3.value;\n+                }\n+            }\n         }\n"}]}}, {"bug_id": "d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000", "tool": "ARJA", "nb_patch": 11, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-03 00:19:24.483828", "repair_begin": "2018-12-03 00:12:27.754213", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_d43d3207_000.java", "line": 63, "faulty": "int1.value=scanner.nextInt();", "type": "Replace", "seed": "int3.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_d43d3207_000.java", "line": 65, "faulty": "int3.value=scanner.nextInt();", "type": "Replace", "seed": "int1.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_d43d3207_000.java", "line": 76, "faulty": ";", "type": "InsertBefore", "seed": "int1.value=scanner.nextInt();"}], "patch": "--- /tmp/Arja_IntroClassJava_median_d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000/src/main/java/introclassJava/median_d43d3207_000.java\t2018-11-05 17:59:11.665689000 -0500\n+++ /tmp/Arja_IntroClassJava_median_d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000/patches_v1z2/Patch_1530/patched/tmp/Arja_IntroClassJava_median_d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000/src/main/java/introclassJava/median_d43d3207_000.java\t2018-12-02 18:18:07.921534581 -0500\n@@ -60,9 +60,9 @@\n         IntObj int1 = new IntObj (), int2 = new IntObj (), int3 = new IntObj ();\n         output +=\n             (String.format (\"Please enter 3 numbers separated by spaces > \"));\n-        int1.value = scanner.nextInt ();\n+        int3.value = scanner.nextInt();\n         int2.value = scanner.nextInt ();\n-        int3.value = scanner.nextInt ();\n+        int1.value = scanner.nextInt();\n         if ((int1.value < int2.value && int1.value > int3.value)\n                 || (int1.value > int2.value && int1.value < int3.value)) {\n             output += (String.format (\"%d is the median\\n\", int1.value));\n@@ -73,6 +73,7 @@\n             output += (String.format (\"%d is the median\\n\", int3.value));\n         }\n         if (true)\n-            return;;\n+            return;int1.value = scanner.nextInt();\n+\t\t\t;\n     }\n }\n\n\n"}]}}, {"bug_id": "d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-08 04:32:10.835796", "repair_begin": "2018-12-08 04:32:02.288894", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/median_d43d3207_000.java\\n+++ introclassJava\\/median_d43d3207_000.java\\n@@ -66,7 +66,7 @@\\n \\t\\tif ((((int1.value) < (int2.value)) && ((int1.value) > (int3.value))) || \\n \\t\\t(((int1.value) > (int2.value)) && ((int1.value) < (int3.value)))) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"%d is the median\\\\n\\\", int1.value);\\n-\\t\\t}else \\t\\t\\tif ((((int2.value) < (int3.value)) && ((int2.value) > (int1.value))) || \\n+\\t\\t}else \\t\\t\\tif ((((int2.value) < (int3.value)) && ((int2.value) >= (int1.value))) || \\n \\t\\t\\t(((int2.value) > (int3.value)) && ((int2.value) < (int1.value)))) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"%d is the median\\\\n\\\", int2.value);\\n \\t\\t\\t}else {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((int2.value) < (int3.value)) && ((int2.value) > (int1.value))) || \\n(((int2.value) > (int3.value)) && ((int2.value) < (int1.value)))", "PATCH_HUNK_CODE": "(\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n((int2.value) < (int3.value)) && ((int2.value) >= (int1.value))) || \\n(((int2.value) > (int3.value)) && ((int2.value) < (int1.value)))", "LOCATION": "introclassJava.median_d43d3207_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000\\/.\\/output_astor\\/AstorMain-median-d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000\\/\\/src\\/\\/variant-11_f\\/introclassJava\\/median_d43d3207_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_median_d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000\\/output_astor\\/AstorMain-median-d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000\\/src\\/default\\/introclassJava\\/median_d43d3207_000.java", "LINE": "69", "MP_RANKING": "0", "SUSPICIOUNESS": "0.302", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "11", "TIME": "2", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_median_d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000\\/.\\/output_astor\\/AstorMain-median-d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000\\/\\/bin\\/\\/variant-11"}]}}, {"bug_id": "d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:45:20.773048", "repair_begin": "2018-12-05 21:45:13.441476", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 69, "class": "introclassJava.median_d43d3207_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_d43d3207_000.java\n+++ b/src/main/java/introclassJava/median_d43d3207_000.java\n@@ -68,4 +68,3 @@\n             output += (String.format (\"%d is the median\\n\", int1.value));\n-        } else if ((int2.value < int3.value && int2.value > int1.value)\n-                   || (int2.value > int3.value && int2.value < int1.value)) {\n+        } else if (((((int2.value) < (int3.value)) && ((int2.value) > (int1.value))) || (((int2.value) > (int3.value)) && ((int2.value) < (int1.value)))) || ((!(((int2.value) < (int1.value)))) && (((int2.value) < (int3.value))))) {\n             output += (String.format (\"%d is the median\\n\", int2.value));\n"}]}}, {"bug_id": "e9c6206d3a4862876b0dead881ac55078f11e291f60215ab028651f06fcbee2a591a31a7727037774542df4fe051a89460d85f6067a0b9729ae86e4afe1e6e92_001", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "median", "result": {"repair_end": "2018-12-05 21:54:45.381184", "repair_begin": "2018-12-05 21:54:31.765452", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 69, "class": "introclassJava.median_e9c6206d_001"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_e9c6206d_001.java\n+++ b/src/main/java/introclassJava/median_e9c6206d_001.java\n@@ -68,7 +68,6 @@\n             output += (String.format (\"%d is the median\\n\", b.value));\n-        } else if ((b.value < a.value && a.value < c.value)\n-                   || (c.value < a.value && a.value < b.value)) {\n+        } else if (!((!((((b.value) < (a.value)) && ((a.value) < (c.value))) || (((c.value) < (a.value)) && ((a.value) < (b.value))))) && (((((a.value) < (c.value))) && (((a.value) < (b.value)))) || (((c.value) < (a.value)))))) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if ((a.value < c.value && c.value < b.value)\n-                   || (b.value < c.value && c.value < a.value)) {\n+        || (b.value < c.value && c.value < a.value)) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n"}]}}, {"bug_id": "1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003", "tool": "ARJA", "nb_patch": 24, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:20:23.955794", "repair_begin": "2018-12-03 00:12:37.314424", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", "line": 68, "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", "type": "InsertBefore", "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"}, {"path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", "line": 76, "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", "type": "Replace", "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_651/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:15:22.775021001 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +94,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"}]}}, {"bug_id": "1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:17:03.323160", "repair_begin": "2018-12-04 23:09:32.946097", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", "line": 68, "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", "type": "InsertBefore", "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"}, {"path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", "line": 80, "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", "type": "Replace", "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-28 17:54:21.391962000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_q1lq/Patch_453/patched/tmp/RSRepair_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-04 17:11:42.471215890 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -77,10 +98,7 @@\n             output += (String.format (\"%d is the smallest\\n\", C.value));\n             if (true)\n                 return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "ARJA", "nb_patch": 68, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:36:39.930665", "repair_begin": "2018-12-03 00:27:33.526482", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 67, "faulty": "n4.value=scanner.nextInt();", "type": "InsertBefore", "seed": "if (n4.value < n3.value) {\n  small.value=n4.value;\n}\n else if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 76, "faulty": "small.value=n4.value;", "type": "Replace", "seed": "if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 82, "faulty": "return;", "type": "Replace", "seed": "small.value=n3.value;"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/src/main/java/introclassJava/smallest_3b2376ab_007.java\t2018-11-05 17:59:11.841693000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/patches_ro9f/Patch_835/patched/tmp/Arja_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/src/main/java/introclassJava/smallest_3b2376ab_007.java\t2018-12-02 18:31:40.017425627 -0500\n@@ -64,7 +64,12 @@\n         n1.value = scanner.nextInt ();\n         n2.value = scanner.nextInt ();\n         n3.value = scanner.nextInt ();\n-        n4.value = scanner.nextInt ();\n+        if (n4.value < n3.value) {\n+\t\t\tsmall.value = n4.value;\n+\t\t} else if (n4.value < n1.value) {\n+\t\t\tsmall.value = n4.value;\n+\t\t}\n+\t\tn4.value = scanner.nextInt ();\n         small.value = n1.value;\n         if (n2.value < n1.value) {\n             small.value = n2.value;\n@@ -73,12 +78,14 @@\n             small.value = n3.value;\n         }\n         if (n4.value < n3.value) {\n-            small.value = n4.value;\n+            if (n4.value < n1.value) {\n+\t\t\t\tsmall.value = n4.value;\n+\t\t\t}\n         } else if (n4.value < n1.value) {\n             small.value = n4.value;\n         }\n         output += (String.format (\"%d is the smallest\\n\", small.value));\n         if (true)\n-            return;;\n+\t\t\tsmall.value = n3.value;;\n     }\n }\n\n\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 22:23:46.700870", "repair_begin": "2018-12-05 22:23:39.995541", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 75, "class": "introclassJava.smallest_3b2376ab_007"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_3b2376ab_007.java\n+++ b/src/main/java/introclassJava/smallest_3b2376ab_007.java\n@@ -74,3 +74,3 @@\n         }\n-        if (n4.value < n3.value) {\n+        if (false) {\n             small.value = n4.value;\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "GenProg-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-02 20:57:12.211416", "repair_begin": "2018-12-02 20:49:20.678725", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 67, "faulty": "n4.value=scanner.nextInt();", "type": "InsertBefore", "seed": "if (n3.value < n2.value) {\n  small.value=n3.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 76, "faulty": "small.value=n4.value;", "type": "Replace", "seed": "if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}], "patch": "--- /tmp/GenProg_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/src/main/java/introclassJava/smallest_3b2376ab_007.java\t2018-11-05 17:59:11.841693000 -0500\n+++ /tmp/GenProg_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/patches_1nhy/Patch_513/patched/tmp/GenProg_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/src/main/java/introclassJava/smallest_3b2376ab_007.java\t2018-12-02 14:51:31.214797725 -0500\n@@ -64,7 +64,10 @@\n         n1.value = scanner.nextInt ();\n         n2.value = scanner.nextInt ();\n         n3.value = scanner.nextInt ();\n-        n4.value = scanner.nextInt ();\n+        if (n3.value < n2.value) {\n+\t\t\tsmall.value = n3.value;\n+\t\t}\n+\t\tn4.value = scanner.nextInt ();\n         small.value = n1.value;\n         if (n2.value < n1.value) {\n             small.value = n2.value;\n@@ -73,7 +76,9 @@\n             small.value = n3.value;\n         }\n         if (n4.value < n3.value) {\n-            small.value = n4.value;\n+            if (n4.value < n1.value) {\n+\t\t\t\tsmall.value = n4.value;\n+\t\t\t}\n         } else if (n4.value < n1.value) {\n             small.value = n4.value;\n         }\n\n\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "jKali", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 02:29:08.435965", "repair_begin": "2018-12-05 02:28:58.364902", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_3b2376ab_007.java\\n+++ introclassJava\\/smallest_3b2376ab_007.java\\n@@ -72,7 +72,7 @@\\n \\t\\tif ((n3.value) < (n2.value)) {\\n \\t\\t\\tsmall.value = n3.value;\\n \\t\\t}\\n-\\t\\tif ((n4.value) < (n3.value)) {\\n+\\t\\tif (false) {\\n \\t\\t\\tsmall.value = n4.value;\\n \\t\\t}else \\t\\t\\tif ((n4.value) < (n1.value)) {\\n \\t\\t\\t\\tsmall.value = n4.value;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((n4.value) < (n3.value)) {\\n\\tsmall.value = n4.value;\\n}else \\tif ((n4.value) < (n1.value)) {\\n\\t\\tsmall.value = n4.value;\\n\\t}", "PATCH_HUNK_CODE": "if (false) {\\n\\tsmall.value = n4.value;\\n}else \\tif ((n4.value) < (n1.value)) {\\n\\t\\tsmall.value = n4.value;\\n\\t}", "LOCATION": "introclassJava.smallest_3b2376ab_007", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007\\/.\\/output_astor\\/AstorMain-smallest-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007\\/\\/src\\/\\/variant-16_f\\/introclassJava\\/smallest_3b2376ab_007.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007\\/output_astor\\/AstorMain-smallest-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007\\/src\\/default\\/introclassJava\\/smallest_3b2376ab_007.java", "LINE": "75", "MP_RANKING": "14", "SUSPICIOUNESS": "0.354", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "16", "TIME": "4", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007\\/.\\/output_astor\\/AstorMain-smallest-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007\\/\\/bin\\/\\/variant-16"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "Kali-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 01:02:54.517519", "repair_begin": "2018-12-05 01:02:47.330735", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 75, "faulty": "if (n4.value < n3.value) {\n  small.value=n4.value;\n}\n else if (n4.value < n1.value) {\n  small.value=n4.value;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/src/main/java/introclassJava/smallest_3b2376ab_007.java\t2018-11-05 17:59:11.841693000 -0500\n+++ /tmp/Kali_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/patches_rqxz/Patch_6/patched/tmp/Kali_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/src/main/java/introclassJava/smallest_3b2376ab_007.java\t2018-12-04 19:02:54.150743702 -0500\n@@ -72,7 +72,7 @@\n         if (n3.value < n2.value) {\n             small.value = n3.value;\n         }\n-        if (n4.value < n3.value) {\n+        if (false) {\n             small.value = n4.value;\n         } else if (n4.value < n1.value) {\n             small.value = n4.value;\n\n\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:19:27.354470", "repair_begin": "2018-12-05 21:18:54.982154", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 75, "class": "introclassJava.smallest_3b2376ab_007"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_3b2376ab_007.java\n+++ b/src/main/java/introclassJava/smallest_3b2376ab_007.java\n@@ -74,3 +74,3 @@\n         }\n-        if (n4.value < n3.value) {\n+        if (introclassJava.smallest_3b2376ab_007.this.output.length()==0) {\n             small.value = n4.value;\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "RSRepair-A", "nb_patch": 3, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:17:49.296804", "repair_begin": "2018-12-04 23:10:08.830899", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 66, "faulty": "n3.value=scanner.nextInt();", "type": "Replace", "seed": "n4.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 72, "faulty": "if (n3.value < n2.value) {\n  small.value=n3.value;\n}", "type": "Delete", "seed": "if (n4.value < n3.value) {\n  small.value=n4.value;\n}\n else if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/src/main/java/introclassJava/smallest_3b2376ab_007.java\t2018-11-28 17:54:21.499962000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/patches_w5nf/Patch_1517/patched/tmp/RSRepair_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007/src/main/java/introclassJava/smallest_3b2376ab_007.java\t2018-12-04 17:16:50.814261394 -0500\n@@ -63,15 +63,12 @@\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         n1.value = scanner.nextInt ();\n         n2.value = scanner.nextInt ();\n-        n3.value = scanner.nextInt ();\n+        n4.value = scanner.nextInt();\n         n4.value = scanner.nextInt ();\n         small.value = n1.value;\n         if (n2.value < n1.value) {\n             small.value = n2.value;\n         }\n-        if (n3.value < n2.value) {\n-            small.value = n3.value;\n-        }\n         if (n4.value < n3.value) {\n             small.value = n4.value;\n         } else if (n4.value < n1.value) {\n\n\n"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:43:28.468679", "repair_begin": "2018-12-08 04:43:05.027849", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_3b2376ab_008.java\\n+++ introclassJava\\/smallest_3b2376ab_008.java\\n@@ -65,7 +65,7 @@\\n \\t\\tn2.value = scanner.nextInt();\\n \\t\\tn3.value = scanner.nextInt();\\n \\t\\tn4.value = scanner.nextInt();\\n-\\t\\tif ((((n1.value) < (n2.value)) && ((n1.value) < (n3.value))) && ((n1.value) < (n4.value))) {\\n+\\t\\tif ((((n1.value) < (n2.value)) && ((n1.value) < (n3.value))) || ((n1.value) < (n4.value))) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"%d is the smallest \\\", n1.value);\\n \\t\\t}else \\t\\t\\tif ((((n2.value) < (n1.value)) && ((n2.value) < (n3.value))) && \\n \\t\\t\\t((n2.value) < (n4.value))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((n1.value) < (n2.value)) && ((n1.value) < (n3.value))) && ((n1.value) < (n4.value))", "PATCH_HUNK_CODE": "(((n1.value) < (n2.value)) && ((n1.value) < (n3.value))) || ((n1.value) < (n4.value))", "LOCATION": "introclassJava.smallest_3b2376ab_008", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008\\/.\\/output_astor\\/AstorMain-smallest-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_3b2376ab_008.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008\\/output_astor\\/AstorMain-smallest-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008\\/src\\/default\\/introclassJava\\/smallest_3b2376ab_008.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "17", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008\\/.\\/output_astor\\/AstorMain-smallest-3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:19:01.785112", "repair_begin": "2018-12-05 21:18:55.767776", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_3b2376ab_008"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_3b2376ab_008.java\n+++ b/src/main/java/introclassJava/smallest_3b2376ab_008.java\n@@ -69,7 +69,6 @@\n             output += (String.format (\"%d is the smallest \", n1.value));\n-        } else if (n2.value < n1.value && n2.value < n3.value\n-                   && n2.value < n4.value) {\n+        } else if (((n2.value) < (n4.value))) {\n             output += (String.format (\"%d is the smallest\", n2.value));\n         } else if (n3.value < n1.value && n3.value < n2.value\n-                   && n3.value < n4.value) {\n+        && n3.value < n4.value) {\n             output += (String.format (\"%d is the smallest\", n3.value));\n"}]}}, {"bug_id": "6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_001", "tool": "GenProg-A", "nb_patch": 250, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-02 20:46:56.052740", "repair_begin": "2018-12-02 20:37:33.640863", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 76, "faulty": "output+=(String.format(\"%d is the smallest\\n\",tmp.value));", "type": "InsertBefore", "seed": "if (tmp.value > int3.value) {\n  tmp.value=int3.value;\n}\n else if (tmp.value > int4.value) {\n  tmp.value=int4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 76, "faulty": "output+=(String.format(\"%d is the smallest\\n\",tmp.value));", "type": "InsertBefore", "seed": "if (tmp.value > int3.value) {\n  tmp.value=int3.value;\n}\n else if (tmp.value > int4.value) {\n  tmp.value=int4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 76, "faulty": "output+=(String.format(\"%d is the smallest\\n\",tmp.value));", "type": "InsertBefore", "seed": "if (tmp.value > int3.value) {\n  tmp.value=int3.value;\n}\n else if (tmp.value > int4.value) {\n  tmp.value=int4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 76, "faulty": "output+=(String.format(\"%d is the smallest\\n\",tmp.value));", "type": "InsertBefore", "seed": "if (tmp.value > int3.value) {\n  tmp.value=int3.value;\n}\n else if (tmp.value > int4.value) {\n  tmp.value=int4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 78, "faulty": ";", "type": "Delete", "seed": "output+=(String.format(\"%d is the smallest\\n\",tmp.value));"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 60, "faulty": "IntObj int1=new IntObj(), int2=new IntObj(), int3=new IntObj(), int4=new IntObj(), tmp=new IntObj();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 64, "faulty": "int1.value=scanner.nextInt();", "type": "Replace", "seed": "int1.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 78, "faulty": ";", "type": "Replace", "seed": "tmp.value=int1.value;"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 64, "faulty": "int1.value=scanner.nextInt();", "type": "InsertBefore", "seed": "tmp.value=int1.value;"}, {"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 67, "faulty": "int4.value=scanner.nextInt();", "type": "InsertBefore", "seed": "if (tmp.value > int4.value) {\n  tmp.value=int4.value;\n}"}], "patch": "--- /tmp/GenProg_IntroClassJava_smallest_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_001/src/main/java/introclassJava/smallest_6aaeaf2f_001.java\t2018-11-05 17:59:11.901695000 -0500\n+++ /tmp/GenProg_IntroClassJava_smallest_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_001/patches_jves/Patch_1955/patched/tmp/GenProg_IntroClassJava_smallest_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_001/src/main/java/introclassJava/smallest_6aaeaf2f_001.java\t2018-12-02 14:46:09.778166132 -0500\n@@ -57,14 +57,19 @@\n     }\n \n     public void exec () throws Exception {\n-        IntObj int1 = new IntObj (), int2 = new IntObj (), int3 =\n+        ;\n+\t\tIntObj int1 = new IntObj (), int2 = new IntObj (), int3 =\n             new IntObj (), int4 = new IntObj (), tmp = new IntObj ();\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n-        int1.value = scanner.nextInt ();\n+        tmp.value = int1.value;\n+\t\tint1.value = scanner.nextInt();\n         int2.value = scanner.nextInt ();\n         int3.value = scanner.nextInt ();\n-        int4.value = scanner.nextInt ();\n+        if (tmp.value > int4.value) {\n+\t\t\ttmp.value = int4.value;\n+\t\t}\n+\t\tint4.value = scanner.nextInt ();\n         tmp.value = int1.value;\n         if (int1.value > int2.value) {\n             tmp.value = int2.value;\n@@ -73,8 +78,28 @@\n         } else if (tmp.value > int4.value) {\n             tmp.value = int4.value;\n         }\n-        output += (String.format (\"%d is the smallest\\n\", tmp.value));\n+        if (tmp.value > int3.value) {\n+\t\t\ttmp.value = int3.value;\n+\t\t} else if (tmp.value > int4.value) {\n+\t\t\ttmp.value = int4.value;\n+\t\t}\n+\t\tif (tmp.value > int3.value) {\n+\t\t\ttmp.value = int3.value;\n+\t\t} else if (tmp.value > int4.value) {\n+\t\t\ttmp.value = int4.value;\n+\t\t}\n+\t\tif (tmp.value > int3.value) {\n+\t\t\ttmp.value = int3.value;\n+\t\t} else if (tmp.value > int4.value) {\n+\t\t\ttmp.value = int4.value;\n+\t\t}\n+\t\tif (tmp.value > int3.value) {\n+\t\t\ttmp.value = int3.value;\n+\t\t} else if (tmp.value > int4.value) {\n+\t\t\ttmp.value = int4.value;\n+\t\t}\n+\t\toutput += (String.format (\"%d is the smallest\\n\", tmp.value));\n         if (true)\n-            return;;\n+            return;tmp.value = int1.value;\n     }\n }\n\n\n"}]}}, {"bug_id": "6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_001", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:17:35.130661", "repair_begin": "2018-12-04 23:08:08.131036", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_6aaeaf2f_001.java", "line": 76, "faulty": "output+=(String.format(\"%d is the smallest\\n\",tmp.value));", "type": "InsertBefore", "seed": "if (tmp.value > int4.value) {\n  tmp.value=int4.value;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_001/src/main/java/introclassJava/smallest_6aaeaf2f_001.java\t2018-11-28 17:54:21.579962000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_001/patches_lxyx/Patch_396/patched/tmp/RSRepair_IntroClassJava_smallest_6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_001/src/main/java/introclassJava/smallest_6aaeaf2f_001.java\t2018-12-04 17:10:27.267558504 -0500\n@@ -73,7 +73,10 @@\n         } else if (tmp.value > int4.value) {\n             tmp.value = int4.value;\n         }\n-        output += (String.format (\"%d is the smallest\\n\", tmp.value));\n+        if (tmp.value > int4.value) {\n+\t\t\ttmp.value = int4.value;\n+\t\t}\n+\t\toutput += (String.format (\"%d is the smallest\\n\", tmp.value));\n         if (true)\n             return;;\n     }\n\n\n"}]}}, {"bug_id": "15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:47:30.299965", "repair_begin": "2018-12-08 04:47:07.003732", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_15cb07a7_007.java\\n+++ introclassJava\\/smallest_15cb07a7_007.java\\n@@ -65,7 +65,7 @@\\n \\t\\tscnd.value = scanner.nextInt();\\n \\t\\tthrd.value = scanner.nextInt();\\n \\t\\tfrth.value = scanner.nextInt();\\n-\\t\\tif ((((frst.value) < (scnd.value)) && ((frst.value) < (thrd.value))) && \\n+\\t\\tif ((((frst.value) < (scnd.value)) && ((frst.value) < (thrd.value))) || \\n \\t\\t((frst.value) < (frth.value))) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"%d is the smallest\\\\n\\\", frst.value);\\n \\t\\t}else \\t\\t\\tif ((((scnd.value) < (frst.value)) && ((scnd.value) < (thrd.value))) && \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((frst.value) < (scnd.value)) && ((frst.value) < (thrd.value))) && \\n((frst.value) < (frth.value))", "PATCH_HUNK_CODE": "(((frst.value) < (scnd.value)) && ((frst.value) < (thrd.value))) || \\n((frst.value) < (frth.value))", "LOCATION": "introclassJava.smallest_15cb07a7_007", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007\\/.\\/output_astor\\/AstorMain-smallest-15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_15cb07a7_007.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007\\/output_astor\\/AstorMain-smallest-15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007\\/src\\/default\\/introclassJava\\/smallest_15cb07a7_007.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "17", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007\\/.\\/output_astor\\/AstorMain-smallest-15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:15:40.489577", "repair_begin": "2018-12-05 21:15:33.583511", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 71, "class": "introclassJava.smallest_15cb07a7_007"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_15cb07a7_007.java\n+++ b/src/main/java/introclassJava/smallest_15cb07a7_007.java\n@@ -70,7 +70,6 @@\n             output += (String.format (\"%d is the smallest\\n\", frst.value));\n-        } else if (scnd.value < frst.value && scnd.value < thrd.value\n-                   && scnd.value < frth.value) {\n+        } else if (((scnd.value) < (frth.value))) {\n             output += (String.format (\"%d is the smallest\\n\", scnd.value));\n         } else if (thrd.value < frst.value && thrd.value < scnd.value\n-                   && thrd.value < frth.value) {\n+        && thrd.value < frth.value) {\n             output += (String.format (\"%d is the smallest\\n\", thrd.value));\n"}]}}, {"bug_id": "36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:47:30.286687", "repair_begin": "2018-12-08 04:47:07.226607", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_36d8008b_003.java\\n+++ introclassJava\\/smallest_36d8008b_003.java\\n@@ -65,7 +65,7 @@\\n \\t\\tb.value = scanner.nextInt();\\n \\t\\tc.value = scanner.nextInt();\\n \\t\\td.value = scanner.nextInt();\\n-\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))) {\\n+\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))) {\\n \\t\\t\\te.value = a.value;\\n \\t\\t}else \\t\\t\\tif ((((b.value) < (a.value)) && ((b.value) < (c.value))) && ((b.value) < (d.value))) {\\n \\t\\t\\t\\te.value = b.value;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))", "PATCH_HUNK_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))", "LOCATION": "introclassJava.smallest_36d8008b_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003\\/.\\/output_astor\\/AstorMain-smallest-36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_36d8008b_003.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003\\/output_astor\\/AstorMain-smallest-36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003\\/src\\/default\\/introclassJava\\/smallest_36d8008b_003.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "17", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003\\/.\\/output_astor\\/AstorMain-smallest-36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:15:42.413568", "repair_begin": "2018-12-05 21:15:34.614894", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_36d8008b_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_36d8008b_003.java\n+++ b/src/main/java/introclassJava/smallest_36d8008b_003.java\n@@ -69,3 +69,3 @@\n             e.value = a.value;\n-        } else if (b.value < a.value && b.value < c.value && b.value < d.value) {\n+        } else if (((b.value) < (d.value))) {\n             e.value = b.value;\n"}]}}, {"bug_id": "48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:40:14.288695", "repair_begin": "2018-12-08 04:39:51.176478", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_48b82975_001.java\\n+++ introclassJava\\/smallest_48b82975_001.java\\n@@ -65,7 +65,7 @@\\n \\t\\tb.value = scanner.nextInt();\\n \\t\\tc.value = scanner.nextInt();\\n \\t\\td.value = scanner.nextInt();\\n-\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))) {\\n+\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))) {\\n \\t\\t\\tr.value = a.value;\\n \\t\\t}else \\t\\t\\tif ((((b.value) < (a.value)) && ((b.value) < (c.value))) && ((b.value) < (d.value))) {\\n \\t\\t\\t\\tr.value = b.value;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))", "PATCH_HUNK_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))", "LOCATION": "introclassJava.smallest_48b82975_001", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001\\/.\\/output_astor\\/AstorMain-smallest-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_48b82975_001.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001\\/output_astor\\/AstorMain-smallest-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001\\/src\\/default\\/introclassJava\\/smallest_48b82975_001.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "17", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001\\/.\\/output_astor\\/AstorMain-smallest-48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:16:22.828966", "repair_begin": "2018-12-05 21:16:15.293452", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_48b82975_001"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_48b82975_001.java\n+++ b/src/main/java/introclassJava/smallest_48b82975_001.java\n@@ -69,3 +69,3 @@\n             r.value = a.value;\n-        } else if (b.value < a.value && b.value < c.value && b.value < d.value) {\n+        } else if (((b.value) < (d.value))) {\n             r.value = b.value;\n"}]}}, {"bug_id": "68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:47:29.078242", "repair_begin": "2018-12-08 04:47:05.669654", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_68eb0bb0_000.java\\n+++ introclassJava\\/smallest_68eb0bb0_000.java\\n@@ -65,7 +65,7 @@\\n \\t\\tb.value = scanner.nextInt();\\n \\t\\tc.value = scanner.nextInt();\\n \\t\\td.value = scanner.nextInt();\\n-\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))) {\\n+\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"%d is the smallest\\\\n\\\", a.value);\\n \\t\\t}else \\t\\t\\tif ((((b.value) < (a.value)) && ((b.value) < (c.value))) && ((b.value) < (d.value))) {\\n \\t\\t\\t\\toutput += java.lang.String.format(\\\"%d is the smallest\\\\n\\\", b.value);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))", "PATCH_HUNK_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))", "LOCATION": "introclassJava.smallest_68eb0bb0_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000\\/.\\/output_astor\\/AstorMain-smallest-68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_68eb0bb0_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000\\/output_astor\\/AstorMain-smallest-68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000\\/src\\/default\\/introclassJava\\/smallest_68eb0bb0_000.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "17", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000\\/.\\/output_astor\\/AstorMain-smallest-68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:20:19.714261", "repair_begin": "2018-12-05 21:20:12.517736", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_68eb0bb0_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_68eb0bb0_000.java\n+++ b/src/main/java/introclassJava/smallest_68eb0bb0_000.java\n@@ -69,3 +69,3 @@\n             output += (String.format (\"%d is the smallest\\n\", a.value));\n-        } else if (b.value < a.value && b.value < c.value && b.value < d.value) {\n+        } else if (((b.value) < (d.value))) {\n             output += (String.format (\"%d is the smallest\\n\", b.value));\n"}]}}, {"bug_id": "97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:39:24.071273", "repair_begin": "2018-12-08 04:39:00.975948", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_97f6b152_003.java\\n+++ introclassJava\\/smallest_97f6b152_003.java\\n@@ -65,7 +65,7 @@\\n \\t\\tnum2.value = scanner.nextInt();\\n \\t\\tnum3.value = scanner.nextInt();\\n \\t\\tnum4.value = scanner.nextInt();\\n-\\t\\tif ((((num1.value) < (num2.value)) && ((num1.value) < (num3.value))) && \\n+\\t\\tif ((((num1.value) < (num2.value)) && ((num1.value) < (num3.value))) || \\n \\t\\t((num1.value) < (num4.value))) {\\n \\t\\t\\tsmall.value = num1.value;\\n \\t\\t}else \\t\\t\\tif ((((num2.value) < (num1.value)) && ((num2.value) < (num3.value))) && \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((num1.value) < (num2.value)) && ((num1.value) < (num3.value))) && \\n((num1.value) < (num4.value))", "PATCH_HUNK_CODE": "(((num1.value) < (num2.value)) && ((num1.value) < (num3.value))) || \\n((num1.value) < (num4.value))", "LOCATION": "introclassJava.smallest_97f6b152_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003\\/.\\/output_astor\\/AstorMain-smallest-97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_97f6b152_003.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003\\/output_astor\\/AstorMain-smallest-97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003\\/src\\/default\\/introclassJava\\/smallest_97f6b152_003.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "17", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003\\/.\\/output_astor\\/AstorMain-smallest-97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:15:42.378069", "repair_begin": "2018-12-05 21:15:34.934162", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 71, "class": "introclassJava.smallest_97f6b152_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_97f6b152_003.java\n+++ b/src/main/java/introclassJava/smallest_97f6b152_003.java\n@@ -70,7 +70,6 @@\n             small.value = num1.value;\n-        } else if (num2.value < num1.value && num2.value < num3.value\n-                   && num2.value < num4.value) {\n+        } else if (((num2.value) < (num4.value))) {\n             small.value = num2.value;\n         } else if (num3.value < num1.value && num3.value < num2.value\n-                   && num3.value < num4.value) {\n+        && num3.value < num4.value) {\n             small.value = num3.value;\n"}]}}, {"bug_id": "346b1d3c1cdc3032d07222a8a5e0027a2abf95bb1697b9d367d7cca7db1af769d8298e232c56471a122f05e87e79f4bd965855c9c0f8b173ebc0ef5d0abebc7b_005", "tool": "ARJA", "nb_patch": 16, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:20:33.926956", "repair_begin": "2018-12-03 00:12:38.573913", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_346b1d3c_005.java", "line": 66, "faulty": "num_2.value=scanner.nextInt();", "type": "Delete", "seed": "output+=(String.format(\"%d is the smalles\\n\",b.value));"}, {"path": "src/main/java/introclassJava/smallest_346b1d3c_005.java", "line": 68, "faulty": "num_4.value=scanner.nextInt();", "type": "InsertBefore", "seed": "num_2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_346b1d3c_005.java", "line": 73, "faulty": "if (a.value <= b.value && a.value <= c.value && a.value <= d.value) {\n  output+=(String.format(\"%d is the smallest\\n\",a.value));\n}\n else if (b.value <= a.value && b.value <= c.value && b.value <= d.value) {\n  output+=(String.format(\"%d is the smalles\\n\",b.value));\n}\n else if (c.value <= a.value && c.value <= b.value && c.value <= d.value) {\n  output+=(String.format(\"%d is the smallest\\n\",c.value));\n}\n else if (d.value <= a.value && d.value <= b.value && d.value <= c.value) {\n  output+=(String.format(\"%d is the smallest\\n\",d.value));\n}", "type": "InsertBefore", "seed": "a.value=(num_1.value);"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_346b1d3c1cdc3032d07222a8a5e0027a2abf95bb1697b9d367d7cca7db1af769d8298e232c56471a122f05e87e79f4bd965855c9c0f8b173ebc0ef5d0abebc7b_005/src/main/java/introclassJava/smallest_346b1d3c_005.java\t2018-11-05 17:59:11.801692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_346b1d3c1cdc3032d07222a8a5e0027a2abf95bb1697b9d367d7cca7db1af769d8298e232c56471a122f05e87e79f4bd965855c9c0f8b173ebc0ef5d0abebc7b_005/patches_a2jx/Patch_1191/patched/tmp/Arja_IntroClassJava_smallest_346b1d3c1cdc3032d07222a8a5e0027a2abf95bb1697b9d367d7cca7db1af769d8298e232c56471a122f05e87e79f4bd965855c9c0f8b173ebc0ef5d0abebc7b_005/src/main/java/introclassJava/smallest_346b1d3c_005.java\t2018-12-02 18:17:36.384352125 -0500\n@@ -63,14 +63,15 @@\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         num_1.value = scanner.nextInt ();\n-        num_2.value = scanner.nextInt ();\n         num_3.value = scanner.nextInt ();\n-        num_4.value = scanner.nextInt ();\n+        num_2.value = scanner.nextInt();\n+\t\tnum_4.value = scanner.nextInt ();\n         a.value = (num_1.value);\n         b.value = (num_2.value);\n         c.value = (num_3.value);\n         d.value = (num_4.value);\n-        if (a.value <= b.value && a.value <= c.value && a.value <= d.value) {\n+        a.value = (num_1.value);\n+\t\tif (a.value <= b.value && a.value <= c.value && a.value <= d.value) {\n             output += (String.format (\"%d is the smallest\\n\", a.value));\n         } else if (b.value <= a.value && b.value <= c.value && b.value <= d.value) {\n             output += (String.format (\"%d is the smalles\\n\", b.value));\n\n\n"}]}}, {"bug_id": "769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_007", "tool": "ARJA", "nb_patch": 19, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:20:11.700478", "repair_begin": "2018-12-03 00:12:36.407046", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_769cd811_007.java", "line": 67, "faulty": "t.value=scanner.nextInt();", "type": "Replace", "seed": "z.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_769cd811_007.java", "line": 77, "faulty": "a.value=t.value;", "type": "Delete", "seed": "a.value=z.value;"}, {"path": "src/main/java/introclassJava/smallest_769cd811_007.java", "line": 81, "faulty": ";", "type": "InsertBefore", "seed": "t.value=scanner.nextInt();"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_007/src/main/java/introclassJava/smallest_769cd811_007.java\t2018-11-05 17:59:11.933696000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_007/patches_aczu/Patch_1462/patched/tmp/Arja_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_007/src/main/java/introclassJava/smallest_769cd811_007.java\t2018-12-02 18:18:33.211048197 -0500\n@@ -64,7 +64,7 @@\n         x.value = scanner.nextInt ();\n         y.value = scanner.nextInt ();\n         z.value = scanner.nextInt ();\n-        t.value = scanner.nextInt ();\n+        z.value = scanner.nextInt();\n         if (x.value > y.value) {\n             a.value = y.value;\n         } else {\n@@ -74,10 +74,10 @@\n             a.value = z.value;\n         }\n         if (z.value > t.value) {\n-            a.value = t.value;\n         }\n         output += (String.format (\"%d is the smallest\\n\", a.value));\n         if (true)\n-            return;;\n+            return;t.value = scanner.nextInt();\n+\t\t\t;\n     }\n }\n\n\n"}]}}, {"bug_id": "769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009", "tool": "ARJA", "nb_patch": 46, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:20:27.740066", "repair_begin": "2018-12-03 00:12:42.886558", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 64, "faulty": "a.value=scanner.nextInt();", "type": "InsertBefore", "seed": "if (a.value > b.value) {\n  x.value=b.value;\n}\n else {\n  x.value=a.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 67, "faulty": "d.value=scanner.nextInt();", "type": "Replace", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 76, "faulty": "if (c.value > d.value) {\n  x.value=d.value;\n}", "type": "Delete", "seed": "if (b.value > c.value) {\n  x.value=c.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 77, "faulty": "x.value=d.value;", "type": "InsertBefore", "seed": "if (a.value > b.value) {\n  x.value=b.value;\n}\n else {\n  x.value=a.value;\n}"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009/src/main/java/introclassJava/smallest_769cd811_009.java\t2018-11-05 17:59:11.937695000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009/patches_ro4g/Patch_1662/patched/tmp/Arja_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009/src/main/java/introclassJava/smallest_769cd811_009.java\t2018-12-02 18:19:22.030230805 -0500\n@@ -61,10 +61,15 @@\n             new IntObj (), x = new IntObj ();\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n-        a.value = scanner.nextInt ();\n+        if (a.value > b.value) {\n+\t\t\tx.value = b.value;\n+\t\t} else {\n+\t\t\tx.value = a.value;\n+\t\t}\n+\t\ta.value = scanner.nextInt ();\n         b.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n-        d.value = scanner.nextInt ();\n+        c.value = scanner.nextInt();\n         if (a.value > b.value) {\n             x.value = b.value;\n         } else {\n@@ -73,9 +78,6 @@\n         if (b.value > c.value) {\n             x.value = c.value;\n         }\n-        if (c.value > d.value) {\n-            x.value = d.value;\n-        }\n         output += (String.format (\"%d is the smallest\\n\", x.value));\n         if (true)\n             return;;\n\n\n"}]}}, {"bug_id": "769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009", "tool": "GenProg-A", "nb_patch": 12, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-02 20:43:59.780491", "repair_begin": "2018-12-02 20:36:11.346080", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 66, "faulty": "c.value=scanner.nextInt();", "type": "InsertBefore", "seed": "x.value=c.value;"}, {"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 77, "faulty": "x.value=d.value;", "type": "Replace", "seed": "if (a.value > b.value) {\n  x.value=b.value;\n}\n else {\n  x.value=a.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 67, "faulty": "d.value=scanner.nextInt();", "type": "Delete", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 67, "faulty": "d.value=scanner.nextInt();", "type": "Replace", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 76, "faulty": "if (c.value > d.value) {\n  x.value=d.value;\n}", "type": "Delete", "seed": "if (c.value > d.value) {\n  x.value=d.value;\n}"}], "patch": "--- /tmp/GenProg_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009/src/main/java/introclassJava/smallest_769cd811_009.java\t2018-11-05 17:59:11.937695000 -0500\n+++ /tmp/GenProg_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009/patches_cc6d/Patch_1473/patched/tmp/GenProg_IntroClassJava_smallest_769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009/src/main/java/introclassJava/smallest_769cd811_009.java\t2018-12-02 14:42:12.624581516 -0500\n@@ -63,8 +63,9 @@\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         a.value = scanner.nextInt ();\n         b.value = scanner.nextInt ();\n-        c.value = scanner.nextInt ();\n-        d.value = scanner.nextInt ();\n+        x.value = c.value;\n+\t\tc.value = scanner.nextInt ();\n+        c.value = scanner.nextInt();\n         if (a.value > b.value) {\n             x.value = b.value;\n         } else {\n@@ -73,9 +74,6 @@\n         if (b.value > c.value) {\n             x.value = c.value;\n         }\n-        if (c.value > d.value) {\n-            x.value = d.value;\n-        }\n         output += (String.format (\"%d is the smallest\\n\", x.value));\n         if (true)\n             return;;\n\n\n"}]}}, {"bug_id": "30074a0e036669b5681720e6481cc101877d52ee589bab434417ece22b4133ed584c6a84f80047c10ab47aa73a7807720b5375983e8b489e8e69978e5e0e8b71_007", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:16:52.058189", "repair_begin": "2018-12-04 23:07:28.410604", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_30074a0e_007.java", "line": 77, "faulty": "output+=(String.format(\"I don't know what I'm doing. \\n\"));", "type": "Replace", "seed": "output+=(String.format(\"%d is the smallest\\n\",a.value));"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_30074a0e036669b5681720e6481cc101877d52ee589bab434417ece22b4133ed584c6a84f80047c10ab47aa73a7807720b5375983e8b489e8e69978e5e0e8b71_007/src/main/java/introclassJava/smallest_30074a0e_007.java\t2018-11-28 17:54:21.419962000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_30074a0e036669b5681720e6481cc101877d52ee589bab434417ece22b4133ed584c6a84f80047c10ab47aa73a7807720b5375983e8b489e8e69978e5e0e8b71_007/patches_c1lw/Patch_354/patched/tmp/RSRepair_IntroClassJava_smallest_30074a0e036669b5681720e6481cc101877d52ee589bab434417ece22b4133ed584c6a84f80047c10ab47aa73a7807720b5375983e8b489e8e69978e5e0e8b71_007/src/main/java/introclassJava/smallest_30074a0e_007.java\t2018-12-04 17:09:33.832325194 -0500\n@@ -74,7 +74,7 @@\n         } else if (d.value < a.value && d.value < c.value && d.value < b.value) {\n             output += (String.format (\"%d is the smallest\\n\", d.value));\n         } else {\n-            output += (String.format (\"I don't know what I'm doing. \\n\"));\n+            output += (String.format(\"%d is the smallest\\n\", a.value));\n         }\n         if (true)\n             return;;\n\n\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "ARJA", "nb_patch": 51, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:34:44.750665", "repair_begin": "2018-12-03 00:27:10.606867", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 83, "faulty": ";", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/src/main/java/introclassJava/smallest_88394fc0_002.java\t2018-11-05 17:59:12.033698000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/patches_axgb/Patch_752/patched/tmp/Arja_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/src/main/java/introclassJava/smallest_88394fc0_002.java\t2018-12-02 18:30:16.097462657 -0500\n@@ -70,16 +70,14 @@\n         if (a.value > b.value) {\n             smallest.value = b.value;\n         }\n-        if (b.value > c.value) {\n-            smallest.value = c.value;\n-        }\n-        if (c.value > d.value) {\n-            smallest.value = d.value;\n-        } else if (a.value > d.value) {\n-            smallest.value = d.value;\n-        }\n+        if (a.value > d.value) {\n+\t\t\tsmallest.value = d.value;\n+\t\t}\n         output += (String.format (\"%d is the smallest\", smallest.value));\n         if (true)\n-            return;;\n+            return;if (a.value > d.value) {\n+\t\t\tsmallest.value = d.value;\n+\t\t}\n+\t\t\t;\n     }\n }\n\n\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 22:18:02.308064", "repair_begin": "2018-12-05 22:17:53.044253", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.smallest_88394fc0_002"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_88394fc0_002.java\n+++ b/src/main/java/introclassJava/smallest_88394fc0_002.java\n@@ -75,3 +75,3 @@\n         }\n-        if (c.value > d.value) {\n+        if (false) {\n             smallest.value = d.value;\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "GenProg-A", "nb_patch": 168, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-02 20:58:21.169740", "repair_begin": "2018-12-02 20:50:44.747823", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 83, "faulty": "return;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "InsertBefore", "seed": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 83, "faulty": ";", "type": "InsertBefore", "seed": "smallest.value=d.value;"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 83, "faulty": "return;", "type": "Replace", "seed": "smallest.value=d.value;"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Replace", "seed": "if (b.value > c.value) {\n  smallest.value=c.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 70, "faulty": "if (a.value > b.value) {\n  smallest.value=b.value;\n}", "type": "InsertBefore", "seed": "if (a.value > b.value) {\n  smallest.value=b.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Delete", "seed": "smallest.value=b.value;"}], "patch": "--- /tmp/GenProg_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/src/main/java/introclassJava/smallest_88394fc0_002.java\t2018-11-05 17:59:12.033698000 -0500\n+++ /tmp/GenProg_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/patches_rnx0/Patch_1629/patched/tmp/GenProg_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/src/main/java/introclassJava/smallest_88394fc0_002.java\t2018-12-02 14:57:04.389681312 -0500\n@@ -68,18 +68,20 @@\n         IntObj smallest = new IntObj ();\n         smallest.value = a.value;\n         if (a.value > b.value) {\n+\t\t\tsmallest.value = b.value;\n+\t\t}\n+\t\tif (a.value > b.value) {\n             smallest.value = b.value;\n         }\n         if (b.value > c.value) {\n-            smallest.value = c.value;\n-        }\n-        if (c.value > d.value) {\n-            smallest.value = d.value;\n-        } else if (a.value > d.value) {\n-            smallest.value = d.value;\n-        }\n+\t\t\tsmallest.value = c.value;\n+\t\t}\n+        if (a.value > d.value) {\n+\t\t\tsmallest.value = d.value;\n+\t\t}\n         output += (String.format (\"%d is the smallest\", smallest.value));\n         if (true)\n-            return;;\n+\t\t\tsmallest.value = d.value;smallest.value = d.value;\n+\t\t\t;\n     }\n }\n\n\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "jKali", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 02:34:24.015916", "repair_begin": "2018-12-05 02:34:13.050134", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_88394fc0_002.java\\n+++ introclassJava\\/smallest_88394fc0_002.java\\n@@ -73,7 +73,7 @@\\n \\t\\tif ((b.value) > (c.value)) {\\n \\t\\t\\tsmallest.value = c.value;\\n \\t\\t}\\n-\\t\\tif ((c.value) > (d.value)) {\\n+\\t\\tif (false) {\\n \\t\\t\\tsmallest.value = d.value;\\n \\t\\t}else \\t\\t\\tif ((a.value) > (d.value)) {\\n \\t\\t\\t\\tsmallest.value = d.value;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((c.value) > (d.value)) {\\n\\tsmallest.value = d.value;\\n}else \\tif ((a.value) > (d.value)) {\\n\\t\\tsmallest.value = d.value;\\n\\t}", "PATCH_HUNK_CODE": "if (false) {\\n\\tsmallest.value = d.value;\\n}else \\tif ((a.value) > (d.value)) {\\n\\t\\tsmallest.value = d.value;\\n\\t}", "LOCATION": "introclassJava.smallest_88394fc0_002", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002\\/.\\/output_astor\\/AstorMain-smallest-88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002\\/\\/src\\/\\/variant-16_f\\/introclassJava\\/smallest_88394fc0_002.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002\\/output_astor\\/AstorMain-smallest-88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002\\/src\\/default\\/introclassJava\\/smallest_88394fc0_002.java", "LINE": "76", "MP_RANKING": "14", "SUSPICIOUNESS": "0.354", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "16", "TIME": "4", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002\\/.\\/output_astor\\/AstorMain-smallest-88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002\\/\\/bin\\/\\/variant-16"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "Kali-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 01:10:18.083804", "repair_begin": "2018-12-05 01:10:10.800831", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/src/main/java/introclassJava/smallest_88394fc0_002.java\t2018-11-05 17:59:12.033698000 -0500\n+++ /tmp/Kali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/patches_70wg/Patch_6/patched/tmp/Kali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/src/main/java/introclassJava/smallest_88394fc0_002.java\t2018-12-04 19:10:17.706914958 -0500\n@@ -73,7 +73,7 @@\n         if (b.value > c.value) {\n             smallest.value = c.value;\n         }\n-        if (c.value > d.value) {\n+        if (false) {\n             smallest.value = d.value;\n         } else if (a.value > d.value) {\n             smallest.value = d.value;\n\n\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:16:21.285592", "repair_begin": "2018-12-05 21:15:35.792998", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.smallest_88394fc0_002"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_88394fc0_002.java\n+++ b/src/main/java/introclassJava/smallest_88394fc0_002.java\n@@ -75,3 +75,3 @@\n         }\n-        if (c.value > d.value) {\n+        if (introclassJava.smallest_88394fc0_002.this.output.length()==0) {\n             smallest.value = d.value;\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "RSRepair-A", "nb_patch": 4, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:15:46.040234", "repair_begin": "2018-12-04 23:07:35.447526", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 65, "faulty": "b.value=scanner.nextInt();", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 70, "faulty": "if (a.value > b.value) {\n  smallest.value=b.value;\n}", "type": "Replace", "seed": "d.value=scanner.nextInt();"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/src/main/java/introclassJava/smallest_88394fc0_002.java\t2018-11-28 17:54:21.675961000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/patches_yyi4/Patch_265/patched/tmp/RSRepair_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002/src/main/java/introclassJava/smallest_88394fc0_002.java\t2018-12-04 17:09:11.265335691 -0500\n@@ -62,14 +62,11 @@\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         a.value = scanner.nextInt ();\n-        b.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n         d.value = scanner.nextInt ();\n         IntObj smallest = new IntObj ();\n         smallest.value = a.value;\n-        if (a.value > b.value) {\n-            smallest.value = b.value;\n-        }\n+        d.value = scanner.nextInt();\n         if (b.value > c.value) {\n             smallest.value = c.value;\n         }\n\n\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "ARJA", "nb_patch": 67, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:34:58.290890", "repair_begin": "2018-12-03 00:27:14.883313", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "InsertBefore", "seed": "a.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 83, "faulty": "return;", "type": "Delete", "seed": "c.value=scanner.nextInt();"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/src/main/java/introclassJava/smallest_88394fc0_003.java\t2018-11-05 17:59:12.041698000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/patches_gc6a/Patch_1895/patched/tmp/Arja_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/src/main/java/introclassJava/smallest_88394fc0_003.java\t2018-12-02 18:34:38.656196013 -0500\n@@ -73,13 +73,11 @@\n         if (b.value > c.value) {\n             smallest.value = c.value;\n         }\n-        if (c.value > d.value) {\n-            smallest.value = d.value;\n-        } else if (a.value > d.value) {\n-            smallest.value = d.value;\n-        }\n+        if (a.value > d.value) {\n+\t\t\tsmallest.value = d.value;\n+\t\t}\n         output += (String.format (\"%d is the smallest\\n\", smallest.value));\n         if (true)\n-            return;;\n+\t\t\t;;\n     }\n }\n\n\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 22:17:39.531092", "repair_begin": "2018-12-05 22:17:32.454880", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.smallest_88394fc0_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_88394fc0_003.java\n+++ b/src/main/java/introclassJava/smallest_88394fc0_003.java\n@@ -75,3 +75,3 @@\n         }\n-        if (c.value > d.value) {\n+        if (false) {\n             smallest.value = d.value;\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "GenProg-A", "nb_patch": 179, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-02 20:58:06.774767", "repair_begin": "2018-12-02 20:50:41.934431", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 67, "faulty": "d.value=scanner.nextInt();", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "InsertBefore", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 83, "faulty": ";", "type": "Replace", "seed": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 65, "faulty": "b.value=scanner.nextInt();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 83, "faulty": ";", "type": "Replace", "seed": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 83, "faulty": ";", "type": "InsertBefore", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 69, "faulty": "smallest.value=a.value;", "type": "InsertBefore", "seed": "smallest.value=d.value;"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 83, "faulty": "return;", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}], "patch": "--- /tmp/GenProg_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/src/main/java/introclassJava/smallest_88394fc0_003.java\t2018-11-05 17:59:12.041698000 -0500\n+++ /tmp/GenProg_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/patches_ft7u/Patch_1371/patched/tmp/GenProg_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/src/main/java/introclassJava/smallest_88394fc0_003.java\t2018-12-02 14:55:51.501550987 -0500\n@@ -62,24 +62,34 @@\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         a.value = scanner.nextInt ();\n-        b.value = scanner.nextInt ();\n+        ;\n+\t\tb.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n-        d.value = scanner.nextInt ();\n+        ;\n         IntObj smallest = new IntObj ();\n-        smallest.value = a.value;\n+        smallest.value = d.value;\n+\t\tsmallest.value = a.value;\n         if (a.value > b.value) {\n             smallest.value = b.value;\n         }\n-        if (b.value > c.value) {\n+        d.value = scanner.nextInt();\n+\t\tif (b.value > c.value) {\n             smallest.value = c.value;\n         }\n         if (c.value > d.value) {\n-            smallest.value = d.value;\n+            if (a.value > d.value) {\n+\t\t\t\tsmallest.value = d.value;\n+\t\t\t}\n         } else if (a.value > d.value) {\n             smallest.value = d.value;\n         }\n         output += (String.format (\"%d is the smallest\\n\", smallest.value));\n-        if (true)\n-            return;;\n+        if (true) {\n+\t\t\tif (a.value > d.value) {\n+\t\t\t\tsmallest.value = d.value;\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}c.value = scanner.nextInt();\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", smallest.value));\n     }\n }\n\n\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "jKali", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 02:34:18.574011", "repair_begin": "2018-12-05 02:34:08.317644", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_88394fc0_003.java\\n+++ introclassJava\\/smallest_88394fc0_003.java\\n@@ -73,7 +73,7 @@\\n \\t\\tif ((b.value) > (c.value)) {\\n \\t\\t\\tsmallest.value = c.value;\\n \\t\\t}\\n-\\t\\tif ((c.value) > (d.value)) {\\n+\\t\\tif (false) {\\n \\t\\t\\tsmallest.value = d.value;\\n \\t\\t}else \\t\\t\\tif ((a.value) > (d.value)) {\\n \\t\\t\\t\\tsmallest.value = d.value;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((c.value) > (d.value)) {\\n\\tsmallest.value = d.value;\\n}else \\tif ((a.value) > (d.value)) {\\n\\t\\tsmallest.value = d.value;\\n\\t}", "PATCH_HUNK_CODE": "if (false) {\\n\\tsmallest.value = d.value;\\n}else \\tif ((a.value) > (d.value)) {\\n\\t\\tsmallest.value = d.value;\\n\\t}", "LOCATION": "introclassJava.smallest_88394fc0_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003\\/.\\/output_astor\\/AstorMain-smallest-88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003\\/\\/src\\/\\/variant-16_f\\/introclassJava\\/smallest_88394fc0_003.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003\\/output_astor\\/AstorMain-smallest-88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003\\/src\\/default\\/introclassJava\\/smallest_88394fc0_003.java", "LINE": "76", "MP_RANKING": "14", "SUSPICIOUNESS": "0.354", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "16", "TIME": "4", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003\\/.\\/output_astor\\/AstorMain-smallest-88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003\\/\\/bin\\/\\/variant-16"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "Kali-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 01:08:42.031615", "repair_begin": "2018-12-05 01:08:35.230714", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "RedirectBranch false"}], "patch": "--- /tmp/Kali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/src/main/java/introclassJava/smallest_88394fc0_003.java\t2018-11-05 17:59:12.041698000 -0500\n+++ /tmp/Kali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/patches_l5b3/Patch_6/patched/tmp/Kali_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/src/main/java/introclassJava/smallest_88394fc0_003.java\t2018-12-04 19:08:41.691214621 -0500\n@@ -73,7 +73,7 @@\n         if (b.value > c.value) {\n             smallest.value = c.value;\n         }\n-        if (c.value > d.value) {\n+        if (false) {\n             smallest.value = d.value;\n         } else if (a.value > d.value) {\n             smallest.value = d.value;\n\n\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:14:50.745374", "repair_begin": "2018-12-05 21:14:12.610031", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.smallest_88394fc0_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_88394fc0_003.java\n+++ b/src/main/java/introclassJava/smallest_88394fc0_003.java\n@@ -75,3 +75,3 @@\n         }\n-        if (c.value > d.value) {\n+        if (introclassJava.smallest_88394fc0_003.this.scanner.hasNext()) {\n             smallest.value = d.value;\n"}]}}, {"bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "RSRepair-A", "nb_patch": 2, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:15:57.260084", "repair_begin": "2018-12-04 23:07:34.022153", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/src/main/java/introclassJava/smallest_88394fc0_003.java\t2018-11-28 17:54:21.687962000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/patches_8dcf/Patch_23/patched/tmp/RSRepair_IntroClassJava_smallest_88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003/src/main/java/introclassJava/smallest_88394fc0_003.java\t2018-12-04 17:07:48.163048514 -0500\n@@ -74,7 +74,9 @@\n             smallest.value = c.value;\n         }\n         if (c.value > d.value) {\n-            smallest.value = d.value;\n+            if (a.value > d.value) {\n+\t\t\t\tsmallest.value = d.value;\n+\t\t\t}\n         } else if (a.value > d.value) {\n             smallest.value = d.value;\n         }\n\n\n"}]}}, {"bug_id": "9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_005", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:17:03.132926", "repair_begin": "2018-12-04 23:09:35.897758", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_90834803_005.java", "line": 77, "faulty": "output+=(String.format(\"They have to be different numbers\"));", "type": "Replace", "seed": "output+=(String.format(\"%d is the smallest\\n\",a.value));"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_005/src/main/java/introclassJava/smallest_90834803_005.java\t2018-11-28 17:54:21.723962000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_005/patches_8uws/Patch_74/patched/tmp/RSRepair_IntroClassJava_smallest_9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_005/src/main/java/introclassJava/smallest_90834803_005.java\t2018-12-04 17:10:02.890330170 -0500\n@@ -74,7 +74,7 @@\n         } else if (d.value < a.value && d.value < b.value && d.value < c.value) {\n             output += (String.format (\"%d is the smallest\\n\", d.value));\n         } else {\n-            output += (String.format (\"They have to be different numbers\"));\n+            output += (String.format(\"%d is the smallest\\n\", a.value));\n         }\n         if (true)\n             return;;\n\n\n"}]}}, {"bug_id": "af81ffd4bc47e4f84cbf87051d82d15af14833eaba6c57ae82fc503a67eb939f3e6552182124605c38a77a6774f41fac2cc95082320ba5e29d303277c098c4ae_000", "tool": "GenProg-A", "nb_patch": 5, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-02 21:00:01.385357", "repair_begin": "2018-12-02 20:49:44.448409", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_af81ffd4_000.java", "line": 67, "faulty": "c.value=scanner.nextDouble();", "type": "InsertBefore", "seed": "m.value=b.value;"}, {"path": "src/main/java/introclassJava/smallest_af81ffd4_000.java", "line": 76, "faulty": "if (m.value < c.value) {\n  n.value=m.value;\n}", "type": "InsertBefore", "seed": "n.value=c.value;"}, {"path": "src/main/java/introclassJava/smallest_af81ffd4_000.java", "line": 86, "faulty": "return;", "type": "InsertBefore", "seed": "if (n.value > d.value) {\n  p.value=d.value;\n}\n else if (n.value < d.value) {\n  p.value=n.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_af81ffd4_000.java", "line": 74, "faulty": "if (m.value > c.value) {\n  n.value=c.value;\n}\n else if (m.value < c.value) {\n  n.value=m.value;\n}", "type": "InsertBefore", "seed": "p.value=d.value;"}], "patch": "--- /tmp/GenProg_IntroClassJava_smallest_af81ffd4bc47e4f84cbf87051d82d15af14833eaba6c57ae82fc503a67eb939f3e6552182124605c38a77a6774f41fac2cc95082320ba5e29d303277c098c4ae_000/src/main/java/introclassJava/smallest_af81ffd4_000.java\t2018-11-05 17:59:12.125700000 -0500\n+++ /tmp/GenProg_IntroClassJava_smallest_af81ffd4bc47e4f84cbf87051d82d15af14833eaba6c57ae82fc503a67eb939f3e6552182124605c38a77a6774f41fac2cc95082320ba5e29d303277c098c4ae_000/patches_twb6/Patch_631/patched/tmp/GenProg_IntroClassJava_smallest_af81ffd4bc47e4f84cbf87051d82d15af14833eaba6c57ae82fc503a67eb939f3e6552182124605c38a77a6774f41fac2cc95082320ba5e29d303277c098c4ae_000/src/main/java/introclassJava/smallest_af81ffd4_000.java\t2018-12-02 14:53:12.795326334 -0500\n@@ -64,25 +64,36 @@\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         a.value = scanner.nextDouble ();\n         b.value = scanner.nextDouble ();\n-        c.value = scanner.nextDouble ();\n+        m.value = b.value;\n+\t\tc.value = scanner.nextDouble ();\n         d.value = scanner.nextDouble ();\n         if (a.value > b.value) {\n             m.value = b.value;\n         } else if (a.value < b.value) {\n             m.value = a.value;\n         }\n-        if (m.value > c.value) {\n+        p.value = d.value;\n+\t\tif (m.value > c.value) {\n             n.value = c.value;\n-        } else if (m.value < c.value) {\n-            n.value = m.value;\n-        }\n+        } else {\n+\t\t\tn.value = c.value;\n+\t\t\tif (m.value < c.value) {\n+\t\t\t\tn.value = m.value;\n+\t\t\t}\n+\t\t}\n         if (n.value > d.value) {\n             p.value = d.value;\n         } else if (n.value < d.value) {\n             p.value = n.value;\n         }\n         output += (String.format (\"%.0f is the smallest\\n\", p.value));\n-        if (true)\n-            return;;\n+        if (true) {\n+\t\t\tif (n.value > d.value) {\n+\t\t\t\tp.value = d.value;\n+\t\t\t} else if (n.value < d.value) {\n+\t\t\t\tp.value = n.value;\n+\t\t\t}\n+\t\t\treturn;\n+\t\t};\n     }\n }\n\n\n"}]}}, {"bug_id": "c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000", "tool": "ARJA", "nb_patch": 44, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:20:15.651239", "repair_begin": "2018-12-03 00:12:35.837007", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 60, "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 66, "faulty": "x.value=scanner.nextInt();", "type": "InsertBefore", "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 79, "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", "type": "InsertBefore", "seed": "numbers[j.value - 1]=numbers[j.value];"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000/src/main/java/introclassJava/smallest_c868b30a_000.java\t2018-11-05 17:59:12.137700000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000/patches_rtkn/Patch_583/patched/tmp/Arja_IntroClassJava_smallest_c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000/src/main/java/introclassJava/smallest_c868b30a_000.java\t2018-12-02 18:15:00.351683005 -0500\n@@ -57,13 +57,18 @@\n     }\n \n     public void exec () throws Exception {\n-        IntObj x = new IntObj (), i = new IntObj (), smallest = new IntObj (), j =\n+        ;\n+\t\tIntObj x = new IntObj (), i = new IntObj (), smallest = new IntObj (), j =\n             new IntObj (), k = new IntObj (), temp = new IntObj ();\n         int[] numbers = new int[4];\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         for (i.value = 0; i.value < 3; i.value++) {\n-            x.value = scanner.nextInt ();\n+            for (i.value = 0; i.value < 3; i.value++) {\n+\t\t\t\tx.value = scanner.nextInt();\n+\t\t\t\tnumbers[i.value] = x.value;\n+\t\t\t}\n+\t\t\tx.value = scanner.nextInt ();\n             numbers[i.value] = x.value;\n         }\n         for (k.value = 3; k.value > 0; k.value--) {\n@@ -76,7 +81,8 @@\n             }\n         }\n         smallest.value = numbers[0];\n-        output += (String.format (\"%d is the smallest\\n\", smallest.value));\n+        numbers[j.value - 1] = numbers[j.value];\n+\t\toutput += (String.format (\"%d is the smallest\\n\", smallest.value));\n         if (true)\n             return;;\n     }\n\n\n"}]}}, {"bug_id": "c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:16:03.656406", "repair_begin": "2018-12-04 23:09:31.294334", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 66, "faulty": "x.value=scanner.nextInt();", "type": "InsertBefore", "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000/src/main/java/introclassJava/smallest_c868b30a_000.java\t2018-11-28 17:54:21.787961000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000/patches_uch5/Patch_764/patched/tmp/RSRepair_IntroClassJava_smallest_c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000/src/main/java/introclassJava/smallest_c868b30a_000.java\t2018-12-04 17:13:00.367028792 -0500\n@@ -63,7 +63,11 @@\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         for (i.value = 0; i.value < 3; i.value++) {\n-            x.value = scanner.nextInt ();\n+            for (i.value = 0; i.value < 3; i.value++) {\n+\t\t\t\tx.value = scanner.nextInt();\n+\t\t\t\tnumbers[i.value] = x.value;\n+\t\t\t}\n+\t\t\tx.value = scanner.nextInt ();\n             numbers[i.value] = x.value;\n         }\n         for (k.value = 3; k.value > 0; k.value--) {\n\n\n"}]}}, {"bug_id": "cb243bebea400595cc274d1246f3307c507ba6a0e891f6e318cde2b80a72de40dab19eb7f76d3b6573a08e446bce6fb4435cdb016ae6489973b855a9bddd3b11_000", "tool": "GenProg-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-02 20:49:30.209695", "repair_begin": "2018-12-02 20:40:31.608205", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 64, "faulty": "n1.value=scanner.nextInt();", "type": "Replace", "seed": "if (min.value >= n3.value) {\n  min.value=n3.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 67, "faulty": "n4.value=scanner.nextInt();", "type": "InsertBefore", "seed": "min.value=n2.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 77, "faulty": "min.value=n4.value;", "type": "Replace", "seed": "output+=(String.format(\"%d is the smallest\\n\",min.value));"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 64, "faulty": "n1.value=scanner.nextInt();", "type": "Delete", "seed": "n2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 67, "faulty": "n4.value=scanner.nextInt();", "type": "InsertBefore", "seed": "min.value=n2.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 68, "faulty": "if (n1.value <= n2.value) {\n  min.value=n1.value;\n}\n else {\n  min.value=n2.value;\n}", "type": "InsertBefore", "seed": "min.value=n2.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 71, "faulty": "min.value=n2.value;", "type": "Delete", "seed": "n3.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 64, "faulty": "n1.value=scanner.nextInt();", "type": "Delete", "seed": "n4.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 69, "faulty": "min.value=n1.value;", "type": "Delete", "seed": "n2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 68, "faulty": "if (n1.value <= n2.value) {\n  min.value=n1.value;\n}\n else {\n  min.value=n2.value;\n}", "type": "InsertBefore", "seed": "min.value=n2.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 71, "faulty": "min.value=n2.value;", "type": "Delete", "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 82, "faulty": "return;", "type": "Replace", "seed": "if (min.value >= n3.value) {\n  min.value=n3.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 74, "faulty": "min.value=n3.value;", "type": "Delete", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 67, "faulty": "n4.value=scanner.nextInt();", "type": "InsertBefore", "seed": "min.value=n2.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 77, "faulty": "min.value=n4.value;", "type": "Replace", "seed": "output+=(String.format(\"%d is the smallest\\n\",min.value));"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 68, "faulty": "if (n1.value <= n2.value) {\n  min.value=n1.value;\n}\n else {\n  min.value=n2.value;\n}", "type": "Replace", "seed": "n2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 68, "faulty": "if (n1.value <= n2.value) {\n  min.value=n1.value;\n}\n else {\n  min.value=n2.value;\n}", "type": "Delete", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 76, "faulty": "if (min.value >= n4.value) {\n  min.value=n4.value;\n}\n else {\n  output+=(String.format(\"%d is the smallest\\n\",min.value));\n}", "type": "InsertBefore", "seed": "if (min.value >= n3.value) {\n  min.value=n3.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 71, "faulty": "min.value=n2.value;", "type": "InsertBefore", "seed": "min.value=n3.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 64, "faulty": "n1.value=scanner.nextInt();", "type": "Delete", "seed": "n4.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 69, "faulty": "min.value=n1.value;", "type": "Delete", "seed": "n2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 68, "faulty": "if (n1.value <= n2.value) {\n  min.value=n1.value;\n}\n else {\n  min.value=n2.value;\n}", "type": "InsertBefore", "seed": "min.value=n2.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 68, "faulty": "if (n1.value <= n2.value) {\n  min.value=n1.value;\n}\n else {\n  min.value=n2.value;\n}", "type": "InsertBefore", "seed": "min.value=n2.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 73, "faulty": "if (min.value >= n3.value) {\n  min.value=n3.value;\n}", "type": "Delete", "seed": "IntObj n1=new IntObj(), n2=new IntObj(), n3=new IntObj(), n4=new IntObj(), min=new IntObj();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 74, "faulty": "min.value=n3.value;", "type": "Delete", "seed": "min.value=n1.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 69, "faulty": "min.value=n1.value;", "type": "Delete", "seed": "min.value=n2.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 65, "faulty": "n2.value=scanner.nextInt();", "type": "InsertBefore", "seed": "min.value=n3.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 62, "faulty": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));", "type": "InsertBefore", "seed": "min.value=n1.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 68, "faulty": "if (n1.value <= n2.value) {\n  min.value=n1.value;\n}\n else {\n  min.value=n2.value;\n}", "type": "InsertBefore", "seed": "n4.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 64, "faulty": "n1.value=scanner.nextInt();", "type": "Delete", "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 69, "faulty": "min.value=n1.value;", "type": "Replace", "seed": "min.value=n4.value;"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 82, "faulty": ";", "type": "Delete", "seed": "if (min.value >= n4.value) {\n  min.value=n4.value;\n}\n else {\n  output+=(String.format(\"%d is the smallest\\n\",min.value));\n}"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 67, "faulty": "n4.value=scanner.nextInt();", "type": "Replace", "seed": "n1.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_cb243beb_000.java", "line": 77, "faulty": "min.value=n4.value;", "type": "InsertBefore", "seed": "min.value=n4.value;"}], "patch": "--- /tmp/GenProg_IntroClassJava_smallest_cb243bebea400595cc274d1246f3307c507ba6a0e891f6e318cde2b80a72de40dab19eb7f76d3b6573a08e446bce6fb4435cdb016ae6489973b855a9bddd3b11_000/src/main/java/introclassJava/smallest_cb243beb_000.java\t2018-11-05 17:59:12.157701000 -0500\n+++ /tmp/GenProg_IntroClassJava_smallest_cb243bebea400595cc274d1246f3307c507ba6a0e891f6e318cde2b80a72de40dab19eb7f76d3b6573a08e446bce6fb4435cdb016ae6489973b855a9bddd3b11_000/patches_cfq9/Patch_1329/patched/tmp/GenProg_IntroClassJava_smallest_cb243bebea400595cc274d1246f3307c507ba6a0e891f6e318cde2b80a72de40dab19eb7f76d3b6573a08e446bce6fb4435cdb016ae6489973b855a9bddd3b11_000/src/main/java/introclassJava/smallest_cb243beb_000.java\t2018-12-02 14:47:11.779718059 -0500\n@@ -59,26 +59,33 @@\n     public void exec () throws Exception {\n         IntObj n1 = new IntObj (), n2 = new IntObj (), n3 = new IntObj (), n4 =\n             new IntObj (), min = new IntObj ();\n-        output +=\n+        min.value = n1.value;\n+\t\toutput +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n-        n1.value = scanner.nextInt ();\n-        n2.value = scanner.nextInt ();\n+        min.value = n3.value;\n+\t\tn2.value = scanner.nextInt ();\n         n3.value = scanner.nextInt ();\n-        n4.value = scanner.nextInt ();\n-        if (n1.value <= n2.value) {\n-            min.value = n1.value;\n-        } else {\n-            min.value = n2.value;\n-        }\n-        if (min.value >= n3.value) {\n-            min.value = n3.value;\n-        }\n-        if (min.value >= n4.value) {\n+        min.value = n2.value;\n+\t\tmin.value = n2.value;\n+\t\tmin.value = n2.value;\n+\t\tn1.value = scanner.nextInt();\n+        min.value = n2.value;\n+\t\tmin.value = n2.value;\n+\t\tmin.value = n2.value;\n+\t\tmin.value = n2.value;\n+\t\tn4.value = scanner.nextInt();\n+\t\tif (min.value >= n3.value) {\n+\t\t\tmin.value = n3.value;\n+\t\t}\n+\t\tif (min.value >= n4.value) {\n             min.value = n4.value;\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", min.value));\n         } else {\n             output += (String.format (\"%d is the smallest\\n\", min.value));\n         }\n         if (true)\n-            return;;\n+\t\t\tif (min.value >= n3.value) {\n+\t\t\t\tmin.value = n3.value;\n+\t\t\t}\n     }\n }\n\n\n"}]}}, {"bug_id": "dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:45:22.882326", "repair_begin": "2018-12-08 04:44:57.977600", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_dedc2a7c_000.java\\n+++ introclassJava\\/smallest_dedc2a7c_000.java\\n@@ -65,7 +65,7 @@\\n \\t\\tb.value = scanner.nextFloat();\\n \\t\\tc.value = scanner.nextFloat();\\n \\t\\td.value = scanner.nextFloat();\\n-\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))) {\\n+\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"%.0f is the smallest\\\\n\\\", a.value);\\n \\t\\t}else \\t\\t\\tif ((((b.value) < (a.value)) && ((b.value) < (c.value))) && \\n \\t\\t\\t((b.value) < (d.value))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))", "PATCH_HUNK_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))", "LOCATION": "introclassJava.smallest_dedc2a7c_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000\\/.\\/output_astor\\/AstorMain-smallest-dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_dedc2a7c_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000\\/output_astor\\/AstorMain-smallest-dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000\\/src\\/default\\/introclassJava\\/smallest_dedc2a7c_000.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "18", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000\\/.\\/output_astor\\/AstorMain-smallest-dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:16:22.763215", "repair_begin": "2018-12-05 21:16:15.186863", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_dedc2a7c_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_dedc2a7c_000.java\n+++ b/src/main/java/introclassJava/smallest_dedc2a7c_000.java\n@@ -69,7 +69,6 @@\n             output += (String.format (\"%.0f is the smallest\\n\", a.value));\n-        } else if ((b.value < a.value) && (b.value < c.value)\n-                   && (b.value < d.value)) {\n+        } else if (((b.value) < (d.value))) {\n             output += (String.format (\"%.0f is the smallest\\n\", b.value));\n         } else if ((c.value < a.value) && (c.value < b.value)\n-                   && (c.value < d.value)) {\n+        && (c.value < d.value)) {\n             output += (String.format (\"%.0f is the smallest\\n\", c.value));\n"}]}}, {"bug_id": "ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003", "tool": "ARJA", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-03 00:34:54.967252", "repair_begin": "2018-12-03 00:27:08.679358", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_ea67b841_003.java", "line": 64, "faulty": "a.value=scanner.nextInt();", "type": "InsertBefore", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_ea67b841_003.java", "line": 65, "faulty": "b.value=scanner.nextInt();", "type": "InsertBefore", "seed": "SN.value=a.value;"}, {"path": "src/main/java/introclassJava/smallest_ea67b841_003.java", "line": 67, "faulty": "d.value=scanner.nextInt();", "type": "Replace", "seed": "if ((a.value < b.value) && (a.value < c.value) && (a.value < d.value)) {\n  SN.value=a.value;\n}\n else if ((b.value < a.value) && (b.value < c.value) && (b.value < d.value)) {\n  SN.value=b.value;\n}\n else if ((c.value < a.value) && (c.value < b.value) && (c.value < d.value)) {\n  SN.value=c.value;\n}\n else {\n  SN.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_ea67b841_003.java", "line": 77, "faulty": "SN.value=d.value;", "type": "Delete", "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"}], "patch": "--- /tmp/Arja_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003/src/main/java/introclassJava/smallest_ea67b841_003.java\t2018-11-05 17:59:12.189701000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003/patches_jnvk/Patch_1729/patched/tmp/Arja_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003/src/main/java/introclassJava/smallest_ea67b841_003.java\t2018-12-02 18:34:12.518021120 -0500\n@@ -61,10 +61,22 @@\n             new IntObj (), SN = new IntObj ();\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n-        a.value = scanner.nextInt ();\n-        b.value = scanner.nextInt ();\n+        d.value = scanner.nextInt();\n+\t\ta.value = scanner.nextInt ();\n+        SN.value = a.value;\n+\t\tb.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n-        d.value = scanner.nextInt ();\n+        if ((a.value < b.value) && (a.value < c.value) && (a.value < d.value)) {\n+\t\t\tSN.value = a.value;\n+\t\t} else if ((b.value < a.value) && (b.value < c.value)\n+\t\t\t\t&& (b.value < d.value)) {\n+\t\t\tSN.value = b.value;\n+\t\t} else if ((c.value < a.value) && (c.value < b.value)\n+\t\t\t\t&& (c.value < d.value)) {\n+\t\t\tSN.value = c.value;\n+\t\t} else {\n+\t\t\tSN.value = d.value;\n+\t\t}\n         if ((a.value < b.value) && (a.value < c.value) && (a.value < d.value)) {\n             SN.value = a.value;\n         } else if ((b.value < a.value) && (b.value < c.value)\n@@ -74,7 +86,6 @@\n                    && (c.value < d.value)) {\n             SN.value = c.value;\n         } else {\n-            SN.value = d.value;\n         }\n         output += (String.format (\"%d is the smallest\\n\", SN.value));\n         if (true)\n\n\n"}]}}, {"bug_id": "ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:47:27.416925", "repair_begin": "2018-12-08 04:47:04.193379", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_ea67b841_003.java\\n+++ introclassJava\\/smallest_ea67b841_003.java\\n@@ -65,7 +65,7 @@\\n \\t\\tb.value = scanner.nextInt();\\n \\t\\tc.value = scanner.nextInt();\\n \\t\\td.value = scanner.nextInt();\\n-\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))) {\\n+\\t\\tif ((((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))) {\\n \\t\\t\\tSN.value = a.value;\\n \\t\\t}else \\t\\t\\tif ((((b.value) < (a.value)) && ((b.value) < (c.value))) && \\n \\t\\t\\t((b.value) < (d.value))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) && ((a.value) < (d.value))", "PATCH_HUNK_CODE": "(((a.value) < (b.value)) && ((a.value) < (c.value))) || ((a.value) < (d.value))", "LOCATION": "introclassJava.smallest_ea67b841_003", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003\\/.\\/output_astor\\/AstorMain-smallest-ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_ea67b841_003.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003\\/output_astor\\/AstorMain-smallest-ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003\\/src\\/default\\/introclassJava\\/smallest_ea67b841_003.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "17", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003\\/.\\/output_astor\\/AstorMain-smallest-ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:13:41.292647", "repair_begin": "2018-12-05 21:13:34.125283", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_ea67b841_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_ea67b841_003.java\n+++ b/src/main/java/introclassJava/smallest_ea67b841_003.java\n@@ -69,7 +69,6 @@\n             SN.value = a.value;\n-        } else if ((b.value < a.value) && (b.value < c.value)\n-                   && (b.value < d.value)) {\n+        } else if (((b.value) < (d.value))) {\n             SN.value = b.value;\n         } else if ((c.value < a.value) && (c.value < b.value)\n-                   && (c.value < d.value)) {\n+        && (c.value < d.value)) {\n             SN.value = c.value;\n"}]}}, {"bug_id": "ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-04 23:16:48.618082", "repair_begin": "2018-12-04 23:07:26.866822", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_ea67b841_003.java", "line": 64, "faulty": "a.value=scanner.nextInt();", "type": "Replace", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_ea67b841_003.java", "line": 67, "faulty": "d.value=scanner.nextInt();", "type": "Replace", "seed": "a.value=scanner.nextInt();"}], "patch": "--- /tmp/RSRepair_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003/src/main/java/introclassJava/smallest_ea67b841_003.java\t2018-11-28 17:54:21.851961000 -0500\n+++ /tmp/RSRepair_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003/patches_miba/Patch_635/patched/tmp/RSRepair_IntroClassJava_smallest_ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003/src/main/java/introclassJava/smallest_ea67b841_003.java\t2018-12-04 17:11:04.517821967 -0500\n@@ -61,10 +61,10 @@\n             new IntObj (), SN = new IntObj ();\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n-        a.value = scanner.nextInt ();\n+        d.value = scanner.nextInt();\n         b.value = scanner.nextInt ();\n         c.value = scanner.nextInt ();\n-        d.value = scanner.nextInt ();\n+        a.value = scanner.nextInt();\n         if ((a.value < b.value) && (a.value < c.value) && (a.value < d.value)) {\n             SN.value = a.value;\n         } else if ((b.value < a.value) && (b.value < c.value)\n\n\n"}]}}, {"bug_id": "f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-08 04:47:28.395590", "repair_begin": "2018-12-08 04:47:04.873712", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- introclassJava\\/smallest_f8d57dea_000.java\\n+++ introclassJava\\/smallest_f8d57dea_000.java\\n@@ -65,7 +65,7 @@\\n \\t\\tv2.value = scanner.nextInt();\\n \\t\\tv3.value = scanner.nextInt();\\n \\t\\tv4.value = scanner.nextInt();\\n-\\t\\tif ((((v1.value) < (v2.value)) && ((v1.value) < (v3.value))) && ((v1.value) < (v4.value))) {\\n+\\t\\tif ((((v1.value) < (v2.value)) && ((v1.value) < (v3.value))) || ((v1.value) < (v4.value))) {\\n \\t\\t\\toutput += java.lang.String.format(\\\"%d is the smallest\\\\n\\\", v1.value);\\n \\t\\t}else \\t\\t\\tif ((((v2.value) < (v1.value)) && ((v2.value) < (v3.value))) && \\n \\t\\t\\t((v2.value) < (v4.value))) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(((v1.value) < (v2.value)) && ((v1.value) < (v3.value))) && ((v1.value) < (v4.value))", "PATCH_HUNK_CODE": "(((v1.value) < (v2.value)) && ((v1.value) < (v3.value))) || ((v1.value) < (v4.value))", "LOCATION": "introclassJava.smallest_f8d57dea_000", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000\\/.\\/output_astor\\/AstorMain-smallest-f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000\\/\\/src\\/\\/variant-66_f\\/introclassJava\\/smallest_f8d57dea_000.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000\\/output_astor\\/AstorMain-smallest-f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000\\/src\\/default\\/introclassJava\\/smallest_f8d57dea_000.java", "LINE": "68", "MP_RANKING": "2", "SUSPICIOUNESS": "0.433", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "66", "TIME": "17", "VALIDATION": "|true|0|16|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_IntroClassJava_smallest_f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000\\/.\\/output_astor\\/AstorMain-smallest-f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000\\/\\/bin\\/\\/variant-66"}]}}, {"bug_id": "f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000", "tool": "Nopol", "nb_patch": 1, "benchmark": "IntroClassJava", "project": "smallest", "result": {"repair_end": "2018-12-05 21:19:15.486679", "repair_begin": "2018-12-05 21:19:09.200372", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_f8d57dea_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_f8d57dea_000.java\n+++ b/src/main/java/introclassJava/smallest_f8d57dea_000.java\n@@ -69,7 +69,6 @@\n             output += (String.format (\"%d is the smallest\\n\", v1.value));\n-        } else if (v2.value < v1.value && v2.value < v3.value\n-                   && v2.value < v4.value) {\n+        } else if (((v2.value) < (v4.value))) {\n             output += (String.format (\"%d is the smallest\\n\", v2.value));\n         } else if (v3.value < v1.value && v3.value < v2.value\n-                   && v3.value < v4.value) {\n+        && v3.value < v4.value) {\n             output += (String.format (\"%d is the smallest\\n\", v3.value));\n"}]}}, {"bug_id": "", "tool": "ARJA", "nb_patch": 18, "benchmark": "QuixBugs", "project": "DEPTH_FIRST_SEARCH", "result": {"repair_end": "2018-12-02 11:39:07.753926", "repair_begin": "2018-12-02 11:36:14.594598", "patches": [{"edits": [{"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Delete", "seed": "this.value=value;"}], "patch": "--- /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-02 05:36:11.048343665 -0500\n+++ /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/patches_xts7/Patch_1/patched/tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-02 05:36:17.456456508 -0500\n@@ -47,7 +47,6 @@\n     }\n \n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n     }\n \n     public void setPredecessors(ArrayList<Node> predecessors) {\n\n\n"}]}}, {"bug_id": "", "tool": "Cardumen", "nb_patch": 1, "benchmark": "QuixBugs", "project": "DEPTH_FIRST_SEARCH", "result": {"repair_end": "2018-12-29 06:41:52.903067", "repair_begin": "2018-12-29 06:41:46.594438", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/DEPTH_FIRST_SEARCH.java\\n+++ java_programs\\/DEPTH_FIRST_SEARCH.java\\n@@ -20,7 +20,7 @@\\n \\t\\t\\t\\t\\t\\treturn true;\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tfor (java_programs.Node successornodes : node.getSuccessors()) {\\n-\\t\\t\\t\\t\\t\\t\\tif (search(successornodes)) { \\t\\t\\t\\t\\t\\t\\t\\treturn true;}\\n+\\t\\t\\t\\t\\t\\t\\tif (node == node) { \\t\\t\\t\\t\\t\\t\\t\\treturn true;}\\n \\t\\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\treturn false;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtIfImpl", "ORIGINAL_CODE": "search(successornodes)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "node == node", "INGREDIENT_PARENT": "_Node_0 == _Node_1", "LOCATION": "java_programs.DEPTH_FIRST_SEARCH", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/src\\/\\/variant-4_f\\/java_programs\\/DEPTH_FIRST_SEARCH.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_QuixBugs_DEPTH_FIRST_SEARCH_\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/src\\/default\\/DEPTH_FIRST_SEARCH.java", "LINE": "23", "MP_RANKING": "1", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "2", "VARIANT_ID": "4", "TIME": "1", "VALIDATION": "|true|0|5|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "QuixBugs", "project": "DEPTH_FIRST_SEARCH", "result": {"repair_end": "2018-12-02 18:03:39.228612", "repair_begin": "2018-12-02 18:03:35.213728", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 50, "class": "java_programs.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/Node.java\n+++ b/src/main/java/Node.java\n@@ -49,3 +49,5 @@\n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n+        if (false) {\n+            this.successors = successors;\n+        }\n     }\n"}]}}, {"bug_id": "", "tool": "GenProg-A", "nb_patch": 52, "benchmark": "QuixBugs", "project": "DEPTH_FIRST_SEARCH", "result": {"repair_end": "2018-12-02 21:11:34.765314", "repair_begin": "2018-12-02 21:07:10.305438", "patches": [{"edits": [{"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Replace", "seed": "this.predecessors=new ArrayList<>();"}, {"path": "src/main/java/Node.java", "line": 62, "faulty": "return successors;", "type": "InsertBefore", "seed": "this.value=value;"}], "patch": "--- /tmp/GenProg_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-02 15:07:04.624200016 -0500\n+++ /tmp/GenProg_QuixBugs_DEPTH_FIRST_SEARCH_/patches_6wmk/Patch_250/patched/tmp/GenProg_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-02 15:08:00.280201286 -0500\n@@ -47,7 +47,7 @@\n     }\n \n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n+        this.predecessors = new ArrayList<>();\n     }\n \n     public void setPredecessors(ArrayList<Node> predecessors) {\n@@ -59,7 +59,8 @@\n     }\n \n     public ArrayList<Node> getSuccessors() {\n-        return successors;\n+        this.value = value;\n+\t\treturn successors;\n     }\n     public ArrayList<Node> getPredecessors() {\n         return predecessors;\n\n\n"}]}}, {"bug_id": "", "tool": "jGenProg", "nb_patch": 1, "benchmark": "QuixBugs", "project": "DEPTH_FIRST_SEARCH", "result": {"repair_end": "2018-12-02 15:35:32.112736", "repair_begin": "2018-12-02 15:35:23.514857", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/Node.java\\n+++ java_programs\\/Node.java\\n@@ -46,8 +46,8 @@\\n \\t\\tthis.successor = successor;\\n \\t}\\n \\n-\\tpublic void setSuccessors(java.util.ArrayList<java_programs.Node> successors) {\\n-\\t\\tthis.successors = successors;\\n+\\tpublic void setSuccessors(java.util.ArrayList<java_programs.Node> successors) { \\t\\tthis.value = value;\\n+\\n \\t}\\n \\n \\tpublic void setPredecessors(java.util.ArrayList<java_programs.Node> predecessors) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "this.successors = successors", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "this.value = value", "INGREDIENT_PARENT": "this.value = value", "LOCATION": "java_programs.Node", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/src\\/\\/variant-34_f\\/java_programs\\/Node.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_QuixBugs_DEPTH_FIRST_SEARCH_\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/src\\/default\\/Node.java", "LINE": "50", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtAssignmentImpl|CtBlockImpl"}], "GENERATION": "17", "VARIANT_ID": "34", "TIME": "3", "VALIDATION": "|true|0|5|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/bin\\/\\/variant-34"}]}}, {"bug_id": "", "tool": "jKali", "nb_patch": 1, "benchmark": "QuixBugs", "project": "DEPTH_FIRST_SEARCH", "result": {"repair_end": "2018-12-02 14:27:38.662740", "repair_begin": "2018-12-02 14:27:32.737223", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/Node.java\\n+++ java_programs\\/Node.java\\n@@ -47,7 +47,7 @@\\n \\t}\\n \\n \\tpublic void setSuccessors(java.util.ArrayList<java_programs.Node> successors) {\\n-\\t\\tthis.successors = successors;\\n+\\n \\t}\\n \\n \\tpublic void setPredecessors(java.util.ArrayList<java_programs.Node> predecessors) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "this.successors = successors", "LOCATION": "java_programs.Node", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/src\\/\\/variant-2_f\\/java_programs\\/Node.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_QuixBugs_DEPTH_FIRST_SEARCH_\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/src\\/default\\/Node.java", "LINE": "50", "MP_RANKING": "0", "SUSPICIOUNESS": "1"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|5|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "", "tool": "Kali-A", "nb_patch": 1, "benchmark": "QuixBugs", "project": "DEPTH_FIRST_SEARCH", "result": {"repair_end": "2018-12-02 11:18:34.265607", "repair_begin": "2018-12-02 11:18:30.905272", "patches": [{"edits": [{"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "InsertReturn true"}], "patch": "--- /tmp/Kali_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-02 05:18:27.133698491 -0500\n+++ /tmp/Kali_QuixBugs_DEPTH_FIRST_SEARCH_/patches_v986/Patch_1/patched/tmp/Kali_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-02 05:18:33.921682060 -0500\n@@ -47,7 +47,9 @@\n     }\n \n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n+        if (true)\n+\t\t\treturn;\n+\t\tthis.successors = successors;\n     }\n \n     public void setPredecessors(ArrayList<Node> predecessors) {\n\n\n"}]}}, {"bug_id": "", "tool": "RSRepair-A", "nb_patch": 7, "benchmark": "QuixBugs", "project": "DEPTH_FIRST_SEARCH", "result": {"repair_end": "2018-12-02 18:32:22.632164", "repair_begin": "2018-12-02 18:31:12.771348", "patches": [{"edits": [{"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Replace", "seed": "Set<Node> nodesvisited=new HashSet<>();"}], "patch": "--- /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-02 12:31:09.099967637 -0500\n+++ /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/patches_tvm8/Patch_17/patched/tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-02 12:31:18.524015729 -0500\n@@ -47,7 +47,7 @@\n     }\n \n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n+        Set<Node> nodesvisited = new HashSet<>();\n     }\n \n     public void setPredecessors(ArrayList<Node> predecessors) {\n\n\n"}]}}, {"bug_id": "", "tool": "NPEFix", "nb_patch": 8, "benchmark": "QuixBugs", "project": "DETECT_CYCLE", "result": {"repair_end": "2018-12-02 11:24:23.307434", "repair_begin": "2018-12-02 11:24:20.560527", "patches": [{"locations": [{"executionCount": 0, "line": 22, "class": "java_programs.DETECT_CYCLE", "sourceStart": 480, "sourceEnd": 483}, {"executionCount": 0, "line": 18, "class": "java_programs.DETECT_CYCLE", "sourceStart": 353, "sourceEnd": 356}], "patch": "--- /DETECT_CYCLE.java\n+++ /DETECT_CYCLE.java\n@@ -17,6 +17,14 @@\n         while (true) {\n-            if (hare.getSuccessor() == null)\n+            if (hare == null) {\n+                if ( node.getSuccessor() == null)\n                 return false;\n+            } else {\n+                if (hare.getSuccessor() == null)\n+                return false;\n+            }\n \n             tortoise = tortoise.getSuccessor();\n+            if (hare == null) {\n+                return Boolean.FALSE;\n+            }\n             hare = hare.getSuccessor().getSuccessor();\n"}]}}, {"bug_id": "", "tool": "NPEFix", "nb_patch": 1, "benchmark": "QuixBugs", "project": "HANOI", "result": {"repair_end": "2018-12-02 11:24:08.507471", "repair_begin": "2018-12-02 11:24:05.652285", "patches": [{"locations": [{"executionCount": 0, "line": 25, "class": "java_programs.HANOI", "sourceStart": 689, "sourceEnd": 703}], "patch": "--- /HANOI.java\n+++ /HANOI.java\n@@ -24,3 +24,10 @@\n             crap_set.remove(end);\n-            int helper = crap_set.poll();\n+            } else {\n+                int helper;\n+                if (crap_set.poll() == null) {\n+                    helper = end;\n+                } else {\n+                    helper = crap_set.poll();\n+                }\n+            }\n             steps.addAll(hanoi(height-1, start, helper));\n"}]}}, {"bug_id": "", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "QuixBugs", "project": "KNAPSACK", "result": {"repair_end": "2018-12-07 10:01:20.492320", "repair_begin": "2018-12-07 10:00:52.910524", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/KNAPSACK.java\\n+++ java_programs\\/KNAPSACK.java\\n@@ -27,7 +27,7 @@\\n \\t\\t\\t\\tif ((i == 0) || (j == 0)) {\\n \\t\\t\\t\\t\\tmemo[i][j] = 0;\\n \\t\\t\\t\\t}else\\n-\\t\\t\\t\\t\\tif (weight < j) {\\n+\\t\\t\\t\\t\\tif (weight <= j) {\\n \\t\\t\\t\\t\\t\\tmemo[i][j] = java.lang.Math.max(memo[(i - 1)][j], (value + (memo[(i - 1)][(j - weight)])));\\n \\t\\t\\t\\t\\t}else \\n \\t\\t\\t\\t\\t{\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "weight < j", "PATCH_HUNK_CODE": "weight <= j", "LOCATION": "java_programs.KNAPSACK", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_QuixBugs_KNAPSACK_\\/.\\/output_astor\\/AstorMain-KNAPSACK-\\/\\/src\\/\\/variant-26_f\\/java_programs\\/KNAPSACK.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_QuixBugs_KNAPSACK_\\/output_astor\\/AstorMain-KNAPSACK-\\/src\\/default\\/KNAPSACK.java", "LINE": "30", "MP_RANKING": "2", "SUSPICIOUNESS": "0.775", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "26", "TIME": "17", "VALIDATION": "|true|0|10|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_QuixBugs_KNAPSACK_\\/.\\/output_astor\\/AstorMain-KNAPSACK-\\/\\/bin\\/\\/variant-26"}]}}, {"bug_id": "", "tool": "Cardumen", "nb_patch": 1, "benchmark": "QuixBugs", "project": "LEVENSHTEIN", "result": {"repair_end": "2018-12-29 06:38:06.917345", "repair_begin": "2018-12-29 06:37:43.332306", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/LEVENSHTEIN.java\\n+++ java_programs\\/LEVENSHTEIN.java\\n@@ -14,7 +14,7 @@\\n \\t\\tif ((source.isEmpty()) || (target.isEmpty())) {\\n \\t\\t\\treturn source.isEmpty() ? target.length() : source.length();\\n \\t\\t}else \\t\\t\\tif ((source.charAt(0)) == (target.charAt(0))) {\\n-\\t\\t\\t\\treturn 1 + (java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1)));\\n+\\t\\t\\t\\treturn java_programs.LEVENSHTEIN.levenshtein(target.substring(1), source.substring(1));\\n \\t\\t\\t}else {\\n \\t\\t\\t\\treturn 1 + (java.lang.Math.min(java.lang.Math.min(\\n \\t\\t\\t\\tjava_programs.LEVENSHTEIN.levenshtein(source, target.substring(1)), \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtReturnImpl", "ORIGINAL_CODE": "1 + (java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1)))", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "java_programs.LEVENSHTEIN.levenshtein(target.substring(1), source.substring(1))", "INGREDIENT_PARENT": "(java_programs.LEVENSHTEIN.levenshtein(_String_0.substring(1), _String_1.substring(1)))", "LOCATION": "java_programs.LEVENSHTEIN", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_QuixBugs_LEVENSHTEIN_\\/.\\/output_astor\\/AstorMain-LEVENSHTEIN-\\/\\/src\\/\\/variant-48_f\\/java_programs\\/LEVENSHTEIN.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_QuixBugs_LEVENSHTEIN_\\/output_astor\\/AstorMain-LEVENSHTEIN-\\/src\\/default\\/LEVENSHTEIN.java", "LINE": "17", "MP_RANKING": "6", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtReturnImpl"}], "GENERATION": "24", "VARIANT_ID": "48", "TIME": "16", "VALIDATION": "|true|0|6|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_QuixBugs_LEVENSHTEIN_\\/.\\/output_astor\\/AstorMain-LEVENSHTEIN-\\/\\/bin\\/\\/variant-48"}]}}, {"bug_id": "", "tool": "ARJA", "nb_patch": 17, "benchmark": "QuixBugs", "project": "LIS", "result": {"repair_end": "2018-12-02 11:42:46.076056", "repair_begin": "2018-12-02 11:37:24.439289", "patches": [{"edits": [{"path": "src/main/java/LIS.java", "line": 23, "faulty": "prefix_lengths.add(j);", "type": "Replace", "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"}, {"path": "src/main/java/LIS.java", "line": 29, "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", "type": "InsertBefore", "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"}, {"path": "src/main/java/LIS.java", "line": 31, "faulty": "longest=length + 1;", "type": "Replace", "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"}], "patch": "--- /tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 05:37:18.902230939 -0500\n+++ /tmp/Arja_QuixBugs_LIS_/patches_nmk9/Patch_865/patched/tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 05:40:03.683088658 -0500\n@@ -20,15 +20,25 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n+                    if (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n                 }\n             }\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n             }\n \n             i++;\n\n\n"}]}}, {"bug_id": "", "tool": "GenProg-A", "nb_patch": 108, "benchmark": "QuixBugs", "project": "LIS", "result": {"repair_end": "2018-12-02 21:02:51.965466", "repair_begin": "2018-12-02 20:59:56.088253", "patches": [{"edits": [{"path": "src/main/java/LIS.java", "line": 29, "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", "type": "InsertBefore", "seed": "ends.put(length + 1,i);"}, {"path": "src/main/java/LIS.java", "line": 30, "faulty": "ends.put(length + 1,i);", "type": "InsertBefore", "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"}, {"path": "src/main/java/LIS.java", "line": 29, "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", "type": "InsertBefore", "seed": "ends.put(length + 1,i);"}, {"path": "src/main/java/LIS.java", "line": 30, "faulty": "ends.put(length + 1,i);", "type": "InsertBefore", "seed": "ends.put(length + 1,i);"}, {"path": "src/main/java/LIS.java", "line": 31, "faulty": "longest=length + 1;", "type": "InsertBefore", "seed": "ends.put(length + 1,i);"}, {"path": "src/main/java/LIS.java", "line": 21, "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", "type": "Replace", "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"}, {"path": "src/main/java/LIS.java", "line": 31, "faulty": "longest=length + 1;", "type": "InsertBefore", "seed": "ends.put(length + 1,i);"}, {"path": "src/main/java/LIS.java", "line": 30, "faulty": "ends.put(length + 1,i);", "type": "Delete", "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"}], "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_876/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:33.478854782 -0500\n@@ -18,17 +18,26 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"}]}}, {"bug_id": "", "tool": "jGenProg", "nb_patch": 1, "benchmark": "QuixBugs", "project": "LIS", "result": {"repair_end": "2018-12-02 15:07:10.615110", "repair_begin": "2018-12-02 15:05:48.145180", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/LIS.java\\n+++ java_programs\\/LIS.java\\n@@ -26,8 +26,8 @@\\n \\n \\t\\t\\tint length = (!(prefix_lengths.isEmpty())) ? java.util.Collections.max(prefix_lengths) : 0;\\n \\n-\\t\\t\\tif ((length == longest) || (val < (arr[ends.get((length + 1))]))) {\\n-\\t\\t\\t\\tends.put((length + 1), i);\\n+\\n+\\t\\t\\tends.put((length + 1), i); \\t\\t\\tif ((length == longest) || (val < (arr[ends.get((length + 1))]))) { \\t\\t\\t\\tends.put((length + 1), i);\\n \\t\\t\\t\\tlongest = length + 1;\\n \\t\\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((length == longest) || (val < (arr[ends.get((length + 1))]))) {\\n\\tends.put((length + 1), i);\\n\\tlongest = length + 1;\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "ends.put((length + 1), i)", "INGREDIENT_PARENT": "ends.put((length + 1), i)", "LOCATION": "java_programs.LIS", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_LIS_\\/.\\/output_astor\\/AstorMain-LIS-\\/\\/src\\/\\/variant-1330_f\\/java_programs\\/LIS.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_QuixBugs_LIS_\\/output_astor\\/AstorMain-LIS-\\/src\\/default\\/LIS.java", "LINE": "29", "MP_RANKING": "9", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "665", "VARIANT_ID": "1330", "TIME": "77", "VALIDATION": "|true|0|4|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_LIS_\\/.\\/output_astor\\/AstorMain-LIS-\\/\\/bin\\/\\/variant-1330"}]}}, {"bug_id": "", "tool": "RSRepair-A", "nb_patch": 5, "benchmark": "QuixBugs", "project": "LIS", "result": {"repair_end": "2018-12-02 18:32:56.073432", "repair_begin": "2018-12-02 18:31:12.634357", "patches": [{"edits": [{"path": "src/main/java/LIS.java", "line": 31, "faulty": "longest=length + 1;", "type": "Delete", "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"}, {"path": "src/main/java/LIS.java", "line": 34, "faulty": "i++;", "type": "InsertBefore", "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"}], "patch": "--- /tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 12:31:08.869182822 -0500\n+++ /tmp/RSRepair_QuixBugs_LIS_/patches_yr6r/Patch_317/patched/tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 12:32:07.677466262 -0500\n@@ -28,10 +28,13 @@\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n             }\n \n-            i++;\n+            if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n+\t\t\t}\n+\t\t\ti++;\n         }\n         return longest;\n     }\n\n\n"}]}}, {"bug_id": "", "tool": "Cardumen", "nb_patch": 1, "benchmark": "QuixBugs", "project": "MERGESORT", "result": {"repair_end": "2018-12-29 06:46:26.710098", "repair_begin": "2018-12-29 06:46:19.209518", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/MERGESORT.java\\n+++ java_programs\\/MERGESORT.java\\n@@ -35,10 +35,10 @@\\n \\t}\\n \\n \\tpublic static java.util.ArrayList<java.lang.Integer> mergesort(java.util.ArrayList<java.lang.Integer> arr) {\\n-\\t\\tif ((arr.size()) == 0) {\\n-\\t\\t\\treturn arr;\\n-\\t\\t}else {\\n-\\t\\t\\tint middle = (arr.size()) \\/ 2;\\n+\\t\\tif (\\n+\\n+\\n+\\t\\t((arr.size()) \\/ 2) == 0) { \\t\\t\\treturn arr;}else { \\t\\t\\tint middle = (arr.size()) \\/ 2;\\n \\t\\t\\tjava.util.ArrayList<java.lang.Integer> left = new java.util.ArrayList<java.lang.Integer>(100);\\n \\t\\t\\tleft.addAll(arr.subList(0, middle));\\n \\t\\t\\tleft = java_programs.MERGESORT.mergesort(left);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBinaryOperatorImpl", "ORIGINAL_CODE": "(arr.size())", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "((arr.size()) \\/ 2)", "INGREDIENT_PARENT": "(_ArrayList_0.size()) \\/ 2", "LOCATION": "java_programs.MERGESORT", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_QuixBugs_MERGESORT_\\/.\\/output_astor\\/AstorMain-MERGESORT-\\/\\/src\\/\\/variant-4_f\\/java_programs\\/MERGESORT.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_QuixBugs_MERGESORT_\\/output_astor\\/AstorMain-MERGESORT-\\/src\\/default\\/MERGESORT.java", "LINE": "38", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtBinaryOperatorImpl"}], "GENERATION": "2", "VARIANT_ID": "4", "TIME": "1", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_QuixBugs_MERGESORT_\\/.\\/output_astor\\/AstorMain-MERGESORT-\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "QuixBugs", "project": "NEXT_PERMUTATION", "result": {"repair_end": "2018-12-07 09:59:45.232586", "repair_begin": "2018-12-07 09:59:37.104252", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/NEXT_PERMUTATION.java\\n+++ java_programs\\/NEXT_PERMUTATION.java\\n@@ -16,7 +16,7 @@\\n \\t\\tfor (int i = (perm.size()) - 2; i != (-1); i--) {\\n \\t\\t\\tif ((perm.get(i)) < (perm.get((i + 1)))) {\\n \\t\\t\\t\\tfor (int j = (perm.size()) - 1; j != i; j--) {\\n-\\t\\t\\t\\t\\tif ((perm.get(j)) < (perm.get(i))) {\\n+\\t\\t\\t\\t\\tif ((perm.get(j)) >= (perm.get(i))) {\\n \\t\\t\\t\\t\\t\\tjava.util.ArrayList<java.lang.Integer> next_perm = perm;\\n \\t\\t\\t\\t\\t\\tint temp_j = perm.get(j);\\n \\t\\t\\t\\t\\t\\tint temp_i = perm.get(i);\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "(perm.get(j)) < (perm.get(i))", "PATCH_HUNK_CODE": "(perm.get(j)) >= (perm.get(i))", "LOCATION": "java_programs.NEXT_PERMUTATION", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_QuixBugs_NEXT_PERMUTATION_\\/.\\/output_astor\\/AstorMain-NEXT_PERMUTATION-\\/\\/src\\/\\/variant-10_f\\/java_programs\\/NEXT_PERMUTATION.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_QuixBugs_NEXT_PERMUTATION_\\/output_astor\\/AstorMain-NEXT_PERMUTATION-\\/src\\/default\\/NEXT_PERMUTATION.java", "LINE": "19", "MP_RANKING": "1", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "10", "TIME": "2", "VALIDATION": "|true|0|8|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_QuixBugs_NEXT_PERMUTATION_\\/.\\/output_astor\\/AstorMain-NEXT_PERMUTATION-\\/\\/bin\\/\\/variant-10"}]}}, {"bug_id": "", "tool": "ARJA", "nb_patch": 33, "benchmark": "QuixBugs", "project": "QUICKSORT", "result": {"repair_end": "2018-12-02 11:46:38.972439", "repair_begin": "2018-12-02 11:36:35.816818", "patches": [{"edits": [{"path": "src/main/java/QUICKSORT.java", "line": 16, "faulty": "return new ArrayList<Integer>();", "type": "Replace", "seed": "if (arr.isEmpty()) {\n  return new ArrayList<Integer>();\n}"}, {"path": "src/main/java/QUICKSORT.java", "line": 26, "faulty": "if (x > pivot) {\n  greater.add(x);\n}", "type": "Replace", "seed": "greater.add(x);"}, {"path": "src/main/java/QUICKSORT.java", "line": 27, "faulty": "greater.add(x);", "type": "Replace", "seed": "if (x < pivot) {\n  lesser.add(x);\n}\n else if (x > pivot) {\n  greater.add(x);\n}"}], "patch": "--- /tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-02 05:36:30.254338040 -0500\n+++ /tmp/Arja_QuixBugs_QUICKSORT_/patches_2c2c/Patch_1280/patched/tmp/Arja_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-02 05:43:02.203568027 -0500\n@@ -13,7 +13,9 @@\n public class QUICKSORT {\n     public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n         if (arr.isEmpty()) {\n-            return new ArrayList<Integer>();\n+            if (arr.isEmpty()) {\n+\t\t\t\treturn new ArrayList<Integer>();\n+\t\t\t}\n         }\n \n         Integer pivot = arr.get(0);\n@@ -23,9 +25,8 @@\n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n-                greater.add(x);\n-            }\n+            } else\n+\t\t\t\tgreater.add(x);\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n\n\n"}]}}, {"bug_id": "", "tool": "DynaMoth", "nb_patch": 1, "benchmark": "QuixBugs", "project": "QUICKSORT", "result": {"repair_end": "2018-12-02 18:03:38.826986", "repair_begin": "2018-12-02 18:03:34.776810", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 26, "class": "java_programs.QUICKSORT"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/QUICKSORT.java\n+++ b/src/main/java/QUICKSORT.java\n@@ -25,3 +25,3 @@\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+            } else if (true) {\n                 greater.add(x);\n"}]}}, {"bug_id": "", "tool": "jKali", "nb_patch": 1, "benchmark": "QuixBugs", "project": "QUICKSORT", "result": {"repair_end": "2018-12-02 14:15:50.451895", "repair_begin": "2018-12-02 14:15:44.808701", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/QUICKSORT.java\\n+++ java_programs\\/QUICKSORT.java\\n@@ -23,7 +23,7 @@\\n \\t\\tfor (java.lang.Integer x : arr.subList(1, arr.size())) {\\n \\t\\t\\tif (x < pivot) {\\n \\t\\t\\t\\tlesser.add(x);\\n-\\t\\t\\t}else { \\t\\t\\t\\tif (x > pivot) {\\n+\\t\\t\\t}else { \\t\\t\\t\\tif (true) {\\n \\t\\t\\t\\t\\tgreater.add(x);\\n \\t\\t\\t\\t}}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (x > pivot) {\\n\\tgreater.add(x);\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\tgreater.add(x);\\n}", "LOCATION": "java_programs.QUICKSORT", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_QuixBugs_QUICKSORT_\\/.\\/output_astor\\/AstorMain-QUICKSORT-\\/\\/src\\/\\/variant-2_f\\/java_programs\\/QUICKSORT.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_QuixBugs_QUICKSORT_\\/output_astor\\/AstorMain-QUICKSORT-\\/src\\/default\\/QUICKSORT.java", "LINE": "26", "MP_RANKING": "0", "SUSPICIOUNESS": "0.289", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_QuixBugs_QUICKSORT_\\/.\\/output_astor\\/AstorMain-QUICKSORT-\\/\\/bin\\/\\/variant-2"}]}}, {"bug_id": "", "tool": "jMutRepair", "nb_patch": 1, "benchmark": "QuixBugs", "project": "QUICKSORT", "result": {"repair_end": "2018-12-07 09:56:54.105336", "repair_begin": "2018-12-07 09:56:47.786369", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/QUICKSORT.java\\n+++ java_programs\\/QUICKSORT.java\\n@@ -23,7 +23,7 @@\\n \\t\\tfor (java.lang.Integer x : arr.subList(1, arr.size())) {\\n \\t\\t\\tif (x < pivot) {\\n \\t\\t\\t\\tlesser.add(x);\\n-\\t\\t\\t}else \\t\\t\\t\\tif (x > pivot) {\\n+\\t\\t\\t}else \\t\\t\\t\\tif (x >= pivot) {\\n \\t\\t\\t\\t\\tgreater.add(x);\\n \\t\\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtIfImpl", "ORIGINAL_CODE": "x > pivot", "PATCH_HUNK_CODE": "x >= pivot", "LOCATION": "java_programs.QUICKSORT", "MODIFIED_FILE_PATH": "\\/tmp\\/jMutRepair_QuixBugs_QUICKSORT_\\/.\\/output_astor\\/AstorMain-QUICKSORT-\\/\\/src\\/\\/variant-4_f\\/java_programs\\/QUICKSORT.java", "OPERATOR": "IfExpresionMutOp", "PATH": "\\/tmp\\/jMutRepair_QuixBugs_QUICKSORT_\\/output_astor\\/AstorMain-QUICKSORT-\\/src\\/default\\/QUICKSORT.java", "LINE": "26", "MP_RANKING": "0", "SUSPICIOUNESS": "0.289", "PATCH_HUNK_TYPE": "CtBinaryOperatorImpl|CtIfImpl"}], "GENERATION": "1", "VARIANT_ID": "4", "TIME": "0", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jMutRepair_QuixBugs_QUICKSORT_\\/.\\/output_astor\\/AstorMain-QUICKSORT-\\/\\/bin\\/\\/variant-4"}]}}, {"bug_id": "", "tool": "Kali-A", "nb_patch": 1, "benchmark": "QuixBugs", "project": "QUICKSORT", "result": {"repair_end": "2018-12-02 11:18:14.920688", "repair_begin": "2018-12-02 11:18:09.722908", "patches": [{"edits": [{"path": "src/main/java/QUICKSORT.java", "line": 26, "faulty": "if (x > pivot) {\n  greater.add(x);\n}", "type": "RedirectBranch true"}], "patch": "--- /tmp/Kali_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-02 05:18:03.911398987 -0500\n+++ /tmp/Kali_QuixBugs_QUICKSORT_/patches_hww4/Patch_1/patched/tmp/Kali_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-02 05:18:14.555399230 -0500\n@@ -23,7 +23,7 @@\n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+            } else if (true) {\n                 greater.add(x);\n             }\n         }\n\n\n"}]}}, {"bug_id": "", "tool": "Nopol", "nb_patch": 1, "benchmark": "QuixBugs", "project": "QUICKSORT", "result": {"repair_end": "2018-12-02 20:37:27.492104", "repair_begin": "2018-12-02 20:37:23.016305", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 26, "class": "java_programs.QUICKSORT"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/QUICKSORT.java\n+++ b/src/main/java/QUICKSORT.java\n@@ -25,3 +25,3 @@\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+            } else if (lesser!=null) {\n                 greater.add(x);\n"}]}}, {"bug_id": "", "tool": "RSRepair-A", "nb_patch": 1, "benchmark": "QuixBugs", "project": "QUICKSORT", "result": {"repair_end": "2018-12-02 18:36:08.990500", "repair_begin": "2018-12-02 18:31:16.048111", "patches": [{"edits": [{"path": "src/main/java/QUICKSORT.java", "line": 26, "faulty": "if (x > pivot) {\n  greater.add(x);\n}", "type": "Replace", "seed": "greater.add(x);"}], "patch": "--- /tmp/RSRepair_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-02 12:31:12.235565775 -0500\n+++ /tmp/RSRepair_QuixBugs_QUICKSORT_/patches_4rrc/Patch_546/patched/tmp/RSRepair_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-02 12:34:11.456017610 -0500\n@@ -23,9 +23,8 @@\n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n-                greater.add(x);\n-            }\n+            } else\n+\t\t\t\tgreater.add(x);\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n\n\n"}]}}, {"bug_id": "", "tool": "Cardumen", "nb_patch": 1, "benchmark": "QuixBugs", "project": "RPN_EVAL", "result": {"repair_end": "2018-12-29 06:36:42.494126", "repair_begin": "2018-12-29 06:36:28.000226", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/RPN_EVAL.java\\n+++ java_programs\\/RPN_EVAL.java\\n@@ -31,7 +31,7 @@\\n \\t\\t\\t\\tjava.lang.Double b = ((java.lang.Double) (stack.pop()));\\n \\t\\t\\t\\tjava.lang.Double c = 0.0;\\n \\t\\t\\t\\tjava.util.function.BinaryOperator<java.lang.Double> bin_op = op.get(token);\\n-\\t\\t\\t\\tc = bin_op.apply(a, b);\\n+\\t\\t\\t\\tc = bin_op.apply(b, a);\\n \\t\\t\\t\\tstack.push(c);\\n \\t\\t\\t}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtAssignmentImpl", "ORIGINAL_CODE": "bin_op.apply(a, b)", "INGREDIENT_SCOPE": "-", "PATCH_HUNK_CODE": "bin_op.apply(b, a)", "INGREDIENT_PARENT": "_BinaryOperator_0.apply(_Double_1, _Double_2)", "LOCATION": "java_programs.RPN_EVAL", "MODIFIED_FILE_PATH": "\\/tmp\\/Cardumen_QuixBugs_RPN_EVAL_\\/.\\/output_astor\\/AstorMain-RPN_EVAL-\\/\\/src\\/\\/variant-72_f\\/java_programs\\/RPN_EVAL.java", "OPERATOR": "ExpressionReplaceOperator", "PATH": "\\/tmp\\/Cardumen_QuixBugs_RPN_EVAL_\\/output_astor\\/AstorMain-RPN_EVAL-\\/src\\/default\\/RPN_EVAL.java", "LINE": "34", "MP_RANKING": "22", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtAssignmentImpl"}], "GENERATION": "36", "VARIANT_ID": "72", "TIME": "9", "VALIDATION": "|true|0|6|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/Cardumen_QuixBugs_RPN_EVAL_\\/.\\/output_astor\\/AstorMain-RPN_EVAL-\\/\\/bin\\/\\/variant-72"}]}}, {"bug_id": "", "tool": "ARJA", "nb_patch": 192, "benchmark": "QuixBugs", "project": "SHORTEST_PATH_LENGTHS", "result": {"repair_end": "2018-12-02 11:41:21.427734", "repair_begin": "2018-12-02 11:37:20.540431", "patches": [{"edits": [{"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 20, "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", "type": "Replace", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 28, "faulty": "length_by_path.put(edge,INF);", "type": "InsertBefore", "seed": "length_by_path.put(edge,0);"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 41, "faulty": "return length_by_path;", "type": "Replace", "seed": "return length_by_path;"}], "patch": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1094/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:18.537088250 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n"}]}}, {"bug_id": "", "tool": "GenProg-A", "nb_patch": 955, "benchmark": "QuixBugs", "project": "SHORTEST_PATH_LENGTHS", "result": {"repair_end": "2018-12-02 21:05:16.396072", "repair_begin": "2018-12-02 20:59:55.788180", "patches": [{"edits": [{"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 33, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", "type": "Delete", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 19, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", "type": "Delete", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 23, "faulty": "length_by_path.put(edge,0);", "type": "Delete", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 19, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", "type": "Delete", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 33, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", "type": "Delete", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 25, "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Delete", "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 26, "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", "type": "InsertBefore", "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 19, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", "type": "Delete", "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 32, "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", "type": "Delete", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 19, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", "type": "Delete", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 33, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 26, "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", "type": "Replace", "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 26, "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", "type": "Replace", "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 28, "faulty": "length_by_path.put(edge,INF);", "type": "Delete", "seed": "List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 34, "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", "type": "InsertBefore", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 23, "faulty": "length_by_path.put(edge,0);", "type": "Delete", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 19, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", "type": "Delete", "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 32, "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", "type": "Delete", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 22, "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Replace", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 20, "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", "type": "InsertBefore", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 26, "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", "type": "Delete", "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 19, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", "type": "Delete", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 23, "faulty": "length_by_path.put(edge,0);", "type": "Delete", "seed": "length_by_path.put(edge,length_by_edge.get(edge));"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 32, "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", "type": "Delete", "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 20, "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", "type": "InsertBefore", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 25, "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Replace", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 25, "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Delete", "seed": "length_by_path.put(edge,length_by_edge.get(edge));"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 32, "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", "type": "Delete", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 22, "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 26, "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", "type": "Replace", "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}], "patch": "--- /tmp/GenProg_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 14:59:50.651091909 -0500\n+++ /tmp/GenProg_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_n0cb/Patch_869/patched/tmp/GenProg_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 15:01:44.703824109 -0500\n@@ -15,29 +15,7 @@\n     // for vertices not connected to each other\n     final static int INF = 99999;\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n-        Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n-        for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n-        }\n+        Map<List<Integer>, Integer> length_by_path = new HashMap<>();\n         return length_by_path;\n     }\n }\n\n\n"}]}}, {"bug_id": "", "tool": "jGenProg", "nb_patch": 1, "benchmark": "QuixBugs", "project": "SHORTEST_PATH_LENGTHS", "result": {"repair_end": "2018-12-02 14:59:42.096758", "repair_begin": "2018-12-02 14:59:31.832055", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/SHORTEST_PATH_LENGTHS.java\\n+++ java_programs\\/SHORTEST_PATH_LENGTHS.java\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return length_by_path", "INGREDIENT_PARENT": "return length_by_path", "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52_f\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/src\\/default\\/SHORTEST_PATH_LENGTHS.java", "LINE": "22", "MP_RANKING": "4", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "26", "VARIANT_ID": "52", "TIME": "5", "VALIDATION": "|true|0|4|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52"}]}}, {"bug_id": "", "tool": "RSRepair-A", "nb_patch": 22, "benchmark": "QuixBugs", "project": "SHORTEST_PATH_LENGTHS", "result": {"repair_end": "2018-12-02 18:33:35.270915", "repair_begin": "2018-12-02 18:31:13.906798", "patches": [{"edits": [{"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 20, "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", "type": "Replace", "seed": "return length_by_path;"}], "patch": "--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 12:31:10.452838352 -0500\n+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_s07s/Patch_64/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 12:31:27.716800105 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n"}]}}, {"bug_id": "", "tool": "GenProg-A", "nb_patch": 29, "benchmark": "QuixBugs", "project": "SQRT", "result": {"repair_end": "2018-12-02 21:12:38.812398", "repair_begin": "2018-12-02 21:00:04.570745", "patches": [{"edits": [{"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Delete", "seed": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "Replace", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "Replace", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 15, "faulty": "double approx=x / 2f;", "type": "Replace", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Delete", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 15, "faulty": "double approx=x / 2f;", "type": "Replace", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Delete", "seed": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "Replace", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "Replace", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 15, "faulty": "double approx=x / 2f;", "type": "Replace", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "Replace", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 15, "faulty": "double approx=x / 2f;", "type": "Replace", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "Replace", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 15, "faulty": "double approx=x / 2f;", "type": "Replace", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}], "patch": "--- /tmp/GenProg_QuixBugs_SQRT_/src/main/java/SQRT.java\t2018-12-02 14:59:58.999350896 -0500\n+++ /tmp/GenProg_QuixBugs_SQRT_/patches_p6et/Patch_888/patched/tmp/GenProg_QuixBugs_SQRT_/src/main/java/SQRT.java\t2018-12-02 15:08:00.646413940 -0500\n@@ -13,9 +13,13 @@\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2f;\n-        while (Math.abs(x-approx) > epsilon) {\n-            approx = 0.5f * (approx + x / approx);\n-        }\n+        approx = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n         return approx;\n     }\n }\n\n\n"}]}}]