[{"project": "dungba88-libra", "bug_id": "436514153-436524727", "tool": "Arja", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/main/java/org/joo/libra/sql/node/VariableExpressionNode.java", "line": 30, "faulty": "if (value == null) {\n  value=getValueNoCache(context);\n  cachedValues.put(variableName,value);\n}", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "dungba88-libra", "bug_id": "436514153-436524727", "tool": "Kali", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/main/java/org/joo/libra/pointer/VariablePredicate.java", "line": 34, "faulty": "if (rawValue instanceof Boolean) return Boolean.TRUE.equals(rawValue);", "type": "RedirectBranch true"}]}]}}, {"project": "opentracing-contrib-java-p6spy", "bug_id": "390188323-431527545", "tool": "Arja", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java", "line": 101, "faulty": "decorate(scope.span(),statementInformation);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "opentracing-contrib-java-p6spy", "bug_id": "390188323-431527545", "tool": "Kali", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "", "line": 101, "faulty": "decorate(scope.span(),statementInformation);", "type": "Delete /tmp/Kali_Bears_opentracing-contrib-java-p6spy_390188323-431527545/src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java"}]}]}}, {"project": "spring-projects-spring-data-commons", "bug_id": "185852074-193313389", "tool": "Kali", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/main/java/org/springframework/data/auditing/IsNewAwareAuditingHandler.java", "line": 76, "faulty": "if (object == null) {\n  return;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "SzFMV2018-Tavasz-AutomatedCar", "bug_id": "351742666-351759763", "tool": "Arja", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 93, "faulty": "progressBarsPanel.add(breakLabel);", "type": "Delete", "seed": "progressBarsPanel.add(breakProgressBar);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Replace", "seed": "initializeDashboard();"}]}]}}, {"project": "SzFMV2018-Tavasz-AutomatedCar", "bug_id": "351742666-351759763", "tool": "Kali", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 57, "faulty": "speedAngle=calculateSpeedometer(0);", "type": "InsertReturn true"}]}]}}, {"project": "SzFMV2018-Tavasz-AutomatedCar", "bug_id": "351742666-351759763", "tool": "RSRepair", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 57, "faulty": "speedAngle=calculateSpeedometer(0);", "type": "InsertBefore", "seed": "final int maxSpeedValue=500;"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 59, "faulty": "paintComponent(getGraphics());", "type": "Replace", "seed": "progressBarsPanel.add(breakProgressBar);"}, {"path": "src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java", "line": 144, "faulty": "return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter) / (maxSpeedValue - minSpeedValue) + minSpeedMeter;", "type": "InsertBefore", "seed": "progressBarsPanel.add(gasLabel);"}]}]}}, {"project": "traccar-traccar", "bug_id": "188473748-188474474", "tool": "Arja", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/org/traccar/protocol/GoSafeProtocolDecoder.java", "line": 171, "faulty": "position.set(Position.KEY_IGNITION,BitUtil.check(status,13));", "type": "Delete", "seed": "NULL"}, {"path": "src/org/traccar/protocol/GoSafeProtocolDecoder.java", "line": 169, "faulty": "if (parser.hasNext(6)) {\n  long status=parser.nextLong(16);\n  position.set(Position.KEY_IGNITION,BitUtil.check(status,13));\n  position.set(Position.KEY_STATUS,status);\n  position.set(\"ioStatus\",parser.next());\n  position.set(Position.KEY_GEOFENCE,parser.next() + parser.next());\n  position.set(\"eventStatus\",parser.next());\n  position.set(\"packetType\",parser.next());\n}", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "traccar-traccar", "bug_id": "188473748-188474474", "tool": "jGenProg", "benchmark": "Bears", "result": {"patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java\\n@@ -156,37 +156,37 @@\\n \\n \\t\\tposition.set(org.traccar.model.Position.KEY_HDOP, parser.next());\\n \\n-\\t\\tif (parser.hasNext(4)) {\\n-\\t\\t\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n-\\t\\t\\tparser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));\\n-\\t\\t}\\n-\\t\\tif (parser.hasNext()) {\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, parser.nextInt());\\n-\\t\\t}\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_POWER, parser.next());\\n-\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, parser.next());\\n \\n-\\t\\tif (parser.hasNext(6)) {\\n-\\t\\t\\tlong status = parser.nextLong(16);\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(status, 13));\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_STATUS, status);\\n-\\t\\t\\tposition.set(\\\"ioStatus\\\", parser.next());\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_GEOFENCE, ((parser.next()) + (parser.next())));\\n-\\t\\t\\tposition.set(\\\"eventStatus\\\", parser.next());\\n-\\t\\t\\tposition.set(\\\"packetType\\\", parser.next());\\n-\\t\\t}\\n \\n-\\t\\tif (parser.hasNext()) {\\n-\\t\\t\\tposition.set(\\\"eventData\\\", parser.next());\\n-\\t\\t}\\n \\n-\\t\\tif (parser.hasNext()) {\\n-\\t\\t\\tposition.set(\\\"obd\\\", parser.next());\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\t\\tif (parser.hasNext()) {\\n \\t\\t\\tposition.set(\\\"tagData\\\", parser.next());\\n-\\t\\t}\\n+\\t\\t} \\t\\tif (parser.hasNext()) { \\t\\t\\tposition.set(org.traccar.model.Position.KEY_ODOMETER, parser.nextInt());} \\t\\tposition.set(org.traccar.model.Position.KEY_POWER, parser.next()); \\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, parser.next()); \\t\\tif (parser.hasNext(6)) { \\t\\t\\tlong status = parser.nextLong(16); \\t\\t\\tposition.set(org.traccar.model.Position.KEY_IGNITION, org.traccar.helper.BitUtil.check(status, 13)); \\t\\t\\tposition.set(org.traccar.model.Position.KEY_STATUS, status); \\t\\t\\tposition.set(\\\"ioStatus\\\", parser.next()); \\t\\t\\tposition.set(org.traccar.model.Position.KEY_GEOFENCE, ((parser.next()) + (parser.next()))); \\t\\t\\tposition.set(\\\"eventStatus\\\", parser.next()); \\t\\t\\tposition.set(\\\"packetType\\\", parser.next());} \\t\\tif (parser.hasNext()) { \\t\\t\\tposition.set(\\\"eventData\\\", parser.next());} \\t\\tif (parser.hasNext()) { \\t\\t\\tposition.set(\\\"obd\\\", parser.next());} \\t\\tif (parser.hasNext()) { \\t\\t\\tposition.set(\\\"tagData\\\", parser.next());}\\n \\n \\t\\treturn position;\\n \\t}\\n\\n", "patchhunks": [{"MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_188473748-188474474\\/.\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/\\/src\\/\\/variant-100_f\\/org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java", "ORIGINAL_CODE": "if (parser.hasNext(4)) {\\n\\tposition.setNetwork(new org.traccar.model.Network(org.traccar.model.CellTower.from(\\n\\tparser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (parser.hasNext()) {\\n\\tposition.set(\\\"tagData\\\", parser.next());\\n}", "INGREDIENT_PARENT": "if (parser.hasNext()) {\\n\\tposition.set(\\\"tagData\\\", parser.next());\\n}", "LOCATION": "org.traccar.protocol.GoSafeProtocolDecoder", "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_188473748-188474474\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/src\\/default\\/org\\/traccar\\/protocol\\/GoSafeProtocolDecoder.java", "LINE": "159", "MP_RANKING": "14", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "50", "VARIANT_ID": "100", "TIME": "56", "VALIDATION": "|true|0|224|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_188473748-188474474\\/.\\/output_astor\\/AstorMain-traccar-traccar-188473748-188474474\\/\\/bin\\/\\/variant-100"}], "general": {"TOTAL_TIME": 56.074, "EXECUTION_IDENTIFIER": "traccar-traccar-188473748-188474474", "OUTPUT_STATUS": "STOP_BY_PATCH_FOUND", "NR_GENERATIONS": 50, "NR_RIGHT_COMPILATIONS": 37, "NR_FAILLING_COMPILATIONS": 13, "NR_ERRONEOUS_VARIANCES": null, "NR_FAILING_VALIDATION_PROCESS": null}}}, {"project": "traccar-traccar", "bug_id": "188473748-188474474", "tool": "Kali", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/org/traccar/protocol/GoSafeProtocolDecoder.java", "line": 159, "faulty": "if (parser.hasNext(4)) {\n  position.setNetwork(new Network(CellTower.from(parser.nextInt(),parser.nextInt(),parser.nextInt(16),parser.nextInt(16),parser.nextInt())));\n}", "type": "RedirectBranch false"}]}]}}, {"project": "traccar-traccar", "bug_id": "195128524-195455832", "tool": "Arja", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/org/traccar/events/IgnitionEventHandler.java", "line": 51, "faulty": "result=Collections.singleton(new Event(Event.TYPE_IGNITION_ON,position.getDeviceId(),position.getId()));", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "traccar-traccar", "bug_id": "195128524-195455832", "tool": "jGenProg", "benchmark": "Bears", "result": {"patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/events\\/IgnitionEventHandler.java\\n+++ org\\/traccar\\/events\\/IgnitionEventHandler.java\\n@@ -53,6 +53,6 @@\\n \\t\\t}else \\t\\t\\tif ((!ignition) && oldIgnition) {\\n \\t\\t\\t\\tresult = java.util.Collections.singleton(\\n \\t\\t\\t\\tnew org.traccar.model.Event(org.traccar.model.Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));\\n-\\t\\t\\t}\\n-\\t\\treturn result;\\n+\\t\\t\\t} \\t\\treturn null;\\n+\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", "patchhunks": [{"MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/src\\/\\/variant-2_f\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "ORIGINAL_CODE": "return result", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return null", "INGREDIENT_PARENT": "return null", "LOCATION": "org.traccar.events.IgnitionEventHandler", "BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_195128524-195455832\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/src\\/default\\/org\\/traccar\\/events\\/IgnitionEventHandler.java", "LINE": "57", "MP_RANKING": "10", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "4", "VALIDATION": "|true|0|227|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_195128524-195455832\\/.\\/output_astor\\/AstorMain-traccar-traccar-195128524-195455832\\/\\/bin\\/\\/variant-2"}], "general": {"TOTAL_TIME": 4.51, "EXECUTION_IDENTIFIER": "traccar-traccar-195128524-195455832", "OUTPUT_STATUS": "STOP_BY_PATCH_FOUND", "NR_GENERATIONS": 1, "NR_RIGHT_COMPILATIONS": 1, "NR_FAILLING_COMPILATIONS": null, "NR_ERRONEOUS_VARIANCES": null, "NR_FAILING_VALIDATION_PROCESS": null}}}, {"project": "traccar-traccar", "bug_id": "195128524-195455832", "tool": "Kali", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/org/traccar/events/IgnitionEventHandler.java", "line": 33, "faulty": "if (device == null) {\n  return null;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "traccar-traccar", "bug_id": "198464113-198488474", "tool": "Arja", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/org/traccar/protocol/Gl200ProtocolDecoder.java", "line": 624, "faulty": "for (int i=0; i < count; i++) {\n  String mac=parser.next().replaceAll(\"(..)\",\"$1:\");\n  network.addWifiAccessPoint(WifiAccessPoint.from(mac.substring(0,mac.length() - 1),parser.nextInt()));\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/org/traccar/protocol/Gl200ProtocolDecoder.java", "line": 619, "faulty": "getLastLocation(position,null);", "type": "Delete", "seed": "NULL"}, {"path": "src/org/traccar/model/Network.java", "line": 111, "faulty": "if (wifiAccessPoints == null) {\n  wifiAccessPoints=new ArrayList<>();\n}", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "traccar-traccar", "bug_id": "198464113-198488474", "tool": "jGenProg", "benchmark": "Bears", "result": {"patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java\\n@@ -621,10 +621,10 @@\\n \\t\\torg.traccar.model.Network network = new org.traccar.model.Network();\\n \\n \\t\\tint count = parser.nextInt();\\n-\\t\\tfor (int i = 0; i < count; i++) {\\n-\\t\\t\\tjava.lang.String mac = parser.next().replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n-\\t\\t\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(mac.substring(0, ((mac.length()) - 1)), parser.nextInt()));\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n \\n \\t\\treturn position;\\n \\t}\\n\\n", "patchhunks": [{"MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_198464113-198488474\\/.\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/\\/src\\/\\/variant-28_f\\/org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java", "ORIGINAL_CODE": "for (int i = 0; i < count; i++) {\\n\\tjava.lang.String mac = parser.next().replaceAll(\\\"(..)\\\", \\\"$1:\\\");\\n\\tnetwork.addWifiAccessPoint(org.traccar.model.WifiAccessPoint.from(mac.substring(0, ((mac.length()) - 1)), parser.nextInt()));\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.protocol.Gl200ProtocolDecoder", "BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_198464113-198488474\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/src\\/default\\/org\\/traccar\\/protocol\\/Gl200ProtocolDecoder.java", "LINE": "624", "MP_RANKING": "10", "SUSPICIOUNESS": "1"}], "GENERATION": "14", "VARIANT_ID": "28", "TIME": "14", "VALIDATION": "|true|0|228|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_198464113-198488474\\/.\\/output_astor\\/AstorMain-traccar-traccar-198464113-198488474\\/\\/bin\\/\\/variant-28"}], "general": {"TOTAL_TIME": 14.907, "EXECUTION_IDENTIFIER": "traccar-traccar-198464113-198488474", "OUTPUT_STATUS": "STOP_BY_PATCH_FOUND", "NR_GENERATIONS": 14, "NR_RIGHT_COMPILATIONS": 8, "NR_FAILLING_COMPILATIONS": 6, "NR_ERRONEOUS_VARIANCES": null, "NR_FAILING_VALIDATION_PROCESS": null}}}, {"project": "traccar-traccar", "bug_id": "198464113-198488474", "tool": "Kali", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "", "line": 624, "faulty": "for (int i=0; i < count; i++) {\n  String mac=parser.next().replaceAll(\"(..)\",\"$1:\");\n  network.addWifiAccessPoint(WifiAccessPoint.from(mac.substring(0,mac.length() - 1),parser.nextInt()));\n}", "type": "Delete /tmp/Kali_Bears_traccar-traccar_198464113-198488474/src/org/traccar/protocol/Gl200ProtocolDecoder.java"}]}]}}, {"project": "traccar-traccar", "bug_id": "212058933-212061222", "tool": "Arja", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/org/traccar/protocol/SuntechProtocolDecoder.java", "line": 136, "faulty": "position.set(Position.KEY_ODOMETER,Integer.parseInt(values[index++]));", "type": "Delete", "seed": "NULL"}, {"path": "src/org/traccar/protocol/SuntechProtocolDecoder.java", "line": 147, "faulty": "if (index < values.length) {\n  position.set(Position.KEY_HOURS,Integer.parseInt(values[index++]));\n}", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "traccar-traccar", "bug_id": "212058933-212061222", "tool": "jGenProg", "benchmark": "Bears", "result": {"patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n+++ org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java\\n@@ -144,9 +144,9 @@\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_INDEX, java.lang.Integer.parseInt(values[(index++)]));\\n \\t\\t}\\n \\n-\\t\\tif (index < (values.length)) {\\n-\\t\\t\\tposition.set(org.traccar.model.Position.KEY_HOURS, java.lang.Integer.parseInt(values[(index++)]));\\n-\\t\\t}\\n+\\n+\\n+\\n \\n \\t\\tif (index < (values.length)) {\\n \\t\\t\\tposition.set(org.traccar.model.Position.KEY_BATTERY, java.lang.Double.parseDouble(values[index]));\\n\\n", "patchhunks": [{"MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/src\\/\\/variant-2_f\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "ORIGINAL_CODE": "if (index < (values.length)) {\\n\\tposition.set(org.traccar.model.Position.KEY_HOURS, java.lang.Integer.parseInt(values[(index++)]));\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.traccar.protocol.SuntechProtocolDecoder", "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_212058933-212061222\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/src\\/default\\/org\\/traccar\\/protocol\\/SuntechProtocolDecoder.java", "LINE": "147", "MP_RANKING": "28", "SUSPICIOUNESS": "1"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "4", "VALIDATION": "|true|0|234|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_212058933-212061222\\/.\\/output_astor\\/AstorMain-traccar-traccar-212058933-212061222\\/\\/bin\\/\\/variant-2"}], "general": {"TOTAL_TIME": 4.758, "EXECUTION_IDENTIFIER": "traccar-traccar-212058933-212061222", "OUTPUT_STATUS": "STOP_BY_PATCH_FOUND", "NR_GENERATIONS": 1, "NR_RIGHT_COMPILATIONS": 1, "NR_FAILLING_COMPILATIONS": null, "NR_ERRONEOUS_VARIANCES": null, "NR_FAILING_VALIDATION_PROCESS": null}}}, {"project": "traccar-traccar", "bug_id": "212058933-212061222", "tool": "Kali", "benchmark": "Bears", "result": {"patches": [{"edits": [{"path": "src/org/traccar/protocol/SuntechProtocolDecoder.java", "line": 143, "faulty": "if (type.equals(\"STT\")) {\n  position.set(Position.KEY_INDEX,Integer.parseInt(values[index++]));\n}", "type": "RedirectBranch false"}]}]}}, {"project": "traccar-traccar", "bug_id": "216100740-216167822", "tool": "jGenProg", "benchmark": "Bears", "result": {"patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/traccar\\/helper\\/PatternBuilder.java\\n+++ org\\/traccar\\/helper\\/PatternBuilder.java\\n@@ -74,7 +74,7 @@\\n \\t\\treturn expression(\\\"(?:\\\");\\n \\t}\\n \\n-\\tpublic org.traccar.helper.PatternBuilder groupEnd() {\\n+\\tpublic org.traccar.helper.PatternBuilder groupEnd() { \\t\\tfragments.add(\\\".*?\\\");\\n \\t\\treturn expression(\\\")\\\");\\n \\t}\\n \\n\\n", "patchhunks": [{"MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_216100740-216167822\\/.\\/output_astor\\/AstorMain-traccar-traccar-216100740-216167822\\/\\/src\\/\\/variant-3430_f\\/org\\/traccar\\/helper\\/PatternBuilder.java", "ORIGINAL_CODE": "return expression(\\\")\\\")", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "fragments.add(\\\".*?\\\")", "INGREDIENT_PARENT": "fragments.add(\\\".*?\\\")", "LOCATION": "org.traccar.helper.PatternBuilder", "BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Bears_traccar-traccar_216100740-216167822\\/output_astor\\/AstorMain-traccar-traccar-216100740-216167822\\/src\\/default\\/org\\/traccar\\/helper\\/PatternBuilder.java", "LINE": "78", "MP_RANKING": "3", "SUSPICIOUNESS": "0.289", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "1715", "VARIANT_ID": "3430", "TIME": "1855", "VALIDATION": "|true|0|234|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bears_traccar-traccar_216100740-216167822\\/.\\/output_astor\\/AstorMain-traccar-traccar-216100740-216167822\\/\\/bin\\/\\/variant-3430"}], "general": {"TOTAL_TIME": 1855.663, "EXECUTION_IDENTIFIER": "traccar-traccar-216100740-216167822", "OUTPUT_STATUS": "STOP_BY_PATCH_FOUND", "NR_GENERATIONS": 1715, "NR_RIGHT_COMPILATIONS": 1312, "NR_FAILLING_COMPILATIONS": 403, "NR_ERRONEOUS_VARIANCES": null, "NR_FAILING_VALIDATION_PROCESS": 3}}}, {"project": "Chart", "bug_id": "1", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:37:38.849917", "repair_begin": "2018-12-01 14:26:19.841438", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-01 08:26:09.286817807 -0500\n+++ /tmp/Arja_Defects4J_Chart_1/patches_dw50/Patch_981/patched/tmp/Arja_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2018-12-01 09:01:08.973984563 -0500\n@@ -1793,10 +1793,15 @@\n             return result;\n         }\n         int index = this.plot.getIndexOf(this);\n-        CategoryDataset dataset = this.plot.getDataset(index);\n+        this.urlGeneratorList = new ObjectList();\n+\t\tCategoryDataset dataset = this.plot.getDataset(index);\n         if (dataset != null) {\n-            return result;\n-        }\n+\t\t\tthis.rowCount = dataset.getRowCount();\n+\t\t\tthis.columnCount = dataset.getColumnCount();\n+\t\t} else {\n+\t\t\tthis.rowCount = 0;\n+\t\t\tthis.columnCount = 0;\n+\t\t}\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {\n\n\n", "edits": [{"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1797, "faulty": "if (dataset != null) {\n  return result;\n}", "type": "Replace", "seed": "if (dataset != null) {\n  this.rowCount=dataset.getRowCount();\n  this.columnCount=dataset.getColumnCount();\n}\n else {\n  this.rowCount=0;\n  this.columnCount=0;\n}"}, {"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1796, "faulty": "CategoryDataset dataset=this.plot.getDataset(index);", "type": "InsertBefore", "seed": "this.urlGeneratorList=new ObjectList();"}]}]}}, {"project": "Chart", "bug_id": "1", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:35:10.099638", "repair_begin": "2018-11-29 22:28:18.805921", "patches": [{"edits": [{"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1798, "faulty": "return result;", "type": "Delete", "seed": "IntervalCategoryDataset d=(IntervalCategoryDataset)dataset;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1353, "faulty": "if (existing != null) {\n  existing.removeChangeListener(this);\n}", "type": "Delete", "seed": "List result=null;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1682, "faulty": "fireChangeEvent();", "type": "Delete", "seed": "this.foregroundRangeMarkers=new HashMap();"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1682, "faulty": "fireChangeEvent();", "type": "Delete", "seed": "this.foregroundRangeMarkers=new HashMap();"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1356, "faulty": "this.datasets.set(index,dataset);", "type": "InsertBefore", "seed": "AxisSpace fixed=getFixedDomainAxisSpace();"}]}]}}, {"project": "Chart", "bug_id": "1", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 22:38:57.221520", "repair_begin": "2018-11-30 22:30:40.228426", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n+++ org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java\\n@@ -1794,9 +1794,9 @@\\n \\t\\t}\\n \\t\\tint index = this.plot.getIndexOf(this);\\n \\t\\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\\n-\\t\\tif (dataset != null) {\\n-\\t\\t\\treturn result;\\n-\\t\\t}\\n+\\n+\\n+\\n \\t\\tint seriesCount = dataset.getRowCount();\\n \\t\\tif (plot.getRowRenderingOrder().equals(org.jfree.chart.util.SortOrder.ASCENDING)) {\\n \\t\\t\\tfor (int i = 0; i < seriesCount; i++) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (dataset != null) {\\n\\treturn result;\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/src\\/\\/variant-242_f\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_1\\/output_astor\\/AstorMain-Chart-1\\/src\\/default\\/org\\/jfree\\/chart\\/renderer\\/category\\/AbstractCategoryItemRenderer.java", "LINE": "1797", "MP_RANKING": "30", "SUSPICIOUNESS": "0.132"}], "GENERATION": "121", "VARIANT_ID": "242", "TIME": "108", "VALIDATION": "|true|0|4402|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_1\\/.\\/output_astor\\/AstorMain-Chart-1\\/\\/bin\\/\\/variant-242"}]}}, {"project": "Chart", "bug_id": "1", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:14:39.575683", "repair_begin": "2018-11-30 03:11:03.207298", "patches": [{"edits": [{"path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java", "line": 1797, "faulty": "if (dataset != null) {\n  return result;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Chart", "bug_id": "3", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:55:57.516034", "repair_begin": "2018-12-01 14:25:31.223646", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_3/source/org/jfree/data/time/TimeSeries.java\t2018-12-01 08:25:21.026940649 -0500\n+++ /tmp/Arja_Defects4J_Chart_3/patches_24th/Patch_1253/patched/tmp/Arja_Defects4J_Chart_3/source/org/jfree/data/time/TimeSeries.java\t2018-12-01 08:45:47.492696538 -0500\n@@ -561,7 +561,8 @@\n      *              permitted).\n      */\n     public void add(TimeSeriesDataItem item) {\n-        add(item, true);\n+        updateBoundsForRemovedItem(item);\n+\t\tadd(item, true);\n     }\n \n     /**\n@@ -664,7 +665,8 @@\n     public void add(RegularTimePeriod period, double value, boolean notify) {\n         // defer argument checking...\n         TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n-        add(item, notify);\n+        fireSeriesChanged();\n+\t\tadd(item, notify);\n     }\n \n     /**\n\n\n", "edits": [{"path": "source/org/jfree/data/time/TimeSeries.java", "line": 667, "faulty": "add(item,notify);", "type": "InsertBefore", "seed": "fireSeriesChanged();"}, {"path": "source/org/jfree/data/time/TimeSeries.java", "line": 564, "faulty": "add(item,true);", "type": "InsertBefore", "seed": "updateBoundsForRemovedItem(item);"}]}]}}, {"project": "Chart", "bug_id": "3", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 22:17:26.732436", "repair_begin": "2018-11-30 22:15:01.515203", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/time\\/TimeSeries.java\\n+++ org\\/jfree\\/data\\/time\\/TimeSeries.java\\n@@ -635,11 +635,7 @@\\n \\n \\n \\t\\t\\tif (notify) {\\n-\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t}\\n-\\t\\t}\\n \\n-\\t}\\n \\n \\n \\n@@ -648,10 +644,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value) {\\n \\n-\\t\\tadd(period, value, true);\\n-\\t}\\n \\n \\n \\n@@ -661,11 +654,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {\\n \\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tadd(item, notify);\\n-\\t}\\n \\n \\n \\n@@ -675,10 +664,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {\\n \\n-\\t\\tadd(period, value, true);\\n-\\t}\\n \\n \\n \\n@@ -688,11 +674,7 @@\\n \\n \\n \\n-\\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {\\n \\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tadd(item, notify);\\n-\\t}\\n \\n \\n \\n@@ -701,15 +683,6 @@\\n \\n \\n \\n-\\tpublic void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);\\n-\\t\\tint index = java.util.Collections.binarySearch(this.data, temp);\\n-\\t\\tif (index < 0) {\\n-\\t\\t\\tthrow new org.jfree.data.general.SeriesException((\\\"There is no existing value for the \\\" + \\n-\\t\\t\\t\\\"specified 'period'.\\\"));\\n-\\t\\t}\\n-\\t\\tupdate(index, value);\\n-\\t}\\n \\n \\n \\n@@ -717,27 +690,6 @@\\n \\n \\n \\n-\\tpublic void update(int index, java.lang.Number value) {\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));\\n-\\t\\tboolean iterate = false;\\n-\\t\\tjava.lang.Number oldYN = item.getValue();\\n-\\t\\tif (oldYN != null) {\\n-\\t\\t\\tdouble oldY = oldYN.doubleValue();\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) {\\n-\\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\titem.setValue(value);\\n-\\t\\tif (iterate) {\\n-\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t}else\\n-\\t\\t\\tif (value != null) {\\n-\\t\\t\\t\\tdouble yy = value.doubleValue();\\n-\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy);\\n-\\t\\t\\t\\tthis.maxY = maxIgnoreNaN(this.maxY, yy);\\n-\\t\\t\\t}\\n-\\t\\tfireSeriesChanged();\\n-\\t}\\n \\n \\n \\n@@ -747,19 +699,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {\\n-\\t\\torg.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries((\\\"Overwritten values from: \\\" + \\n-\\t\\t(getKey())));\\n-\\t\\tfor (int i = 0; i < (series.getItemCount()); i++) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), \\n-\\t\\t\\titem.getValue());\\n-\\t\\t\\tif (oldItem != null) {\\n-\\t\\t\\t\\toverwritten.add(oldItem);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn overwritten;\\n-\\t}\\n \\n \\n \\n@@ -772,10 +711,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, \\n-\\tdouble value) {\\n-\\t\\treturn addOrUpdate(period, new java.lang.Double(value));\\n-\\t}\\n \\n \\n \\n@@ -788,10 +723,6 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, \\n-\\tjava.lang.Number value) {\\n-\\t\\treturn addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));\\n-\\t}\\n \\n \\n \\n@@ -804,64 +735,14 @@\\n \\n \\n \\n-\\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {\\n \\n-\\t\\tif (item == null) {\\n-\\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"Null 'period' argument.\\\");\\n-\\t\\t}\\n-\\t\\tjava.lang.Class periodClass = item.getPeriod().getClass();\\n-\\t\\tif ((this.timePeriodClass) == null) {\\n-\\t\\t\\tthis.timePeriodClass = periodClass;\\n-\\t\\t}else\\n-\\t\\t\\tif (!(this.timePeriodClass.equals(periodClass))) {\\n-\\t\\t\\t\\tjava.lang.String msg = ((((\\\"You are trying to add data where the time \\\" + \\n-\\t\\t\\t\\t\\\"period class is \\\") + (periodClass.getName())) + \\n-\\t\\t\\t\\t\\\", but the TimeSeries is expecting an instance of \\\") + \\n-\\t\\t\\t\\t(this.timePeriodClass.getName())) + \\\".\\\";\\n-\\t\\t\\t\\tthrow new org.jfree.data.general.SeriesException(msg);\\n-\\t\\t\\t}\\n-\\t\\torg.jfree.data.time.TimeSeriesDataItem overwritten = null;\\n-\\t\\tint index = java.util.Collections.binarySearch(this.data, item);\\n-\\t\\tif (index >= 0) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem existing = \\n-\\t\\t\\t((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));\\n-\\t\\t\\toverwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));\\n \\n \\n-\\t\\t\\tboolean iterate = false;\\n-\\t\\t\\tjava.lang.Number oldYN = existing.getValue();\\n-\\t\\t\\tdouble oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) {\\n-\\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));\\n-\\t\\t\\t}\\n-\\t\\t\\texisting.setValue(item.getValue());\\n-\\t\\t\\tif (iterate) {\\n-\\t\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\t}else\\n-\\t\\t\\t\\tif ((item.getValue()) != null) {\\n-\\t\\t\\t\\t\\tdouble yy = item.getValue().doubleValue();\\n-\\t\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy);\\n-\\t\\t\\t\\t\\tthis.maxY = minIgnoreNaN(this.maxY, yy);\\n-\\t\\t\\t\\t}\\n-\\t\\t}else \\n-\\t\\t{\\n-\\t\\t\\titem = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));\\n-\\t\\t\\tthis.data.add(((-index) - 1), item);\\n-\\t\\t\\tupdateBoundsForAddedItem(item);\\n \\n \\n-\\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) {\\n-\\t\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));\\n-\\t\\t\\t\\tupdateBoundsForRemovedItem(d);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tremoveAgedItems(false);\\n \\n \\n-\\t\\tfireSeriesChanged();\\n-\\t\\treturn overwritten;\\n \\n-\\t}\\n \\n \\n \\n@@ -871,25 +752,8 @@\\n \\n \\n \\n-\\tpublic void removeAgedItems(boolean notify) {\\n \\n \\n-\\t\\tif ((getItemCount()) > 1) {\\n-\\t\\t\\tlong latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex();\\n-\\t\\t\\tboolean removed = false;\\n-\\t\\t\\twhile ((latest - (getTimePeriod(0).getSerialIndex())) > \\n-\\t\\t\\t(this.maximumItemAge)) {\\n-\\t\\t\\t\\tthis.data.remove(0);\\n-\\t\\t\\t\\tremoved = true;\\n-\\t\\t\\t} \\n-\\t\\t\\tif (removed) {\\n-\\t\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\t\\tif (notify) {\\n-\\t\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -901,60 +765,15 @@\\n \\n \\n \\n-\\tpublic void removeAgedItems(long latest, boolean notify) {\\n-\\t\\tif (this.data.isEmpty()) {\\n-\\t\\t\\treturn;\\n-\\t\\t}\\n \\n-\\t\\tlong index = java.lang.Long.MAX_VALUE;\\n-\\t\\ttry {\\n-\\t\\t\\tjava.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(\\n-\\t\\t\\t\\\"createInstance\\\", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, \\n-\\t\\t\\tjava.util.TimeZone.class });\\n-\\t\\t\\torg.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(\\n-\\t\\t\\tthis.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, \\n-\\t\\t\\tnew java.util.Date(latest), java.util.TimeZone.getDefault() })));\\n-\\t\\t\\tindex = newest.getSerialIndex();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.NoSuchMethodException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.IllegalAccessException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n-\\t\\t catch (java.lang.reflect.InvocationTargetException e) {\\n-\\t\\t\\te.printStackTrace();\\n-\\t\\t}\\n \\n \\n \\n-\\t\\tboolean removed = false;\\n-\\t\\twhile (((getItemCount()) > 0) && ((index - \\n-\\t\\t(getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) {\\n-\\t\\t\\tthis.data.remove(0);\\n-\\t\\t\\tremoved = true;\\n-\\t\\t} \\n-\\t\\tif (removed) {\\n-\\t\\t\\tfindBoundsByIteration();\\n-\\t\\t\\tif (notify) {\\n-\\t\\t\\t\\tfireSeriesChanged();\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n \\n \\n-\\tpublic void clear() {\\n-\\t\\tif ((this.data.size()) > 0) {\\n-\\t\\t\\tthis.data.clear();\\n-\\t\\t\\tthis.timePeriodClass = null;\\n-\\t\\t\\tthis.minY = java.lang.Double.NaN;\\n-\\t\\t\\tthis.maxY = java.lang.Double.NaN;\\n-\\t\\t\\tfireSeriesChanged();\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -964,12 +783,193 @@\\n \\n \\n \\n-\\tpublic void delete(org.jfree.data.time.RegularTimePeriod period) {\\n-\\t\\tint index = getIndex(period);\\n-\\t\\tif (index >= 0) {\\n-\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(\\n-\\t\\t\\tindex)));\\n-\\t\\t\\tupdateBoundsForRemovedItem(item);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\tupdateBoundsForRemovedItem(item);}}} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value) { \\t\\tadd(period, value, true);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tadd(item, notify);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\tadd(period, value, true);} \\tpublic void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tadd(item, notify);} \\tpublic void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\torg.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); \\t\\tint index = java.util.Collections.binarySearch(this.data, temp); \\t\\tif (index < 0) { \\t\\t\\tthrow new org.jfree.data.general.SeriesException((\\\"There is no existing value for the \\\" + \\\"specified 'period'.\\\"));} \\t\\tupdate(index, value);} \\tpublic void update(int index, java.lang.Number value) { \\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); \\t\\tboolean iterate = false; \\t\\tjava.lang.Number oldYN = item.getValue(); \\t\\tif (oldYN != null) { \\t\\t\\tdouble oldY = oldYN.doubleValue(); \\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) { \\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));}} \\t\\titem.setValue(value); \\t\\tif (iterate) { \\t\\t\\tfindBoundsByIteration();}else \\t\\t\\tif (value != null) { \\t\\t\\t\\tdouble yy = value.doubleValue(); \\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy); \\t\\t\\t\\tthis.maxY = maxIgnoreNaN(this.maxY, yy);} \\t\\tfireSeriesChanged();} \\tpublic org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) { \\t\\torg.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries((\\\"Overwritten values from: \\\" + (getKey()))); \\t\\tfor (int i = 0; i < (series.getItemCount()); i++) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i); \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue()); \\t\\t\\tif (oldItem != null) { \\t\\t\\t\\toverwritten.add(oldItem);}} \\t\\treturn overwritten;} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) { \\t\\treturn addOrUpdate(period, new java.lang.Double(value));} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { \\t\\treturn addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));} \\tpublic org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) { \\t\\tif (item == null) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"Null 'period' argument.\\\");} \\t\\tjava.lang.Class periodClass = item.getPeriod().getClass(); \\t\\tif ((this.timePeriodClass) == null) { \\t\\t\\tthis.timePeriodClass = periodClass;}else \\t\\t\\tif (!(this.timePeriodClass.equals(periodClass))) { \\t\\t\\t\\tjava.lang.String msg = ((((\\\"You are trying to add data where the time \\\" + \\\"period class is \\\") + (periodClass.getName())) + \\\", but the TimeSeries is expecting an instance of \\\") + (this.timePeriodClass.getName())) + \\\".\\\"; \\t\\t\\t\\tthrow new org.jfree.data.general.SeriesException(msg);} \\t\\torg.jfree.data.time.TimeSeriesDataItem overwritten = null; \\t\\tint index = java.util.Collections.binarySearch(this.data, item); \\t\\tif (index >= 0) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); \\t\\t\\toverwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone())); \\t\\t\\tboolean iterate = false; \\t\\t\\tjava.lang.Number oldYN = existing.getValue(); \\t\\t\\tdouble oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN; \\t\\t\\tif (!(java.lang.Double.isNaN(oldY))) { \\t\\t\\t\\titerate = (oldY <= (this.minY)) || (oldY >= (this.maxY));} \\t\\t\\texisting.setValue(item.getValue()); \\t\\t\\tif (iterate) { \\t\\t\\t\\tfindBoundsByIteration();}else \\t\\t\\t\\tif ((item.getValue()) != null) { \\t\\t\\t\\t\\tdouble yy = item.getValue().doubleValue(); \\t\\t\\t\\t\\tthis.minY = minIgnoreNaN(this.minY, yy); \\t\\t\\t\\t\\tthis.maxY = minIgnoreNaN(this.maxY, yy);}}else { \\t\\t\\titem = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone())); \\t\\t\\tthis.data.add(((-index) - 1), item); \\t\\t\\tupdateBoundsForAddedItem(item); \\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) { \\t\\t\\t\\torg.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0))); \\t\\t\\t\\tupdateBoundsForRemovedItem(d);}} \\t\\tremoveAgedItems(false); \\t\\tfireSeriesChanged(); \\t\\treturn overwritten;} \\tpublic void removeAgedItems(boolean notify) { \\t\\tif ((getItemCount()) > 1) { \\t\\t\\tlong latest = getTimePeriod(((getItemCount()) - 1)).getSerialIndex(); \\t\\t\\tboolean removed = false; \\t\\t\\twhile ((latest - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge)) { \\t\\t\\t\\tthis.data.remove(0); \\t\\t\\t\\tremoved = true;} \\t\\t\\tif (removed) { \\t\\t\\t\\tfindBoundsByIteration(); \\t\\t\\t\\tif (notify) { \\t\\t\\t\\t\\tfireSeriesChanged();}}}} \\tpublic void removeAgedItems(long latest, boolean notify) { \\t\\tif (this.data.isEmpty()) { \\t\\t\\treturn;} \\t\\tlong index = java.lang.Long.MAX_VALUE; \\t\\ttry { \\t\\t\\tjava.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod(\\\"createInstance\\\", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class }); \\t\\t\\torg.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() }))); \\t\\t\\tindex = newest.getSerialIndex();} catch (java.lang.NoSuchMethodException e) { \\t\\t\\te.printStackTrace();} catch (java.lang.IllegalAccessException e) { \\t\\t\\te.printStackTrace();} catch (java.lang.reflect.InvocationTargetException e) { \\t\\t\\te.printStackTrace();} \\t\\tboolean removed = false; \\t\\twhile (((getItemCount()) > 0) && ((index - (getTimePeriod(0).getSerialIndex())) > (this.maximumItemAge))) { \\t\\t\\tthis.data.remove(0); \\t\\t\\tremoved = true;} \\t\\tif (removed) { \\t\\t\\tfindBoundsByIteration(); \\t\\t\\tif (notify) { \\t\\t\\t\\tfireSeriesChanged();}}} \\tpublic void clear() { \\t\\tif ((this.data.size()) > 0) { \\t\\t\\tthis.data.clear(); \\t\\t\\tthis.timePeriodClass = null; \\t\\t\\tthis.minY = java.lang.Double.NaN; \\t\\t\\tthis.maxY = java.lang.Double.NaN; \\t\\t\\tfireSeriesChanged();}} \\tpublic void delete(org.jfree.data.time.RegularTimePeriod period) { \\t\\tint index = getIndex(period); \\t\\tif (index >= 0) { \\t\\t\\torg.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index))); \\t\\t\\tupdateBoundsForRemovedItem(item);\\n \\t\\t\\tif (this.data.isEmpty()) {\\n \\t\\t\\t\\tthis.timePeriodClass = null;\\n \\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "fireSeriesChanged()", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "updateBoundsForRemovedItem(item)", "INGREDIENT_PARENT": "updateBoundsForRemovedItem(item)", "LOCATION": "org.jfree.data.time.TimeSeries", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_3\\/.\\/output_astor\\/AstorMain-Chart-3\\/\\/src\\/\\/variant-486_f\\/org\\/jfree\\/data\\/time\\/TimeSeries.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_3\\/output_astor\\/AstorMain-Chart-3\\/src\\/default\\/org\\/jfree\\/data\\/time\\/TimeSeries.java", "LINE": "638", "MP_RANKING": "59", "SUSPICIOUNESS": "0.123", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "243", "VARIANT_ID": "486", "TIME": "90", "VALIDATION": "|true|0|4390|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_3\\/.\\/output_astor\\/AstorMain-Chart-3\\/\\/bin\\/\\/variant-486"}]}}, {"project": "Chart", "bug_id": "4", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:04:39.053276", "repair_begin": "2018-11-28 23:54:01.025604", "patches": [{"nb_test_that_execute_statement": 18, "patchLocation": {"line": 1607, "class": "org.jfree.chart.plot.XYPlot"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -1606,3 +1606,5 @@\n     public void setRenderer(XYItemRenderer renderer) {\n-        setRenderer(0, renderer);\n+        if (renderer!=null) {\n+            setRenderer(0, renderer);\n+        }\n     }\n"}]}}, {"project": "Chart", "bug_id": "4", "tool": "NPEFix", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 16:48:01.944164", "repair_begin": "2018-11-29 16:37:27.166680", "patches": [{"diff": "--- org/jfree/chart/plot/XYPlot.java\n+++ org/jfree/chart/plot/XYPlot.java\n@@ -4492,3 +4492,10 @@\n                 \n-                    Collection c = r.getAnnotations();\n+                    } else {\n+                        Collec;\n+                        if (r == null) {\n+                            ction c = new XYAreaRenderer().getAnnotations();\n+                        } else {\n+                            ction c = r.getAnnotations();\n+                        }\n+                    }\n                     Iterator i = c.iterator();\n", "locations": [{"executionCount": 0, "line": 4493, "class": "org.jfree.chart.plot.XYPlot", "sourceStart": 160968, "sourceEnd": 160968}]}]}}, {"project": "Chart", "bug_id": "5", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 22:16:22.221602", "repair_begin": "2018-11-30 22:14:33.046574", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/xy\\/XYSeries.java\\n+++ org\\/jfree\\/data\\/xy\\/XYSeries.java\\n@@ -561,10 +561,10 @@\\n \\n \\n \\t\\t\\tif (this.autoSort) {\\n-\\t\\t\\t\\tthis.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x, y));\\n-\\t\\t\\t}else \\n-\\t\\t\\t{\\n-\\t\\t\\t\\tthis.data.add(new org.jfree.data.xy.XYDataItem(x, y));\\n+\\n+\\n+\\n+\\t\\t\\t\\tthis.data.add(new org.jfree.data.xy.XYDataItem(x, y));}else { \\t\\t\\t\\tthis.data.add(new org.jfree.data.xy.XYDataItem(x, y));\\n \\t\\t\\t}\\n \\n \\t\\t\\tif ((getItemCount()) > (this.maximumItemCount)) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "this.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x, y))", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "this.data.add(new org.jfree.data.xy.XYDataItem(x, y))", "INGREDIENT_PARENT": "this.data.add(new org.jfree.data.xy.XYDataItem(x, y))", "LOCATION": "org.jfree.data.xy.XYSeries", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_5\\/.\\/output_astor\\/AstorMain-Chart-5\\/\\/src\\/\\/variant-456_f\\/org\\/jfree\\/data\\/xy\\/XYSeries.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_5\\/output_astor\\/AstorMain-Chart-5\\/src\\/default\\/org\\/jfree\\/data\\/xy\\/XYSeries.java", "LINE": "564", "MP_RANKING": "0", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtInvocationImpl|CtBlockImpl"}], "GENERATION": "228", "VARIANT_ID": "456", "TIME": "61", "VALIDATION": "|true|0|4081|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_5\\/.\\/output_astor\\/AstorMain-Chart-5\\/\\/bin\\/\\/variant-456"}]}}, {"project": "Chart", "bug_id": "5", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:11:31.896041", "repair_begin": "2018-11-30 03:09:16.910874", "patches": [{"edits": [{"path": "source/org/jfree/data/xy/XYSeries.java", "line": 563, "faulty": "if (this.autoSort) {\n  this.data.add(-index - 1,new XYDataItem(x,y));\n}\n else {\n  this.data.add(new XYDataItem(x,y));\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Chart", "bug_id": "5", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-28 23:55:05.746945", "repair_begin": "2018-11-28 23:54:13.675332", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 563, "class": "org.jfree.data.xy.XYSeries"}, "patchType": "CONDITIONAL", "patch": "--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -562,3 +562,3 @@\n             // append the value to the list...\n-            if (this.autoSort) {\n+            if (overwritten!=null) {\n                 this.data.add(-index - 1, new XYDataItem(x, y));\n"}]}}, {"project": "Chart", "bug_id": "7", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:26:39.226044", "repair_begin": "2018-12-01 14:18:47.726520", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_7/source/org/jfree/data/time/TimePeriodValues.java\t2018-12-01 08:18:41.580888616 -0500\n+++ /tmp/Arja_Defects4J_Chart_7/patches_f8u6/Patch_1017/patched/tmp/Arja_Defects4J_Chart_7/source/org/jfree/data/time/TimePeriodValues.java\t2018-12-01 08:23:44.045108543 -0500\n@@ -314,7 +314,7 @@\n             long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n                 .getTime();\n             if (end < minEnd) {\n-                this.minEndIndex = index;           \n+                this.data.remove(index);           \n             }\n         }\n         else {\n\n\n", "edits": [{"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 317, "faulty": "this.minEndIndex=index;", "type": "Replace", "seed": "this.data.remove(index);"}, {"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 205, "faulty": "return (TimePeriodValue)this.data.get(index);", "type": "Replace", "seed": "return (TimePeriodValue)this.data.get(index);"}]}]}}, {"project": "Chart", "bug_id": "7", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 22:28:55.870677", "repair_begin": "2018-11-29 22:21:25.391331", "patches": [{"edits": [{"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 317, "faulty": "this.minEndIndex=index;", "type": "Replace", "seed": "this.data.remove(index);"}, {"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 317, "faulty": "this.minEndIndex=index;", "type": "Replace", "seed": "this.data.remove(index);"}, {"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 248, "faulty": "fireSeriesChanged();", "type": "InsertBefore", "seed": "Year result=null;"}, {"path": "source/org/jfree/data/time/TimePeriodValues.java", "line": 278, "faulty": "this.maxStartIndex=index;", "type": "InsertBefore", "seed": "this.maxMiddleIndex=-1;"}]}]}}, {"project": "Chart", "bug_id": "7", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 22:17:46.518917", "repair_begin": "2018-11-30 22:14:47.021451", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/data\\/time\\/TimePeriodValues.java\\n+++ org\\/jfree\\/data\\/time\\/TimePeriodValues.java\\n@@ -549,23 +549,23 @@\\n \\n \\n \\tpublic int getMaxMiddleIndex() {\\n-\\t\\treturn this.maxMiddleIndex;\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic int getMinEndIndex() {\\n-\\t\\treturn this.minEndIndex;\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic int getMaxEndIndex() {\\n-\\t\\treturn this.maxEndIndex;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\treturn this.maxEndIndex;} \\tpublic int getMinEndIndex() { \\t\\treturn this.minEndIndex;} \\tpublic int getMaxEndIndex() { \\t\\treturn this.maxEndIndex;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return this.maxMiddleIndex", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return this.maxEndIndex", "INGREDIENT_PARENT": "return this.maxEndIndex", "LOCATION": "org.jfree.data.time.TimePeriodValues", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_7\\/.\\/output_astor\\/AstorMain-Chart-7\\/\\/src\\/\\/variant-940_f\\/org\\/jfree\\/data\\/time\\/TimePeriodValues.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_7\\/output_astor\\/AstorMain-Chart-7\\/src\\/default\\/org\\/jfree\\/data\\/time\\/TimePeriodValues.java", "LINE": "552", "MP_RANKING": "0", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "470", "VARIANT_ID": "940", "TIME": "134", "VALIDATION": "|true|0|3641|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_7\\/.\\/output_astor\\/AstorMain-Chart-7\\/\\/bin\\/\\/variant-940"}]}}, {"project": "Chart", "bug_id": "9", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-28 23:51:57.751126", "repair_begin": "2018-11-28 23:51:25.259472", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 883, "class": "org.jfree.data.time.TimeSeries"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -882,3 +882,5 @@\n         if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n+            if (org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()) {\n+                throw new IllegalArgumentException(\"Requires start <= end.\");\n+            }\n         }\n"}]}}, {"project": "Chart", "bug_id": "12", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:58:22.800243", "repair_begin": "2018-12-01 14:17:23.980531", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_12/source/org/jfree/chart/JFreeChart.java\t2018-12-01 08:17:07.210870065 -0500\n+++ /tmp/Arja_Defects4J_Chart_12/patches_pie9/Patch_1475/patched/tmp/Arja_Defects4J_Chart_12/source/org/jfree/chart/JFreeChart.java\t2018-12-01 08:48:15.629613232 -0500\n@@ -641,7 +641,8 @@\n         int seen = 0;\n         Iterator iterator = this.subtitles.iterator();\n         while (iterator.hasNext()) {\n-            Title subtitle = (Title) iterator.next();\n+            this.title = title;\n+\t\t\tTitle subtitle = (Title) iterator.next();\n             if (subtitle instanceof LegendTitle) {\n                 if (seen == index) {\n                     return (LegendTitle) subtitle;\n@@ -959,7 +960,9 @@\n         if (this.backgroundPaint != null) {\n             if (!this.backgroundPaint.equals(paint)) {\n                 this.backgroundPaint = paint;\n-                fireChartChanged();\n+                if (plot == null) {\n+\t\t\t\t\tthrow new NullPointerException(\"Null 'plot' argument.\");\n+\t\t\t\t}\n             }\n         }\n         else {\n\n\n--- /tmp/Arja_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-01 08:17:07.710870085 -0500\n+++ /tmp/Arja_Defects4J_Chart_12/patches_pie9/Patch_1475/patched/tmp/Arja_Defects4J_Chart_12/source/org/jfree/data/general/AbstractDataset.java\t2018-12-01 08:48:15.629613232 -0500\n@@ -158,7 +158,7 @@\n      */\n     public boolean hasListener(EventListener listener) {\n         List list = Arrays.asList(this.listenerList.getListenerList());\n-        return list.contains(listener);\n+        return true;\n     }\n     \n     /**\n\n\n", "edits": [{"path": "source/org/jfree/chart/JFreeChart.java", "line": 962, "faulty": "fireChartChanged();", "type": "Replace", "seed": "if (plot == null) {\n  throw new NullPointerException(\"Null 'plot' argument.\");\n}"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 644, "faulty": "Title subtitle=(Title)iterator.next();", "type": "InsertBefore", "seed": "this.title=title;"}, {"path": "source/org/jfree/data/general/AbstractDataset.java", "line": 161, "faulty": "return list.contains(listener);", "type": "Replace", "seed": "return true;"}]}]}}, {"project": "Chart", "bug_id": "12", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 22:44:06.016095", "repair_begin": "2018-11-29 22:13:52.170171", "patches": [{"edits": [{"path": "source/org/jfree/chart/JFreeChart.java", "line": 574, "faulty": "this.title=title;", "type": "InsertBefore", "seed": "PlotRenderingInfo plotInfo=null;"}, {"path": "source/org/jfree/chart/title/LegendTitle.java", "line": 541, "faulty": "if (obj == this) {\n  return true;\n}", "type": "Replace", "seed": "int result=193;"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 571, "faulty": "if (this.title != null) {\n  this.title.removeChangeListener(this);\n}", "type": "Delete", "seed": "this.title=title;"}, {"path": "source/org/jfree/data/general/AbstractDataset.java", "line": 161, "faulty": "return list.contains(listener);", "type": "Replace", "seed": "return true;"}, {"path": "source/org/jfree/chart/title/LegendTitle.java", "line": 542, "faulty": "return true;", "type": "InsertBefore", "seed": "float x=0.0f;"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 795, "faulty": "this.subtitles.remove(title);", "type": "Delete", "seed": "Object[] listeners=this.progressListeners.getListenerList();"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 641, "faulty": "int seen=0;", "type": "InsertBefore", "seed": "Rectangle2D nonTitleArea=new Rectangle2D.Double();"}, {"path": "source/org/jfree/chart/JFreeChart.java", "line": 643, "faulty": "while (iterator.hasNext()) {\n  Title subtitle=(Title)iterator.next();\n  if (subtitle instanceof LegendTitle) {\n    if (seen == index) {\n      return (LegendTitle)subtitle;\n    }\n else {\n      seen++;\n    }\n  }\n}", "type": "InsertBefore", "seed": "this.notify=true;"}]}]}}, {"project": "Chart", "bug_id": "12", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:05:17.601423", "repair_begin": "2018-11-30 03:02:39.637166", "patches": [{"edits": [{"path": "source/org/jfree/data/general/AbstractDataset.java", "line": 160, "faulty": "List list=Arrays.asList(this.listenerList.getListenerList());", "type": "InsertReturn true"}]}]}}, {"project": "Chart", "bug_id": "13", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:28:22.050680", "repair_begin": "2018-12-01 14:16:37.626999", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-01 08:16:25.168968211 -0500\n+++ /tmp/Arja_Defects4J_Chart_13/patches_4hrp/Patch_622/patched/tmp/Arja_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java\t2018-12-01 08:22:28.736345297 -0500\n@@ -276,7 +276,8 @@\n                                double width) {\n         double[] w = new double[5];\n         double[] h = new double[5];\n-        RectangleConstraint c1 = new RectangleConstraint(width, null,\n+        w[1] = w[0];\n+\t\tRectangleConstraint c1 = new RectangleConstraint(width, null,\n                 LengthConstraintType.FIXED, 0.0, null,\n                 LengthConstraintType.NONE);\n         if (this.topBlock != null) {\n@@ -311,7 +312,8 @@\n         h[2] = Math.max(h[2], h[3]);\n         h[3] = h[2];\n \n-        if (this.centerBlock != null) {\n+        this.leftBlock = null;\n+\t\tif (this.centerBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                     - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n                     LengthConstraintType.NONE);\n\n\n", "edits": [{"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 279, "faulty": "RectangleConstraint c1=new RectangleConstraint(width,null,LengthConstraintType.FIXED,0.0,null,LengthConstraintType.NONE);", "type": "InsertBefore", "seed": "w[1]=w[0];"}, {"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 314, "faulty": "if (this.centerBlock != null) {\n  RectangleConstraint c4=new RectangleConstraint(width - w[2] - w[3],null,LengthConstraintType.FIXED,0.0,null,LengthConstraintType.NONE);\n  Size2D size=this.centerBlock.arrange(g2,c4);\n  w[4]=size.width;\n  h[4]=size.height;\n}", "type": "InsertBefore", "seed": "this.leftBlock=null;"}]}]}}, {"project": "Chart", "bug_id": "13", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 22:17:29.534899", "repair_begin": "2018-11-29 22:13:28.869801", "patches": [{"edits": [{"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 301, "faulty": "double maxW=Math.max(width - w[2],0.0);", "type": "InsertBefore", "seed": "Size2D result=new Size2D();"}, {"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 444, "faulty": "if (this.leftBlock != null) {\n  RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED);\n  Size2D size=this.leftBlock.arrange(g2,c3);\n  w[2]=size.width;\n}", "type": "Delete", "seed": "return;"}, {"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 449, "faulty": "Size2D size=this.leftBlock.arrange(g2,c3);", "type": "Replace", "seed": "double width=Math.max(w[0],Math.max(w[1],w[2] + w[4] + w[3]));"}, {"path": "source/org/jfree/chart/block/BorderArrangement.java", "line": 302, "faulty": "RectangleConstraint c3=new RectangleConstraint(0.0,new Range(Math.min(w[2],maxW),maxW),LengthConstraintType.RANGE,0.0,null,LengthConstraintType.NONE);", "type": "InsertBefore", "seed": "double centerHeight=Math.max(h[2],Math.max(h[3],h[4]));"}]}]}}, {"project": "Chart", "bug_id": "13", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 22:15:24.638567", "repair_begin": "2018-11-30 22:14:15.659565", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/block\\/BorderArrangement.java\\n+++ org\\/jfree\\/chart\\/block\\/BorderArrangement.java\\n@@ -441,14 +441,14 @@\\n \\t\\t\\th[1] = size.height;\\n \\t\\t}\\n \\t\\th[2] = ((constraint.getHeight()) - (h[1])) - (h[0]);\\n-\\t\\tif ((this.leftBlock) != null) {\\n-\\t\\t\\torg.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n-\\t\\t\\tnew org.jfree.data.Range(0.0, constraint.getWidth()), \\n-\\t\\t\\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \\n-\\t\\t\\torg.jfree.chart.block.LengthConstraintType.FIXED);\\n-\\t\\t\\torg.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c3);\\n-\\t\\t\\tw[2] = size.width;\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\th[3] = h[2];\\n \\t\\tif ((this.rightBlock) != null) {\\n \\t\\t\\torg.jfree.chart.block.RectangleConstraint c4 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((this.leftBlock) != null) {\\n\\torg.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, \\n\\tnew org.jfree.data.Range(0.0, constraint.getWidth()), \\n\\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \\n\\torg.jfree.chart.block.LengthConstraintType.FIXED);\\n\\torg.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c3);\\n\\tw[2] = size.width;\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.jfree.chart.block.BorderArrangement", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_13\\/.\\/output_astor\\/AstorMain-Chart-13\\/\\/src\\/\\/variant-28_f\\/org\\/jfree\\/chart\\/block\\/BorderArrangement.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_13\\/output_astor\\/AstorMain-Chart-13\\/src\\/default\\/org\\/jfree\\/chart\\/block\\/BorderArrangement.java", "LINE": "444", "MP_RANKING": "37", "SUSPICIOUNESS": "0.816"}], "GENERATION": "14", "VARIANT_ID": "28", "TIME": "19", "VALIDATION": "|true|0|3597|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_13\\/.\\/output_astor\\/AstorMain-Chart-13\\/\\/bin\\/\\/variant-28"}]}}, {"project": "Chart", "bug_id": "13", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-28 23:49:34.707022", "repair_begin": "2018-11-28 23:48:53.461137", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 453, "class": "org.jfree.chart.block.BorderArrangement"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,9 +452,11 @@\n         h[3] = h[2];\n-        if (this.rightBlock != null) {\n-            RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth() - w[2]),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.rightBlock.arrange(g2, c4);\n-            w[3] = size.width;\n+        if (null!=null) {\n+            if (this.rightBlock != null) {\n+                RectangleConstraint c4 = new RectangleConstraint(0.0,\n+                new Range(0.0, constraint.getWidth() - w[2]),\n+                LengthConstraintType.RANGE, h[2], null,\n+                LengthConstraintType.FIXED);\n+                Size2D size = this.rightBlock.arrange(g2, c4);\n+                w[3] = size.width;\n+            }\n         }\n"}]}}, {"project": "Chart", "bug_id": "14", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:16:08.542282", "repair_begin": "2018-12-01 14:16:57.754330", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_14/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 08:16:43.488810038 -0500\n+++ /tmp/Arja_Defects4J_Chart_14/patches_rhkx/Patch_1364/patched/tmp/Arja_Defects4J_Chart_14/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 09:08:45.213969849 -0500\n@@ -2136,7 +2136,7 @@\n      * @since 1.0.7\n      */\n     public boolean removeDomainMarker(int index, Marker marker, Layer layer) {\n-    \treturn removeDomainMarker(index, marker, layer, true);\n+    \treturn this.domainGridlinesVisible;\n     }\n \n     /**\n@@ -2375,7 +2375,7 @@\n      * @see #addRangeMarker(Marker)\n      */\n     public boolean removeRangeMarker(Marker marker) {\n-        return removeRangeMarker(marker, Layer.FOREGROUND);\n+        return false;\n     }\n \n     /**\n\n\n\n\n--- /tmp/Arja_Defects4J_Chart_14/source/org/jfree/chart/plot/XYPlot.java\t2018-12-01 08:16:43.488810038 -0500\n+++ /tmp/Arja_Defects4J_Chart_14/patches_rhkx/Patch_1364/patched/tmp/Arja_Defects4J_Chart_14/source/org/jfree/chart/plot/XYPlot.java\t2018-12-01 09:08:45.217969874 -0500\n@@ -2245,7 +2245,7 @@\n      * @since 1.0.7\n      */\n     public boolean removeDomainMarker(Marker marker, Layer layer) {\n-        return removeDomainMarker(0, marker, layer);\n+        return false;\n     }\n \n     /**\n@@ -2478,7 +2478,7 @@\n      * @since 1.0.7\n      */\n     public boolean removeRangeMarker(Marker marker, Layer layer) {\n-        return removeRangeMarker(0, marker, layer);\n+        return this.domainZeroBaselineVisible;\n     }\n \n     /**\n\n\n", "edits": [{"path": "source/org/jfree/chart/plot/XYPlot.java", "line": 2481, "faulty": "return removeRangeMarker(0,marker,layer);", "type": "Replace", "seed": "return this.domainZeroBaselineVisible;"}, {"path": "source/org/jfree/chart/plot/Plot.java", "line": 433, "faulty": "return this.parent;", "type": "Replace", "seed": "return this.parent;"}, {"path": "source/org/jfree/chart/plot/XYPlot.java", "line": 2248, "faulty": "return removeDomainMarker(0,marker,layer);", "type": "Replace", "seed": "return false;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 2139, "faulty": "return removeDomainMarker(index,marker,layer,true);", "type": "Replace", "seed": "return this.domainGridlinesVisible;"}, {"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 2378, "faulty": "return removeRangeMarker(marker,Layer.FOREGROUND);", "type": "Replace", "seed": "return false;"}]}]}}, {"project": "Chart", "bug_id": "14", "tool": "NPEFix", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 16:43:57.162892", "repair_begin": "2018-11-29 16:37:16.960343", "patches": [{"diff": "--- org/jfree/chart/plot/CategoryPlot.java\n+++ org/jfree/chart/plot/CategoryPlot.java\n@@ -2165,3 +2165,8 @@\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed;\n+        if (markers == null) {\n+            removed = annotations.remove(marker);\n+        } else {\n+            removed = markers.remove(marker);\n+        }\n         if (removed && notify) {\n", "locations": [{"executionCount": 0, "line": 2166, "class": "org.jfree.chart.plot.CategoryPlot", "sourceStart": 75454, "sourceEnd": 75460}]}]}}, {"project": "Chart", "bug_id": "15", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:38:11.112106", "repair_begin": "2018-12-01 14:15:46.698274", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_15/source/org/jfree/chart/plot/PiePlot3D.java\t2018-12-01 08:15:31.186705575 -0500\n+++ /tmp/Arja_Defects4J_Chart_15/patches_66bc/Patch_1546/patched/tmp/Arja_Defects4J_Chart_15/source/org/jfree/chart/plot/PiePlot3D.java\t2018-12-01 08:32:52.834247547 -0500\n@@ -243,7 +243,8 @@\n \n         // adjust the plot area by the interior spacing value\n         double gapPercent = getInteriorGap();\n-        double labelPercent = 0.0;\n+        g2.setClip(savedClip);\n+\t\tdouble labelPercent = 0.0;\n         if (getLabelGenerator() != null) {\n             labelPercent = getLabelGap() + getMaximumLabelWidth();   \n         }\n@@ -268,14 +269,12 @@\n         double linkW = plotArea.getWidth() - gapHorizontal;\n         double linkH = plotArea.getHeight() - gapVertical;\n         \n-        // make the link area a square if the pie chart is to be circular...\n-        if (isCircular()) { // is circular?\n-            double min = Math.min(linkW, linkH) / 2;\n-            linkX = (linkX + linkX + linkW) / 2 - min;\n-            linkY = (linkY + linkY + linkH) / 2 - min;\n-            linkW = 2 * min;\n-            linkH = 2 * min;\n-        }\n+        if (DatasetUtilities.isEmptyOrNull(getDataset())) {\n+\t\t\tdrawNoDataMessage(g2, plotArea);\n+\t\t\tg2.setClip(savedClip);\n+\t\t\tdrawOutline(g2, plotArea);\n+\t\t\treturn;\n+\t\t}\n         \n         PiePlotState state = initialise(g2, plotArea, this, null, info);\n \n\n\n", "edits": [{"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 246, "faulty": "double labelPercent=0.0;", "type": "InsertBefore", "seed": "g2.setClip(savedClip);"}, {"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 272, "faulty": "if (isCircular()) {\n  double min=Math.min(linkW,linkH) / 2;\n  linkX=(linkX + linkX + linkW) / 2 - min;\n  linkY=(linkY + linkY + linkH) / 2 - min;\n  linkW=2 * min;\n  linkH=2 * min;\n}", "type": "Replace", "seed": "if (DatasetUtilities.isEmptyOrNull(getDataset())) {\n  drawNoDataMessage(g2,plotArea);\n  g2.setClip(savedClip);\n  drawOutline(g2,plotArea);\n  return;\n}"}]}]}}, {"project": "Chart", "bug_id": "15", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 22:24:54.260072", "repair_begin": "2018-11-30 22:16:17.477872", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/plot\\/PiePlot3D.java\\n+++ org\\/jfree\\/chart\\/plot\\/PiePlot3D.java\\n@@ -264,78 +264,78 @@\\n \\t\\t}\\n \\n \\t\\tdouble linkX = (plotArea.getX()) + (gapHorizontal \\/ 2);\\n-\\t\\tdouble linkY = (plotArea.getY()) + (gapVertical \\/ 2);\\n-\\t\\tdouble linkW = (plotArea.getWidth()) - gapHorizontal;\\n-\\t\\tdouble linkH = (plotArea.getHeight()) - gapVertical;\\n \\n \\n-\\t\\tif (isCircular()) {\\n-\\t\\t\\tdouble min = (java.lang.Math.min(linkW, linkH)) \\/ 2;\\n-\\t\\t\\tlinkX = (((linkX + linkX) + linkW) \\/ 2) - min;\\n-\\t\\t\\tlinkY = (((linkY + linkY) + linkH) \\/ 2) - min;\\n-\\t\\t\\tlinkW = 2 * min;\\n-\\t\\t\\tlinkH = 2 * min;\\n-\\t\\t}\\n \\n-\\t\\torg.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info);\\n \\n \\n \\n-\\t\\tjava.awt.geom.Rectangle2D linkAreaXX = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, \\n-\\t\\t(linkH * (1 - (this.depthFactor))));\\n-\\t\\tstate.setLinkArea(linkAreaXX);\\n \\n-\\t\\tif (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) {\\n-\\t\\t\\tg2.setPaint(java.awt.Color.blue);\\n-\\t\\t\\tg2.draw(linkAreaXX);\\n-\\t\\t\\tg2.setPaint(java.awt.Color.yellow);\\n-\\t\\t\\tg2.draw(new java.awt.geom.Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(), \\n-\\t\\t\\tlinkAreaXX.getWidth(), linkAreaXX.getHeight()));\\n-\\t\\t}\\n \\n \\n \\n \\n-\\t\\tdouble hh = linkW * (getLabelLinkMargin());\\n-\\t\\tdouble vv = linkH * (getLabelLinkMargin());\\n-\\t\\tjava.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double((linkX + (hh \\/ 2.0)), \\n-\\t\\t(linkY + (vv \\/ 2.0)), (linkW - hh), (linkH - vv));\\n \\n-\\t\\tstate.setExplodedPieArea(explodeArea);\\n \\n \\n \\n \\n-\\t\\tdouble maximumExplodePercent = getMaximumExplodePercent();\\n-\\t\\tdouble percent = maximumExplodePercent \\/ (1.0 + maximumExplodePercent);\\n \\n-\\t\\tdouble h1 = (explodeArea.getWidth()) * percent;\\n-\\t\\tdouble v1 = (explodeArea.getHeight()) * percent;\\n-\\t\\tjava.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(((explodeArea.getX()) + \\n-\\t\\t(h1 \\/ 2.0)), ((explodeArea.getY()) + (v1 \\/ 2.0)), \\n-\\t\\t((explodeArea.getWidth()) - h1), ((explodeArea.getHeight()) - v1));\\n \\n \\n \\n-\\t\\tint depth = ((int) ((pieArea.getHeight()) * (this.depthFactor)));\\n-\\t\\tjava.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, \\n-\\t\\t(linkH - depth));\\n-\\t\\tstate.setLinkArea(linkArea);\\n \\n-\\t\\tstate.setPieArea(pieArea);\\n-\\t\\tstate.setPieCenterX(pieArea.getCenterX());\\n-\\t\\tstate.setPieCenterY(((pieArea.getCenterY()) - (depth \\/ 2.0)));\\n-\\t\\tstate.setPieWRadius(((pieArea.getWidth()) \\/ 2.0));\\n-\\t\\tstate.setPieHRadius((((pieArea.getHeight()) - depth) \\/ 2.0));\\n \\n \\n-\\t\\torg.jfree.data.general.PieDataset dataset = getDataset();\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\tif (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\\n \\t\\t\\tdrawNoDataMessage(g2, plotArea);\\n \\t\\t\\tg2.setClip(savedClip);\\n \\t\\t\\tdrawOutline(g2, plotArea);\\n \\t\\t\\treturn;\\n-\\t\\t}\\n+\\t\\t} \\t\\tdouble linkY = (plotArea.getY()) + (gapVertical \\/ 2); \\t\\tdouble linkW = (plotArea.getWidth()) - gapHorizontal; \\t\\tdouble linkH = (plotArea.getHeight()) - gapVertical; \\t\\tif (isCircular()) { \\t\\t\\tdouble min = (java.lang.Math.min(linkW, linkH)) \\/ 2; \\t\\t\\tlinkX = (((linkX + linkX) + linkW) \\/ 2) - min; \\t\\t\\tlinkY = (((linkY + linkY) + linkH) \\/ 2) - min; \\t\\t\\tlinkW = 2 * min; \\t\\t\\tlinkH = 2 * min;} \\t\\torg.jfree.chart.plot.PiePlotState state = initialise(g2, plotArea, this, null, info); \\t\\tjava.awt.geom.Rectangle2D linkAreaXX = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, (linkH * (1 - (this.depthFactor)))); \\t\\tstate.setLinkArea(linkAreaXX); \\t\\tif (org.jfree.chart.plot.PiePlot.DEBUG_DRAW_LINK_AREA) { \\t\\t\\tg2.setPaint(java.awt.Color.blue); \\t\\t\\tg2.draw(linkAreaXX); \\t\\t\\tg2.setPaint(java.awt.Color.yellow); \\t\\t\\tg2.draw(new java.awt.geom.Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(), linkAreaXX.getWidth(), linkAreaXX.getHeight()));} \\t\\tdouble hh = linkW * (getLabelLinkMargin()); \\t\\tdouble vv = linkH * (getLabelLinkMargin()); \\t\\tjava.awt.geom.Rectangle2D explodeArea = new java.awt.geom.Rectangle2D.Double((linkX + (hh \\/ 2.0)), (linkY + (vv \\/ 2.0)), (linkW - hh), (linkH - vv)); \\t\\tstate.setExplodedPieArea(explodeArea); \\t\\tdouble maximumExplodePercent = getMaximumExplodePercent(); \\t\\tdouble percent = maximumExplodePercent \\/ (1.0 + maximumExplodePercent); \\t\\tdouble h1 = (explodeArea.getWidth()) * percent; \\t\\tdouble v1 = (explodeArea.getHeight()) * percent; \\t\\tjava.awt.geom.Rectangle2D pieArea = new java.awt.geom.Rectangle2D.Double(((explodeArea.getX()) + (h1 \\/ 2.0)), ((explodeArea.getY()) + (v1 \\/ 2.0)), ((explodeArea.getWidth()) - h1), ((explodeArea.getHeight()) - v1)); \\t\\tint depth = ((int) ((pieArea.getHeight()) * (this.depthFactor))); \\t\\tjava.awt.geom.Rectangle2D linkArea = new java.awt.geom.Rectangle2D.Double(linkX, linkY, linkW, (linkH - depth)); \\t\\tstate.setLinkArea(linkArea); \\t\\tstate.setPieArea(pieArea); \\t\\tstate.setPieCenterX(pieArea.getCenterX()); \\t\\tstate.setPieCenterY(((pieArea.getCenterY()) - (depth \\/ 2.0))); \\t\\tstate.setPieWRadius(((pieArea.getWidth()) \\/ 2.0)); \\t\\tstate.setPieHRadius((((pieArea.getHeight()) - depth) \\/ 2.0)); \\t\\torg.jfree.data.general.PieDataset dataset = getDataset(); \\t\\tif (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) { \\t\\t\\tdrawNoDataMessage(g2, plotArea); \\t\\t\\tg2.setClip(savedClip); \\t\\t\\tdrawOutline(g2, plotArea); \\t\\t\\treturn;}\\n \\n \\n \\t\\tif ((dataset.getKeys().size()) > (plotArea.getWidth())) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtLocalVariableImpl|CtBlockImpl", "ORIGINAL_CODE": "double linkY = (plotArea.getY()) + (gapVertical \\/ 2)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\\n\\tdrawNoDataMessage(g2, plotArea);\\n\\tg2.setClip(savedClip);\\n\\tdrawOutline(g2, plotArea);\\n\\treturn;\\n}", "INGREDIENT_PARENT": "if (org.jfree.data.general.DatasetUtilities.isEmptyOrNull(getDataset())) {\\n\\tdrawNoDataMessage(g2, plotArea);\\n\\tg2.setClip(savedClip);\\n\\tdrawOutline(g2, plotArea);\\n\\treturn;\\n}", "LOCATION": "org.jfree.chart.plot.PiePlot3D", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_15\\/.\\/output_astor\\/AstorMain-Chart-15\\/\\/src\\/\\/variant-774_f\\/org\\/jfree\\/chart\\/plot\\/PiePlot3D.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_15\\/output_astor\\/AstorMain-Chart-15\\/src\\/default\\/org\\/jfree\\/chart\\/plot\\/PiePlot3D.java", "LINE": "267", "MP_RANKING": "20", "SUSPICIOUNESS": "0.577", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "387", "VARIANT_ID": "774", "TIME": "379", "VALIDATION": "|true|0|3579|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_15\\/.\\/output_astor\\/AstorMain-Chart-15\\/\\/bin\\/\\/variant-774"}]}}, {"project": "Chart", "bug_id": "15", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:03:07.281394", "repair_begin": "2018-11-30 03:00:22.482114", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/PiePlot3D.java", "line": 269, "faulty": "double linkH=plotArea.getHeight() - gapVertical;", "type": "InsertReturn true"}]}]}}, {"project": "Chart", "bug_id": "16", "tool": "NPEFix", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 16:42:31.782818", "repair_begin": "2018-11-29 16:37:07.675662", "patches": [{"diff": "--- org/jfree/data/category/DefaultIntervalCategoryDataset.java\n+++ org/jfree/data/category/DefaultIntervalCategoryDataset.java\n@@ -573,7 +573,16 @@\n         int result = -1;\n-        for (int i = 0; i < this.categoryKeys.length; i++) {\n-            if (category.equals(this.categoryKeys[i])) {\n-                result = i;\n-                break;\n+        if (this.categoryKeys == null) {\n+            for (int i = 0; i < new Comparable[0].length; i++) {\n+                if (category.equals(this.categoryKeys[i])) {\n+                    result = i;\n+                    break;\n+                }\n             }\n+        } else {\n+            for (int i = 0; i < this.categoryKeys.length; i++) {\n+                if (category.equals(this.categoryKeys[i])) {\n+                    result = i;\n+                    break;\n+                }\n+            }\n         }\n", "locations": [{"executionCount": 0, "line": 574, "class": "org.jfree.data.category.DefaultIntervalCategoryDataset", "sourceStart": 20741, "sourceEnd": 20757}]}]}}, {"project": "Chart", "bug_id": "17", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-28 23:47:36.672447", "repair_begin": "2018-11-28 23:46:48.995933", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 880, "class": "org.jfree.data.time.TimeSeries"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -879,3 +879,5 @@\n         if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n+            if (org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()) {\n+                throw new IllegalArgumentException(\"Requires start <= end.\");\n+            }\n         }\n"}]}}, {"project": "Chart", "bug_id": "18", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 22:49:52.512661", "repair_begin": "2018-11-29 22:11:17.809790", "patches": [{"edits": [{"path": "source/org/jfree/data/category/DefaultCategoryDataset.java", "line": 351, "faulty": "fireDatasetChanged();", "type": "InsertBefore", "seed": "fireDatasetChanged();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 157, "faulty": "return i.intValue();", "type": "InsertBefore", "seed": "if (key == null) {\n  throw new IllegalArgumentException(\"Null 'key' argument.\");\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "Delete", "seed": "final int size=this.keys.size();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "Delete", "seed": "final int size=this.keys.size();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 456, "faulty": "while (iterator.hasNext()) {\n  DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();\n  rowData.removeValue(columnKey);\n}", "type": "Delete", "seed": "KeyedObjects row=(KeyedObjects)iterator.next();"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 460, "faulty": "this.columnKeys.remove(columnKey);", "type": "InsertBefore", "seed": "if (!(this.columnKeys.contains(columnKey))) {\n  throw new UnknownKeyException(\"Unrecognised columnKey: \" + columnKey);\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "InsertBefore", "seed": "if (index < 0) {\n  return;\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 319, "faulty": "rebuildIndex();", "type": "Delete", "seed": "int i=0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 456, "faulty": "while (iterator.hasNext()) {\n  DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();\n  rowData.removeValue(columnKey);\n}", "type": "Delete", "seed": "KeyedObjects row=(KeyedObjects)iterator.next();"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 460, "faulty": "this.columnKeys.remove(columnKey);", "type": "InsertBefore", "seed": "if (!(this.columnKeys.contains(columnKey))) {\n  throw new UnknownKeyException(\"Unrecognised columnKey: \" + columnKey);\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "InsertBefore", "seed": "if (index < 0) {\n  return;\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 319, "faulty": "rebuildIndex();", "type": "Delete", "seed": "int i=0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "Replace", "seed": "boolean dataRemoved=false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "Delete", "seed": "final int size=this.keys.size();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 456, "faulty": "while (iterator.hasNext()) {\n  DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();\n  rowData.removeValue(columnKey);\n}", "type": "Delete", "seed": "KeyedObjects row=(KeyedObjects)iterator.next();"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 460, "faulty": "this.columnKeys.remove(columnKey);", "type": "InsertBefore", "seed": "if (!(this.columnKeys.contains(columnKey))) {\n  throw new UnknownKeyException(\"Unrecognised columnKey: \" + columnKey);\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "Delete", "seed": "final int size=this.keys.size();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "Delete", "seed": "final int size=this.keys.size();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/category/DefaultCategoryDataset.java", "line": 351, "faulty": "fireDatasetChanged();", "type": "InsertBefore", "seed": "fireDatasetChanged();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 157, "faulty": "return i.intValue();", "type": "InsertBefore", "seed": "if (key == null) {\n  throw new IllegalArgumentException(\"Null 'key' argument.\");\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 456, "faulty": "while (iterator.hasNext()) {\n  DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();\n  rowData.removeValue(columnKey);\n}", "type": "Delete", "seed": "KeyedObjects row=(KeyedObjects)iterator.next();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 456, "faulty": "while (iterator.hasNext()) {\n  DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();\n  rowData.removeValue(columnKey);\n}", "type": "Delete", "seed": "KeyedObjects row=(KeyedObjects)iterator.next();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/category/DefaultCategoryDataset.java", "line": 351, "faulty": "fireDatasetChanged();", "type": "InsertBefore", "seed": "fireDatasetChanged();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 157, "faulty": "return i.intValue();", "type": "InsertBefore", "seed": "if (key == null) {\n  throw new IllegalArgumentException(\"Null 'key' argument.\");\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "this.indexMap.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "Delete", "seed": "final int size=this.keys.size();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "double total=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "Delete", "seed": "return false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 456, "faulty": "while (iterator.hasNext()) {\n  DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();\n  rowData.removeValue(columnKey);\n}", "type": "Delete", "seed": "KeyedObjects row=(KeyedObjects)iterator.next();"}, {"path": "source/org/jfree/data/category/DefaultCategoryDataset.java", "line": 350, "faulty": "this.data.removeColumn(columnKey);", "type": "Replace", "seed": "double existing=0.0;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 318, "faulty": "if (index < this.keys.size()) {\n  rebuildIndex();\n}", "type": "Replace", "seed": "boolean dataRemoved=false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 457, "faulty": "DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();", "type": "Delete", "seed": "return this.columnKeys.size();"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 456, "faulty": "while (iterator.hasNext()) {\n  DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();\n  rowData.removeValue(columnKey);\n}", "type": "Delete", "seed": "KeyedObjects2D clone=(KeyedObjects2D)super.clone();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 335, "faulty": "return;", "type": "InsertBefore", "seed": "int result=super.hashCode();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 234, "faulty": "this.keys.set(keyIndex,key);", "type": "InsertBefore", "seed": "boolean allNull=true;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 334, "faulty": "if (index < 0) {\n  return;\n}", "type": "Delete", "seed": "removeValue(index);"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "Replace", "seed": "clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 335, "faulty": "return;", "type": "Replace", "seed": "rebuildIndex();"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 455, "faulty": "Iterator iterator=this.rows.iterator();", "type": "Delete", "seed": "this.columnKeys.remove(columnKey);"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 457, "faulty": "DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();", "type": "Replace", "seed": "return RangeType.FULL;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 458, "faulty": "rowData.removeValue(columnKey);", "type": "Delete", "seed": "if (columnKey == null) {\n  throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n}"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 317, "faulty": "this.values.remove(index);", "type": "InsertBefore", "seed": "Number result=null;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 457, "faulty": "DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();", "type": "InsertBefore", "seed": "boolean dataRemoved=false;"}, {"path": "source/org/jfree/data/DefaultKeyedValues2D.java", "line": 458, "faulty": "rowData.removeValue(columnKey);", "type": "InsertBefore", "seed": "int count=getItemCount();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 299, "faulty": "this.indexMap.clear();", "type": "InsertBefore", "seed": "Comparable result=null;"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 319, "faulty": "rebuildIndex();", "type": "InsertBefore", "seed": "this.values.clear();"}, {"path": "source/org/jfree/data/DefaultKeyedValues.java", "line": 337, "faulty": "removeValue(index);", "type": "InsertBefore", "seed": "if (index < 0) {\n  throw new UnknownKeyException(\"The key (\" + key + \") is not recognised.\");\n}"}]}]}}, {"project": "Chart", "bug_id": "19", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:10:05.210154", "repair_begin": "2018-12-01 14:14:20.108593", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_19/source/org/jfree/chart/util/AbstractObjectList.java\t2018-12-01 08:14:04.945381176 -0500\n+++ /tmp/Arja_Defects4J_Chart_19/patches_pitz/Patch_1411/patched/tmp/Arja_Defects4J_Chart_19/source/org/jfree/chart/util/AbstractObjectList.java\t2018-12-01 09:03:17.701171352 -0500\n@@ -161,7 +161,10 @@\n                 return (index);\n             }\n         }\n-        return -1;\n+        if (object == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Null 'object' argument.\");\n+\t\t}\n+\t\treturn -1;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Chart_19/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 08:14:09.741381399 -0500\n+++ /tmp/Arja_Defects4J_Chart_19/patches_pitz/Patch_1411/patched/tmp/Arja_Defects4J_Chart_19/source/org/jfree/chart/plot/CategoryPlot.java\t2018-12-01 09:03:17.705171644 -0500\n@@ -1131,7 +1131,11 @@\n         for (int i = 0; i < this.rangeAxes.size(); i++) {\n             ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n             if (axis != null) {\n-                axis.configure();\n+                if (axis != null) {\n+\t\t\t\t\taxis.configure();\n+\t\t\t\t\taxis.addChangeListener(this);\n+\t\t\t\t}\n+\t\t\t\taxis.configure();\n             }\n         }\n     }\n\n\n", "edits": [{"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 1134, "faulty": "axis.configure();", "type": "InsertBefore", "seed": "if (axis != null) {\n  axis.configure();\n  axis.addChangeListener(this);\n}"}, {"path": "source/org/jfree/chart/util/AbstractObjectList.java", "line": 164, "faulty": "return -1;", "type": "InsertBefore", "seed": "if (object == null) {\n  throw new IllegalArgumentException(\"Null 'object' argument.\");\n}"}]}]}}, {"project": "Chart", "bug_id": "21", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-28 23:45:55.645051", "repair_begin": "2018-11-28 23:45:02.122924", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 335, "class": "org.jfree.data.Range"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/data/Range.java\n+++ b/source/org/jfree/data/Range.java\n@@ -334,3 +334,5 @@\n         if (!(this.lower == range.lower)) {\n-            return false;\n+            if ((org.jfree.data.Range.this.lower <= 0) || (29 < org.jfree.data.Range.this.upper)) {\n+                return false;\n+            }\n         }\n"}]}}, {"project": "Chart", "bug_id": "25", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:14:57.846435", "repair_begin": "2018-12-01 13:57:09.419486", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-01 07:56:59.456195057 -0500\n+++ /tmp/Arja_Defects4J_Chart_25/patches_atq3/Patch_820/patched/tmp/Arja_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2018-12-01 08:05:50.299247461 -0500\n@@ -245,14 +245,7 @@\n \n         int seriesCount = getRowCount();\n         int categoryCount = getColumnCount();\n-        if (seriesCount > 1) {\n-            double seriesGap = dataArea.getHeight() * getItemMargin()\n-                               / (categoryCount * (seriesCount - 1));\n-            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n-        }\n-        else {\n-            rectY = rectY + row * state.getBarWidth();\n-        }\n+        setPositiveItemLabelPositionFallback(null);\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n\n\n--- /tmp/Arja_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-01 07:56:54.316104358 -0500\n+++ /tmp/Arja_Defects4J_Chart_25/patches_atq3/Patch_820/patched/tmp/Arja_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2018-12-01 08:05:50.299247461 -0500\n@@ -108,7 +108,7 @@\n         MeanAndStandardDeviation masd \n             = (MeanAndStandardDeviation) this.data.getObject(row, column);\n         if (masd != null) {\n-            result = masd.getMean();\n+            this.maximumRangeValueIncStdDev = Double.NaN;\n         }\n         return result;\n     }\n@@ -243,7 +243,7 @@\n      * @return The row key.\n      */\n     public Comparable getRowKey(int row) {\n-        return this.data.getRowKey(row);\n+        return true;\n     }\n \n     /**\n@@ -261,7 +261,8 @@\n      * @return The row count.\n      */\n     public int getRowCount() {\n-        return this.data.getRowCount();\n+        this.minimumRangeValueIncStdDev = Double.NaN;\n+\t\treturn this.data.getRowCount();\n     }\n \n     /**\n@@ -270,7 +271,8 @@\n      * @return The column count.\n      */\n     public int getColumnCount() {\n-        return this.data.getColumnCount();\n+        this.minimumRangeValue = Double.NaN;\n+\t\treturn this.data.getColumnCount();\n     }\n \n     /**\n\n\n", "edits": [{"path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java", "line": 248, "faulty": "if (seriesCount > 1) {\n  double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));\n  rectY=rectY + row * (state.getBarWidth() + seriesGap);\n}\n else {\n  rectY=rectY + row * state.getBarWidth();\n}", "type": "Replace", "seed": "setPositiveItemLabelPositionFallback(null);"}, {"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 111, "faulty": "result=masd.getMean();", "type": "Replace", "seed": "this.maximumRangeValueIncStdDev=Double.NaN;"}, {"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 273, "faulty": "return this.data.getColumnCount();", "type": "InsertBefore", "seed": "this.minimumRangeValue=Double.NaN;"}, {"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 264, "faulty": "return this.data.getRowCount();", "type": "InsertBefore", "seed": "this.minimumRangeValueIncStdDev=Double.NaN;"}, {"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 246, "faulty": "return this.data.getRowKey(row);", "type": "Replace", "seed": "return true;"}]}]}}, {"project": "Chart", "bug_id": "25", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 22:23:12.698097", "repair_begin": "2018-11-30 22:14:45.072918", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/jfree\\/chart\\/plot\\/CategoryPlot.java\\n+++ org\\/jfree\\/chart\\/plot\\/CategoryPlot.java\\n@@ -2862,22 +2862,22 @@\\n \\t\\t\\tint passCount = renderer.getPassCount();\\n \\t\\t\\tfor (int pass = 0; pass < passCount; pass++) {\\n \\t\\t\\t\\tif ((this.columnRenderingOrder) == (org.jfree.chart.util.SortOrder.ASCENDING)) {\\n-\\t\\t\\t\\t\\tfor (int column = 0; column < columnCount; column++) {\\n-\\t\\t\\t\\t\\t\\tif ((this.rowRenderingOrder) == (org.jfree.chart.util.SortOrder.ASCENDING)) {\\n-\\t\\t\\t\\t\\t\\t\\tfor (int row = 0; row < rowCount; row++) {\\n-\\t\\t\\t\\t\\t\\t\\t\\trenderer.drawItem(g2, state, dataArea, this, \\n-\\t\\t\\t\\t\\t\\t\\t\\tdomainAxis, rangeAxis, currentDataset, \\n-\\t\\t\\t\\t\\t\\t\\t\\trow, column, pass);\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t}else \\n-\\t\\t\\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\t\\t\\tfor (int row = rowCount - 1; row >= 0; row--) {\\n-\\t\\t\\t\\t\\t\\t\\t\\trenderer.drawItem(g2, state, dataArea, this, \\n-\\t\\t\\t\\t\\t\\t\\t\\tdomainAxis, rangeAxis, currentDataset, \\n-\\t\\t\\t\\t\\t\\t\\t\\trow, column, pass);\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\t\\t}else \\n \\t\\t\\t\\t{\\n \\t\\t\\t\\t\\tfor (int column = columnCount - 1; column >= 0; column--) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForImpl|CtBlockImpl", "ORIGINAL_CODE": "for (int column = 0; column < columnCount; column++) {\\n\\tif ((this.rowRenderingOrder) == (org.jfree.chart.util.SortOrder.ASCENDING)) {\\n\\t\\tfor (int row = 0; row < rowCount; row++) {\\n\\t\\t\\trenderer.drawItem(g2, state, dataArea, this, \\n\\t\\t\\tdomainAxis, rangeAxis, currentDataset, \\n\\t\\t\\trow, column, pass);\\n\\t\\t}\\n\\t}else \\n\\t{\\n\\t\\tfor (int row = rowCount - 1; row >= 0; row--) {\\n\\t\\t\\trenderer.drawItem(g2, state, dataArea, this, \\n\\t\\t\\tdomainAxis, rangeAxis, currentDataset, \\n\\t\\t\\trow, column, pass);\\n\\t\\t}\\n\\t}\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.jfree.chart.plot.CategoryPlot", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_25\\/.\\/output_astor\\/AstorMain-Chart-25\\/\\/src\\/\\/variant-152_f\\/org\\/jfree\\/chart\\/plot\\/CategoryPlot.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Chart_25\\/output_astor\\/AstorMain-Chart-25\\/src\\/default\\/org\\/jfree\\/chart\\/plot\\/CategoryPlot.java", "LINE": "2865", "MP_RANKING": "249", "SUSPICIOUNESS": "0.402"}], "GENERATION": "76", "VARIANT_ID": "152", "TIME": "158", "VALIDATION": "|true|0|3243|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Chart_25\\/.\\/output_astor\\/AstorMain-Chart-25\\/\\/bin\\/\\/variant-152"}]}}, {"project": "Chart", "bug_id": "25", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:52:28.205266", "repair_begin": "2018-11-30 02:50:24.814845", "patches": [{"edits": [{"path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java", "line": 110, "faulty": "if (masd != null) {\n  result=masd.getMean();\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Chart", "bug_id": "25", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-28 23:43:09.393868", "repair_begin": "2018-11-28 23:42:37.039483", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 207, "class": "org.jfree.chart.renderer.category.StatisticalBarRenderer"}, "patchType": "PRECONDITION", "patch": "--- a/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n@@ -206,10 +206,12 @@\n         PlotOrientation orientation = plot.getOrientation();\n-        if (orientation == PlotOrientation.HORIZONTAL) {\n-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n-                    rangeAxis, statData, row, column);\n+        if (3 == 0) {\n+            if (orientation == PlotOrientation.HORIZONTAL) {\n+                drawHorizontalItem(g2, state, dataArea, plot, domainAxis,\n+                rangeAxis, statData, row, column);\n+            }\n+            else if (orientation == PlotOrientation.VERTICAL) {\n+                drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis,\n+                statData, row, column);\n+            }\n         }\n-        else if (orientation == PlotOrientation.VERTICAL) {\n-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n-                    statData, row, column);\n-        }\n     }\n"}]}}, {"project": "Chart", "bug_id": "26", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:52:32.564609", "repair_begin": "2018-11-30 02:49:58.726428", "patches": [{"edits": [{"path": "source/org/jfree/chart/plot/CategoryPlot.java", "line": 2547, "faulty": "state=new PlotRenderingInfo(null);", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "1", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:55:12.419296", "repair_begin": "2018-12-01 16:04:54.888280", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1340/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:13.893041158 -0500\n@@ -943,7 +943,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -971,7 +970,6 @@\n             value = x.toString();\n             break;\n         }\n-        sb.append(value);\n         sb.append(']');\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1340/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:13.893041158 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 396, "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 974, "faulty": "sb.append(value);", "type": "Delete", "seed": "sb.append('\\n');"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 946, "faulty": "sb.append(first.getString());", "type": "Delete", "seed": "sb.append(Token.name(type));"}]}]}}, {"project": "Closure", "bug_id": "1", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:55:48.956360", "repair_begin": "2018-11-30 02:49:38.790631", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 396, "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "1", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:58:50.379312", "repair_begin": "2018-11-29 02:55:14.374534", "patches": [{"nb_test_that_execute_statement": 17, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 53) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "2", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:58:09.376632", "repair_begin": "2018-11-29 02:55:02.622449", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "3", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:32:37.240769", "repair_begin": "2018-12-01 16:05:01.400756", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1509/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:44.646542992 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1509/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:44.650543036 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 424, "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 405, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 211, "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", "type": "Delete", "seed": "break;"}]}]}}, {"project": "Closure", "bug_id": "3", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:54:38.325050", "repair_begin": "2018-11-30 02:48:31.605401", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 405, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "3", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:56:54.937727", "repair_begin": "2018-11-29 02:53:47.613980", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "4", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 03:00:56.300784", "repair_begin": "2018-11-29 02:53:29.359462", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "5", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:50:25.340239", "repair_begin": "2018-11-30 02:44:30.469774", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1440, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "5", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:55:36.662379", "repair_begin": "2018-11-29 02:52:39.932518", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "6", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:55:05.829914", "repair_begin": "2018-11-29 02:51:28.184292", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "7", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:28:22.919756", "repair_begin": "2018-12-01 16:02:21.090363", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_7/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-01 10:01:58.968231593 -0500\n+++ /tmp/Arja_Defects4J_Closure_7/patches_a2mm/Patch_1695/patched/tmp/Arja_Defects4J_Closure_7/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-01 10:27:14.593173671 -0500\n@@ -928,7 +928,6 @@\n   String toStringHelper(boolean forAnnotations) {\n     if (!isPrettyPrint() ||\n         this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n-      return \"Function\";\n     }\n \n     setPrettyPrint(false);\n\n\n--- /tmp/Arja_Defects4J_Closure_7/src/com/google/javascript/rhino/jstype/UnionType.java\t2018-12-01 10:01:58.972231593 -0500\n+++ /tmp/Arja_Defects4J_Closure_7/patches_a2mm/Patch_1695/patched/tmp/Arja_Defects4J_Closure_7/src/com/google/javascript/rhino/jstype/UnionType.java\t2018-12-01 10:27:14.593173671 -0500\n@@ -333,7 +333,7 @@\n   boolean checkUnionEquivalenceHelper(\n       UnionType that, boolean tolerateUnknowns) {\n     if (!tolerateUnknowns && alternates.size() != that.alternates.size()) {\n-      return false;\n+      return true;\n     }\n     for (JSType alternate : that.alternates) {\n       if (!hasAlternate(alternate, tolerateUnknowns)) {\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/jstype/FunctionType.java", "line": 931, "faulty": "return \"Function\";", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/jstype/UnionType.java", "line": 336, "faulty": "return false;", "type": "Replace", "seed": "return true;"}]}]}}, {"project": "Closure", "bug_id": "7", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:50:06.425522", "repair_begin": "2018-11-30 02:44:13.075573", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java", "line": 395, "faulty": "restricted=restrictedAlternate.getLeastSupertype(restricted);", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "7", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:53:09.073985", "repair_begin": "2018-11-29 02:50:24.849854", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "8", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:24:17.476925", "repair_begin": "2018-12-01 16:02:44.803388", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-01 10:02:25.535699864 -0500\n+++ /tmp/Arja_Defects4J_Closure_8/patches_hwwe/Patch_181/patched/tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-01 10:10:03.406214317 -0500\n@@ -199,9 +199,7 @@\n       }\n \n       Var var = s.getVar(lhs.getString());\n-      return var != null\n-          && var.getScope() == s\n-          && !blacklistedVars.contains(var);\n+      return false;\n     }\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:02:23.007699806 -0500\n+++ /tmp/Arja_Defects4J_Closure_8/patches_hwwe/Patch_181/patched/tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:10:03.410214332 -0500\n@@ -112,7 +112,7 @@\n       switch (propType) {\n         case VAR_ARGS_NAME:      return \"var_args_name\";\n \n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n+        case JSDOC_INFO_PROP:    return \"BLOCK\";\n \n         case INCRDECR_PROP:      return \"incrdecr\";\n         case QUOTED_PROP:        return \"quoted\";\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", "line": 202, "faulty": "return var != null && var.getScope() == s && !blacklistedVars.contains(var);", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 115, "faulty": "return \"jsdoc_info\";", "type": "Replace", "seed": "return \"BLOCK\";"}]}]}}, {"project": "Closure", "bug_id": "8", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:50:11.853787", "repair_begin": "2018-11-30 02:43:43.531772", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1440, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "8", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:52:36.481484", "repair_begin": "2018-11-29 02:50:11.542078", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "9", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:53:09.276913", "repair_begin": "2018-11-29 02:49:08.156417", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1411, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1410,7 +1410,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "10", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:29:58.108072", "repair_begin": "2018-12-01 16:02:39.248730", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 10:02:20.292394989 -0500\n+++ /tmp/Arja_Defects4J_Closure_10/patches_ktm9/Patch_1593/patched/tmp/Arja_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 10:28:18.919090209 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        return false;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 10:02:17.256394865 -0500\n+++ /tmp/Arja_Defects4J_Closure_10/patches_ktm9/Patch_1593/patched/tmp/Arja_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 10:28:18.919090209 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        ;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -797,15 +797,12 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 800, "faulty": "Preconditions.checkState(left.getChildCount() == 2);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 251, "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 1271, "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 808, "faulty": "valueToCombine=lr;", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "10", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 04:02:03.960952", "repair_begin": "2018-11-30 03:37:05.062446", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 253, "faulty": "return;", "type": "Replace", "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 811, "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", "type": "InsertBefore", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 1271, "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", "type": "Delete", "seed": "return this;"}]}]}}, {"project": "Closure", "bug_id": "10", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:47:00.490523", "repair_begin": "2018-11-30 02:39:54.969005", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 1271, "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "10", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:53:09.649786", "repair_begin": "2018-11-29 02:48:48.489756", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1433, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1432,7 +1432,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type < 36) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "11", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:52:39.579569", "repair_begin": "2018-11-29 02:48:21.926328", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1433, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1432,7 +1432,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type < 36) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "12", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:22:56.062646", "repair_begin": "2018-12-01 15:59:07.754384", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_636/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:54.815399144 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_636/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:54.815399144 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 416, "faulty": "rhs.detachFromParent();", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 400, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 201, "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "12", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:43:41.370276", "repair_begin": "2018-11-30 02:37:27.907170", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 400, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "12", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:51:22.618899", "repair_begin": "2018-11-29 02:47:10.045439", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1433, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1432,7 +1432,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type < 36) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "13", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:48:01.351130", "repair_begin": "2018-11-29 02:45:31.409455", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < 40) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "14", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:48:08.171406", "repair_begin": "2018-11-29 02:45:37.662558", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "15", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:21:43.091618", "repair_begin": "2018-12-01 15:57:54.563683", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_988/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:52.145002466 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_988/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:52.149002455 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 208, "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 211, "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 214, "faulty": "e.setAnnotation(VISITED_EDGE);", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}]}]}}, {"project": "Closure", "bug_id": "15", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:58:07.803128", "repair_begin": "2018-11-30 03:32:11.984580", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", "line": 224, "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", "type": "InsertBefore", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 224, "faulty": "return \"IN\";", "type": "Delete", "seed": "case SUB:"}, {"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 370, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "Replace", "seed": "return false;"}]}]}}, {"project": "Closure", "bug_id": "15", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:41:27.769130", "repair_begin": "2018-11-30 02:34:56.707900", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", "line": 370, "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "15", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:48:42.172452", "repair_begin": "2018-11-29 02:44:30.638723", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "16", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:46:28.704180", "repair_begin": "2018-11-29 02:44:07.747266", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < node2.type) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "17", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:47:58.868461", "repair_begin": "2018-11-29 02:43:52.921170", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "18", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:45:21.189525", "repair_begin": "2018-11-29 02:43:10.702135", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < 40) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "19", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:45:47.367049", "repair_begin": "2018-11-29 02:41:41.443009", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "20", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:21:57.414762", "repair_begin": "2018-12-01 15:59:35.787120", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_20/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:59:15.572095989 -0500\n+++ /tmp/Arja_Defects4J_Closure_20/patches_rf7a/Patch_1452/patched/tmp/Arja_Defects4J_Closure_20/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:13.232253959 -0500\n@@ -138,7 +138,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"EMPTY\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 141, "faulty": "return \"free_call\";", "type": "Replace", "seed": "return \"EMPTY\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}]}]}}, {"project": "Closure", "bug_id": "20", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:37:43.444263", "repair_begin": "2018-11-30 02:31:27.412532", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "20", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:44:12.376787", "repair_begin": "2018-11-29 02:41:29.513889", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "21", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:16:46.385037", "repair_begin": "2018-12-01 15:58:06.183678", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 09:57:47.389900461 -0500\n+++ /tmp/Arja_Defects4J_Closure_21/patches_9yoi/Patch_264/patched/tmp/Arja_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 10:06:27.511927684 -0500\n@@ -114,14 +114,6 @@\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n         return;\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 117, "faulty": "if (n == parent.getLastChild()) {\n  for (  Node an : parent.getAncestors()) {\n    int ancestorType=an.getType();\n    if (ancestorType == Token.COMMA)     continue;\n    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)     return;\n else     break;\n  }\n}", "type": "Delete", "seed": "this.level=level;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 119, "faulty": "int ancestorType=an.getType();", "type": "InsertBefore", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 120, "faulty": "continue;", "type": "Replace", "seed": "break;"}]}]}}, {"project": "Closure", "bug_id": "21", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:54:03.188362", "repair_begin": "2018-11-30 03:19:44.741067", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 117, "faulty": "if (n == parent.getLastChild()) {\n  for (  Node an : parent.getAncestors()) {\n    int ancestorType=an.getType();\n    if (ancestorType == Token.COMMA)     continue;\n    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)     return;\n else     break;\n  }\n}", "type": "Delete", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 163, "faulty": "n.getParent().replaceChild(n,replacement);", "type": "InsertBefore", "seed": "int type=n.getType();"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 120, "faulty": "if (ancestorType == Token.COMMA) continue;", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 119, "faulty": "int ancestorType=an.getType();", "type": "InsertBefore", "seed": "JSType type=n.getJSType();"}]}]}}, {"project": "Closure", "bug_id": "21", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 18:24:49.551490", "repair_begin": "2018-12-01 16:36:26.071212", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n+++ com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n@@ -118,7 +118,7 @@\\n \\t\\t\\t\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n \\t\\t\\t\\t\\tint ancestorType = an.getType();\\n \\t\\t\\t\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA)) { \\t\\t\\t\\t\\t\\tcontinue;}\\n-\\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK))) \\t\\t\\t\\t\\t\\treturn;else\\n+\\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK))) {}else\\n \\t\\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return", "INGREDIENT_SCOPE": "-", "LOCATION": "com.google.javascript.jscomp.CheckSideEffects", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_21\\/.\\/output_astor\\/AstorMain-Closure-21\\/\\/src\\/\\/variant-486_f\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_21\\/output_astor\\/AstorMain-Closure-21\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "LINE": "121", "MP_RANKING": "6", "SUSPICIOUNESS": "0.408"}], "GENERATION": "243", "VARIANT_ID": "486", "TIME": "3095", "VALIDATION": "|true|0|7580|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Closure_21\\/.\\/output_astor\\/AstorMain-Closure-21\\/\\/bin\\/\\/variant-486"}]}}, {"project": "Closure", "bug_id": "21", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:34:19.823686", "repair_begin": "2018-11-30 02:28:36.068253", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 120, "faulty": "if (ancestorType == Token.COMMA) continue;", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "21", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:45:17.353874", "repair_begin": "2018-11-29 02:41:32.295274", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 118, "class": "com.google.javascript.jscomp.CheckSideEffects"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -117,7 +117,9 @@\n       if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+        if (com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0) {\n+          for (Node an : parent.getAncestors()) {\n+            int ancestorType = an.getType();\n+            if (ancestorType == Token.COMMA) continue;\n+            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+            else break;\n+          }\n         }\n"}]}}, {"project": "Closure", "bug_id": "22", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:12:45.932087", "repair_begin": "2018-12-01 15:55:44.776524", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 09:55:25.787478311 -0500\n+++ /tmp/Arja_Defects4J_Closure_22/patches_ahai/Patch_554/patched/tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2018-12-01 10:07:17.651617453 -0500\n@@ -112,7 +112,7 @@\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA)\n-            continue;\n+\t\t\tbreak;\n           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n             return;\n           else\n@@ -176,7 +176,6 @@\n \n   private void addExtern() {\n     Node name = IR.name(PROTECTOR_FN);\n-    name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     Node var = IR.var(name);\n     // Add \"@noalias\" so we can strip the method when AliasExternals is enabled.\n     JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 179, "faulty": "name.putBooleanProp(Node.IS_CONSTANT_NAME,true);", "type": "Delete", "seed": "this.level=level;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 115, "faulty": "continue;", "type": "Replace", "seed": "break;"}]}]}}, {"project": "Closure", "bug_id": "22", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:45:01.278469", "repair_begin": "2018-11-30 03:19:07.385106", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 112, "faulty": "for (Node an : parent.getAncestors()) {\n  int ancestorType=an.getType();\n  if (ancestorType == Token.COMMA)   continue;\n  if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)   return;\n else   break;\n}", "type": "Delete", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 111, "faulty": "if (n == parent.getLastChild()) {\n  for (  Node an : parent.getAncestors()) {\n    int ancestorType=an.getType();\n    if (ancestorType == Token.COMMA)     continue;\n    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)     return;\n else     break;\n  }\n}", "type": "Delete", "seed": "traverseNodes(n);"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 116, "faulty": "if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n else break;", "type": "Delete", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 141, "faulty": "msg=\"Is there a missing '+' on the previous line?\";", "type": "Delete", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 116, "faulty": "if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n else break;", "type": "InsertBefore", "seed": "formatPreamble();"}]}]}}, {"project": "Closure", "bug_id": "22", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 17:29:30.414180", "repair_begin": "2018-12-01 16:35:58.556568", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n+++ com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java\\n@@ -109,15 +109,15 @@\\n \\n \\n \\t\\t\\tif (n == (parent.getLastChild())) {\\n-\\t\\t\\t\\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n-\\t\\t\\t\\t\\tint ancestorType = an.getType();\\n-\\t\\t\\t\\t\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\\n-\\t\\t\\t\\t\\t\\tcontinue;\\n-\\t\\t\\t\\t\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\\n-\\t\\t\\t\\t\\t\\treturn;else\\n \\n-\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\t}\\n \\t\\t}else \\t\\t\\tif (((parent.getType()) != (com.google.javascript.rhino.Token.EXPR_RESULT)) && ((parent.getType()) != (com.google.javascript.rhino.Token.BLOCK))) {\\n \\t\\t\\t\\tif ((((parent.getType()) == (com.google.javascript.rhino.Token.FOR)) && ((parent.getChildCount()) == 4)) && ((n == (parent.getFirstChild())) || \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtForEachImpl|CtBlockImpl", "ORIGINAL_CODE": "for (com.google.javascript.rhino.Node an : parent.getAncestors()) {\\n\\tint ancestorType = an.getType();\\n\\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\\n\\t\\tcontinue;\\n\\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\\n\\t\\treturn;else\\n\\n\\t\\tbreak;\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "com.google.javascript.jscomp.CheckSideEffects", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_22\\/.\\/output_astor\\/AstorMain-Closure-22\\/\\/src\\/\\/variant-110_f\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_22\\/output_astor\\/AstorMain-Closure-22\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/CheckSideEffects.java", "LINE": "112", "MP_RANKING": "8", "SUSPICIOUNESS": "0.333"}], "GENERATION": "55", "VARIANT_ID": "110", "TIME": "537", "VALIDATION": "|true|0|7580|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Closure_22\\/.\\/output_astor\\/AstorMain-Closure-22\\/\\/bin\\/\\/variant-110"}]}}, {"project": "Closure", "bug_id": "22", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:33:34.892354", "repair_begin": "2018-11-30 02:27:47.296939", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckSideEffects.java", "line": 111, "faulty": "if (n == parent.getLastChild()) {\n  for (  Node an : parent.getAncestors()) {\n    int ancestorType=an.getType();\n    if (ancestorType == Token.COMMA)     continue;\n    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)     return;\n else     break;\n  }\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "22", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:45:25.645246", "repair_begin": "2018-11-29 02:41:22.592026", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "23", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:47:57.351013", "repair_begin": "2018-11-29 02:41:12.550192", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "24", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:42:49.277728", "repair_begin": "2018-11-29 02:40:22.985636", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "25", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:41:26.632686", "repair_begin": "2018-11-29 02:37:15.612732", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "26", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:30:45.080195", "repair_begin": "2018-11-30 02:23:41.570411", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "26", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:42:43.669860", "repair_begin": "2018-11-29 02:36:47.171541", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "27", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:41:03.120091", "repair_begin": "2018-11-29 02:36:44.660772", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "28", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:40:14.045419", "repair_begin": "2018-11-29 02:36:23.662881", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "29", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:28:57.373148", "repair_begin": "2018-11-30 02:22:52.494153", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "29", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:38:32.058915", "repair_begin": "2018-11-29 02:36:02.688554", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "30", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:26:28.266330", "repair_begin": "2018-11-30 02:20:25.204168", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "30", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:39:23.503817", "repair_begin": "2018-11-29 02:35:27.065110", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "31", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:21:00.595109", "repair_begin": "2018-12-01 15:47:17.322318", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_31/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:46:57.523791036 -0500\n+++ /tmp/Arja_Defects4J_Closure_31/patches_4aem/Patch_1139/patched/tmp/Arja_Defects4J_Closure_31/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:50.204450356 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_31/src/com/google/javascript/jscomp/CompilerOptions.java\t2018-12-01 09:46:57.483790804 -0500\n+++ /tmp/Arja_Defects4J_Closure_31/patches_4aem/Patch_1139/patched/tmp/Arja_Defects4J_Closure_31/src/com/google/javascript/jscomp/CompilerOptions.java\t2018-12-01 10:11:50.204450356 -0500\n@@ -1276,7 +1276,6 @@\n    */\n   public void setDependencyOptions(DependencyOptions options) {\n     Preconditions.checkNotNull(options);\n-    this.dependencyOptions = options;\n   }\n \n   /**\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/CompilerOptions.java", "line": 1279, "faulty": "this.dependencyOptions=options;", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}]}]}}, {"project": "Closure", "bug_id": "31", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:26:08.008079", "repair_begin": "2018-11-30 02:19:37.011657", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "31", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:36:04.436150", "repair_begin": "2018-11-29 02:33:35.828425", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "32", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:37:37.107369", "repair_begin": "2018-11-29 02:33:04.325972", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "33", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:10:56.935043", "repair_begin": "2018-12-01 15:44:17.715225", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-01 09:43:59.335451027 -0500\n+++ /tmp/Arja_Defects4J_Closure_33/patches_8itw/Patch_791/patched/tmp/Arja_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-01 09:54:07.976132296 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 568, "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 573, "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "33", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:32:10.101086", "repair_begin": "2018-11-30 03:03:56.567557", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 572, "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", "type": "Delete", "seed": "return EMPTY;"}, {"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 573, "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", "type": "Replace", "seed": "return TRUE;"}]}]}}, {"project": "Closure", "bug_id": "33", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:20:52.717171", "repair_begin": "2018-11-30 02:15:55.924095", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "line": 570, "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "33", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:36:41.882604", "repair_begin": "2018-11-29 02:32:51.907963", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1430, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1429,7 +1429,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "34", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:35:05.844820", "repair_begin": "2018-11-29 02:31:25.578872", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1429, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1428,7 +1428,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "35", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:33:46.699618", "repair_begin": "2018-11-29 02:30:13.468862", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "36", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:30:09.211102", "repair_begin": "2018-11-30 03:00:52.109023", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Token.java", "line": 229, "faulty": "return \"ASSIGN\";", "type": "Replace", "seed": "return \"SUB\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "Replace", "seed": "return null;"}]}]}}, {"project": "Closure", "bug_id": "36", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:22:19.905349", "repair_begin": "2018-11-30 02:14:12.649519", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "36", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:33:22.823282", "repair_begin": "2018-11-29 02:29:04.031983", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < 40) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "37", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:30:26.917670", "repair_begin": "2018-11-29 02:28:18.616429", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1412, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1411,7 +1411,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "38", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:29:50.054850", "repair_begin": "2018-11-29 02:27:47.580324", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1412, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1411,7 +1411,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "39", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:29:22.319384", "repair_begin": "2018-11-29 02:27:01.003867", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1412, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1411,7 +1411,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "40", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:28:49.456590", "repair_begin": "2018-11-29 02:26:42.179503", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1412, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1411,7 +1411,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "41", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:29:52.349919", "repair_begin": "2018-11-29 02:26:09.417724", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "42", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:29:09.194398", "repair_begin": "2018-11-29 02:25:40.880106", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "43", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:26:44.973193", "repair_begin": "2018-11-29 02:24:17.706613", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "44", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:27:51.563619", "repair_begin": "2018-11-29 02:24:27.379980", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "45", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:57:01.506068", "repair_begin": "2018-12-01 15:38:01.705865", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1315/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:18.052832697 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1315/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:18.052832697 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 588, "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 594, "faulty": "return true;", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", "line": 962, "faulty": "parent.replaceChild(assignNode,replacement);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "45", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:10:30.002343", "repair_begin": "2018-11-30 02:04:28.549320", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1433, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "45", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:26:03.875060", "repair_begin": "2018-11-29 02:24:06.470998", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "46", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:52:52.575228", "repair_begin": "2018-12-01 15:38:14.158168", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-01 09:37:54.247737241 -0500\n+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_1778/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-01 09:50:46.493707152 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-01 09:37:56.231742339 -0500\n+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_1778/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-01 09:50:46.493707152 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -167,9 +167,6 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 110, "faulty": "return false;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", "line": 86, "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 171, "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "46", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:08:27.335305", "repair_begin": "2018-11-30 02:03:46.562524", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/RecordType.java", "line": 142, "faulty": "if (!that.isRecordType()) {\n  return super.getLeastSupertype(that);\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "46", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:27:42.130791", "repair_begin": "2018-11-29 02:24:05.908531", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1404, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1403,7 +1403,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= 51) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "48", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:25:50.181541", "repair_begin": "2018-11-29 02:22:43.399800", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1402, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1401,7 +1401,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 36) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "49", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:06:39.456524", "repair_begin": "2018-11-30 02:01:25.269914", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1609, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "50", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:05:55.815969", "repair_begin": "2018-11-30 02:00:21.522276", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1609, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "50", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:23:00.933937", "repair_begin": "2018-11-29 02:19:53.696567", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "51", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:21:19.383530", "repair_begin": "2018-11-29 02:19:26.482243", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "52", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:20:55.758122", "repair_begin": "2018-11-29 02:19:04.155983", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "53", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:22:16.422764", "repair_begin": "2018-11-29 02:19:15.634784", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "54", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:21:44.146602", "repair_begin": "2018-11-29 02:18:44.915497", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "55", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:51:33.934977", "repair_begin": "2018-12-01 15:32:20.901034", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_565/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:52.251535084 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 87, "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 218, "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "55", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:06:18.133270", "repair_begin": "2018-11-30 02:38:53.272006", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 87, "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1677, "faulty": "return \"call\";", "type": "Delete", "seed": "break L;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1677, "faulty": "return \"call\";", "type": "Delete", "seed": "case 'e':"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1677, "faulty": "return \"call\";", "type": "Replace", "seed": "boolean isUnicodeEscapeStart=false;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 277, "faulty": "return statement.getFirstChild();", "type": "Delete", "seed": "formatConclusion();"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 87, "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "Replace", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 111, "faulty": "Node root=compiler.parseSyntheticCode(reducer.getClass().toString() + \":helper\",reducer.getHelperSource());", "type": "InsertBefore", "seed": "boolean valid=false;"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 427, "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/jscomp/AstValidator.java", "line": 768, "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", "type": "InsertBefore", "seed": "for (Node c=n.getFirstChild(); c != null; c=c.getNext()) {\n  validateStatement(c);\n}"}, {"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 451, "faulty": "return value.getLastChild();", "type": "InsertBefore", "seed": "boolean valid=false;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1725, "faulty": "return \"function\";", "type": "Replace", "seed": "Kit.codeBug();"}]}]}}, {"project": "Closure", "bug_id": "55", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:57:37.475330", "repair_begin": "2018-11-30 01:52:09.772426", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionRewriter.java", "line": 79, "faulty": "if (helperCode == null) {\n  continue;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "55", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:19:40.890834", "repair_begin": "2018-11-29 02:17:51.662444", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "56", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:20:58.819614", "repair_begin": "2018-11-29 02:17:54.557791", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "57", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:18:54.533961", "repair_begin": "2018-11-29 02:17:03.911493", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "58", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:16:56.638050", "repair_begin": "2018-11-29 02:15:06.119642", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1567, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1566,7 +1566,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if ((node2.type) != (com.google.javascript.rhino.Node.this.type)) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "59", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:07:23.610451", "repair_begin": "2018-12-01 15:32:30.849305", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-01 09:32:10.027745566 -0500\n+++ /tmp/Arja_Defects4J_Closure_59/patches_qxp9/Patch_525/patched/tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-01 09:45:36.400054818 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "59", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:16:56.899223", "repair_begin": "2018-11-30 02:36:41.263961", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", "line": 207, "faulty": "Preconditions.checkNotNull(group,\"No warning class for name: \" + name);", "type": "Delete", "seed": "return;"}, {"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Delete", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Delete", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", "line": 156, "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", "type": "InsertBefore", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 79, "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", "type": "Delete", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/CommandLineRunner.java", "line": 441, "faulty": "proxy.addValue((String)value);", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/CheckGlobalThis.java", "line": 165, "faulty": "return true;", "type": "Delete", "seed": "violation(\"Expected expression but was \" + Node.tokenToName(n.getType()),n);"}, {"path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", "line": 288, "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", "type": "Delete", "seed": "return toDot(n,null);"}, {"path": "src/com/google/javascript/jscomp/WarningLevel.java", "line": 81, "faulty": "options.checkMissingReturn=CheckLevel.WARNING;", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", "line": 263, "faulty": "checks.add(checkAccessControls);", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}]}]}}, {"project": "Closure", "bug_id": "59", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:58:34.437197", "repair_begin": "2018-11-30 01:51:03.614793", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckGlobalThis.java", "line": 165, "faulty": "return true;", "type": "InsertReturn false"}]}]}}, {"project": "Closure", "bug_id": "59", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:18:25.420732", "repair_begin": "2018-11-29 02:15:22.463541", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1514, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1513,7 +1513,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.SPECIALCALL_WITH == node2.type) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "60", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:16:53.885787", "repair_begin": "2018-11-29 02:14:58.767436", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1500, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1499,7 +1499,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type < 3) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "61", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:00:02.386141", "repair_begin": "2018-11-30 02:34:23.159247", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1461, "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", "type": "Delete", "seed": "Node pn=mulExpr();"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 315, "faulty": "return \"NUMBER\";", "type": "Delete", "seed": "return new Decompiler();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1150, "faulty": "toStringTreeHelper(cursor,level + 1,sb);", "type": "Replace", "seed": "throw new IllegalArgumentException();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1045, "faulty": "sb.append(getDouble());", "type": "InsertBefore", "seed": "sourcePosition=-1;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1150, "faulty": "toStringTreeHelper(cursor,level + 1,sb);", "type": "Replace", "seed": "throw new IllegalArgumentException();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 195, "faulty": "return \"sourcename\";", "type": "Replace", "seed": "return \"BITOR\";"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 315, "faulty": "return \"NUMBER\";", "type": "Delete", "seed": "return new Decompiler();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 195, "faulty": "return \"sourcename\";", "type": "Replace", "seed": "return \"BITOR\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1503, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1045, "faulty": "sb.append(getDouble());", "type": "InsertBefore", "seed": "sourcePosition=-1;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1143, "faulty": "sb.append(\"    \");", "type": "Delete", "seed": "return (JSDocInfo)getProp(JSDOC_INFO_PROP);"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1461, "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", "type": "InsertBefore", "seed": "return toStringTreeImpl();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1490, "faulty": "return new NodeMismatch(this,node2);", "type": "InsertBefore", "seed": "int count=0;"}]}]}}, {"project": "Closure", "bug_id": "61", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:55:22.745229", "repair_begin": "2018-11-30 01:50:04.243185", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1503, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "61", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:17:10.411348", "repair_begin": "2018-11-29 02:14:17.617416", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 1461, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1460,7 +1460,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.ENUM_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "62", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:53:41.649166", "repair_begin": "2018-11-30 01:49:33.601524", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java", "line": 97, "faulty": "if (excerpt.equals(LINE) && 0 <= charno && charno < sourceExcerpt.length()) {\n  for (int i=0; i < charno; i++) {\n    char c=sourceExcerpt.charAt(i);\n    if (Character.isWhitespace(c)) {\n      b.append(c);\n    }\n else {\n      b.append(' ');\n    }\n  }\n  b.append(\"^\\n\");\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "62", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:15:33.131236", "repair_begin": "2018-11-29 02:13:41.833112", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1461, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1460,7 +1460,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.ENUM_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "63", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:52:53.359963", "repair_begin": "2018-11-30 01:48:46.395021", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java", "line": 97, "faulty": "if (excerpt.equals(LINE) && 0 <= charno && charno < sourceExcerpt.length()) {\n  for (int i=0; i < charno; i++) {\n    char c=sourceExcerpt.charAt(i);\n    if (Character.isWhitespace(c)) {\n      b.append(c);\n    }\n else {\n      b.append(' ');\n    }\n  }\n  b.append(\"^\\n\");\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "63", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:16:05.087410", "repair_begin": "2018-11-29 02:13:10.433163", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1461, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1460,7 +1460,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= com.google.javascript.rhino.Node.ENUM_PROP) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "64", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:52:37.666586", "repair_begin": "2018-11-30 01:45:30.055774", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/StatementFusion.java", "line": 61, "faulty": "return false;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "67", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:46:28.275163", "repair_begin": "2018-12-01 15:26:03.257598", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-01 09:25:47.602554953 -0500\n+++ /tmp/Arja_Defects4J_Closure_67/patches_k844/Patch_417/patched/tmp/Arja_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\t2018-12-01 09:34:32.818172973 -0500\n@@ -84,19 +84,6 @@\n         for (Symbol declaration : nameInfo.getDeclarations()) {\n           boolean canRemove = false;\n \n-          if (specializationState == null) {\n-            canRemove = true;\n-          } else {\n-            Node specializableFunction =\n-              getSpecializableFunctionFromSymbol(declaration);\n-\n-            if (specializableFunction != null) {\n-              specializationState.reportRemovedFunction(\n-                  specializableFunction, null);\n-              canRemove = true;\n-            }\n-          }\n-\n           if (canRemove) {\n             declaration.remove();\n             changed = true;\n\n\n--- /tmp/Arja_Defects4J_Closure_67/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:47.626555117 -0500\n+++ /tmp/Arja_Defects4J_Closure_67/patches_k844/Patch_417/patched/tmp/Arja_Defects4J_Closure_67/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:34:32.822173000 -0500\n@@ -1424,7 +1424,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1427, "faulty": "return res;", "type": "Delete", "seed": "return new NodeMismatch(this,node2);"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 87, "faulty": "if (specializationState == null) {\n  canRemove=true;\n}\n else {\n  Node specializableFunction=getSpecializableFunctionFromSymbol(declaration);\n  if (specializableFunction != null) {\n    specializationState.reportRemovedFunction(specializableFunction,null);\n    canRemove=true;\n  }\n}", "type": "Delete", "seed": "break;"}]}]}}, {"project": "Closure", "bug_id": "67", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:47:15.226718", "repair_begin": "2018-11-30 02:26:48.771722", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 100, "faulty": "if (canRemove) {\n  declaration.remove();\n  changed=true;\n}", "type": "Delete", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 88, "faulty": "canRemove=true;", "type": "Replace", "seed": "boolean valid=false;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 221, "faulty": "return \"synthetic\";", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 939, "faulty": "sb.append(' ');", "type": "Delete", "seed": "return getBooleanProp(VAR_ARGS_NAME);"}]}]}}, {"project": "Closure", "bug_id": "67", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:45:39.515143", "repair_begin": "2018-11-30 01:40:49.446564", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "line": 100, "faulty": "if (canRemove) {\n  declaration.remove();\n  changed=true;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "68", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:02:30.269807", "repair_begin": "2018-12-01 15:23:50.120288", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 09:23:33.332831255 -0500\n+++ /tmp/Arja_Defects4J_Closure_68/patches_2aye/Patch_1511/patched/tmp/Arja_Defects4J_Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 09:45:38.297803894 -0500\n@@ -884,8 +884,7 @@\n         case EOF:\n           // discard any accumulated information\n           jsdocBuilder.build(null);\n-          parser.addParserWarning(\"msg.unexpected.eof\",\n-              stream.getLineno(), stream.getCharno());\n+          ;\n           checkExtendedTypes(extendedTypes);\n           return false;\n \n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java", "line": 887, "faulty": "parser.addParserWarning(\"msg.unexpected.eof\",stream.getLineno(),stream.getCharno());", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "68", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:45:01.803941", "repair_begin": "2018-11-30 01:40:12.357634", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java", "line": 886, "faulty": "jsdocBuilder.build(null);", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "72", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:43:35.416232", "repair_begin": "2018-11-30 01:38:21.115172", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1424, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "75", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:45:53.070448", "repair_begin": "2018-12-01 15:23:41.083885", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_635/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:35:06.527507276 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_635/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:06.527507276 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 349, "faulty": "return Double.parseDouble(s);", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 265, "faulty": "reportCodeChange();", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "75", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:38:47.479310", "repair_begin": "2018-11-30 02:17:55.582983", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Token.java", "line": 303, "faulty": "return \"POS\";", "type": "Delete", "seed": "return Token.ASSIGN;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 301, "faulty": "return getStringNumberValue(n.getString());", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1413, "faulty": "return res;", "type": "Delete", "seed": "break L0;"}, {"path": "src/com/google/javascript/jscomp/CodeGenerator.java", "line": 1019, "faulty": "appendHexJavaScriptRepresentation(sb,c);", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 357, "faulty": "parent.replaceChild(n,left.detachFromParent());", "type": "Delete", "seed": "formatConclusion();"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 301, "faulty": "return getStringNumberValue(n.getString());", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 364, "faulty": "start++;", "type": "Delete", "seed": "return new DotFormatter();"}]}]}}, {"project": "Closure", "bug_id": "75", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:43:40.514497", "repair_begin": "2018-11-30 01:37:32.782199", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 332, "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "76", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:39:35.992790", "repair_begin": "2018-11-30 01:34:51.072454", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1411, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "78", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:44:45.935835", "repair_begin": "2018-12-01 15:23:04.660649", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:22:48.941670648 -0500\n+++ /tmp/Arja_Defects4J_Closure_78/patches_k0hs/Patch_2296/patched/tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:27.477562817 -0500\n@@ -267,9 +267,7 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n+        ;\n         return null;\n \n       case Token.NEG:\n\n\n--- /tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 09:22:48.921670448 -0500\n+++ /tmp/Arja_Defects4J_Closure_78/patches_k0hs/Patch_2296/patched/tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 09:42:27.485562899 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 270, "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", "type": "Delete", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "78", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:37:52.634802", "repair_begin": "2018-11-30 02:15:24.317319", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 267, "faulty": "if (name.equals(\"NaN\")) {\n  return Double.NaN;\n}", "type": "InsertBefore", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 718, "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 717, "faulty": "if (rval == 0) {\n  error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);\n  return null;\n}", "type": "InsertBefore", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 146, "faulty": "return result;", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "Delete", "seed": "return toDot(n,null);"}, {"path": "src/com/google/javascript/jscomp/NodeUtil.java", "line": 270, "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", "type": "Delete", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 813, "faulty": "return result;", "type": "Delete", "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"}, {"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 53, "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", "type": "Delete", "seed": "traverseNodes(n);"}]}]}}, {"project": "Closure", "bug_id": "78", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:39:15.407607", "repair_begin": "2018-11-30 01:33:48.588431", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", "line": 54, "faulty": "currentTraversal.getCompiler().report(error);", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "112", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:35:04.087827", "repair_begin": "2018-12-01 15:01:32.917303", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-01 09:01:13.654047680 -0500\n+++ /tmp/Arja_Defects4J_Closure_112/patches_famj/Patch_2214/patched/tmp/Arja_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2018-12-01 09:28:42.022508264 -0500\n@@ -1124,21 +1124,6 @@\n       Iterator<Node> declParams,\n       Iterator<Node> callParams,\n       Map<TemplateType, JSType> resolvedTypes) {\n-    while (declParams.hasNext() && callParams.hasNext()) {\n-      Node declParam = declParams.next();\n-      maybeResolveTemplatedType(\n-          getJSType(declParam),\n-          getJSType(callParams.next()),\n-          resolvedTypes);\n-      if (declParam.isVarArgs()) {\n-        while (callParams.hasNext()) {\n-          maybeResolveTemplatedType(\n-              getJSType(declParam),\n-              getJSType(callParams.next()),\n-              resolvedTypes);\n-        }\n-      }\n-    }\n   }\n \n   private static void resolvedTemplateType(\n@@ -1149,7 +1134,6 @@\n         map.put(template, resolved);\n       } else {\n         JSType join = previous.getLeastSupertype(resolved);\n-        map.put(template, join);\n       }\n     }\n   }\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1152, "faulty": "map.put(template,join);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1127, "faulty": "while (declParams.hasNext() && callParams.hasNext()) {\n  Node declParam=declParams.next();\n  maybeResolveTemplatedType(getJSType(declParam),getJSType(callParams.next()),resolvedTypes);\n  if (declParam.isVarArgs()) {\n    while (callParams.hasNext()) {\n      maybeResolveTemplatedType(getJSType(declParam),getJSType(callParams.next()),resolvedTypes);\n    }\n  }\n}", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "112", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:05:03.324668", "repair_begin": "2018-11-30 01:30:57.645596", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1063, "faulty": "resolvedTemplateType(resolvedTypes,paramType.toMaybeTemplateType(),argType);", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1063, "faulty": "resolvedTemplateType(resolvedTypes,paramType.toMaybeTemplateType(),argType);", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1129, "faulty": "maybeResolveTemplatedType(getJSType(declParam),getJSType(callParams.next()),resolvedTypes);", "type": "Delete", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 967, "faulty": "fnType=n.getFirstChild().getJSType().toMaybeFunctionType();", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 967, "faulty": "fnType=n.getFirstChild().getJSType().toMaybeFunctionType();", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1149, "faulty": "map.put(template,resolved);", "type": "Delete", "seed": "return new DefaultCodingConvention();"}, {"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1359, "faulty": "propertyType=propertyType.visit(replacer);", "type": "InsertBefore", "seed": "int type=n.getType();"}]}]}}, {"project": "Closure", "bug_id": "112", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:16:46.531146", "repair_begin": "2018-11-30 01:09:22.057320", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypeInference.java", "line": 1147, "faulty": "if (!resolved.isUnknownType()) {\n  if (previous == null) {\n    map.put(template,resolved);\n  }\n else {\n    JSType join=previous.getLeastSupertype(resolved);\n    map.put(template,join);\n  }\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "114", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:28:28.307047", "repair_begin": "2018-12-01 15:01:40.171912", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1480/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:15.061415055 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1480/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:25:15.065415065 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/NameAnalyzer.java", "line": 1723, "faulty": "replacement.detachFromParent();", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/NameAnalyzer.java", "line": 1724, "faulty": "changeProxy.replaceWith(parent,n,replacement);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "114", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:11:43.466360", "repair_begin": "2018-11-30 01:05:13.595277", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "115", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:39:29.417661", "repair_begin": "2018-12-01 14:58:00.471043", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:57:41.237845843 -0500\n+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_1387/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:19:39.055863522 -0500\n@@ -726,20 +726,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 729, "faulty": "if (cArg != null) {\n  if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n    return CanInlineResult.NO;\n  }\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "115", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:52:54.518469", "repair_begin": "2018-11-30 01:19:17.018817", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 731, "faulty": "return CanInlineResult.NO;", "type": "Delete", "seed": "return new DotFormatter();"}, {"path": "src/com/google/javascript/jscomp/CodeGenerator.java", "line": 109, "faulty": "return;", "type": "Delete", "seed": "int index=-1;"}, {"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 729, "faulty": "if (cArg != null) {\n  if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n    return CanInlineResult.NO;\n  }\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", "type": "Delete", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/InlineFunctions.java", "line": 897, "faulty": "return true;", "type": "Delete", "seed": "return null;"}]}]}}, {"project": "Closure", "bug_id": "115", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 08:58:05.543844", "repair_begin": "2018-12-01 07:26:25.982638", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java\\n+++ com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java\\n@@ -699,7 +699,7 @@\\n \\t\\t\\tcom.google.common.base.Preconditions.checkState(block.hasOneChild());\\n \\t\\t\\tcom.google.javascript.rhino.Node stmt = block.getFirstChild();\\n \\t\\t\\tif (stmt.isReturn()) {\\n-\\t\\t\\t\\thasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\\n+\\n \\t\\t\\t}\\n \\t\\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "hasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler)", "INGREDIENT_SCOPE": "-", "LOCATION": "com.google.javascript.jscomp.FunctionInjector", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_115\\/.\\/output_astor\\/AstorMain-Closure-115\\/\\/src\\/\\/variant-216_f\\/com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_115\\/output_astor\\/AstorMain-Closure-115\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/FunctionInjector.java", "LINE": "702", "MP_RANKING": "64", "SUSPICIOUNESS": "0.164"}], "GENERATION": "108", "VARIANT_ID": "216", "TIME": "1865", "VALIDATION": "|true|0|8309|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Closure_115\\/.\\/output_astor\\/AstorMain-Closure-115\\/\\/bin\\/\\/variant-216"}]}}, {"project": "Closure", "bug_id": "115", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:10:13.162174", "repair_begin": "2018-11-30 01:02:43.330915", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 730, "faulty": "if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n  return CanInlineResult.NO;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "116", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:29:51.986226", "repair_begin": "2018-12-01 14:51:23.523634", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:26:47.174566503 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:26:47.178566521 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:47.178566521 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/FunctionInjector.java", "line": 555, "faulty": "return true;", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", "line": 196, "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}]}]}}, {"project": "Closure", "bug_id": "117", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:13:06.185257", "repair_begin": "2018-12-01 14:50:48.151171", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-01 08:50:26.003678223 -0500\n+++ /tmp/Arja_Defects4J_Closure_117/patches_1kvo/Patch_1061/patched/tmp/Arja_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-01 09:04:51.697528269 -0500\n@@ -1802,7 +1802,7 @@\n                   child.getLastChild());\n               break;\n             case Token.GETPROP:\n-              maybeCollectMember(child, child, null);\n+              ;\n               break;\n           }\n         }\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1805, "faulty": "maybeCollectMember(child,child,null);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "117", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:05:05.641768", "repair_begin": "2018-11-30 01:18:44.056778", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1805, "faulty": "maybeCollectMember(child,child,null);", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1805, "faulty": "maybeCollectMember(child,child,null);", "type": "Replace", "seed": "int start=0;"}]}]}}, {"project": "Closure", "bug_id": "117", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:07:29.206809", "repair_begin": "2018-11-30 01:01:25.026440", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", "line": 1805, "faulty": "maybeCollectMember(child,child,null);", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "118", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:23:57.420648", "repair_begin": "2018-12-01 14:50:40.784872", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-01 08:50:21.552921286 -0500\n+++ /tmp/Arja_Defects4J_Closure_118/patches_pkqi/Patch_2343/patched/tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-01 09:18:12.101300290 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 442, "faulty": "handleObjectLit(t,n);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "118", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 02:03:50.185631", "repair_begin": "2018-11-30 01:18:35.312213", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/jstype/FunctionType.java", "line": 787, "faulty": "return leastSuper ? that : this;", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 442, "faulty": "handleObjectLit(t,n);", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertBefore", "seed": "sourcePosition=-1;"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 501, "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", "line": 1421, "faulty": "return true;", "type": "Replace", "seed": "return true;"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 442, "faulty": "handleObjectLit(t,n);", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 442, "faulty": "handleObjectLit(t,n);", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/rhino/jstype/FunctionType.java", "line": 787, "faulty": "return leastSuper ? that : this;", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 442, "faulty": "handleObjectLit(t,n);", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/rhino/jstype/FunctionType.java", "line": 787, "faulty": "return leastSuper ? that : this;", "type": "Delete", "seed": "case 1:"}, {"path": "src/com/google/javascript/jscomp/CodeGenerator.java", "line": 705, "faulty": "addExpr(c,1,Context.OTHER);", "type": "InsertBefore", "seed": "final String paramName=\"jscomp_throw_param\";"}]}]}}, {"project": "Closure", "bug_id": "118", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:11:22.965613", "repair_begin": "2018-11-30 01:01:30.158736", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", "line": 501, "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "119", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:06:38.580081", "repair_begin": "2018-12-01 14:50:35.133980", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-01 08:50:13.675964832 -0500\n+++ /tmp/Arja_Defects4J_Closure_119/patches_yqon/Patch_17/patched/tmp/Arja_Defects4J_Closure_119/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-01 08:55:53.896912085 -0500\n@@ -156,7 +156,6 @@\n \n       if (!isDefined && !isTypedef(ref)) {\n         if (!isGlobalExpr) {\n-          reportRefToUndefinedName(name, ref);\n         }\n       } else if (declaration != null &&\n           ref.getModule() != declaration.getModule() &&\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 159, "faulty": "reportRefToUndefinedName(name,ref);", "type": "Delete", "seed": "this.level=level;"}]}]}}, {"project": "Closure", "bug_id": "119", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:55:07.279828", "repair_begin": "2018-11-30 01:17:10.948472", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 159, "faulty": "reportRefToUndefinedName(name,ref);", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 158, "faulty": "if (!isGlobalExpr) {\n  reportRefToUndefinedName(name,ref);\n}", "type": "Replace", "seed": "int index=-1;"}]}]}}, {"project": "Closure", "bug_id": "119", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:05:48.639939", "repair_begin": "2018-11-30 01:00:22.936196", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", "line": 158, "faulty": "if (!isGlobalExpr) {\n  reportRefToUndefinedName(name,ref);\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "120", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:12:40.389169", "repair_begin": "2018-12-01 14:50:31.513176", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_120/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:09.665911758 -0500\n+++ /tmp/Arja_Defects4J_Closure_120/patches_ng6x/Patch_1187/patched/tmp/Arja_Defects4J_Closure_120/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:34.936968012 -0500\n@@ -1443,7 +1443,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1456,7 +1457,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return new NodeMismatch(this,node2);", "type": "InsertBefore", "seed": "this.sourcePosition=sourcePosition;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}]}]}}, {"project": "Closure", "bug_id": "120", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:06:12.219842", "repair_begin": "2018-11-30 01:00:06.875129", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "121", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:11:53.078085", "repair_begin": "2018-12-01 14:49:50.650073", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_121/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:49:29.457654604 -0500\n+++ /tmp/Arja_Defects4J_Closure_121/patches_g62h/Patch_989/patched/tmp/Arja_Defects4J_Closure_121/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:05:36.383045596 -0500\n@@ -1427,11 +1427,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n@@ -1456,7 +1452,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1430, "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", "type": "Replace", "seed": "return \"PARAM_LIST\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "Replace", "seed": "return null;"}]}]}}, {"project": "Closure", "bug_id": "121", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:05:46.199732", "repair_begin": "2018-11-30 00:59:38.845483", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1459, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "122", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:05:03.076945", "repair_begin": "2018-11-30 00:59:28.306550", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/parsing/IRFactory.java", "line": 252, "faulty": "if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n  errorReporter.warning(SUSPICIOUS_COMMENT_WARNING,sourceName,comment.getLineno(),\"\",0);\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "124", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:13:58.987126", "repair_begin": "2018-12-01 14:47:28.023253", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-01 08:47:09.466479311 -0500\n+++ /tmp/Arja_Defects4J_Closure_124/patches_uw31/Patch_2138/patched/tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-01 09:13:27.890893083 -0500\n@@ -52,7 +52,6 @@\n       reportCodeChange();\n     } else if (isCollapsibleValue(rightValue, false) &&\n         collapseAssignEqualTo(expr, exprParent, rightValue)) {\n-      reportCodeChange();\n     } else if (rightValue.isAssign()) {\n       // Recursively deal with nested assigns.\n       collapseAssign(rightValue, expr, exprParent);\n@@ -148,7 +147,6 @@\n \n               exprParent.removeChild(expr);\n               expr.removeChild(assign);\n-              parent.replaceChild(next, assign);\n               return true;\n             }\n           }\n@@ -216,7 +214,7 @@\n       return false;\n     }\n \n-    return true;\n+    return false;\n   }\n \n   /**\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 55, "faulty": "reportCodeChange();", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 219, "faulty": "return true;", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 151, "faulty": "parent.replaceChild(next,assign);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "124", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:37:40.157244", "repair_begin": "2018-11-30 01:11:43.696890", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 136, "faulty": "if (next.isQualifiedName()) {\n  String nextName=next.getQualifiedName();\n  if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n    if (!isSafeReplacement(next,assign)) {\n      return false;\n    }\n    exprParent.removeChild(expr);\n    expr.removeChild(assign);\n    parent.replaceChild(next,assign);\n    return true;\n  }\n}", "type": "Delete", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 177, "faulty": "break;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 136, "faulty": "if (next.isQualifiedName()) {\n  String nextName=next.getQualifiedName();\n  if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n    if (!isSafeReplacement(next,assign)) {\n      return false;\n    }\n    exprParent.removeChild(expr);\n    expr.removeChild(assign);\n    parent.replaceChild(next,assign);\n    return true;\n  }\n}", "type": "Delete", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 176, "faulty": "next=leftSide.getNext();", "type": "InsertBefore", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 176, "faulty": "next=leftSide.getNext();", "type": "InsertBefore", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 171, "faulty": "if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {\n  parent=next;\n  next=leftSide.getNext();\n  break;\n}\n else {\n  return false;\n}", "type": "Delete", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 136, "faulty": "if (next.isQualifiedName()) {\n  String nextName=next.getQualifiedName();\n  if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n    if (!isSafeReplacement(next,assign)) {\n      return false;\n    }\n    exprParent.removeChild(expr);\n    expr.removeChild(assign);\n    parent.replaceChild(next,assign);\n    return true;\n  }\n}", "type": "Delete", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 177, "faulty": "break;", "type": "Delete", "seed": "return 0;"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 214, "faulty": "if (node.isName() && isNameAssignedTo(node.getString(),replacement)) {\n  return false;\n}", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 136, "faulty": "if (next.isQualifiedName()) {\n  String nextName=next.getQualifiedName();\n  if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n    if (!isSafeReplacement(next,assign)) {\n      return false;\n    }\n    exprParent.removeChild(expr);\n    expr.removeChild(assign);\n    parent.replaceChild(next,assign);\n    return true;\n  }\n}", "type": "Replace", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 152, "faulty": "return true;", "type": "InsertBefore", "seed": "return this;"}]}]}}, {"project": "Closure", "bug_id": "124", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:03:45.582153", "repair_begin": "2018-11-30 00:57:42.562694", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ExploitAssigns.java", "line": 214, "faulty": "if (node.isName() && isNameAssignedTo(node.getString(),replacement)) {\n  return false;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Closure", "bug_id": "125", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:16:35.030613", "repair_begin": "2018-12-01 14:47:41.129229", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_125/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java\t2018-12-01 08:47:19.455896889 -0500\n+++ /tmp/Arja_Defects4J_Closure_125/patches_0gzx/Patch_2156/patched/tmp/Arja_Defects4J_Closure_125/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java\t2018-12-01 09:08:53.673757899 -0500\n@@ -200,7 +200,6 @@\n \n       case Token.SHEQ:\n         if (outcome) {\n-          return caseEquality(condition, blindScope, SHEQ);\n         } else {\n           return caseEquality(condition, blindScope, SHNE);\n         }\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java", "line": 203, "faulty": "return caseEquality(condition,blindScope,SHEQ);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "125", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:01:32.839051", "repair_begin": "2018-11-30 00:55:28.530230", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java", "line": 202, "faulty": "if (outcome) {\n  return caseEquality(condition,blindScope,SHEQ);\n}\n else {\n  return caseEquality(condition,blindScope,SHNE);\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "125", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:33:46.011867", "repair_begin": "2018-11-29 01:25:49.377258", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 31) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "126", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:15:38.697816", "repair_begin": "2018-12-01 14:46:50.632013", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-01 08:46:30.980378793 -0500\n+++ /tmp/Arja_Defects4J_Closure_126/patches_shfw/Patch_1085/patched/tmp/Arja_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2018-12-01 09:02:50.890990290 -0500\n@@ -140,7 +140,6 @@\n        */\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n     }\n \n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 143, "faulty": "tryMinimizeExits(finallyBlock,exitType,labelName);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "126", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:44:40.929906", "repair_begin": "2018-11-30 01:10:04.957421", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 143, "faulty": "tryMinimizeExits(finallyBlock,exitType,labelName);", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 143, "faulty": "tryMinimizeExits(finallyBlock,exitType,labelName);", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 143, "faulty": "tryMinimizeExits(finallyBlock,exitType,labelName);", "type": "Delete", "seed": "formatPreamble();"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 958, "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", "type": "Delete", "seed": "StringBuilder sb=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 142, "faulty": "Node finallyBlock=n.getLastChild();", "type": "InsertBefore", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 213, "faulty": "return \"LABEL_NAME\";", "type": "Replace", "seed": "int c=0;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 961, "faulty": "sb.append(first.getString());", "type": "InsertBefore", "seed": "return this;"}]}]}}, {"project": "Closure", "bug_id": "126", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 07:44:01.957726", "repair_begin": "2018-12-01 06:47:17.745102", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java\\n+++ com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java\\n@@ -138,10 +138,10 @@\\n \\n \\n \\n-\\t\\t\\tif (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\\n-\\t\\t\\t\\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\\n-\\t\\t\\t\\ttryMinimizeExits(finallyBlock, exitType, labelName);\\n-\\t\\t\\t}\\n+\\n+\\n+\\n+\\n \\t\\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\\n\\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\\n\\ttryMinimizeExits(finallyBlock, exitType, labelName);\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "com.google.javascript.jscomp.MinimizeExitPoints", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_126\\/.\\/output_astor\\/AstorMain-Closure-126\\/\\/src\\/\\/variant-42_f\\/com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Closure_126\\/output_astor\\/AstorMain-Closure-126\\/src\\/default\\/com\\/google\\/javascript\\/jscomp\\/MinimizeExitPoints.java", "LINE": "141", "MP_RANKING": "14", "SUSPICIOUNESS": "0.408"}], "GENERATION": "21", "VARIANT_ID": "42", "TIME": "295", "VALIDATION": "|true|0|8011|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Closure_126\\/.\\/output_astor\\/AstorMain-Closure-126\\/\\/bin\\/\\/variant-42"}]}}, {"project": "Closure", "bug_id": "126", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:56:29.459537", "repair_begin": "2018-11-30 00:50:37.089977", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java", "line": 141, "faulty": "if (NodeUtil.hasFinally(n)) {\n  Node finallyBlock=n.getLastChild();\n  tryMinimizeExits(finallyBlock,exitType,labelName);\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "126", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:31:28.611011", "repair_begin": "2018-11-29 01:25:39.516658", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 143, "class": "com.google.javascript.jscomp.MinimizeExitPoints"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -142,3 +142,5 @@\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+        if (1 <= -1) {\n+          tryMinimizeExits(finallyBlock, exitType, labelName);\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "127", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:03:49.666248", "repair_begin": "2018-12-01 14:46:23.100398", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:46:07.764980832 -0500\n+++ /tmp/Arja_Defects4J_Closure_127/patches_rmbn/Patch_1136/patched/tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:00:46.026478861 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"BITOR\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:46:07.764980832 -0500\n+++ /tmp/Arja_Defects4J_Closure_127/patches_rmbn/Patch_1136/patched/tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:46.026478861 -0500\n@@ -951,7 +951,8 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      parent = null;\n+\tsb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n--- /tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-01 08:46:10.460999129 -0500\n+++ /tmp/Arja_Defects4J_Closure_127/patches_rmbn/Patch_1136/patched/tmp/Arja_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-01 09:00:46.026478861 -0500\n@@ -167,9 +167,6 @@\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n           }\n       }\n     }\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "Delete", "seed": "this.cfg=cfg;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 954, "faulty": "sb.append(' ');", "type": "InsertBefore", "seed": "parent=null;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 213, "faulty": "return \"LABEL_NAME\";", "type": "Replace", "seed": "return \"BITOR\";"}]}]}}, {"project": "Closure", "bug_id": "127", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:28:02.898018", "repair_begin": "2018-11-30 01:08:51.651174", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "Delete", "seed": "this.cfg=cfg;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 961, "faulty": "sb.append(first.getString());", "type": "Delete", "seed": "return this.getType() == Token.NAME;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 171, "faulty": "removeNode(n);", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "Delete", "seed": "final String paramName=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", "line": 854, "faulty": "lastJump=handler;", "type": "Delete", "seed": "this.cfg=cfg;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 264, "faulty": "return \"LABEL\";", "type": "Delete", "seed": "return -1;"}, {"path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", "line": 854, "faulty": "lastJump=handler;", "type": "Delete", "seed": "this.cfg=cfg;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 264, "faulty": "return \"LABEL\";", "type": "Delete", "seed": "return -1;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 264, "faulty": "return \"LABEL\";", "type": "Delete", "seed": "return -1;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 954, "faulty": "sb.append(' ');", "type": "InsertBefore", "seed": "sourcePosition=-1;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 171, "faulty": "removeNode(n);", "type": "Replace", "seed": "return this;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 171, "faulty": "removeNode(n);", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 166, "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", "type": "Replace", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 169, "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", "type": "Delete", "seed": "this.cfg=cfg;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1457, "faulty": "return res;", "type": "Delete", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", "line": 842, "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", "type": "InsertBefore", "seed": "this.cfg=cfg;"}, {"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 171, "faulty": "removeNode(n);", "type": "InsertBefore", "seed": "return false;"}]}]}}, {"project": "Closure", "bug_id": "127", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:55:31.849449", "repair_begin": "2018-11-30 00:49:21.266184", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", "line": 170, "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "127", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:31:38.141032", "repair_begin": "2018-11-29 01:25:16.297492", "patches": [{"nb_test_that_execute_statement": 15, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 31) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "128", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:31:25.854948", "repair_begin": "2018-11-29 01:25:03.681030", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (node2.type <= 31) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "129", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:05:21.535259", "repair_begin": "2018-12-01 14:46:16.851658", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 08:46:01.972601364 -0500\n+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_685/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 08:58:07.504737232 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:46:01.984601380 -0500\n+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_685/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:07.508737231 -0500\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-01 08:46:01.752601087 -0500\n+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_685/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-01 08:58:07.508737231 -0500\n@@ -61,7 +61,7 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n+          break;\n         }\n         break;\n     }\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "Delete", "seed": "this.sourcePosition=sourcePosition;"}, {"path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", "line": 64, "faulty": "compiler.reportCodeChange();", "type": "Replace", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 1323, "faulty": "Preconditions.checkArgument(n.isGetElem());", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "129", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:42:36.792019", "repair_begin": "2018-11-30 01:08:42.398946", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "Delete", "seed": "return -1;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "Delete", "seed": "return this;"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "Delete", "seed": "return jsType;"}, {"path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "line": 1323, "faulty": "Preconditions.checkArgument(n.isGetElem());", "type": "Delete", "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"}, {"path": "src/com/google/javascript/rhino/Node.java", "line": 132, "faulty": "return \"free_call\";", "type": "Delete", "seed": "return false;"}]}]}}, {"project": "Closure", "bug_id": "129", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:53:57.114236", "repair_begin": "2018-11-30 00:46:00.386422", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1546, "faulty": "return false;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "129", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:29:18.957905", "repair_begin": "2018-11-29 01:23:04.687619", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1428, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1427,7 +1427,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type <= com.google.javascript.rhino.Node.EMPTY_BLOCK) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "130", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:09:30.571605", "repair_begin": "2018-12-01 14:46:02.059990", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-01 08:45:45.845585512 -0500\n+++ /tmp/Arja_Defects4J_Closure_130/patches_yo25/Patch_1144/patched/tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-01 09:01:54.831345614 -0500\n@@ -213,30 +213,7 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n+      return false;\n     }\n \n     return false;\n\n\n", "edits": [{"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 216, "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", "type": "Replace", "seed": "return false;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 227, "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", "type": "InsertBefore", "seed": "break;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 233, "faulty": "compiler.reportCodeChange();", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "130", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:32:57.483591", "repair_begin": "2018-11-30 01:06:03.294824", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 216, "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/GlobalNamespace.java", "line": 198, "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", "type": "Replace", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 216, "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 216, "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 216, "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/GlobalNamespace.java", "line": 198, "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", "type": "Replace", "seed": "int start=0;"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 238, "faulty": "return true;", "type": "Delete", "seed": "StringBuilder builder=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 216, "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", "type": "Delete", "seed": "int start=0;"}, {"path": "src/com/google/javascript/rhino/Token.java", "line": 217, "faulty": "return \"NULL\";", "type": "Delete", "seed": "StringBuilder s=new StringBuilder();"}, {"path": "src/com/google/javascript/jscomp/CollapseProperties.java", "line": 226, "faulty": "Node newNode=alias.node.cloneTree();", "type": "InsertBefore", "seed": "return false;"}]}]}}, {"project": "Closure", "bug_id": "130", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:52:21.560032", "repair_begin": "2018-11-30 00:45:46.319447", "patches": [{"edits": [{"path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", "line": 476, "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Closure", "bug_id": "130", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:25:14.469553", "repair_begin": "2018-11-29 01:21:30.322013", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "131", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:53:02.700981", "repair_begin": "2018-11-30 00:45:19.949887", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "131", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:27:13.270627", "repair_begin": "2018-11-29 01:21:43.197869", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "132", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:12:22.827677", "repair_begin": "2018-12-01 14:47:33.816754", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_360/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:31.321168111 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_360/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:57:31.325168111 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "Replace", "seed": "return null;"}, {"path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", "line": 773, "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "132", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:43:08.673422", "repair_begin": "2018-11-30 00:36:09.538702", "patches": [{"edits": [{"path": "src/com/google/javascript/rhino/Node.java", "line": 1446, "faulty": "return res;", "type": "InsertReturn true"}]}]}}, {"project": "Closure", "bug_id": "132", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:22:55.906345", "repair_begin": "2018-11-29 01:19:21.224324", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Closure", "bug_id": "133", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:02:16.385596", "repair_begin": "2018-12-01 14:47:15.004990", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Closure_133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 08:46:55.368963583 -0500\n+++ /tmp/Arja_Defects4J_Closure_133/patches_fucq/Patch_1649/patched/tmp/Arja_Defects4J_Closure_133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\t2018-12-01 08:59:02.547829280 -0500\n@@ -1835,7 +1835,6 @@\n       }\n     }\n \n-    restoreLookAhead(token);\n     return reportGenericTypeSyntaxWarning();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_133/src/com/google/javascript/rhino/SourcePosition.java\t2018-12-01 08:46:52.592963520 -0500\n+++ /tmp/Arja_Defects4J_Closure_133/patches_fucq/Patch_1649/patched/tmp/Arja_Defects4J_Closure_133/src/com/google/javascript/rhino/SourcePosition.java\t2018-12-01 08:59:02.547829280 -0500\n@@ -84,10 +84,6 @@\n                                      int endLineno, int endCharno) {\n     if (startLineno == endLineno) {\n       if (startCharno >= endCharno) {\n-        throw new IllegalStateException(\n-            \"Recorded bad position information\\n\" +\n-            \"start-char: \" + startCharno + \"\\n\" +\n-            \"end-char: \" + endCharno);\n       }\n     } else {\n       if (startLineno > endLineno) {\n\n\n", "edits": [{"path": "src/com/google/javascript/rhino/SourcePosition.java", "line": 87, "faulty": "throw new IllegalStateException(\"Recorded bad position information\\n\" + \"start-char: \" + startCharno + \"\\n\"+ \"end-char: \"+ endCharno);", "type": "Delete", "seed": "NULL"}, {"path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java", "line": 1838, "faulty": "restoreLookAhead(token);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Closure", "bug_id": "133", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:39:21.869918", "repair_begin": "2018-11-30 00:33:38.153020", "patches": [{"edits": [{"path": "", "line": 1838, "faulty": "restoreLookAhead(token);", "type": "Delete /tmp/Kali_Defects4J_Closure_133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"}]}]}}, {"project": "Closure", "bug_id": "133", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:24:58.108521", "repair_begin": "2018-11-29 01:19:18.740107", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 1417, "class": "com.google.javascript.rhino.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -1416,7 +1416,9 @@\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.OPT_ARG_NAME) {\n+          return \"Node tree inequality:\" +\n+          \"\\nTree1:\\n\" + toStringTree() +\n+          \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n+          \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n+          \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        }\n       }\n"}]}}, {"project": "Lang", "bug_id": "7", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:51:05.895107", "repair_begin": "2018-12-01 11:41:48.061748", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:41:40.203962304 -0500\n+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_286/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:44:45.196154948 -0500\n@@ -450,14 +450,16 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n                 hexDigits--;\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (str.startsWith(\"-\")) {\n+\t\t\t\thexDigits--;\n+\t\t\t}\n+\t\t\tif (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 460, "faulty": "if (hexDigits > 8) {\n  return createLong(str);\n}", "type": "InsertBefore", "seed": "if (str.startsWith(\"-\")) {\n  hexDigits--;\n}"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 453, "faulty": "return null;", "type": "Delete", "seed": "return 1;"}]}]}}, {"project": "Lang", "bug_id": "16", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:22:31.432533", "repair_begin": "2018-12-01 11:13:48.198411", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:13:40.712736534 -0500\n+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_1215/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:20:31.303605453 -0500\n@@ -477,7 +477,10 @@\n             }\n             mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n+            if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+\t\t\t\treturn createInteger(str);\n+\t\t\t}\n+\t\t\tif (expPos > -1) {\n                 if (expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n@@ -542,7 +545,7 @@\n                     }\n                     //$FALL-THROUGH$\n                 default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn Integer.decode(str);\n \n             }\n         } else {\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 545, "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", "type": "Replace", "seed": "return Integer.decode(str);"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 480, "faulty": "if (expPos > -1) {\n  if (expPos > str.length()) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n  }\n  mant=str.substring(0,expPos);\n}\n else {\n  mant=str;\n}", "type": "InsertBefore", "seed": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n  return createInteger(str);\n}"}]}]}}, {"project": "Lang", "bug_id": "20", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:27:38.622256", "repair_begin": "2018-12-01 11:15:44.527469", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_20/src/main/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:15:36.810015490 -0500\n+++ /tmp/Arja_Defects4J_Lang_20/patches_9t4x/Patch_1910/patched/tmp/Arja_Defects4J_Lang_20/src/main/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:27:37.371850220 -0500\n@@ -3295,11 +3295,14 @@\n             return EMPTY;\n         }\n         \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n+        StringBuilder buf = new StringBuilder(4);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n-                buf.append(separator);\n+                if (noOfItems <= 0) {\n+\t\t\t\t\treturn EMPTY;\n+\t\t\t\t}\n+\t\t\t\tbuf.append(separator);\n             }\n             if (array[i] != null) {\n                 buf.append(array[i]);\n@@ -3380,7 +3383,7 @@\n             return EMPTY;\n         }\n \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n+        StringBuilder buf = new StringBuilder(256);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/lang3/StringUtils.java", "line": 3298, "faulty": "StringBuilder buf=new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);", "type": "Replace", "seed": "StringBuilder buf=new StringBuilder(4);"}, {"path": "src/main/java/org/apache/commons/lang3/StringUtils.java", "line": 3383, "faulty": "StringBuilder buf=new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());", "type": "Replace", "seed": "StringBuilder buf=new StringBuilder(256);"}, {"path": "src/main/java/org/apache/commons/lang3/StringUtils.java", "line": 3302, "faulty": "buf.append(separator);", "type": "InsertBefore", "seed": "if (noOfItems <= 0) {\n  return EMPTY;\n}"}]}]}}, {"project": "Lang", "bug_id": "22", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:52:42.272337", "repair_begin": "2018-12-01 11:13:26.189604", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:13:18.647839255 -0500\n+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_817/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java\t2018-12-01 05:32:07.856708265 -0500\n@@ -582,7 +582,6 @@\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -593,7 +592,10 @@\n         // B1. [Find power of 2]\n         int k=0;\n         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n-            u/=2; v/=2; k++; // cast out twos.\n+            if (v > 0) {\n+\t\t\t\tv = -v;\n+\t\t\t}\n+\t\t\tu/=2; v/=2; k++; // cast out twos.\n         }\n         if (k==31) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", "line": 585, "faulty": "return 1;", "type": "Delete", "seed": "u=-u;"}, {"path": "src/main/java/org/apache/commons/lang3/math/Fraction.java", "line": 596, "faulty": "u/=2;", "type": "InsertBefore", "seed": "if (v > 0) {\n  v=-v;\n}"}]}]}}, {"project": "Lang", "bug_id": "27", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:23:39.145305", "repair_begin": "2018-12-01 11:16:14.621983", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:16:07.026060969 -0500\n+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_451/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2018-12-01 05:18:55.291315477 -0500\n@@ -486,7 +486,7 @@\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str;\n             } else {\n                 mant = str;\n             }\n@@ -566,7 +566,8 @@\n                     // ignore the bad number\n                 }\n                 try {\n-                    return createLong(str);\n+                    dec = str.substring(decPos + 1);\n+\t\t\t\t\treturn createLong(str);\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 489, "faulty": "mant=str.substring(0,expPos);", "type": "Replace", "seed": "mant=str;"}, {"path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", "line": 569, "faulty": "return createLong(str);", "type": "InsertBefore", "seed": "dec=str.substring(decPos + 1);"}]}]}}, {"project": "Lang", "bug_id": "39", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:24:18.541850", "repair_begin": "2018-12-01 11:12:56.967569", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:12:49.793754110 -0500\n+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1001/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java\t2018-12-01 05:18:59.909593377 -0500\n@@ -3499,7 +3499,12 @@\n      * @since 2.4\n      */\n     public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n-        return replaceEach(text, searchList, replacementList, false, 0);\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\treturn replaceEach(text, searchList, replacementList, false, 0);\n     }\n \n     /**\n@@ -3620,7 +3625,12 @@\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n \n-        int searchLength = searchList.length;\n+        if (text == null || text.length() == 0 || searchList == null\n+\t\t\t\t|| searchList.length == 0 || replacementList == null\n+\t\t\t\t|| replacementList.length == 0) {\n+\t\t\treturn text;\n+\t\t}\n+\t\tint searchLength = searchList.length;\n         int replacementLength = replacementList.length;\n \n         // make sure lengths are ok, these need to be equal\n@@ -3671,13 +3681,6 @@\n         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n         int increase = 0;\n \n-        // count the replacement text elements that are larger than their corresponding text being replaced\n-        for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n-            if (greater > 0) {\n-                increase += 3 * greater; // assume 3 matches\n-            }\n-        }\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n\n\n", "edits": [{"path": "src/java/org/apache/commons/lang3/StringUtils.java", "line": 3675, "faulty": "for (int i=0; i < searchList.length; i++) {\n  int greater=replacementList[i].length() - searchList[i].length();\n  if (greater > 0) {\n    increase+=3 * greater;\n  }\n}", "type": "Delete", "seed": "if (searchLength != replacementLength) {\n  throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \" + searchLength + \" vs \"+ replacementLength);\n}"}, {"path": "src/java/org/apache/commons/lang3/StringUtils.java", "line": 3502, "faulty": "return replaceEach(text,searchList,replacementList,false,0);", "type": "InsertBefore", "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"}, {"path": "src/java/org/apache/commons/lang3/StringUtils.java", "line": 3623, "faulty": "int searchLength=searchList.length;", "type": "InsertBefore", "seed": "if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n  return text;\n}"}]}]}}, {"project": "Lang", "bug_id": "43", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:32:10.895536", "repair_begin": "2018-12-01 11:13:11.877072", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:13:04.265756743 -0500\n+++ /tmp/Arja_Defects4J_Lang_43/patches_21ag/Patch_90/patched/tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2018-12-01 05:23:30.170916141 -0500\n@@ -151,12 +151,53 @@\n \n         ParsePosition pos = new ParsePosition(0);\n         char[] c = pattern.toCharArray();\n-        int fmtCount = 0;\n+        toPattern = super.toPattern();\n+\t\tint fmtCount = 0;\n         while (pos.getIndex() < pattern.length()) {\n             switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 appendQuotedString(pattern, pos, stripCustom, true);\n-                break;\n+                {\n+\t\t\t\t\twhile (pos.getIndex() < pattern.length()) {\n+\t\t\t\t\t\tswitch (c[pos.getIndex()]) {\n+\t\t\t\t\t\tcase QUOTE:\n+\t\t\t\t\t\t\tappendQuotedString(pattern, pos, stripCustom, true);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase START_FE:\n+\t\t\t\t\t\t\tfmtCount++;\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tint start = pos.getIndex();\n+\t\t\t\t\t\t\tint index = readArgumentIndex(pattern, next(pos));\n+\t\t\t\t\t\t\tstripCustom.append(START_FE).append(index);\n+\t\t\t\t\t\t\tseekNonWs(pattern, pos);\n+\t\t\t\t\t\t\tFormat format = null;\n+\t\t\t\t\t\t\tString formatDescription = null;\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] == START_FMT) {\n+\t\t\t\t\t\t\t\tformatDescription = parseFormatDescription(\n+\t\t\t\t\t\t\t\t\t\tpattern, next(pos));\n+\t\t\t\t\t\t\t\tformat = getFormat(formatDescription);\n+\t\t\t\t\t\t\t\tif (format == null) {\n+\t\t\t\t\t\t\t\t\tstripCustom.append(START_FMT).append(\n+\t\t\t\t\t\t\t\t\t\t\tformatDescription);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfoundFormats.add(format);\n+\t\t\t\t\t\t\tfoundDescriptions.add(format == null ? null\n+\t\t\t\t\t\t\t\t\t: formatDescription);\n+\t\t\t\t\t\t\tValidate.isTrue(foundFormats.size() == fmtCount);\n+\t\t\t\t\t\t\tValidate.isTrue(foundDescriptions.size() == fmtCount);\n+\t\t\t\t\t\t\tif (c[pos.getIndex()] != END_FE) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"Unreadable format element at position \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ start);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tstripCustom.append(c[pos.getIndex()]);\n+\t\t\t\t\t\t\tnext(pos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n             case START_FE:\n                 fmtCount++;\n                 seekNonWs(pattern, pos);\n@@ -417,7 +458,8 @@\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n+        pos.setIndex(pos.getIndex() + 1);\n+\t\tchar[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n\n\n", "edits": [{"path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", "line": 420, "faulty": "char[] c=pattern.toCharArray();", "type": "InsertBefore", "seed": "pos.setIndex(pos.getIndex() + 1);"}, {"path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", "line": 154, "faulty": "int fmtCount=0;", "type": "InsertBefore", "seed": "toPattern=super.toPattern();"}, {"path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java", "line": 159, "faulty": "break;", "type": "InsertBefore", "seed": "while (pos.getIndex() < pattern.length()) {\nswitch (c[pos.getIndex()]) {\ncase QUOTE:\n    appendQuotedString(pattern,pos,stripCustom,true);\n  break;\ncase START_FE:\nfmtCount++;\nseekNonWs(pattern,pos);\nint start=pos.getIndex();\nint index=readArgumentIndex(pattern,next(pos));\nstripCustom.append(START_FE).append(index);\nseekNonWs(pattern,pos);\nFormat format=null;\nString formatDescription=null;\nif (c[pos.getIndex()] == START_FMT) {\nformatDescription=parseFormatDescription(pattern,next(pos));\nformat=getFormat(formatDescription);\nif (format == null) {\nstripCustom.append(START_FMT).append(formatDescription);\n}\n}\nfoundFormats.add(format);\nfoundDescriptions.add(format == null ? null : formatDescription);\nValidate.isTrue(foundFormats.size() == fmtCount);\nValidate.isTrue(foundDescriptions.size() == fmtCount);\nif (c[pos.getIndex()] != END_FE) {\nthrow new IllegalArgumentException(\"Unreadable format element at position \" + start);\n}\ndefault :\nstripCustom.append(c[pos.getIndex()]);\nnext(pos);\n}\n}"}]}]}}, {"project": "Lang", "bug_id": "44", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:43:00.177834", "repair_begin": "2018-11-29 00:42:22.265235", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 193, "class": "org.apache.commons.lang.NumberUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -192,12 +192,14 @@\n                 case 'L' :\n-                    if (dec == null\n+                    if ((1) != (val.length())) {\n+                        if (dec == null\n                         && exp == null\n                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n+                            try {\n+                                return createLong(numeric);\n+                            } catch (NumberFormatException nfe) {\n+                                //Too big for a long\n+                            }\n+                            return createBigInteger(numeric);\n+                            \n                         }\n-                        return createBigInteger(numeric);\n-\n                     }\n"}]}}, {"project": "Lang", "bug_id": "45", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:25:24.499765", "repair_begin": "2018-12-01 11:12:28.477174", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_45/src/java/org/apache/commons/lang/WordUtils.java\t2018-12-01 05:12:20.869445549 -0500\n+++ /tmp/Arja_Defects4J_Lang_45/patches_id71/Patch_1479/patched/tmp/Arja_Defects4J_Lang_45/src/java/org/apache/commons/lang/WordUtils.java\t2018-12-01 05:22:59.626502406 -0500\n@@ -624,7 +624,10 @@\n         }\n \n         StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n+        if (upper == -1 || upper > str.length()) {\n+\t\t\tupper = str.length();\n+\t\t}\n+\t\tint index = StringUtils.indexOf(str, \" \", lower);\n         if (index == -1) {\n             result.append(str.substring(0, upper));\n             // only if abbreviation has occured do we append the appendToEnd value\n@@ -633,7 +636,10 @@\n             }\n         } else if (index > upper) {\n             result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+            if (StringUtils.isEmpty(str)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tresult.append(StringUtils.defaultString(appendToEnd));\n         } else {\n             result.append(str.substring(0, index));\n             result.append(StringUtils.defaultString(appendToEnd));\n\n\n", "edits": [{"path": "src/java/org/apache/commons/lang/WordUtils.java", "line": 636, "faulty": "result.append(StringUtils.defaultString(appendToEnd));", "type": "InsertBefore", "seed": "if (StringUtils.isEmpty(str)) {\n  return null;\n}"}, {"path": "src/java/org/apache/commons/lang/WordUtils.java", "line": 627, "faulty": "int index=StringUtils.indexOf(str,\" \",lower);", "type": "InsertBefore", "seed": "if (upper == -1 || upper > str.length()) {\n  upper=str.length();\n}"}]}]}}, {"project": "Lang", "bug_id": "46", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:42:12.021120", "repair_begin": "2018-11-29 00:41:45.937579", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 244, "class": "org.apache.commons.lang.StringEscapeUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -243,3 +243,5 @@\n                     case '/' :\n-                            out.write('\\\\');\n+                            if (escapeSingleQuote) {\n+                                out.write('\\\\');\n+                            }\n                         out.write('/');\n"}]}}, {"project": "Lang", "bug_id": "51", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:22:18.272758", "repair_begin": "2018-12-01 11:12:06.220838", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java\t2018-12-01 05:11:58.747316711 -0500\n+++ /tmp/Arja_Defects4J_Lang_51/patches_elk5/Patch_1078/patched/tmp/Arja_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java\t2018-12-01 05:18:34.189250902 -0500\n@@ -682,12 +682,19 @@\n             }\n             case 4: {\n                 char ch = str.charAt(0);\n-                if (ch == 't') {\n-                    return \n-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n-                }\n+                if (\"true\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t} else if (\"false\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t} else if (\"on\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t} else if (\"off\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t} else if (\"yes\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.TRUE;\n+\t\t\t\t} else if (\"no\".equalsIgnoreCase(str)) {\n+\t\t\t\t\treturn Boolean.FALSE;\n+\t\t\t\t}\n                 if (ch == 'T') {\n                     return \n                         (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n@@ -696,7 +703,7 @@\n                 }\n             }\n         }\n-        return false;\n+        return Boolean.FALSE;\n     }\n     \n //    public static void main(String[] args) {\n\n\n", "edits": [{"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 699, "faulty": "return false;", "type": "Replace", "seed": "return Boolean.FALSE;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 685, "faulty": "if (ch == 't') {\n  return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n}", "type": "Replace", "seed": "if (\"true\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"false\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}\n else if (\"on\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"off\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}\n else if (\"yes\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"no\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}"}]}]}}, {"project": "Lang", "bug_id": "51", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:53:57.858394", "repair_begin": "2018-12-01 15:53:29.851853", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 677, "class": "org.apache.commons.lang.BooleanUtils"}, "patchType": "CONDITIONAL", "patch": "--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -676,6 +676,6 @@\n                 }\n-                if (ch == 'Y') {\n-                    return \n-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n+                if (true) {\n+                    return\n+                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n+                    (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n"}]}}, {"project": "Lang", "bug_id": "51", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:08:08.676200", "repair_begin": "2018-11-29 23:57:04.417650", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 662, "faulty": "switch (str.length()) {\ncase 2:\n{\n    char ch0=str.charAt(0);\n    char ch1=str.charAt(1);\n    return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');\n  }\ncase 3:\n{\n  char ch=str.charAt(0);\n  if (ch == 'y') {\n    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');\n  }\n  if (ch == 'Y') {\n    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');\n  }\n}\ncase 4:\n{\nchar ch=str.charAt(0);\nif (ch == 't') {\n  return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n}\nif (ch == 'T') {\n  return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n}\n}\n}", "type": "Delete", "seed": "if (StringUtils.isEmpty(str)) {\n  throw new IllegalArgumentException(\"The String must not be empty\");\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 662, "faulty": "switch (str.length()) {\ncase 2:\n{\n    char ch0=str.charAt(0);\n    char ch1=str.charAt(1);\n    return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');\n  }\ncase 3:\n{\n  char ch=str.charAt(0);\n  if (ch == 'y') {\n    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');\n  }\n  if (ch == 'Y') {\n    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');\n  }\n}\ncase 4:\n{\nchar ch=str.charAt(0);\nif (ch == 't') {\n  return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n}\nif (ch == 'T') {\n  return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n}\n}\n}", "type": "Delete", "seed": "StringBuffer buf=new StringBuffer(4);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 691, "faulty": "if (ch == 'T') {\n  return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n}", "type": "InsertBefore", "seed": "if (StringUtils.isEmpty(str)) {\n  return null;\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 659, "faulty": "if (str == null) {\n  return false;\n}", "type": "Delete", "seed": "return chompLast(str,\"\\n\");"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 666, "faulty": "return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');", "type": "InsertBefore", "seed": "int tmp=0;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "InsertBefore", "seed": "int count=0;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 678, "faulty": "return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');", "type": "Delete", "seed": "return \"\\\\u\" + Integer.toHexString(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "InsertBefore", "seed": "int count=0;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 678, "faulty": "return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');", "type": "Delete", "seed": "return \"\\\\u\" + Integer.toHexString(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "Replace", "seed": "char lastChar=' ';"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 678, "faulty": "return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');", "type": "Delete", "seed": "return \"\\\\u\" + Integer.toHexString(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 678, "faulty": "return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');", "type": "Delete", "seed": "return \"\\\\u\" + Integer.toHexString(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "Replace", "seed": "char lastChar=' ';"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 678, "faulty": "return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');", "type": "Delete", "seed": "return \"\\\\u\" + Integer.toHexString(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 685, "faulty": "if (ch == 't') {\n  return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n}", "type": "Delete", "seed": "return Boolean.TRUE;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 666, "faulty": "return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');", "type": "InsertBefore", "seed": "StringBuffer unicode=new StringBuffer(4);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "Delete", "seed": "return capitalize(str);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 660, "faulty": "return false;", "type": "Delete", "seed": "throw new NullArgumentException(\"className\");"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 691, "faulty": "if (ch == 'T') {\n  return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n}", "type": "Replace", "seed": "boolean whitespace=true;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 691, "faulty": "if (ch == 'T') {\n  return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n}", "type": "Delete", "seed": "if (ch < 0x10) {\n  return \"\\\\u000\" + Integer.toHexString(ch);\n}\n else if (ch < 0x100) {\n  return \"\\\\u00\" + Integer.toHexString(ch);\n}\n else if (ch < 0x1000) {\n  return \"\\\\u0\" + Integer.toHexString(ch);\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "InsertBefore", "seed": "return \"\\\\u000\" + Integer.toHexString(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 659, "faulty": "if (str == null) {\n  return false;\n}", "type": "Delete", "seed": "return chompLast(str,\"\\n\");"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "Replace", "seed": "char lastChar=' ';"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 659, "faulty": "if (str == null) {\n  return false;\n}", "type": "Delete", "seed": "return chompLast(str,\"\\n\");"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 678, "faulty": "return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');", "type": "Delete", "seed": "return \"\\\\u\" + Integer.toHexString(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 685, "faulty": "if (ch == 't') {\n  return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n}", "type": "Delete", "seed": "return Boolean.TRUE;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 666, "faulty": "return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');", "type": "InsertBefore", "seed": "StringBuffer unicode=new StringBuffer(4);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "Delete", "seed": "return capitalize(str);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 660, "faulty": "return false;", "type": "Delete", "seed": "throw new NullArgumentException(\"className\");"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 691, "faulty": "if (ch == 'T') {\n  return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n}", "type": "Replace", "seed": "boolean whitespace=true;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 672, "faulty": "if (ch == 'y') {\n  return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');\n}", "type": "Delete", "seed": "List list=Arrays.asList(Locale.getAvailableLocales());"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "Replace", "seed": "int lastDot=0;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 691, "faulty": "if (ch == 'T') {\n  return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n}", "type": "Replace", "seed": "boolean whitespace=true;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 691, "faulty": "if (ch == 'T') {\n  return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n}", "type": "Delete", "seed": "if (ch < 0x10) {\n  return \"\\\\u000\" + Integer.toHexString(ch);\n}\n else if (ch < 0x100) {\n  return \"\\\\u00\" + Integer.toHexString(ch);\n}\n else if (ch < 0x1000) {\n  return \"\\\\u0\" + Integer.toHexString(ch);\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "InsertBefore", "seed": "return \"\\\\u000\" + Integer.toHexString(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 677, "faulty": "if (ch == 'Y') {\n  return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');\n}", "type": "Delete", "seed": "StringWriter stringWriter=createStringWriter(str);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 677, "faulty": "if (ch == 'Y') {\n  return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');\n}", "type": "InsertBefore", "seed": "if (str.charAt(5) != '_') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 665, "faulty": "char ch1=str.charAt(1);", "type": "InsertBefore", "seed": "if (isEmpty(str)) {\n  return -1;\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 664, "faulty": "char ch0=str.charAt(0);", "type": "InsertBefore", "seed": "String ts=trim(str);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 686, "faulty": "return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');", "type": "Replace", "seed": "return initials(str,null);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 672, "faulty": "if (ch == 'y') {\n  return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');\n}", "type": "InsertBefore", "seed": "char ch=' ';"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 678, "faulty": "return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');", "type": "InsertBefore", "seed": "ch=Character.toLowerCase(ch);"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 677, "faulty": "if (ch == 'Y') {\n  return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');\n}", "type": "Delete", "seed": "if (isAsciiNumeric(ch) == false) {\n  throw new IllegalArgumentException(\"The character \" + ch + \" is not in the range '0' - '9'\");\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 659, "faulty": "if (str == null) {\n  return false;\n}", "type": "Delete", "seed": "if (str.length() == 0) {\n  return str;\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 659, "faulty": "if (str == null) {\n  return false;\n}", "type": "Replace", "seed": "if (\"true\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"false\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}\n else if (\"on\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"off\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}\n else if (\"yes\".equalsIgnoreCase(str)) {\n  return Boolean.TRUE;\n}\n else if (\"no\".equalsIgnoreCase(str)) {\n  return Boolean.FALSE;\n}"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 671, "faulty": "char ch=str.charAt(0);", "type": "InsertBefore", "seed": "boolean whitespace=true;"}, {"path": "src/java/org/apache/commons/lang/BooleanUtils.java", "line": 672, "faulty": "if (ch == 'y') {\n  return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');\n}", "type": "Delete", "seed": "return new Character(ch);"}]}]}}, {"project": "Lang", "bug_id": "51", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:38:09.740792", "repair_begin": "2018-11-29 00:37:43.471609", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 677, "class": "org.apache.commons.lang.BooleanUtils"}, "patchType": "CONDITIONAL", "patch": "--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -676,6 +676,6 @@\n                 }\n-                if (ch == 'Y') {\n-                    return \n-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n+                if (str!=null) {\n+                    return\n+                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n+                    (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n"}]}}, {"project": "Lang", "bug_id": "53", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:37:12.676984", "repair_begin": "2018-11-29 00:36:26.422714", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 666, "class": "org.apache.commons.lang.time.DateUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -665,3 +665,5 @@\n             date.setTime(time);\n-            val.setTime(date);\n+            if (seconds <= org.apache.commons.lang.time.DateUtils.fields.length) {\n+                val.setTime(date);\n+            }\n         }\n"}]}}, {"project": "Lang", "bug_id": "55", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:36:19.473096", "repair_begin": "2018-11-29 00:34:44.031593", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 118, "class": "org.apache.commons.lang.time.StopWatch"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -117,3 +117,5 @@\n         }\n-            stopTime = System.currentTimeMillis();\n+            if (org.apache.commons.lang.time.StopWatch.this.stopTime < 10) {\n+                stopTime = System.currentTimeMillis();\n+            }\n         this.runningState = STATE_STOPPED;\n"}]}}, {"project": "Lang", "bug_id": "58", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:28:10.570185", "repair_begin": "2018-12-01 11:16:06.544700", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:15:58.998758820 -0500\n+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_568/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java\t2018-12-01 05:21:26.276897955 -0500\n@@ -411,7 +411,10 @@\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        if (str == null) {\n+\t\t\tthrow new IllegalArgumentException(\"The string must not be null\");\n+\t\t}\n+\t\tchar lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n@@ -461,7 +464,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t\treturn null;\n                 case 'f' :\n                 case 'F' :\n                     try {\n\n\n", "edits": [{"path": "src/java/org/apache/commons/lang/math/NumberUtils.java", "line": 464, "faulty": "throw new NumberFormatException(str + \" is not a valid number.\");", "type": "Replace", "seed": "return null;"}, {"path": "src/java/org/apache/commons/lang/math/NumberUtils.java", "line": 414, "faulty": "char lastChar=str.charAt(str.length() - 1);", "type": "InsertBefore", "seed": "if (str == null) {\n  throw new IllegalArgumentException(\"The string must not be null\");\n}"}]}]}}, {"project": "Lang", "bug_id": "58", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:35:03.864991", "repair_begin": "2018-11-29 00:33:53.480765", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 464, "class": "org.apache.commons.lang.math.NumberUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -463,3 +463,5 @@\n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                    if ((numeric.length()) != (org.apache.commons.lang.math.NumberUtils.SHORT_ONE)) {\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                    }\n                 case 'f' :\n"}]}}, {"project": "Lang", "bug_id": "59", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:50:01.773279", "repair_begin": "2018-11-29 23:37:31.777944", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 880, "faulty": "ensureCapacity(size + width);", "type": "Delete", "seed": "if (width > 0) {\n  ensureCapacity(size + width);\n  String str=(obj == null ? getNullText() : obj.toString());\n  int strLen=str.length();\n  if (strLen >= width) {\n    str.getChars(strLen - width,strLen,buffer,size);\n  }\n else {\n    int padLen=width - strLen;\n    for (int i=0; i < padLen; i++) {\n      buffer[size + i]=padChar;\n    }\n    str.getChars(0,strLen,buffer,size + padLen);\n  }\n  size+=width;\n}"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 880, "faulty": "ensureCapacity(size + width);", "type": "Delete", "seed": "if (width > 0) {\n  ensureCapacity(size + width);\n  String str=(obj == null ? getNullText() : obj.toString());\n  int strLen=str.length();\n  if (strLen >= width) {\n    str.getChars(strLen - width,strLen,buffer,size);\n  }\n else {\n    int padLen=width - strLen;\n    for (int i=0; i < padLen; i++) {\n      buffer[size + i]=padChar;\n    }\n    str.getChars(0,strLen,buffer,size + padLen);\n  }\n  size+=width;\n}"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 882, "faulty": "int strLen=str.length();", "type": "InsertBefore", "seed": "buffer=new char[str.length() + CAPACITY];"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 880, "faulty": "ensureCapacity(size + width);", "type": "Delete", "seed": "if (width > 0) {\n  ensureCapacity(size + width);\n  String str=(obj == null ? getNullText() : obj.toString());\n  int strLen=str.length();\n  if (strLen >= width) {\n    str.getChars(strLen - width,strLen,buffer,size);\n  }\n else {\n    int padLen=width - strLen;\n    for (int i=0; i < padLen; i++) {\n      buffer[size + i]=padChar;\n    }\n    str.getChars(0,strLen,buffer,size + padLen);\n  }\n  size+=width;\n}"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 879, "faulty": "if (width > 0) {\n  ensureCapacity(size + width);\n  String str=(obj == null ? getNullText() : obj.toString());\n  int strLen=str.length();\n  if (strLen >= width) {\n    str.getChars(0,strLen,buffer,size);\n  }\n else {\n    int padLen=width - strLen;\n    str.getChars(0,strLen,buffer,size);\n    for (int i=0; i < padLen; i++) {\n      buffer[size + strLen + i]=padChar;\n    }\n  }\n  size+=width;\n}", "type": "InsertBefore", "seed": "StrBuilder buf=new StrBuilder();"}]}]}}, {"project": "Lang", "bug_id": "60", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:25:18.048561", "repair_begin": "2018-12-01 11:13:55.243020", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_60/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-01 05:13:47.825870951 -0500\n+++ /tmp/Arja_Defects4J_Lang_60/patches_earj/Patch_816/patched/tmp/Arja_Defects4J_Lang_60/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-01 05:20:08.956361056 -0500\n@@ -1201,12 +1201,13 @@\n     public StrBuilder deleteFirst(String str) {\n         int len = (str == null ? 0 : str.length());\n         if (len > 0) {\n-            int index = indexOf(str, 0);\n+            ensureCapacity(size + 5);\n+\t\t\tint index = indexOf(str, 0);\n             if (index >= 0) {\n                 deleteImpl(index, index + len, len);\n             }\n         }\n-        return this;\n+        return append(nullText);\n     }\n \n     //-----------------------------------------------------------------------\n@@ -1669,7 +1670,12 @@\n      * @return true if the builder contains the character\n      */\n     public boolean contains(char ch) {\n-        char[] thisBuf = buffer;\n+        if (buffer.length > length()) {\n+\t\t\tchar[] old = buffer;\n+\t\t\tbuffer = new char[length()];\n+\t\t\tSystem.arraycopy(old, 0, buffer, 0, size);\n+\t\t}\n+\t\tchar[] thisBuf = buffer;\n         for (int i = 0; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n\n\n", "edits": [{"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1204, "faulty": "int index=indexOf(str,0);", "type": "InsertBefore", "seed": "ensureCapacity(size + 5);"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1209, "faulty": "return this;", "type": "Replace", "seed": "return append(nullText);"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1672, "faulty": "char[] thisBuf=buffer;", "type": "InsertBefore", "seed": "if (buffer.length > length()) {\n  char[] old=buffer;\n  buffer=new char[length()];\n  System.arraycopy(old,0,buffer,0,size);\n}"}]}]}}, {"project": "Lang", "bug_id": "61", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:39:31.354559", "repair_begin": "2018-12-01 11:12:42.750417", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_61/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-01 05:12:35.361875133 -0500\n+++ /tmp/Arja_Defects4J_Lang_61/patches_d2sp/Patch_1358/patched/tmp/Arja_Defects4J_Lang_61/src/java/org/apache/commons/lang/text/StrBuilder.java\t2018-12-01 05:33:14.772395126 -0500\n@@ -1183,7 +1183,8 @@\n     public StrBuilder deleteAll(String str) {\n         int len = (str == null ? 0 : str.length());\n         if (len > 0) {\n-            int index = indexOf(str, 0);\n+            append(str);\n+\t\t\tint index = indexOf(str, 0);\n             while (index >= 0) {\n                 deleteImpl(index, index + len, len);\n                 index = indexOf(str, index);\n@@ -1763,9 +1764,6 @@\n             return -1;\n         }\n         int strLen = str.length();\n-        if (strLen == 1) {\n-            return indexOf(str.charAt(0), startIndex);\n-        }\n         if (strLen == 0) {\n             return startIndex;\n         }\n@@ -1773,7 +1771,7 @@\n             return -1;\n         }\n         char[] thisBuf = buffer;\n-        int len = thisBuf.length - strLen;\n+        int len = size;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {\n\n\n", "edits": [{"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1766, "faulty": "if (strLen == 1) {\n  return indexOf(str.charAt(0),startIndex);\n}", "type": "Delete", "seed": "if (str == null) {\n  buffer=new char[CAPACITY];\n}\n else {\n  buffer=new char[str.length() + CAPACITY];\n  append(str);\n}"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1186, "faulty": "int index=indexOf(str,0);", "type": "InsertBefore", "seed": "append(str);"}, {"path": "src/java/org/apache/commons/lang/text/StrBuilder.java", "line": 1776, "faulty": "int len=thisBuf.length - strLen;", "type": "Replace", "seed": "int len=size;"}]}]}}, {"project": "Lang", "bug_id": "63", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:32:49.107819", "repair_begin": "2018-12-01 11:15:51.640739", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2018-12-01 05:15:44.533037303 -0500\n+++ /tmp/Arja_Defects4J_Lang_63/patches_g3j7/Patch_972/patched/tmp/Arja_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2018-12-01 05:25:03.054057915 -0500\n@@ -290,7 +290,10 @@\n             milliseconds += 1000;\n             seconds -= 1;\n         }\n-        while (seconds < 0) {\n+        if (millis < 28 * DateUtils.MILLIS_PER_DAY) {\n+\t\t\treturn formatDuration(millis, format, padWithZeros);\n+\t\t}\n+\t\twhile (seconds < 0) {\n             seconds += 60;\n             minutes -= 1;\n         }\n@@ -435,7 +438,6 @@\n         int startValue = start.get(field);\n         if (endValue < startValue) {\n             int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n             return newdiff;\n         } else {\n             return 0;\n\n\n", "edits": [{"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 438, "faulty": "end.add(field,newdiff);", "type": "Delete", "seed": "end.add(Calendar.DATE,1);"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 293, "faulty": "while (seconds < 0) {\n  seconds+=60;\n  minutes-=1;\n}", "type": "InsertBefore", "seed": "if (millis < 28 * DateUtils.MILLIS_PER_DAY) {\n  return formatDuration(millis,format,padWithZeros);\n}"}]}]}}, {"project": "Lang", "bug_id": "63", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:57:57.217470", "repair_begin": "2018-12-01 15:57:31.059386", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 438, "class": "org.apache.commons.lang.time.DurationFormatUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -437,3 +437,5 @@\n             int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n+            if (false) {\n+                end.add( field, newdiff );\n+            }\n             return newdiff;\n"}]}}, {"project": "Lang", "bug_id": "63", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:44:20.741544", "repair_begin": "2018-11-29 23:28:36.085372", "patches": [{"edits": [{"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 438, "faulty": "end.add(field,newdiff);", "type": "Replace", "seed": "int seconds=end.get(Calendar.SECOND) - start.get(Calendar.SECOND);"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 438, "faulty": "end.add(field,newdiff);", "type": "Replace", "seed": "int seconds=end.get(Calendar.SECOND) - start.get(Calendar.SECOND);"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 289, "faulty": "while (milliseconds < 0) {\n  milliseconds+=1000;\n  seconds-=1;\n}", "type": "InsertBefore", "seed": "StringBuffer buffer=new StringBuffer();"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 438, "faulty": "end.add(field,newdiff);", "type": "Delete", "seed": "int len=0;"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 438, "faulty": "end.add(field,newdiff);", "type": "Delete", "seed": "end=(Calendar)start.clone();"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 277, "faulty": "end.setTime(new Date(endMillis));", "type": "InsertBefore", "seed": "end.add(Calendar.DATE,-1);"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 314, "faulty": "while (months < 0) {\n  months+=12;\n  years-=1;\n}", "type": "Delete", "seed": "months-=reduceAndCorrect(start,end,Calendar.MONTH,months);"}, {"path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java", "line": 315, "faulty": "months+=12;", "type": "Delete", "seed": "start.setTime(new Date(startMillis));"}]}]}}, {"project": "Math", "bug_id": "2", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:12:29.874596", "repair_begin": "2018-12-01 13:03:04.056117", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_854/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:44:36.876489222 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 138, "faulty": "upper=((int)Math.ceil(tmp)) - 1;", "type": "Replace", "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "Delete", "seed": "lower-=1;"}]}]}}, {"project": "Math", "bug_id": "2", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:48:21.093512", "repair_begin": "2018-12-01 16:42:27.035803", "patches": [{"nb_test_that_execute_statement": 63, "patchLocation": {"line": 138, "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n@@ -137,3 +137,5 @@\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n+                if (false) {\n+                    upper = ((int) Math.ceil(tmp)) - 1;\n+                }\n             }\n"}]}}, {"project": "Math", "bug_id": "2", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 09:24:45.052809", "repair_begin": "2018-11-30 08:13:53.185417", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", "line": 292, "faulty": "final double N=getPopulationSize();", "type": "InsertBefore", "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 129, "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", "type": "Replace", "seed": "double max=Double.NEGATIVE_INFINITY;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", "line": 292, "faulty": "final double N=getPopulationSize();", "type": "InsertBefore", "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 131, "faulty": "double tmp=mu - k * sigma;", "type": "Replace", "seed": "final double s=getStandardDeviation();"}, {"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "Replace", "seed": "return inverseCumulativeProbability(random.nextDouble());"}]}]}}, {"project": "Math", "bug_id": "2", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 07:04:32.125879", "repair_begin": "2018-11-29 06:49:56.427256", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java\\n@@ -317,7 +317,7 @@\\n \\n \\n \\n-\\tpublic int getSupportUpperBound() {\\n+\\tpublic int getSupportUpperBound() { \\t\\tnumericalVarianceIsCalculated = true;\\n \\t\\treturn org.apache.commons.math3.util.FastMath.min(getNumberOfSuccesses(), getSampleSize());\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return org.apache.commons.math3.util.FastMath.min(getNumberOfSuccesses(), getSampleSize())", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "numericalVarianceIsCalculated = true", "INGREDIENT_PARENT": "numericalVarianceIsCalculated = true", "LOCATION": "org.apache.commons.math3.distribution.HypergeometricDistribution", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_2\\/.\\/output_astor\\/AstorMain-Math-2\\/\\/src\\/\\/variant-6_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_2\\/output_astor\\/AstorMain-Math-2\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/HypergeometricDistribution.java", "LINE": "321", "MP_RANKING": "10", "SUSPICIOUNESS": "0.162", "PATCH_HUNK_TYPE": "CtAssignmentImpl|CtBlockImpl"}], "GENERATION": "3", "VARIANT_ID": "6", "TIME": "254", "VALIDATION": "|true|0|5195|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_2\\/.\\/output_astor\\/AstorMain-Math-2\\/\\/bin\\/\\/variant-6"}]}}, {"project": "Math", "bug_id": "2", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:53:09.039560", "repair_begin": "2018-11-30 00:31:01.586620", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", "line": 137, "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Math", "bug_id": "2", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 06:48:08.753196", "repair_begin": "2018-11-29 06:42:20.739403", "patches": [{"nb_test_that_execute_statement": 63, "patchLocation": {"line": 138, "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n@@ -137,3 +137,5 @@\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n+                if (sigma == upper) {\n+                    upper = ((int) Math.ceil(tmp)) - 1;\n+                }\n             }\n"}]}}, {"project": "Math", "bug_id": "4", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 06:47:44.487119", "repair_begin": "2018-11-29 06:38:05.423123", "patches": [{"nb_test_that_execute_statement": 24, "patchLocation": {"line": 200, "class": "org.apache.commons.math3.geometry.euclidean.twod.Line"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n@@ -199,3 +199,5 @@\n         if (FastMath.abs(d) < 1.0e-10) {\n-            return null;\n+            if (((other.sin < 1) && (other.sin < 1)) || ((org.apache.commons.math3.geometry.euclidean.twod.Line.this.originOffset) != (d))) {\n+                return null;\n+            }\n         }\n"}]}}, {"project": "Math", "bug_id": "5", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 13:58:10.230219", "repair_begin": "2018-12-01 13:01:23.713431", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complex.java\t2018-12-01 07:01:09.709772458 -0500\n+++ /tmp/Arja_Defects4J_Math_5/patches_22ad/Patch_717/patched/tmp/Arja_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complex.java\t2018-12-01 07:49:01.005284729 -0500\n@@ -297,12 +297,8 @@\n \n     /** {@inheritDoc} */\n     public Complex reciprocal() {\n-        if (isNaN) {\n-            return NaN;\n-        }\n-\n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+            return INF;\n         }\n \n         if (isInfinite) {\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 300, "faulty": "if (isNaN) {\n  return NaN;\n}", "type": "Delete", "seed": "isInfinite=!isNaN && (Double.isInfinite(real) || Double.isInfinite(imaginary));"}, {"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 305, "faulty": "return NaN;", "type": "Replace", "seed": "return INF;"}]}]}}, {"project": "Math", "bug_id": "5", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 09:15:01.878855", "repair_begin": "2018-11-30 08:11:44.212562", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 300, "faulty": "if (isNaN) {\n  return NaN;\n}", "type": "Delete", "seed": "if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {\n  return INF;\n}"}, {"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 300, "faulty": "if (isNaN) {\n  return NaN;\n}", "type": "Delete", "seed": "if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {\n  return INF;\n}"}, {"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 305, "faulty": "return NaN;", "type": "Delete", "seed": "return 7;"}, {"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 305, "faulty": "return NaN;", "type": "Delete", "seed": "final List<Complex> result=new ArrayList<Complex>();"}, {"path": "src/main/java/org/apache/commons/math3/complex/Complex.java", "line": 305, "faulty": "return NaN;", "type": "Replace", "seed": "return INF;"}]}]}}, {"project": "Math", "bug_id": "5", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 07:06:27.535137", "repair_begin": "2018-11-29 06:41:41.990507", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/complex\\/Complex.java\\n+++ org\\/apache\\/commons\\/math3\\/complex\\/Complex.java\\n@@ -302,23 +302,8 @@\\n \\t\\t}\\n \\n \\t\\tif (((real) == 0.0) && ((imaginary) == 0.0)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n \\n-\\t\\tif (isInfinite) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;\\n-\\t\\t}\\n \\n-\\t\\tif ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) {\\n-\\t\\t\\tdouble q = (real) \\/ (imaginary);\\n-\\t\\t\\tdouble scale = 1.0 \\/ (((real) * q) + (imaginary));\\n-\\t\\t\\treturn createComplex((scale * q), (-scale));\\n-\\t\\t}else {\\n-\\t\\t\\tdouble q = (imaginary) \\/ (real);\\n-\\t\\t\\tdouble scale = 1.0 \\/ (((imaginary) * q) + (real));\\n-\\t\\t\\treturn createComplex(scale, ((-scale) * q));\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -335,21 +320,6 @@\\n \\n \\n \\n-\\t@java.lang.Override\\n-\\tpublic boolean equals(java.lang.Object other) {\\n-\\t\\tif ((this) == other) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) {\\n-\\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));\\n-\\t\\t\\tif (c.isNaN) {\\n-\\t\\t\\t\\treturn isNaN;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\treturn ((real) == (c.real)) && ((imaginary) == (c.imaginary));\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn false;\\n-\\t}\\n \\n \\n \\n@@ -358,32 +328,18 @@\\n \\n \\n \\n-\\t@java.lang.Override\\n-\\tpublic int hashCode() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn 7;\\n-\\t\\t}\\n-\\t\\treturn 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + \\n-\\t\\t(org.apache.commons.math3.util.MathUtils.hash(real)));\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic double getImaginary() {\\n-\\t\\treturn imaginary;\\n-\\t}\\n \\n \\n \\n \\n \\n \\n-\\tpublic double getReal() {\\n-\\t\\treturn real;\\n-\\t}\\n \\n \\n \\n@@ -392,9 +348,6 @@\\n \\n \\n \\n-\\tpublic boolean isNaN() {\\n-\\t\\treturn isNaN;\\n-\\t}\\n \\n \\n \\n@@ -405,9 +358,6 @@\\n \\n \\n \\n-\\tpublic boolean isInfinite() {\\n-\\t\\treturn isInfinite;\\n-\\t}\\n \\n \\n \\n@@ -433,18 +383,68 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws \\n-\\torg.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor);\\n-\\t\\tif ((isNaN) || (factor.isNaN)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif ((((java.lang.Double.isInfinite(real)) || \\n-\\t\\t(java.lang.Double.isInfinite(imaginary))) || \\n-\\t\\t(java.lang.Double.isInfinite(factor.real))) || \\n-\\t\\t(java.lang.Double.isInfinite(factor.imaginary))) {\\n \\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\tif (isInfinite) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;} \\t\\tif ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) { \\t\\t\\tdouble q = (real) \\/ (imaginary); \\t\\t\\tdouble scale = 1.0 \\/ (((real) * q) + (imaginary)); \\t\\t\\treturn createComplex((scale * q), (-scale));}else { \\t\\t\\tdouble q = (imaginary) \\/ (real); \\t\\t\\tdouble scale = 1.0 \\/ (((imaginary) * q) + (real)); \\t\\t\\treturn createComplex(scale, ((-scale) * q));}} \\t@java.lang.Override \\tpublic boolean equals(java.lang.Object other) { \\t\\tif ((this) == other) { \\t\\t\\treturn true;} \\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) { \\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); \\t\\t\\tif (c.isNaN) { \\t\\t\\t\\treturn isNaN;}else { \\t\\t\\t\\treturn ((real) == (c.real)) && ((imaginary) == (c.imaginary));}} \\t\\treturn false;} \\t@java.lang.Override \\tpublic int hashCode() { \\t\\tif (isNaN) { \\t\\t\\treturn 7;} \\t\\treturn 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + (org.apache.commons.math3.util.MathUtils.hash(real)));} \\tpublic double getImaginary() { \\t\\treturn imaginary;} \\tpublic double getReal() { \\t\\treturn real;} \\tpublic boolean isNaN() { \\t\\treturn isNaN;} \\tpublic boolean isInfinite() { \\t\\treturn isInfinite;} \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor); \\t\\tif ((isNaN) || (factor.isNaN)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n \\t\\t}\\n \\t\\treturn createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), \\n \\t\\t(((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return org.apache.commons.math3.complex.Complex.NaN", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return org.apache.commons.math3.complex.Complex.INF", "INGREDIENT_PARENT": "return org.apache.commons.math3.complex.Complex.INF", "LOCATION": "org.apache.commons.math3.complex.Complex", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_5\\/.\\/output_astor\\/AstorMain-Math-5\\/\\/src\\/\\/variant-404_f\\/org\\/apache\\/commons\\/math3\\/complex\\/Complex.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_5\\/output_astor\\/AstorMain-Math-5\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/complex\\/Complex.java", "LINE": "305", "MP_RANKING": "0", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "202", "VARIANT_ID": "404", "TIME": "375", "VALIDATION": "|true|0|4949|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_5\\/.\\/output_astor\\/AstorMain-Math-5\\/\\/bin\\/\\/variant-404"}]}}, {"project": "Math", "bug_id": "7", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 06:42:29.258472", "repair_begin": "2018-11-29 06:24:46.490669", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 351, "class": "org.apache.commons.math3.ode.AbstractIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -350,3 +350,5 @@\n                 for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+                    if (org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers.size() == orderingSign) {\n+                        handler.handleStep(interpolator, isLastStep);\n+                    }\n                 }\n"}]}}, {"project": "Math", "bug_id": "8", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 13:52:16.692427", "repair_begin": "2018-12-01 12:59:25.506019", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_281/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:38.912484969 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "InsertBefore", "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"}]}]}}, {"project": "Math", "bug_id": "8", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:53:54.025302", "repair_begin": "2018-12-01 16:39:38.823607", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 190, "class": "org.apache.commons.math3.distribution.DiscreteDistribution"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n@@ -189,3 +189,5 @@\n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            if (false) {\n+                out[i] = sample();\n+            }\n         }\n"}]}}, {"project": "Math", "bug_id": "8", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 08:55:30.251810", "repair_begin": "2018-11-30 07:47:08.641443", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "double lowerBound=getSupportLowerBound();"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "int lower=getSupportLowerBound();"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 190, "faulty": "out[i]=sample();", "type": "Delete", "seed": "return 0.0;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "double lowerBound=getSupportLowerBound();"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 182, "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", "type": "InsertBefore", "seed": "double qi=0;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete", "seed": "return false;"}, {"path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", "line": 1266, "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", "type": "InsertBefore", "seed": "final int[] output=new int[len];"}]}]}}, {"project": "Math", "bug_id": "8", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 06:59:10.778163", "repair_begin": "2018-11-29 06:33:12.956830", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java\\n+++ org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java\\n@@ -187,7 +187,7 @@\\n \\t\\tfinal T[] out = ((T[]) (java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize)));\\n \\n \\t\\tfor (int i = 0; i < sampleSize; i++) {\\n-\\t\\t\\tout[i] = sample();\\n+\\n \\t\\t}\\n \\n \\t\\treturn out;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "out[i] = sample()", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math3.distribution.DiscreteDistribution", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_8\\/.\\/output_astor\\/AstorMain-Math-8\\/\\/src\\/\\/variant-22_f\\/org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_8\\/output_astor\\/AstorMain-Math-8\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/distribution\\/DiscreteDistribution.java", "LINE": "190", "MP_RANKING": "3", "SUSPICIOUNESS": "0.707"}], "GENERATION": "11", "VARIANT_ID": "22", "TIME": "342", "VALIDATION": "|true|0|4850|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_8\\/.\\/output_astor\\/AstorMain-Math-8\\/\\/bin\\/\\/variant-22"}]}}, {"project": "Math", "bug_id": "8", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 01:05:49.428192", "repair_begin": "2018-11-30 00:23:09.425312", "patches": [{"edits": [{"path": "", "line": 189, "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", "type": "Delete /tmp/Kali_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java"}]}]}}, {"project": "Math", "bug_id": "18", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 06:19:26.124786", "repair_begin": "2018-11-29 06:03:36.131633", "patches": [{"nb_test_that_execute_statement": 8, "patchLocation": {"line": 529, "class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -528,24 +528,26 @@\n \n-            if (hasInfiniteBounds) {\n-                // If there is at least one finite bound, none can be infinite,\n-                // because mixed cases are not supported by the current code.\n-                throw new MathUnsupportedOperationException();\n-            } else {\n-                // Convert API to internal handling of boundaries.\n-                boundaries = new double[2][];\n-                boundaries[0] = lB;\n-                boundaries[1] = uB;\n-\n-                // Abort early if the normalization will overflow (cf. \"encode\" method).\n-                for (int i = 0; i < lB.length; i++) {\n-                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n-                        final double max = Double.MAX_VALUE + boundaries[0][i];\n-                        final NumberIsTooLargeException e\n+            if (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs) {\n+                if (hasInfiniteBounds) {\n+                    // If there is at least one finite bound, none can be infinite,\n+                    // because mixed cases are not supported by the current code.\n+                    throw new MathUnsupportedOperationException();\n+                } else {\n+                    // Convert API to internal handling of boundaries.\n+                    boundaries = new double[2][];\n+                    boundaries[0] = lB;\n+                    boundaries[1] = uB;\n+                    \n+                    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                    for (int i = 0; i < lB.length; i++) {\n+                        if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n+                            final double max = Double.MAX_VALUE + boundaries[0][i];\n+                            final NumberIsTooLargeException e\n                             = new NumberIsTooLargeException(boundaries[1][i],\n-                                                            max,\n-                                                            true);\n-                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n-                        e.getContext().addMessage(LocalizedFormats.INDEX, i);\n-\n-                        throw e;\n+                            max,\n+                            true);\n+                            e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n+                            e.getContext().addMessage(LocalizedFormats.INDEX, i);\n+                            \n+                            throw e;\n+                        }\n                     }\n"}]}}, {"project": "Math", "bug_id": "20", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:37:57.108581", "repair_begin": "2018-12-01 16:28:44.745191", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 995, "class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -994,3 +994,5 @@\n                 } else if (x[i] > 1.0) {\n-                    repaired[i] = 1.0;\n+                    if (false) {\n+                        repaired[i] = 1.0;\n+                    }\n                 } else {\n"}]}}, {"project": "Math", "bug_id": "20", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 06:13:45.270329", "repair_begin": "2018-11-29 06:00:53.771329", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 995, "class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -994,3 +994,5 @@\n                 } else if (x[i] > 1.0) {\n-                    repaired[i] = 1.0;\n+                    if (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.generateStatistics) {\n+                        repaired[i] = 1.0;\n+                    }\n                 } else {\n"}]}}, {"project": "Math", "bug_id": "22", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:05:49.413878", "repair_begin": "2018-12-01 12:33:36.114487", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-01 06:33:23.389757961 -0500\n+++ /tmp/Arja_Defects4J_Math_22/patches_owa9/Patch_880/patched/tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-01 07:33:39.195435605 -0500\n@@ -126,10 +126,14 @@\n      * @since 2.1\n      */\n     public double density(double x) {\n-        final double nhalf = numeratorDegreesOfFreedom / 2;\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n-        final double logn = FastMath.log(numeratorDegreesOfFreedom);\n+        numericalVarianceIsCalculated = true;\n+\t\tfinal double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n\n\n--- /tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-01 06:33:23.389757961 -0500\n+++ /tmp/Arja_Defects4J_Math_22/patches_owa9/Patch_880/patched/tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-01 07:33:39.195435605 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "line": 129, "faulty": "final double nhalf=numeratorDegreesOfFreedom / 2;", "type": "InsertBefore", "seed": "if (x <= 0) {\n  return 0;\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "line": 132, "faulty": "final double logn=FastMath.log(numeratorDegreesOfFreedom);", "type": "InsertBefore", "seed": "numericalVarianceIsCalculated=true;"}, {"path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", "line": 184, "faulty": "return false;", "type": "Replace", "seed": "return true;"}]}]}}, {"project": "Math", "bug_id": "24", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 06:03:39.346197", "repair_begin": "2018-11-29 05:52:19.406027", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 146, "class": "org.apache.commons.math3.analysis.FunctionUtils$4"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n@@ -145,3 +145,5 @@\n                 for (int i = 1; i < f.length; i++) {\n-                    r += f[i].value(x);\n+                    if (((0 <= r) && (0 <= r)) || (r < -1)) {\n+                        r += f[i].value(x);\n+                    }\n                 }\n"}]}}, {"project": "Math", "bug_id": "28", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 13:14:36.330729", "repair_begin": "2018-12-01 12:30:02.258978", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-01 06:29:49.227599214 -0500\n+++ /tmp/Arja_Defects4J_Math_28/patches_1aw5/Patch_754/patched/tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-01 07:04:10.968161721 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 120, "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", "type": "Delete", "seed": "continue;"}, {"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 124, "faulty": "return row;", "type": "InsertBefore", "seed": "incrementIterationsCounter();"}]}]}}, {"project": "Math", "bug_id": "28", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:35:58.848677", "repair_begin": "2018-12-01 16:24:15.897017", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 151, "class": "org.apache.commons.math3.optimization.linear.SimplexSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -150,3 +150,5 @@\n                 }\n-                return minRow;\n+                if (false) {\n+                    return minRow;\n+                }\n         }\n"}]}}, {"project": "Math", "bug_id": "28", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 07:25:20.791906", "repair_begin": "2018-11-30 06:48:07.974643", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 145, "faulty": "minIndex=i;", "type": "Delete", "seed": "return true;"}, {"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 145, "faulty": "minIndex=i;", "type": "Delete", "seed": "double[] coefficients=new double[getOriginalNumDecisionVariables()];"}, {"path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", "line": 128, "faulty": "throw new MaxCountExceededException(maxIterations);", "type": "Delete", "seed": "return nonNegative;"}]}]}}, {"project": "Math", "bug_id": "28", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 05:30:36.364768", "repair_begin": "2018-11-29 05:08:19.820075", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -73,10 +73,10 @@\\n \\t\\t\\tfinal double entry = tableau.getEntry(0, i);\\n \\n \\n-\\t\\t\\tif (entry < minValue) {\\n-\\t\\t\\t\\tminValue = entry;\\n+\\t\\t\\tif (entry < minValue)\\n+\\n \\t\\t\\t\\tminPos = i;\\n-\\t\\t\\t}\\n+\\n \\t\\t}\\n \\t\\treturn minPos;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "minValue = entry", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math3.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/src\\/\\/variant-86_f\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_28\\/output_astor\\/AstorMain-Math-28\\/src\\/default\\/org\\/apache\\/commons\\/math3\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "77", "MP_RANKING": "78", "SUSPICIOUNESS": "0.144"}], "GENERATION": "43", "VARIANT_ID": "86", "TIME": "366", "VALIDATION": "|true|0|3981|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_28\\/.\\/output_astor\\/AstorMain-Math-28\\/\\/bin\\/\\/variant-86"}]}}, {"project": "Math", "bug_id": "28", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:18:48.217762", "repair_begin": "2018-11-29 23:50:14.114935", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", "line": 144, "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Math", "bug_id": "31", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:24:39.531616", "repair_begin": "2018-12-01 12:24:37.469563", "patches": [{"diff": "\n\n--- /tmp/Arja_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-01 06:24:25.950060055 -0500\n+++ /tmp/Arja_Defects4J_Math_31/patches_85dh/Patch_434/patched/tmp/Arja_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\t2018-12-01 07:24:59.457925990 -0500\n@@ -174,8 +174,7 @@\n                                                x);\n             }\n             if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                return -0.0;\n             }\n \n             if (FastMath.abs(deltaN - 1.0) < epsilon) {\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "Replace", "seed": "return -0.0;"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", "line": 137, "faulty": "return getMessage(Locale.getDefault());", "type": "Replace", "seed": "return getMessage(Locale.getDefault());"}]}]}}, {"project": "Math", "bug_id": "31", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 08:37:13.320838", "repair_begin": "2018-11-30 06:45:49.783696", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "Replace", "seed": "if (x * x < 1.0) {\n  return Double.POSITIVE_INFINITY;\n}\n else {\n  return 0.0;\n}"}, {"path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "line": 218, "faulty": "return numericalVariance;", "type": "InsertBefore", "seed": "final double denominatorDF=getDenominatorDegreesOfFreedom();"}, {"path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", "line": 380, "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", "type": "Replace", "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"}, {"path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "line": 216, "faulty": "numericalVarianceIsCalculated=true;", "type": "Delete", "seed": "final double sc=getScale();"}, {"path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", "line": 80, "faulty": "return context.getMessage();", "type": "Replace", "seed": "return context.getMessage();"}]}]}}, {"project": "Math", "bug_id": "31", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:13:08.301826", "repair_begin": "2018-11-29 23:46:04.388590", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java", "line": 177, "faulty": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,x);", "type": "InsertReturn false"}]}]}}, {"project": "Math", "bug_id": "32", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:31:47.833310", "repair_begin": "2018-12-01 16:23:45.061003", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 136, "class": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n@@ -135,3 +135,3 @@\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if ((Boolean) tree.getAttribute()) {\n+            if (false) {\n                 // the instance covers the whole space\n"}]}}, {"project": "Math", "bug_id": "32", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 00:10:41.874155", "repair_begin": "2018-11-29 23:44:50.795695", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java", "line": 136, "faulty": "if ((Boolean)tree.getAttribute()) {\n  setSize(Double.POSITIVE_INFINITY);\n  setBarycenter(Vector2D.NaN);\n}\n else {\n  setSize(0);\n  setBarycenter(new Vector2D(0,0));\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Math", "bug_id": "33", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 05:47:32.186548", "repair_begin": "2018-11-29 05:36:02.379893", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 339, "class": "org.apache.commons.math3.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -338,3 +338,5 @@\n             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                columnsToDrop.add(i);\n+                if ((2) != (org.apache.commons.math3.optimization.linear.SimplexTableau.this.numArtificialVariables)) {\n+                    columnsToDrop.add(i);\n+                }\n             }\n"}]}}, {"project": "Math", "bug_id": "39", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 13:55:26.737978", "repair_begin": "2018-12-01 12:16:10.349887", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_975/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:21:59.306923197 -0500\n@@ -287,7 +287,10 @@\n \n     super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);\n \n-    final int dimension = currentState.length;\n+    if (!forward) {\n+\t\th = -h;\n+\t}\n+\tfinal int dimension = currentState.length;\n \n     yDotKLast = new double[3][];\n     for (int k = 0; k < yDotKLast.length; ++k) {\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_975/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:21:59.310923179 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", "line": 290, "faulty": "final int dimension=currentState.length;", "type": "InsertBefore", "seed": "if (!forward) {\n  h=-h;\n}"}, {"path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", "line": 254, "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", "type": "InsertBefore", "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"}]}]}}, {"project": "Math", "bug_id": "40", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 07:03:25.095051", "repair_begin": "2018-11-30 06:20:38.335087", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java", "line": 373, "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"META-INF/localization/LocalizedFormats\",locale);", "type": "Replace", "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"META-INF/localization/LocalizedFormats\",locale);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 265, "faulty": "--end;", "type": "InsertBefore", "seed": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}"}, {"path": "src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java", "line": 137, "faulty": "return getMessage(Locale.getDefault());", "type": "InsertBefore", "seed": "final int len=msgPatterns.size();"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 294, "faulty": "nbPoints=end - start;", "type": "InsertBefore", "seed": "boolean inverted=false;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", "line": 325, "faulty": "xB=nextX;", "type": "InsertBefore", "seed": "end=signChangeIndex;"}]}]}}, {"project": "Math", "bug_id": "40", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:44:07.351495", "repair_begin": "2018-11-29 04:33:04.031386", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java\\n@@ -260,7 +260,7 @@\\n \\t\\t\\t\\t\\tif ((signChangeIndex - start) >= (end - signChangeIndex)) {\\n \\n \\t\\t\\t\\t\\t\\t++start;\\n-\\t\\t\\t\\t\\t}else {\\n+\\t\\t\\t\\t\\t}else { \\t\\t\\t\\t\\t\\tdo { \\t\\t\\t\\t\\t\\t\\tjava.lang.System.arraycopy(x, start, tmpX, start, (end - start)); \\t\\t\\t\\t\\t\\t\\tnextX = guessX(targetY, tmpX, y, start, end); \\t\\t\\t\\t\\t\\t\\tif (!((nextX > xA) && (nextX < xB))) { \\t\\t\\t\\t\\t\\t\\t\\tif ((signChangeIndex - start) >= (end - signChangeIndex)) { \\t\\t\\t\\t\\t\\t\\t\\t\\t++start;}else {\\n \\n \\t\\t\\t\\t\\t\\t--end;\\n \\t\\t\\t\\t\\t}\\n@@ -270,7 +270,7 @@\\n \\n \\t\\t\\t\\t}\\n \\n-\\t\\t\\t} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) );\\n+\\t\\t\\t\\t\\t\\t} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) ); \\t\\t\\t\\t\\t\\t--end;} \\t\\t\\t\\t\\tnextX = java.lang.Double.NaN;}} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) );\\n \\n \\t\\t\\tif (java.lang.Double.isNaN(nextX)) {\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "--end", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "do {\\n\\n\\n\\tjava.lang.System.arraycopy(x, start, tmpX, start, (end - start));\\n\\tnextX = guessX(targetY, tmpX, y, start, end);\\n\\n\\tif (!((nextX > xA) && (nextX < xB))) {\\n\\n\\n\\n\\n\\n\\t\\tif ((signChangeIndex - start) >= (end - signChangeIndex)) {\\n\\n\\t\\t\\t++start;\\n\\t\\t}else {\\n\\n\\t\\t\\t--end;\\n\\t\\t}\\n\\n\\n\\t\\tnextX = java.lang.Double.NaN;\\n\\n\\t}\\n\\n} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) )", "INGREDIENT_PARENT": "do {\\n\\n\\n\\tjava.lang.System.arraycopy(x, start, tmpX, start, (end - start));\\n\\tnextX = guessX(targetY, tmpX, y, start, end);\\n\\n\\tif (!((nextX > xA) && (nextX < xB))) {\\n\\n\\n\\n\\n\\n\\t\\tif ((signChangeIndex - start) >= (end - signChangeIndex)) {\\n\\n\\t\\t\\t++start;\\n\\t\\t}else {\\n\\n\\t\\t\\t--end;\\n\\t\\t}\\n\\n\\n\\t\\tnextX = java.lang.Double.NaN;\\n\\n\\t}\\n\\n} while ((java.lang.Double.isNaN(nextX)) && ((end - start) > 1) )", "LOCATION": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_40\\/.\\/output_astor\\/AstorMain-Math-40\\/\\/src\\/\\/variant-38_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_40\\/output_astor\\/AstorMain-Math-40\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BracketingNthOrderBrentSolver.java", "LINE": "265", "MP_RANKING": "19", "SUSPICIOUNESS": "0.189", "PATCH_HUNK_TYPE": "CtDoImpl|CtBlockImpl"}], "GENERATION": "19", "VARIANT_ID": "38", "TIME": "229", "VALIDATION": "|true|0|3199|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_40\\/.\\/output_astor\\/AstorMain-Math-40\\/\\/bin\\/\\/variant-38"}]}}, {"project": "Math", "bug_id": "41", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:26:22.221581", "repair_begin": "2018-12-01 16:21:43.177119", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 513, "class": "org.apache.commons.math.stat.descriptive.moment.Variance"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (mean <= length) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n"}]}}, {"project": "Math", "bug_id": "41", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 05:28:39.386676", "repair_begin": "2018-11-29 05:22:18.376387", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 217, "class": "org.apache.commons.math.stat.descriptive.moment.Mean"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if (xbarw < length) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n"}]}}, {"project": "Math", "bug_id": "42", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 05:22:45.867081", "repair_begin": "2018-11-29 05:18:18.068942", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 347, "class": "org.apache.commons.math.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -346,3 +346,5 @@\n           if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n+            if (0 < org.apache.commons.math.optimization.linear.SimplexTableau.this.numSlackVariables) {\n+                columnsToDrop.add(col);\n+            }\n           }\n"}]}}, {"project": "Math", "bug_id": "49", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:25:36.539848", "repair_begin": "2018-12-01 16:21:36.365348", "patches": [{"nb_test_that_execute_statement": 15, "patchLocation": {"line": 399, "class": "org.apache.commons.math.util.OpenIntToDoubleHashMap"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n+++ b/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n@@ -398,3 +398,5 @@\n         --size;\n-        ++count;\n+        if (false) {\n+            ++count;\n+        }\n         return previous;\n"}]}}, {"project": "Math", "bug_id": "49", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 06:25:20.537332", "repair_begin": "2018-11-30 05:46:50.761956", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 399, "faulty": "++count;", "type": "Delete", "seed": "throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);"}, {"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 397, "faulty": "values[index]=missingEntries;", "type": "Replace", "seed": "final double pia=1.5707963267948966 * 2.0;"}, {"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 399, "faulty": "++count;", "type": "Delete", "seed": "throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);"}, {"path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java", "line": 64, "faulty": "if (d != n) {\n  throw new DimensionMismatchException(d,n);\n}", "type": "InsertBefore", "seed": "final double[][] V=new double[n][n];"}, {"path": "src/main/java/org/apache/commons/math/MathRuntimeException.java", "line": 373, "faulty": "return new ConcurrentModificationException(){\n  /** \n * Serializable version identifier. \n */\n  private static final long serialVersionUID=-1878427236170442052L;\n  /** \n * {@inheritDoc} \n */\n  @Override public String getMessage(){\n    return buildMessage(Locale.US,pattern,arguments);\n  }\n  /** \n * {@inheritDoc} \n */\n  @Override public String getLocalizedMessage(){\n    return buildMessage(Locale.getDefault(),pattern,arguments);\n  }\n}\n;", "type": "Replace", "seed": "return new ConcurrentModificationException(){\n  /** \n * Serializable version identifier. \n */\n  private static final long serialVersionUID=-1878427236170442052L;\n  /** \n * {@inheritDoc} \n */\n  @Override public String getMessage(){\n    return buildMessage(Locale.US,pattern,arguments);\n  }\n  /** \n * {@inheritDoc} \n */\n  @Override public String getLocalizedMessage(){\n    return buildMessage(Locale.getDefault(),pattern,arguments);\n  }\n}\n;"}, {"path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java", "line": 564, "faulty": "throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);", "type": "InsertBefore", "seed": "boolean newMapping=true;"}]}]}}, {"project": "Math", "bug_id": "49", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:34:01.069158", "repair_begin": "2018-11-29 04:19:42.813374", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/OpenIntToDoubleHashMap.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/OpenIntToDoubleHashMap.java\\n@@ -396,7 +396,7 @@\\n \\t\\tfinal double previous = values[index];\\n \\t\\tvalues[index] = missingEntries;\\n \\t\\t--(size);\\n-\\t\\t++(count);\\n+\\n \\t\\treturn previous;\\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "++(count)", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.util.OpenIntToDoubleHashMap", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_49\\/.\\/output_astor\\/AstorMain-Math-49\\/\\/src\\/\\/variant-354_f\\/org\\/apache\\/commons\\/math\\/util\\/OpenIntToDoubleHashMap.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_49\\/output_astor\\/AstorMain-Math-49\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/OpenIntToDoubleHashMap.java", "LINE": "399", "MP_RANKING": "34", "SUSPICIOUNESS": "0.183"}], "GENERATION": "177", "VARIANT_ID": "354", "TIME": "423", "VALIDATION": "|true|0|2954|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_49\\/.\\/output_astor\\/AstorMain-Math-49\\/\\/bin\\/\\/variant-354"}]}}, {"project": "Math", "bug_id": "49", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:41:52.455594", "repair_begin": "2018-11-29 23:26:24.674908", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java", "line": 664, "faulty": "if (!isDefaultValue(value)) {\n  entries.put(index,value);\n}\n else if (entries.containsKey(index)) {\n  entries.remove(index);\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Math", "bug_id": "49", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 05:09:40.878994", "repair_begin": "2018-11-29 05:06:18.373407", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 667, "class": "org.apache.commons.math.linear.OpenMapRealVector"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -666,3 +666,5 @@\n         } else if (entries.containsKey(index)) {\n-            entries.remove(index);\n+            if (org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == org.apache.commons.math.linear.OpenMapRealVector.this.epsilon) {\n+                entries.remove(index);\n+            }\n         }\n"}]}}, {"project": "Math", "bug_id": "50", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:34:37.694843", "repair_begin": "2018-12-01 12:06:27.444849", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:06:15.435478746 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_377/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2018-12-01 06:23:18.332375335 -0500\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:06:11.755478662 -0500\n+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_377/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:23:18.336375326 -0500\n@@ -368,7 +368,8 @@\n     public static void verifyBracketing(UnivariateRealFunction function,\n                                         final double lower,\n                                         final double upper) {\n-        if (function == null) {\n+        verifyInterval(lower, upper);\n+\t\tif (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         verifyInterval(lower, upper);\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 239, "faulty": "return x1;", "type": "Replace", "seed": "return x1;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 371, "faulty": "if (function == null) {\n  throw new NullArgumentException(LocalizedFormats.FUNCTION);\n}", "type": "InsertBefore", "seed": "verifyInterval(lower,upper);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 188, "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", "type": "Delete", "seed": "x1=x;"}]}]}}, {"project": "Math", "bug_id": "50", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:24:05.264418", "repair_begin": "2018-12-01 16:20:46.556865", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 188, "class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -187,3 +187,5 @@\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (false) {\n+                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        }\n                         f0 = computeObjectiveValue(x0);\n"}]}}, {"project": "Math", "bug_id": "50", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 06:13:54.918450", "repair_begin": "2018-11-30 05:46:17.572428", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 188, "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", "type": "Delete", "seed": "switch (method) {\ncase ILLINOIS:\n  f0*=0.5;\nbreak;\ncase PEGASUS:\nf0*=f1 / (f1 + fx);\nbreak;\ncase REGULA_FALSI:\nif (x == x1) {\nx0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\nf0=computeObjectiveValue(x0);\n}\nbreak;\ndefault :\nthrow new MathInternalError();\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 188, "faulty": "x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));", "type": "Replace", "seed": "return (f1 >= 0) ? x1 : x0;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 187, "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", "type": "Replace", "seed": "if (f0 == 0.0) {\n  return x0;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 175, "faulty": "f0=f1;", "type": "InsertBefore", "seed": "int start=0;"}]}]}}, {"project": "Math", "bug_id": "50", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:27:54.380872", "repair_begin": "2018-11-29 04:16:50.039532", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java\\n@@ -184,10 +184,10 @@\\n \\t\\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t\\tcase REGULA_FALSI :\\n \\n-\\t\\t\\t\\t\\t\\tif (x == x1) {\\n-\\t\\t\\t\\t\\t\\t\\tx0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)));\\n+\\t\\t\\t\\t\\t\\tif (x == x1)\\n+\\n \\t\\t\\t\\t\\t\\t\\tf0 = computeObjectiveValue(x0);\\n-\\t\\t\\t\\t\\t\\t}\\n+\\n \\t\\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t\\tdefault :\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "x0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)))", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.analysis.solvers.BaseSecantSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_50\\/.\\/output_astor\\/AstorMain-Math-50\\/\\/src\\/\\/variant-58_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_50\\/output_astor\\/AstorMain-Math-50\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BaseSecantSolver.java", "LINE": "188", "MP_RANKING": "0", "SUSPICIOUNESS": "0.707"}], "GENERATION": "29", "VARIANT_ID": "58", "TIME": "305", "VALIDATION": "|true|0|2952|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_50\\/.\\/output_astor\\/AstorMain-Math-50\\/\\/bin\\/\\/variant-58"}]}}, {"project": "Math", "bug_id": "50", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:41:36.917985", "repair_begin": "2018-11-29 23:26:33.227493", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java", "line": 187, "faulty": "if (x == x1) {\n  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));\n  f0=computeObjectiveValue(x0);\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Math", "bug_id": "50", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 05:16:18.806333", "repair_begin": "2018-11-29 05:05:43.048340", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 187, "class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,5 +186,7 @@\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                    if (-1 == 0) {\n+                        if (x == x1) {\n+                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                            f0 = computeObjectiveValue(x0);\n+                        }\n                     }\n"}]}}, {"project": "Math", "bug_id": "53", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:44:53.179672", "repair_begin": "2018-12-01 12:05:39.745697", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complex.java\t2018-12-01 06:05:28.593004488 -0500\n+++ /tmp/Arja_Defects4J_Math_53/patches_hhsr/Patch_540/patched/tmp/Arja_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complex.java\t2018-12-01 06:27:16.673857164 -0500\n@@ -149,7 +149,10 @@\n      */\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n+        if (isNaN || rhs.isNaN) {\n+\t\t\t\treturn NaN;\n+\t\t\t}\n+\t\tMathUtils.checkNotNull(rhs);\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/complex/Complex.java", "line": 152, "faulty": "MathUtils.checkNotNull(rhs);", "type": "InsertBefore", "seed": "if (isNaN || rhs.isNaN) {\n  return NaN;\n}"}, {"path": "src/main/java/org/apache/commons/math/complex/Complex.java", "line": 997, "faulty": "return new Complex(realPart,imaginaryPart);", "type": "Replace", "seed": "return new Complex(realPart,imaginaryPart);"}]}]}}, {"project": "Math", "bug_id": "53", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 06:31:05.533840", "repair_begin": "2018-11-30 05:40:43.472687", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/complex/Complex.java", "line": 152, "faulty": "MathUtils.checkNotNull(rhs);", "type": "InsertBefore", "seed": "if (isNaN || rhs.isNaN) {\n  return NaN;\n}"}]}]}}, {"project": "Math", "bug_id": "53", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:22:00.055193", "repair_begin": "2018-11-29 04:14:09.206007", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/complex\\/Complex.java\\n+++ org\\/apache\\/commons\\/math\\/complex\\/Complex.java\\n@@ -149,10 +149,6 @@\\n \\n \\tpublic org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex rhs) throws \\n \\torg.apache.commons.math.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs);\\n-\\t\\treturn createComplex(((real) + (rhs.getReal())), \\n-\\t\\t((imaginary) + (rhs.getImaginary())));\\n-\\t}\\n \\n \\n \\n@@ -168,12 +164,6 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math.complex.Complex conjugate() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real, (-(imaginary)));\\n-\\t}\\n \\n \\n \\n@@ -210,12 +200,22 @@\\n \\n \\n \\n-\\tpublic org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex rhs) throws \\n-\\torg.apache.commons.math.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs);\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\tif ((isNaN) || (rhs.isNaN)) {\\n \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;\\n-\\t\\t}\\n+\\t\\t} \\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs); \\t\\treturn createComplex(((real) + (rhs.getReal())), ((imaginary) + (rhs.getImaginary())));} \\tpublic org.apache.commons.math.complex.Complex conjugate() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;} \\t\\treturn createComplex(real, (-(imaginary)));} \\tpublic org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex rhs) throws org.apache.commons.math.exception.NullArgumentException { \\t\\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs); \\t\\tif ((isNaN) || (rhs.isNaN)) { \\t\\t\\treturn org.apache.commons.math.complex.Complex.NaN;}\\n \\n \\t\\tdouble c = rhs.getReal();\\n \\t\\tdouble d = rhs.getImaginary();\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtInvocationImpl|CtBlockImpl", "ORIGINAL_CODE": "org.apache.commons.math.util.MathUtils.checkNotNull(rhs)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "if ((isNaN) || (rhs.isNaN)) {\\n\\treturn org.apache.commons.math.complex.Complex.NaN;\\n}", "INGREDIENT_PARENT": "if ((isNaN) || (rhs.isNaN)) {\\n\\treturn org.apache.commons.math.complex.Complex.NaN;\\n}", "LOCATION": "org.apache.commons.math.complex.Complex", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_53\\/.\\/output_astor\\/AstorMain-Math-53\\/\\/src\\/\\/variant-660_f\\/org\\/apache\\/commons\\/math\\/complex\\/Complex.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_53\\/output_astor\\/AstorMain-Math-53\\/src\\/default\\/org\\/apache\\/commons\\/math\\/complex\\/Complex.java", "LINE": "152", "MP_RANKING": "0", "SUSPICIOUNESS": "0.158", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "330", "VARIANT_ID": "660", "TIME": "184", "VALIDATION": "|true|0|2525|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_53\\/.\\/output_astor\\/AstorMain-Math-53\\/\\/bin\\/\\/variant-660"}]}}, {"project": "Math", "bug_id": "56", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:47:46.633842", "repair_begin": "2018-11-29 04:13:06.311336", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/MultidimensionalCounter.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/MultidimensionalCounter.java\\n@@ -236,9 +236,9 @@\\n \\n \\t\\tint idx = 1;\\n \\t\\twhile (count < index) {\\n-\\t\\t\\tcount += idx;\\n+\\t\\t\\tcount += idx; \\t\\t\\twhile (count < index) { \\t\\t\\t\\tcount += idx;\\n \\t\\t\\t++idx;\\n-\\t\\t} \\n+\\t\\t\\t} \\t\\t\\t++idx;} \\n \\t\\t--idx;\\n \\t\\tindices[last] = idx;\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtUnaryOperatorImpl|CtBlockImpl", "ORIGINAL_CODE": "++idx", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "while (count < index) {\\n\\tcount += idx;\\n\\t++idx;\\n} ", "INGREDIENT_PARENT": "while (count < index) {\\n\\tcount += idx;\\n\\t++idx;\\n} ", "LOCATION": "org.apache.commons.math.util.MultidimensionalCounter", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_56\\/.\\/output_astor\\/AstorMain-Math-56\\/\\/src\\/\\/variant-5174_f\\/org\\/apache\\/commons\\/math\\/util\\/MultidimensionalCounter.java", "OPERATOR": "InsertBeforeOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_56\\/output_astor\\/AstorMain-Math-56\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/MultidimensionalCounter.java", "LINE": "240", "MP_RANKING": "14", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtWhileImpl|CtBlockImpl"}], "GENERATION": "2587", "VARIANT_ID": "5174", "TIME": "1796", "VALIDATION": "|true|0|2400|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_56\\/.\\/output_astor\\/AstorMain-Math-56\\/\\/bin\\/\\/variant-5174"}]}}, {"project": "Math", "bug_id": "58", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:34:04.255726", "repair_begin": "2018-12-01 12:04:38.716948", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-01 06:04:25.093864286 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_6h8a/Patch_1800/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-01 06:32:11.347675516 -0500\n@@ -111,6 +111,6 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n }\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-01 06:04:27.609864343 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_6h8a/Patch_1800/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-01 06:32:11.347675516 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,7 +255,12 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations.length < 4) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n@@ -272,7 +277,10 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                if (idxStep == 0) {\n+\t\t\t\t\tthrow new ZeroException();\n+\t\t\t\t}\n+\t\t\t\tmaxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", "line": 114, "faulty": "return getMessage(Locale.getDefault());", "type": "Replace", "seed": "return getMessage(Locale.US);"}, {"path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "line": 258, "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", "type": "InsertBefore", "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"}, {"path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "line": 121, "faulty": "return fit(new Gaussian.Parametric(),guess);", "type": "Replace", "seed": "return fit((new ParameterGuesser(getObservations())).guess());"}, {"path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "line": 275, "faulty": "maxY=Math.max(maxY,point.getY());", "type": "InsertBefore", "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"}]}]}}, {"project": "Math", "bug_id": "58", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:28:06.446484", "repair_begin": "2018-12-01 16:17:59.252595", "patches": [{"nb_test_that_execute_statement": 19, "patchLocation": {"line": 605, "class": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -604,3 +604,5 @@\n             }\n-            sum2 = 0;\n+            if (this.costRelativeTolerance <= gNorm) {\n+                sum2 = 0;\n+            }\n             for (int j = 0; j < solvedCols; ++j) {\n"}]}}, {"project": "Math", "bug_id": "58", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 05:51:11.734406", "repair_begin": "2018-11-30 05:32:54.235777", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "line": 121, "faulty": "return fit(new Gaussian.Parametric(),guess);", "type": "Replace", "seed": "return fit((new ParameterGuesser(getObservations())).guess());"}]}]}}, {"project": "Math", "bug_id": "58", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:57:45.691244", "repair_begin": "2018-11-29 04:53:13.115283", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 182, "class": "org.apache.commons.math.analysis.function.Gaussian$Parametric"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n@@ -181,4 +181,6 @@\n             }\n-            if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+            if ((param[2]) == 0) {\n+                if (param[2] <= 0) {\n+                    throw new NotStrictlyPositiveException(param[2]);\n+                }\n             }\n"}]}}, {"project": "Math", "bug_id": "60", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:16:06.788343", "repair_begin": "2018-11-29 04:11:11.434134", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java\\n+++ org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java\\n@@ -183,24 +183,24 @@\\n \\t\\t\\tdouble r = p2 \\/ q2;\\n \\n \\t\\t\\tif (java.lang.Double.isNaN(r)) {\\n-\\t\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, \\n-\\t\\t\\t\\tx);\\n-\\t\\t\\t}\\n-\\t\\t\\trelativeError = org.apache.commons.math.util.FastMath.abs(((r \\/ c) - 1.0));\\n \\n \\n-\\t\\t\\tc = p2 \\/ q2;\\n-\\t\\t\\tp0 = p1;\\n-\\t\\t\\tp1 = p2;\\n-\\t\\t\\tq0 = q1;\\n-\\t\\t\\tq1 = q2;\\n-\\t\\t} \\n \\n-\\t\\tif (n >= maxIterations) {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t\\tthrow new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\n \\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\n-\\t\\t\\tx);\\n+\\t\\t\\t\\tx);} \\t\\t\\trelativeError = org.apache.commons.math.util.FastMath.abs(((r \\/ c) - 1.0)); \\t\\t\\tc = p2 \\/ q2; \\t\\t\\tp0 = p1; \\t\\t\\tp1 = p2; \\t\\t\\tq0 = q1; \\t\\t\\tq1 = q2;} \\t\\tif (n >= maxIterations) { \\t\\t\\tthrow new org.apache.commons.math.MaxIterationsExceededException(maxIterations, org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, x);\\n \\t\\t}\\n \\n \\t\\treturn c;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtThrowImpl|CtBlockImpl", "ORIGINAL_CODE": "throw new org.apache.commons.math.ConvergenceException(\\norg.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, \\nx)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\norg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\nx)", "INGREDIENT_PARENT": "throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations, \\norg.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, \\nx)", "LOCATION": "org.apache.commons.math.util.ContinuedFraction", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_60\\/.\\/output_astor\\/AstorMain-Math-60\\/\\/src\\/\\/variant-156_f\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_60\\/output_astor\\/AstorMain-Math-60\\/src\\/default\\/org\\/apache\\/commons\\/math\\/util\\/ContinuedFraction.java", "LINE": "186", "MP_RANKING": "2", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtThrowImpl|CtBlockImpl"}], "GENERATION": "78", "VARIANT_ID": "156", "TIME": "83", "VALIDATION": "|true|0|2218|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_60\\/.\\/output_astor\\/AstorMain-Math-60\\/\\/bin\\/\\/variant-156"}]}}, {"project": "Math", "bug_id": "64", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:29:29.758617", "repair_begin": "2018-11-29 04:08:15.531975", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java\\n@@ -431,7 +431,7 @@\\n \\t\\t\\t\\t\\ttmpVec = residuals;\\n \\t\\t\\t\\t\\tresiduals = oldRes;\\n \\t\\t\\t\\t\\toldRes = tmpVec;\\n-\\t\\t\\t\\t}\\n+\\t\\t\\t\\t} \\t\\t\\t\\tcurrent = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\\n \\t\\t\\t\\tif ((checker) == null) {\\n \\t\\t\\t\\t\\tif (((((java.lang.Math.abs(actRed)) <= (costRelativeTolerance)) && \\n \\t\\t\\t\\t\\t(preRed <= (costRelativeTolerance))) && \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (ratio >= 1.0E-4) {\\n\\n\\tfirstIteration = false;\\n\\txNorm = 0;\\n\\tfor (int k = 0; k < (cols); ++k) {\\n\\t\\tdouble xK = (diag[k]) * (point[k]);\\n\\t\\txNorm += xK * xK;\\n\\t}\\n\\txNorm = java.lang.Math.sqrt(xNorm);\\n\\n\\n\\n}else {\\n\\n\\tcost = previousCost;\\n\\tfor (int j = 0; j < (solvedCols); ++j) {\\n\\t\\tint pj = permutation[j];\\n\\t\\tpoint[pj] = oldX[pj];\\n\\t}\\n\\ttmpVec = residuals;\\n\\tresiduals = oldRes;\\n\\toldRes = tmpVec;\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)", "INGREDIENT_PARENT": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)", "LOCATION": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_64\\/.\\/output_astor\\/AstorMain-Math-64\\/\\/src\\/\\/variant-4872_f\\/org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_64\\/output_astor\\/AstorMain-Math-64\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/general\\/LevenbergMarquardtOptimizer.java", "LINE": "412", "MP_RANKING": "210", "SUSPICIOUNESS": "0.2", "PATCH_HUNK_TYPE": "CtAssignmentImpl|CtBlockImpl"}], "GENERATION": "2436", "VARIANT_ID": "4872", "TIME": "1211", "VALIDATION": "|true|0|2274|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_64\\/.\\/output_astor\\/AstorMain-Math-64\\/\\/bin\\/\\/variant-4872"}]}}, {"project": "Math", "bug_id": "69", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:39:12.906581", "repair_begin": "2018-11-29 04:38:29.627176", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 193, "class": "org.apache.commons.math.stat.correlation.PearsonsCorrelation"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n@@ -192,3 +192,5 @@\n               outMatrix.setEntry(i, j, corr);\n-              outMatrix.setEntry(j, i, corr);\n+              if ((2) != (nVars)) {\n+                  outMatrix.setEntry(j, i, corr);\n+              }\n             }\n"}]}}, {"project": "Math", "bug_id": "70", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:07:40.642494", "repair_begin": "2018-12-01 12:01:16.497626", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2018-12-01 06:01:05.830275922 -0500\n+++ /tmp/Arja_Defects4J_Math_70/patches_7h0v/Patch_903/patched/tmp/Arja_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2018-12-01 06:05:47.453168737 -0500\n@@ -63,20 +63,22 @@\n     @Deprecated\n     public double solve(double min, double max)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(f, min, max);\n+        if (f.value(max) == 0.0) {\n+\t\t\t\treturn max;\n+\t\t\t}\n+\t\treturn solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifyInterval(min,max);\n         double m;\n         double fm;\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 66, "faulty": "return solve(f,min,max);", "type": "InsertBefore", "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 72, "faulty": "return solve(min,max);", "type": "Replace", "seed": "return solve(f,min,max);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java", "line": 79, "faulty": "clearResult();", "type": "Delete", "seed": "setResult(min,0);"}]}]}}, {"project": "Math", "bug_id": "70", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 03:50:07.034977", "repair_begin": "2018-11-29 03:48:11.838606", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java\\n@@ -68,8 +68,8 @@\\n \\n \\n \\tpublic double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double min, double max, double initial) throws \\n-\\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {\\n-\\t\\treturn solve(min, max);\\n+\\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException { \\t\\treturn solve(f, min, max);\\n+\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return solve(min, max)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return solve(f, min, max)", "INGREDIENT_PARENT": "return solve(f, min, max)", "LOCATION": "org.apache.commons.math.analysis.solvers.BisectionSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_70\\/.\\/output_astor\\/AstorMain-Math-70\\/\\/src\\/\\/variant-212_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_70\\/output_astor\\/AstorMain-Math-70\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BisectionSolver.java", "LINE": "72", "MP_RANKING": "0", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "106", "VARIANT_ID": "212", "TIME": "59", "VALIDATION": "|true|0|2184|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_70\\/.\\/output_astor\\/AstorMain-Math-70\\/\\/bin\\/\\/variant-212"}]}}, {"project": "Math", "bug_id": "70", "tool": "NPEFix", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 16:37:04.555989", "repair_begin": "2018-11-29 16:35:48.170014", "patches": [{"diff": "--- analysis/solvers/BisectionSolver.java\n+++ analysis/solvers/BisectionSolver.java\n@@ -87,4 +87,12 @@\n             m = UnivariateRealSolverUtils.midpoint(min, max);\n-           fmin = f.value(min);\n-           fm = f.value(m);\n+           if (f == null) {\n+               fmin = new SinFunction().value(min);\n+           } else {\n+               fmin = f.value(min);\n+           }\n+           if (f == null) {\n+               fm = new SinFunction().value(m);\n+           } else {\n+               fm = f.value(m);\n+           }\n \n", "locations": [{"executionCount": 0, "line": 89, "class": "org.apache.commons.math.analysis.solvers.BisectionSolver", "sourceStart": 3098, "sourceEnd": 3098}, {"executionCount": 0, "line": 88, "class": "org.apache.commons.math.analysis.solvers.BisectionSolver", "sourceStart": 3068, "sourceEnd": 3068}]}]}}, {"project": "Math", "bug_id": "71", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 14:00:17.637751", "repair_begin": "2018-12-01 12:00:15.584422", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java\t2018-12-01 06:00:01.503483649 -0500\n+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_559/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java\t2018-12-01 06:48:35.070384829 -0500\n@@ -208,7 +208,8 @@\n                         }\n                     }\n \n-                    // variation direction, with respect to the integration direction\n+                    pendingEvent = true;\n+\t\t\t\t\t// variation direction, with respect to the integration direction\n                     increasing = gb >= ga;\n \n                     final UnivariateRealFunction f = new UnivariateRealFunction() {\n\n\n--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\t2018-12-01 06:00:01.507483649 -0500\n+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_559/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\t2018-12-01 06:48:35.070384829 -0500\n@@ -207,8 +207,7 @@\n       throws DerivativeException {\n \n     if (initialStep > 0) {\n-      // use the user provided value\n-      return forward ? initialStep : -initialStep;\n+      stepStart = t0;\n     }\n \n     // very rough first guess : h = 0.01 * ||y/scale|| / ||y'/scale||\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java", "line": 211, "faulty": "return forward ? initialStep : -initialStep;", "type": "Replace", "seed": "stepStart=t0;"}, {"path": "src/main/java/org/apache/commons/math/ode/events/EventState.java", "line": 212, "faulty": "increasing=gb >= ga;", "type": "InsertBefore", "seed": "pendingEvent=true;"}]}]}}, {"project": "Math", "bug_id": "71", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:23:17.392261", "repair_begin": "2018-12-01 16:17:11.212134", "patches": [{"nb_test_that_execute_statement": 2, "patchLocation": {"line": 211, "class": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n@@ -210,3 +210,5 @@\n       // use the user provided value\n-      return forward ? initialStep : -initialStep;\n+      if (false) {\n+        return forward ? initialStep : -initialStep;\n+      }\n     }\n"}]}}, {"project": "Math", "bug_id": "73", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 13:40:29.470869", "repair_begin": "2018-12-01 12:00:19.731949", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-01 06:00:09.289104123 -0500\n+++ /tmp/Arja_Defects4J_Math_73/patches_pxsy/Patch_1141/patched/tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-01 06:56:35.555528070 -0500\n@@ -128,7 +128,8 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n@@ -284,7 +285,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 287, "faulty": "oldDelta=delta;", "type": "Delete", "seed": "p=dx * r3;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 132, "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}]}]}}, {"project": "Math", "bug_id": "73", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 06:21:01.312739", "repair_begin": "2018-11-30 05:08:28.750408", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 103, "faulty": "verifySequence(min,initial,max);", "type": "InsertBefore", "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 107, "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", "type": "InsertBefore", "seed": "this.resultComputed=true;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 107, "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", "type": "InsertBefore", "seed": "this.resultComputed=true;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 103, "faulty": "verifySequence(min,initial,max);", "type": "InsertBefore", "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 107, "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", "type": "InsertBefore", "seed": "this.resultComputed=true;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 126, "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 126, "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 107, "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifySequence(min,initial,max);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 120, "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", "type": "InsertBefore", "seed": "setResult(max,0);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 196, "faulty": "return (start < mid) && (mid < end);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 184, "faulty": "throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);", "type": "Delete", "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 120, "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", "type": "Delete", "seed": "double coefficients[]=((PolynomialFunction)f).getCoefficients();"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 120, "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", "type": "Delete", "seed": "iterationCount+=this.iterationCount;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 126, "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", "type": "InsertBefore", "seed": "verifyBracketing(min,max,f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 106, "faulty": "double yInitial=f.value(initial);", "type": "InsertBefore", "seed": "this.iterationCount=0;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 196, "faulty": "return (start < mid) && (mid < end);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 196, "faulty": "return (start < mid) && (mid < end);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 106, "faulty": "double yInitial=f.value(initial);", "type": "InsertBefore", "seed": "this.iterationCount=0;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 196, "faulty": "return (start < mid) && (mid < end);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 196, "faulty": "return (start < mid) && (mid < end);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 196, "faulty": "return (start < mid) && (mid < end);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 107, "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", "type": "InsertBefore", "seed": "this.resultComputed=true;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 196, "faulty": "return (start < mid) && (mid < end);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 103, "faulty": "verifySequence(min,initial,max);", "type": "InsertBefore", "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", "line": 196, "faulty": "return (start < mid) && (mid < end);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 184, "faulty": "throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);", "type": "Delete", "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 120, "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", "type": "Delete", "seed": "double coefficients[]=((PolynomialFunction)f).getCoefficients();"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 176, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(min,0);\n  ret=min;\n}\n else if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);\n}", "type": "InsertBefore", "seed": "double x1=max;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 184, "faulty": "throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);", "type": "InsertBefore", "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(min,0);\n  ret=min;\n}\n else if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 184, "faulty": "throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);", "type": "Replace", "seed": "iterationCount+=this.iterationCount;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 106, "faulty": "double yInitial=f.value(initial);", "type": "InsertBefore", "seed": "double oldx=Double.POSITIVE_INFINITY;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 102, "faulty": "clearResult();", "type": "Delete", "seed": "verifyBracketing(min,max,f);"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 107, "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", "type": "InsertBefore", "seed": "int numIterations=0;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 126, "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", "type": "Replace", "seed": "double x1=max;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 184, "faulty": "throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,min,max,yMin,yMax);", "type": "InsertBefore", "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 114, "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", "type": "Delete", "seed": "if (!resultComputed) {\n  throw MathRuntimeException.createIllegalStateException(\"no result available\");\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 120, "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", "type": "Delete", "seed": "double oldx=Double.POSITIVE_INFINITY;"}]}]}}, {"project": "Math", "bug_id": "73", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 03:22:22.966447", "repair_begin": "2018-11-29 03:21:17.355629", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java\\n@@ -131,11 +131,11 @@\\n \\n \\t\\tif ((yInitial * yMax) < 0) {\\n \\t\\t\\treturn solve(f, initial, yInitial, max, yMax, initial, yInitial);\\n-\\t\\t}\\n+\\t\\t} \\t\\treturn solve(f, min, max);\\n+\\n \\n \\n \\n-\\t\\treturn solve(f, min, yMin, max, yMax, initial, yInitial);\\n \\n \\t}\\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return solve(f, min, yMin, max, yMax, initial, yInitial)", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return solve(f, min, max)", "INGREDIENT_PARENT": "return solve(f, min, max)", "LOCATION": "org.apache.commons.math.analysis.solvers.BrentSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_73\\/.\\/output_astor\\/AstorMain-Math-73\\/\\/src\\/\\/variant-170_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_73\\/output_astor\\/AstorMain-Math-73\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/BrentSolver.java", "LINE": "138", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "85", "VARIANT_ID": "170", "TIME": "32", "VALIDATION": "|true|0|2140|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_73\\/.\\/output_astor\\/AstorMain-Math-73\\/\\/bin\\/\\/variant-170"}]}}, {"project": "Math", "bug_id": "73", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:34:25.058314", "repair_begin": "2018-11-29 04:33:55.348166", "patches": [{"nb_test_that_execute_statement": 5, "patchLocation": {"line": 225, "class": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n@@ -224,6 +224,6 @@\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        if ((!(lower < initial)) || ((org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.this.result <= lower) && (1 == lower))) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n-                    lower, initial, upper);\n+            \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n+            lower, initial, upper);\n         }\n"}]}}, {"project": "Math", "bug_id": "76", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:33:06.982454", "repair_begin": "2018-11-29 04:30:11.177897", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 339, "class": "org.apache.commons.math.random.RandomDataImpl"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n@@ -340,3 +340,3 @@\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"the Poisson mean must be positive ({0})\", mean);\n+            \"the Poisson mean must be positive ({0})\", mean);\n         }\n"}]}}, {"project": "Math", "bug_id": "78", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 06:40:19.647252", "repair_begin": "2018-11-30 04:57:18.429907", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 269, "faulty": "p=r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));", "type": "InsertBefore", "seed": "this.iterationCount=iterationCount;"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 283, "faulty": "oldDelta=delta;", "type": "InsertBefore", "seed": "if (Math.abs(dx) <= tolerance) {\n  setResult(x1,i);\n  return result;\n}"}, {"path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", "line": 282, "faulty": "delta=0.5 * dx;", "type": "InsertBefore", "seed": "if (Math.abs(y2) < Math.abs(y1)) {\n  x0=x1;\n  x1=x2;\n  x2=x0;\n  y0=y1;\n  y1=y2;\n  y2=y0;\n}"}, {"path": "src/main/java/org/apache/commons/math/ode/events/EventState.java", "line": 174, "faulty": "final int n=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));", "type": "InsertBefore", "seed": "final double t0=interpolator.getPreviousTime();"}]}]}}, {"project": "Math", "bug_id": "78", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:26:29.802589", "repair_begin": "2018-11-29 04:25:46.444315", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 282, "class": "org.apache.commons.math.analysis.solvers.BrentSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -281,3 +281,5 @@\n                     // Fall back to bisection.\n-                    delta = 0.5 * dx;\n+                    if (y0 < 1) {\n+                        delta = 0.5 * dx;\n+                    }\n                     oldDelta = delta;\n"}]}}, {"project": "Math", "bug_id": "80", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:11:53.805308", "repair_begin": "2018-12-01 11:57:25.733019", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_331/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:51.619785357 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                squaredSecondary = new double[secondary.length];\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,8 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = 0.0;\n+\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1137, "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", "type": "Replace", "seed": "squaredSecondary=new double[secondary.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1414, "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", "type": "InsertBefore", "seed": "tau=0.0;"}]}]}}, {"project": "Math", "bug_id": "80", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:15:52.154578", "repair_begin": "2018-12-01 16:15:11.763395", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 1139, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1138,3 +1138,5 @@\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n+                    if (false) {\n+                        work[i + k] = work[j - k];\n+                    }\n                     work[j - k] = tmp;\n"}]}}, {"project": "Math", "bug_id": "80", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 05:09:18.480056", "repair_begin": "2018-11-30 04:55:30.653901", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 944, "faulty": "work[i + 2]=-0.0;", "type": "Replace", "seed": "final ArrayRealVector v=eigenvectors[i];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1142, "faulty": "j-=4;", "type": "Delete", "seed": "int j=realEigenvalues.length - 1;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1139, "faulty": "work[i + k]=work[j - k];", "type": "Replace", "seed": "int begin=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "Replace", "seed": "tType=-4;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1384, "faulty": "work[j4]=0.0;", "type": "Delete", "seed": "SparseFieldVector<T> res=(SparseFieldVector<T>)copy();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1387, "faulty": "eMin=0.0;", "type": "Replace", "seed": "if (eigenvectors == null) {\n  findEigenVectors();\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 871, "faulty": "i0=1 + i / 4;", "type": "Replace", "seed": "pingPong=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1407, "faulty": "eMin=0.0;", "type": "Replace", "seed": "j4=j4 + 4;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 871, "faulty": "i0=1 + i / 4;", "type": "Replace", "seed": "pingPong=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1384, "faulty": "work[j4]=0.0;", "type": "Replace", "seed": "work[j4]=0.0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 871, "faulty": "i0=1 + i / 4;", "type": "Delete", "seed": "work[4 * n0 - 2]=offDiagMin;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 945, "faulty": "d=work[i];", "type": "InsertBefore", "seed": "int blockIndex=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1137, "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", "type": "Delete", "seed": "this.eigenvectors=eigenvectors;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1406, "faulty": "dMin=dN;", "type": "Replace", "seed": "tType=-7;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1144, "faulty": "return true;", "type": "InsertBefore", "seed": "cachedD=null;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1415, "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", "type": "Delete", "seed": "dMin=dN;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1138, "faulty": "final double tmp=work[i + k];", "type": "InsertBefore", "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 957, "faulty": "work[i]=-0.0;", "type": "Replace", "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 959, "faulty": "work[j + 2]=0.0;", "type": "Delete", "seed": "List<Number> components=new ArrayList<Number>();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 958, "faulty": "work[j]=d;", "type": "InsertBefore", "seed": "work[i]=-0.0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 958, "faulty": "work[j]=d;", "type": "Delete", "seed": "return new ArrayRealVector(this,true);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 958, "faulty": "work[j]=d;", "type": "Replace", "seed": "dMin=0.0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 958, "faulty": "work[j]=d;", "type": "Delete", "seed": "return new ArrayRealVector(this,true);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "Replace", "seed": "final double s=0.333 * dMin2;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1404, "faulty": "work[j4]=0.0;", "type": "InsertBefore", "seed": "this.realEigenvalues=realEigenvalues;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 959, "faulty": "work[j + 2]=0.0;", "type": "Replace", "seed": "final int m=eigenvectors.length;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1059, "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", "type": "Delete", "seed": "double eCurrent=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1137, "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", "type": "Delete", "seed": "double s=0.25 * dMin;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1387, "faulty": "eMin=0.0;", "type": "Replace", "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1059, "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", "type": "InsertBefore", "seed": "int outIndex=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1105, "faulty": "tau*=0.25;", "type": "InsertBefore", "seed": "int blockIndex=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 957, "faulty": "work[i]=-0.0;", "type": "Delete", "seed": "return walkInColumnOrder(new RealMatrixPreservingVisitor(){\n  /** \n * Last row index. \n */\n  private double endRow;\n  /** \n * Sum of absolute values on one column. \n */\n  private double columnSum;\n  /** \n * Maximal sum across all columns. \n */\n  private double maxColSum;\n  /** \n * {@inheritDoc} \n */\n  public void start(  final int rows,  final int columns,  final int startRow,  final int endRow,  final int startColumn,  final int endColumn){\n    this.endRow=endRow;\n    columnSum=0;\n    maxColSum=0;\n  }\n  /** \n * {@inheritDoc} \n */\n  public void visit(  final int row,  final int column,  final double value){\n    columnSum+=Math.abs(value);\n    if (row == endRow) {\n      maxColSum=Math.max(maxColSum,columnSum);\n      columnSum=0;\n    }\n  }\n  /** \n * {@inheritDoc} \n */\n  public double end(){\n    return maxColSum;\n  }\n}\n);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1404, "faulty": "work[j4]=0.0;", "type": "Delete", "seed": "tau=0.0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 872, "faulty": "break;", "type": "Delete", "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1136, "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", "type": "InsertBefore", "seed": "boolean infiniteFound=false;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1137, "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", "type": "Replace", "seed": "dMin2=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1406, "faulty": "dMin=dN;", "type": "Delete", "seed": "return walkInColumnOrder(new RealMatrixPreservingVisitor(){\n  /** \n * Last row index. \n */\n  private double endRow;\n  /** \n * Sum of absolute values on one column. \n */\n  private double columnSum;\n  /** \n * Maximal sum across all columns. \n */\n  private double maxColSum;\n  /** \n * {@inheritDoc} \n */\n  public void start(  final int rows,  final int columns,  final int startRow,  final int endRow,  final int startColumn,  final int endColumn){\n    this.endRow=endRow;\n    columnSum=0;\n    maxColSum=0;\n  }\n  /** \n * {@inheritDoc} \n */\n  public void visit(  final int row,  final int column,  final double value){\n    columnSum+=Math.abs(value);\n    if (row == endRow) {\n      maxColSum=Math.max(maxColSum,columnSum);\n      columnSum=0;\n    }\n  }\n  /** \n * {@inheritDoc} \n */\n  public double end(){\n    return maxColSum;\n  }\n}\n);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1414, "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", "type": "InsertBefore", "seed": "StringBuffer res=new StringBuffer();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1092, "faulty": "updateSigma(tau);", "type": "InsertBefore", "seed": "double maxColSum=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1140, "faulty": "work[j - k]=tmp;", "type": "Replace", "seed": "final FractionMatrixConverter converter=new FractionMatrixConverter();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1063, "faulty": "dMin=-0.0;", "type": "Replace", "seed": "transformer=null;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1144, "faulty": "return true;", "type": "InsertBefore", "seed": "cachedD=null;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1415, "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", "type": "Delete", "seed": "dMin=dN;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1138, "faulty": "final double tmp=work[i + k];", "type": "InsertBefore", "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1385, "faulty": "dN1=work[j4p2 + 2];", "type": "Delete", "seed": "return new SparseFieldVector<T>(this);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1384, "faulty": "work[j4]=0.0;", "type": "Delete", "seed": "SparseFieldVector<T> res=(SparseFieldVector<T>)copy();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1387, "faulty": "eMin=0.0;", "type": "Replace", "seed": "if (eigenvectors == null) {\n  findEigenVectors();\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 871, "faulty": "i0=1 + i / 4;", "type": "Replace", "seed": "pingPong=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1142, "faulty": "j-=4;", "type": "Delete", "seed": "int j=realEigenvalues.length - 1;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1139, "faulty": "work[i + k]=work[j - k];", "type": "Replace", "seed": "int begin=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1415, "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", "type": "Replace", "seed": "double s=0.25 * dMin;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 957, "faulty": "work[i]=-0.0;", "type": "Replace", "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 959, "faulty": "work[j + 2]=0.0;", "type": "Delete", "seed": "List<Number> components=new ArrayList<Number>();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 958, "faulty": "work[j]=d;", "type": "InsertBefore", "seed": "work[i]=-0.0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 959, "faulty": "work[j + 2]=0.0;", "type": "Replace", "seed": "tau=g * dMin;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1062, "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", "type": "Replace", "seed": "int dimension=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 944, "faulty": "work[i + 2]=-0.0;", "type": "InsertBefore", "seed": "double s=0.25 * dMin;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1387, "faulty": "eMin=0.0;", "type": "InsertBefore", "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN1=work[j4p2 + 2];\n  dMin=dN1;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN1=dN2 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1384, "faulty": "work[j4]=0.0;", "type": "Delete", "seed": "tau=0.5 * dMin1;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 945, "faulty": "d=work[i];", "type": "InsertBefore", "seed": "if (dMin <= 0.0) {\n  tau=-dMin;\n  tType=-1;\n  return;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1407, "faulty": "eMin=0.0;", "type": "Replace", "seed": "dMin=Math.min(dMin,dN);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1106, "faulty": "tType-=12;", "type": "Replace", "seed": "double lower=Double.POSITIVE_INFINITY;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1386, "faulty": "dMin=dN1;", "type": "Delete", "seed": "final int nCols=this.getColumnDimension();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1062, "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", "type": "Delete", "seed": "g=0.25;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1135, "faulty": "int j=4 * n - 1;", "type": "Replace", "seed": "final double relativeTolerance=Math.sqrt(MathUtils.EPSILON);"}]}]}}, {"project": "Math", "bug_id": "80", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 03:12:37.429800", "repair_begin": "2018-11-29 03:05:58.032885", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1136,7 +1136,7 @@\\n \\t\\t\\tfor (int i = 0; i < j; i += 4) {\\n \\t\\t\\t\\tfor (int k = 0; k < 4; k += step) {\\n \\t\\t\\t\\t\\tfinal double tmp = work[(i + k)];\\n-\\t\\t\\t\\t\\twork[(i + k)] = work[(j - k)];\\n+\\n \\t\\t\\t\\t\\twork[(j - k)] = tmp;\\n \\t\\t\\t\\t}\\n \\t\\t\\t\\tj -= 4;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "work[(i + k)] = work[(j - k)]", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/src\\/\\/variant-98_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_80\\/output_astor\\/AstorMain-Math-80\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1139", "MP_RANKING": "17", "SUSPICIOUNESS": "1"}], "GENERATION": "49", "VARIANT_ID": "98", "TIME": "114", "VALIDATION": "|true|0|2102|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_80\\/.\\/output_astor\\/AstorMain-Math-80\\/\\/bin\\/\\/variant-98"}]}}, {"project": "Math", "bug_id": "80", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:12:45.474464", "repair_begin": "2018-11-29 23:10:57.964065", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1137, "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", "type": "InsertReturn true"}]}]}}, {"project": "Math", "bug_id": "80", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:23:15.966880", "repair_begin": "2018-11-29 04:22:42.599668", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 1139, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1138,3 +1138,5 @@\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n+                    if (org.apache.commons.math.linear.EigenDecompositionImpl.this.cachedV!=null) {\n+                        work[i + k] = work[j - k];\n+                    }\n                     work[j - k] = tmp;\n"}]}}, {"project": "Math", "bug_id": "81", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:29:10.558754", "repair_begin": "2018-12-01 11:57:40.506668", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1014/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:33.538486114 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1534,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1543, "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", "type": "Replace", "seed": "if (b2 == 0.0) {\n  break;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1520, "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", "type": "Delete", "seed": "a2=a2 + b2;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1480, "faulty": "a2=0.0;", "type": "Delete", "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"}]}]}}, {"project": "Math", "bug_id": "81", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:15:37.016142", "repair_begin": "2018-12-01 16:15:06.557043", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1544, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1543,3 +1543,5 @@\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    if (false) {\n+                        b2 = work[nn - 13] / work[nn - 15];\n+                    }\n                     a2 = a2 + b2;\n"}]}}, {"project": "Math", "bug_id": "81", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 05:09:15.387878", "repair_begin": "2018-11-30 04:53:56.794286", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1507, "faulty": "b1=b2;", "type": "Replace", "seed": "imagEigenvalues=new double[main.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1474, "faulty": "tType=-4;", "type": "Replace", "seed": "squaredSecondary=new double[secondary.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1622, "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", "type": "Delete", "seed": "tType=-8;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1474, "faulty": "tType=-4;", "type": "Delete", "seed": "computeGershgorinCircles();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1507, "faulty": "b1=b2;", "type": "Replace", "seed": "imagEigenvalues=new double[main.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1474, "faulty": "tType=-4;", "type": "Replace", "seed": "squaredSecondary=new double[secondary.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1101, "faulty": "tType-=11;", "type": "Delete", "seed": "transformToLowerBiDiagonal();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1544, "faulty": "b2=work[nn - 13] / work[nn - 15];", "type": "Delete", "seed": "double absDCurrent=Math.abs(main[0]);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1504, "faulty": "if (b2 == 0.0) {\n  break;\n}", "type": "Delete", "seed": "int outIndex=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1621, "faulty": "tau=0.25 * dMin1;", "type": "Delete", "seed": "double sum2=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1479, "faulty": "gam=dN;", "type": "InsertBefore", "seed": "if (dN > b1) {\n  s=dN - b1;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1513, "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", "type": "Delete", "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1520, "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", "type": "Delete", "seed": "return copy().mapLog1pToSelf();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1479, "faulty": "gam=dN;", "type": "InsertBefore", "seed": "if (dN > b1) {\n  s=dN - b1;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1586, "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", "type": "Replace", "seed": "int ret=322562;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1484, "faulty": "b2=work[nn - 5] / work[nn - 7];", "type": "Delete", "seed": "dMin2=dMin;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1481, "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", "type": "InsertBefore", "seed": "int i0=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1621, "faulty": "tau=0.25 * dMin1;", "type": "Replace", "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1513, "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", "type": "Delete", "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1520, "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", "type": "Delete", "seed": "return copy().mapLog1pToSelf();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1529, "faulty": "tType=-5;", "type": "Delete", "seed": "imagEigenvalues=new double[main.length];"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1544, "faulty": "b2=work[nn - 13] / work[nn - 15];", "type": "Delete", "seed": "double absDCurrent=Math.abs(main[0]);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1504, "faulty": "if (b2 == 0.0) {\n  break;\n}", "type": "Delete", "seed": "int outIndex=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1621, "faulty": "tau=0.25 * dMin1;", "type": "Delete", "seed": "double sum2=0;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1479, "faulty": "gam=dN;", "type": "InsertBefore", "seed": "if (dN > b1) {\n  s=dN - b1;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1513, "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", "type": "Delete", "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1520, "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", "type": "Delete", "seed": "return copy().mapLog1pToSelf();"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1479, "faulty": "gam=dN;", "type": "InsertBefore", "seed": "if (dN > b1) {\n  s=dN - b1;\n}"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1586, "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", "type": "Replace", "seed": "int ret=322562;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1484, "faulty": "b2=work[nn - 5] / work[nn - 7];", "type": "Delete", "seed": "dMin2=dMin;"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1511, "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", "type": "Delete", "seed": "throw new NonSquareMatrixException(getRowDimension(),getColumnDimension());"}, {"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1627, "faulty": "break;", "type": "Delete", "seed": "double trace=0;"}]}]}}, {"project": "Math", "bug_id": "81", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 03:03:43.342983", "repair_begin": "2018-11-29 02:57:23.024504", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java\\n@@ -1523,61 +1523,61 @@\\n \\t\\t\\t\\t\\t\\ttau = s;\\n \\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else \\t\\t\\t\\t\\tif ((dMin) == (dN2)) {\\n+\\t\\t\\t\\t}else {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n-\\t\\t\\t\\t\\t\\ttType = -5;\\n-\\t\\t\\t\\t\\t\\tdouble s = 0.25 * (dMin);\\n \\n \\n-\\t\\t\\t\\t\\t\\tfinal int np = nn - (2 * (pingPong));\\n-\\t\\t\\t\\t\\t\\tdouble b1 = work[(np - 2)];\\n-\\t\\t\\t\\t\\t\\tdouble b2 = work[(np - 6)];\\n-\\t\\t\\t\\t\\t\\tfinal double gam = dN2;\\n-\\t\\t\\t\\t\\t\\tif (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n-\\t\\t\\t\\t\\t\\t\\treturn;\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\tdouble a2 = ((work[(np - 8)]) \\/ b2) * (1 + ((work[(np - 4)]) \\/ b1));\\n \\n \\n-\\t\\t\\t\\t\\t\\tif ((end - start) > 2) {\\n-\\t\\t\\t\\t\\t\\t\\tb2 = (work[(nn - 13)]) \\/ (work[(nn - 15)]);\\n-\\t\\t\\t\\t\\t\\t\\ta2 = a2 + b2;\\n-\\t\\t\\t\\t\\t\\t\\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tif (b2 == 0.0) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t\\tb1 = b2;\\n-\\t\\t\\t\\t\\t\\t\\t\\tif ((work[i4]) > (work[(i4 - 2)])) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t\\tb2 = b2 * ((work[i4]) \\/ (work[(i4 - 2)]));\\n-\\t\\t\\t\\t\\t\\t\\t\\ta2 = a2 + b2;\\n-\\t\\t\\t\\t\\t\\t\\t\\tif (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\ta2 = cnst3 * a2;\\n-\\t\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\t\\tif (a2 < cnst1) {\\n-\\t\\t\\t\\t\\t\\t\\ttau = (gam * (1 - (java.lang.Math.sqrt(a2)))) \\/ (1 + a2);\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\ttau = s;\\n-\\t\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\t}else {\\n \\n \\n-\\t\\t\\t\\t\\t\\tif ((tType) == (-6)) {\\n-\\t\\t\\t\\t\\t\\t\\tg += 0.333 * (1 - (g));\\n-\\t\\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\t\\tif ((tType) == (-18)) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tg = 0.25 * 0.333;\\n-\\t\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\t\\tg = 0.25;\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\ttau = (g) * (dMin);\\n-\\t\\t\\t\\t\\t\\ttType = -6;\\n \\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\tbreak;\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((dMin) == (dN2)) {\\n\\n\\n\\ttType = -5;\\n\\tdouble s = 0.25 * (dMin);\\n\\n\\n\\tfinal int np = nn - (2 * (pingPong));\\n\\tdouble b1 = work[(np - 2)];\\n\\tdouble b2 = work[(np - 6)];\\n\\tfinal double gam = dN2;\\n\\tif (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n\\t\\treturn;\\n\\t}\\n\\tdouble a2 = ((work[(np - 8)]) \\/ b2) * (1 + ((work[(np - 4)]) \\/ b1));\\n\\n\\n\\tif ((end - start) > 2) {\\n\\t\\tb2 = (work[(nn - 13)]) \\/ (work[(nn - 15)]);\\n\\t\\ta2 = a2 + b2;\\n\\t\\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {\\n\\t\\t\\tif (b2 == 0.0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tb1 = b2;\\n\\t\\t\\tif ((work[i4]) > (work[(i4 - 2)])) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tb2 = b2 * ((work[i4]) \\/ (work[(i4 - 2)]));\\n\\t\\t\\ta2 = a2 + b2;\\n\\t\\t\\tif (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ta2 = cnst3 * a2;\\n\\t}\\n\\n\\tif (a2 < cnst1) {\\n\\t\\ttau = (gam * (1 - (java.lang.Math.sqrt(a2)))) \\/ (1 + a2);\\n\\t}else {\\n\\t\\ttau = s;\\n\\t}\\n\\n}else {\\n\\n\\n\\tif ((tType) == (-6)) {\\n\\t\\tg += 0.333 * (1 - (g));\\n\\t}else \\t\\tif ((tType) == (-18)) {\\n\\t\\t\\tg = 0.25 * 0.333;\\n\\t\\t}else {\\n\\t\\t\\tg = 0.25;\\n\\t\\t}\\n\\ttau = (g) * (dMin);\\n\\ttType = -6;\\n\\n}", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.linear.EigenDecompositionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_81\\/.\\/output_astor\\/AstorMain-Math-81\\/\\/src\\/\\/variant-62_f\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_81\\/output_astor\\/AstorMain-Math-81\\/src\\/default\\/org\\/apache\\/commons\\/math\\/linear\\/EigenDecompositionImpl.java", "LINE": "1526", "MP_RANKING": "260", "SUSPICIOUNESS": "0.25"}], "GENERATION": "31", "VARIANT_ID": "62", "TIME": "91", "VALIDATION": "|true|0|2101|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_81\\/.\\/output_astor\\/AstorMain-Math-81\\/\\/bin\\/\\/variant-62"}]}}, {"project": "Math", "bug_id": "81", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:12:32.366835", "repair_begin": "2018-11-29 23:10:46.810837", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", "line": 1543, "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "Math", "bug_id": "81", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:21:18.094307", "repair_begin": "2018-11-29 04:20:42.277545", "patches": [{"nb_test_that_execute_statement": 4, "patchLocation": {"line": 1586, "class": "org.apache.commons.math.linear.EigenDecompositionImpl"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1585,4 +1585,4 @@\n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n+            if (org.apache.commons.math.linear.EigenDecompositionImpl.this.main!=null) {\n+                \n                 // cases 7 and 8.\n@@ -1618,3 +1618,3 @@\n             } else {\n-\n+                \n                 // case 9.\n"}]}}, {"project": "Math", "bug_id": "82", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:57:33.864120", "repair_begin": "2018-12-01 11:45:16.183411", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-01 05:45:05.425613151 -0500\n+++ /tmp/Arja_Defects4J_Math_82/patches_cvr8/Patch_577/patched/tmp/Arja_Defects4J_Math_82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-01 05:51:16.901783845 -0500\n@@ -60,7 +60,6 @@\n         Integer minPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n-                minValue = tableau.getEntry(0, i);\n                 minPos = i;\n             }\n         }\n@@ -77,7 +76,8 @@\n         double minRatio = Double.MAX_VALUE;\n         Integer minRatioPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n+            this.goalType = goalType;\n+\t\t\tfinal double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                 final double ratio = rhs / entry;\n\n\n", "edits": [{"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 80, "faulty": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);", "type": "InsertBefore", "seed": "this.goalType=goalType;"}, {"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 63, "faulty": "minValue=tableau.getEntry(0,i);", "type": "Delete", "seed": "incrementIterationsCounter();"}]}]}}, {"project": "Math", "bug_id": "82", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:16:08.131696", "repair_begin": "2018-12-01 16:14:56.058392", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 63, "class": "org.apache.commons.math.optimization.linear.SimplexSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -62,3 +62,5 @@\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n-                minValue = tableau.getEntry(0, i);\n+                if (false) {\n+                    minValue = tableau.getEntry(0, i);\n+                }\n                 minPos = i;\n"}]}}, {"project": "Math", "bug_id": "82", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 05:07:05.322751", "repair_begin": "2018-11-30 04:53:52.332534", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 63, "faulty": "minValue=tableau.getEntry(0,i);", "type": "Delete", "seed": "return f.getCoefficients().getDimension();"}, {"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 63, "faulty": "minValue=tableau.getEntry(0,i);", "type": "Delete", "seed": "return f.getCoefficients().getDimension();"}, {"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 193, "faulty": "return tableau.getSolution();", "type": "InsertBefore", "seed": "Integer minRatioPos=null;"}, {"path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "line": 169, "faulty": "return;", "type": "Delete", "seed": "for (int i=tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n  if (MathUtils.compareTo(tableau.getEntry(0,i),0,epsilon) < 0) {\n    return false;\n  }\n}"}]}]}}, {"project": "Math", "bug_id": "82", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:58:07.853236", "repair_begin": "2018-11-29 02:56:18.499835", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java\\n@@ -59,10 +59,10 @@\\n \\t\\tdouble minValue = 0;\\n \\t\\tjava.lang.Integer minPos = null;\\n \\t\\tfor (int i = tableau.getNumObjectiveFunctions(); i < ((tableau.getWidth()) - 1); i++) {\\n-\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0)\\n+\\n \\t\\t\\t\\tminPos = i;\\n-\\t\\t\\t}\\n+\\n \\t\\t}\\n \\t\\treturn minPos;\\n \\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "minValue = tableau.getEntry(0, i)", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.optimization.linear.SimplexSolver", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_82\\/.\\/output_astor\\/AstorMain-Math-82\\/\\/src\\/\\/variant-156_f\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_82\\/output_astor\\/AstorMain-Math-82\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/linear\\/SimplexSolver.java", "LINE": "63", "MP_RANKING": "39", "SUSPICIOUNESS": "0.267"}], "GENERATION": "78", "VARIANT_ID": "156", "TIME": "49", "VALIDATION": "|true|0|2056|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_82\\/.\\/output_astor\\/AstorMain-Math-82\\/\\/bin\\/\\/variant-156"}]}}, {"project": "Math", "bug_id": "82", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:23:29.718613", "repair_begin": "2018-11-29 04:19:37.699194", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 63, "class": "org.apache.commons.math.optimization.linear.SimplexSolver"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -62,3 +62,5 @@\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n-                minValue = tableau.getEntry(0, i);\n+                if (org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON == minValue) {\n+                    minValue = tableau.getEntry(0, i);\n+                }\n                 minPos = i;\n"}]}}, {"project": "Math", "bug_id": "84", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 03:04:00.433448", "repair_begin": "2018-11-29 02:51:56.986385", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java\\n+++ org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java\\n@@ -92,7 +92,7 @@\\n \\n \\n \\t\\t\\t\\treturn;\\n-\\t\\t\\t}\\n+\\t\\t\\t} \\t\\t\\treturn;\\n \\n \\t\\t} \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if ((comparator.compare(contracted, best)) < 0) {\\n\\n\\n\\n\\treturn;\\n}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return", "INGREDIENT_PARENT": "return", "LOCATION": "org.apache.commons.math.optimization.direct.MultiDirectional", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_84\\/.\\/output_astor\\/AstorMain-Math-84\\/\\/src\\/\\/variant-1952_f\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_84\\/output_astor\\/AstorMain-Math-84\\/src\\/default\\/org\\/apache\\/commons\\/math\\/optimization\\/direct\\/MultiDirectional.java", "LINE": "90", "MP_RANKING": "6", "SUSPICIOUNESS": "0.707", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "976", "VARIANT_ID": "1952", "TIME": "684", "VALIDATION": "|true|0|2054|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_84\\/.\\/output_astor\\/AstorMain-Math-84\\/\\/bin\\/\\/variant-1952"}]}}, {"project": "Math", "bug_id": "84", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:11:27.139559", "repair_begin": "2018-11-29 23:10:01.460446", "patches": [{"edits": [{"path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", "line": 90, "faulty": "if (comparator.compare(contracted,best) < 0) {\n  return;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Math", "bug_id": "85", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:12:40.022797", "repair_begin": "2018-12-01 11:44:16.452159", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 05:44:06.180110217 -0500\n+++ /tmp/Arja_Defects4J_Math_85/patches_4w3i/Patch_1311/patched/tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\t2018-12-01 06:05:08.776411750 -0500\n@@ -79,7 +79,10 @@\n               \n         // Try to bracket root, test domain endoints if this fails     \n         double lowerBound = getDomainLowerBound(p);\n-        double upperBound = getDomainUpperBound(p);\n+        if (p == 0) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\tdouble upperBound = getDomainUpperBound(p);\n         double[] bracket = null;\n         try {\n             bracket = UnivariateRealSolverUtils.bracket(\n\n\n--- /tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 05:44:06.180110217 -0500\n+++ /tmp/Arja_Defects4J_Math_85/patches_4w3i/Patch_1311/patched/tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2018-12-01 06:05:08.776411750 -0500\n@@ -196,12 +196,10 @@\n                 ((a > lowerBound) || (b < upperBound)));\n    \n         if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            if (function == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function is null\");\n+\t\t\t}\n         }\n         \n         return new double[]{a, b};\n\n\n", "edits": [{"path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java", "line": 82, "faulty": "double upperBound=getDomainUpperBound(p);", "type": "InsertBefore", "seed": "if (p == 0) {\n  return -1;\n}"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Replace", "seed": "if (function == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n}"}]}]}}, {"project": "Math", "bug_id": "85", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:12:53.456480", "repair_begin": "2018-12-01 16:12:31.209700", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 199, "class": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -198,8 +198,10 @@\n         if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            if (false) {\n+                throw new ConvergenceException(\n+                \"number of iterations={0}, maximum iterations={1}, \" +\n+                \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                numIterations, maximumIterations, initial,\n+                lowerBound, upperBound, a, b, fa, fb);\n+            }\n         }\n"}]}}, {"project": "Math", "bug_id": "85", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 05:00:38.894805", "repair_begin": "2018-11-30 04:47:53.134952", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "return new UnivariateRealSolverFactoryImpl();"}, {"path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java", "line": 162, "faulty": "return super.inverseCumulativeProbability(p);", "type": "InsertBefore", "seed": "if (p < 0.0 || p > 1.0) {\n  throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\",p,0.0,1.0);\n}"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "return new UnivariateRealSolverFactoryImpl();"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "return new UnivariateRealSolverFactoryImpl();"}, {"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 162, "faulty": "ret=0.0;", "type": "Replace", "seed": "if (x == 0.0) {\n  ret=0.0;\n}\n else if (a >= 1.0 && x > a) {\n  ret=1.0 - regularizedGammaQ(a,x,epsilon,maxIterations);\n}\n else {\n  double n=0.0;\n  double an=1.0 / a;\n  double sum=an;\n  while (Math.abs(an) > epsilon && n < maxIterations) {\n    n=n + 1.0;\n    an=an * (x / (a + n));\n    sum=sum + an;\n  }\n  if (n >= maxIterations) {\n    throw new MaxIterationsExceededException(maxIterations);\n  }\n else {\n    ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n  }\n}"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "return new UnivariateRealSolverFactoryImpl();"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 186, "faulty": "int numIterations=0;", "type": "InsertBefore", "seed": "fa=function.value(a);"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "return new UnivariateRealSolverFactoryImpl();"}, {"path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java", "line": 162, "faulty": "return super.inverseCumulativeProbability(p);", "type": "InsertBefore", "seed": "if (p < 0.0 || p > 1.0) {\n  throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\",p,0.0,1.0);\n}"}, {"path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java", "line": 162, "faulty": "return super.inverseCumulativeProbability(p);", "type": "InsertBefore", "seed": "if (p < 0.0 || p > 1.0) {\n  throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\",p,0.0,1.0);\n}"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "return new UnivariateRealSolverFactoryImpl();"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete", "seed": "return new UnivariateRealSolverFactoryImpl();"}, {"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 162, "faulty": "ret=0.0;", "type": "Replace", "seed": "if (x == 0.0) {\n  ret=0.0;\n}\n else if (a >= 1.0 && x > a) {\n  ret=1.0 - regularizedGammaQ(a,x,epsilon,maxIterations);\n}\n else {\n  double n=0.0;\n  double an=1.0 / a;\n  double sum=an;\n  while (Math.abs(an) > epsilon && n < maxIterations) {\n    n=n + 1.0;\n    an=an * (x / (a + n));\n    sum=sum + an;\n  }\n  if (n >= maxIterations) {\n    throw new MaxIterationsExceededException(maxIterations);\n  }\n else {\n    ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n  }\n}"}, {"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 162, "faulty": "ret=0.0;", "type": "Replace", "seed": "if (x == 0.0) {\n  ret=0.0;\n}\n else if (a >= 1.0 && x > a) {\n  ret=1.0 - regularizedGammaQ(a,x,epsilon,maxIterations);\n}\n else {\n  double n=0.0;\n  double an=1.0 / a;\n  double sum=an;\n  while (Math.abs(an) > epsilon && n < maxIterations) {\n    n=n + 1.0;\n    an=an * (x / (a + n));\n    sum=sum + an;\n  }\n  if (n >= maxIterations) {\n    throw new MaxIterationsExceededException(maxIterations);\n  }\n else {\n    ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n  }\n}"}, {"path": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "InsertBefore", "seed": "int i=1;"}]}]}}, {"project": "Math", "bug_id": "85", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:49:17.021540", "repair_begin": "2018-11-29 02:48:29.606434", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n+++ org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java\\n@@ -196,12 +196,12 @@\\n \\t\\t((a > lowerBound) || (b < upperBound)) );\\n \\n \\t\\tif ((fa * fb) >= 0.0) {\\n-\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t(\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n-\\t\\t\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n-\\t\\t\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\")), \\n-\\t\\t\\tnumIterations, maximumIterations, initial, \\n-\\t\\t\\tlowerBound, upperBound, a, b, fa, fb);\\n+\\n+\\n+\\n+\\n+\\n+\\n \\t\\t}\\n \\n \\t\\treturn new double[]{ a, b };\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtThrowImpl|CtBlockImpl", "ORIGINAL_CODE": "throw new org.apache.commons.math.ConvergenceException(\\n(\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n\\\"final b value={6}, f(a)={7}, f(b)={8}\\\")), \\nnumIterations, maximumIterations, initial, \\nlowerBound, upperBound, a, b, fa, fb)", "INGREDIENT_SCOPE": "-", "LOCATION": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/src\\/\\/variant-58_f\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_85\\/output_astor\\/AstorMain-Math-85\\/src\\/default\\/org\\/apache\\/commons\\/math\\/analysis\\/solvers\\/UnivariateRealSolverUtils.java", "LINE": "199", "MP_RANKING": "3", "SUSPICIOUNESS": "1"}], "GENERATION": "29", "VARIANT_ID": "58", "TIME": "17", "VALIDATION": "|true|0|1983|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_85\\/.\\/output_astor\\/AstorMain-Math-85\\/\\/bin\\/\\/variant-58"}]}}, {"project": "Math", "bug_id": "85", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:13:20.874213", "repair_begin": "2018-11-29 23:10:07.810799", "patches": [{"edits": [{"path": "", "line": 199, "faulty": "throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);", "type": "Delete /tmp/Kali_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java"}]}]}}, {"project": "Math", "bug_id": "85", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:18:43.028790", "repair_begin": "2018-11-29 04:18:10.631099", "patches": [{"nb_test_that_execute_statement": 17, "patchLocation": {"line": 198, "class": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils"}, "patchType": "CONDITIONAL", "patch": "--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -197,9 +197,9 @@\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (-1 == fb) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            \"number of iterations={0}, maximum iterations={1}, \" +\n+            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+            \"final b value={6}, f(a)={7}, f(b)={8}\",\n+            numIterations, maximumIterations, initial,\n+            lowerBound, upperBound, a, b, fa, fb);\n         }\n"}]}}, {"project": "Math", "bug_id": "87", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:17:24.654117", "repair_begin": "2018-11-29 04:13:36.864211", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 161, "class": "org.apache.commons.math.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -160,4 +160,6 @@\n                     if (!restrictToNonNegative) {\n-                        matrix[row][getSlackVariableOffset() - 1] =\n+                        if (org.apache.commons.math.optimization.linear.SimplexTableau.this.numDecisionVariables < height) {\n+                            matrix[row][getSlackVariableOffset() - 1] =\n                             getInvertedCoeffiecientSum(constraint.getCoefficients());\n+                        }\n                     }\n"}]}}, {"project": "Math", "bug_id": "88", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 04:12:21.033872", "repair_begin": "2018-11-29 04:12:00.109669", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 339, "class": "org.apache.commons.math.optimization.linear.SimplexTableau"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -338,3 +338,5 @@\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                         if ((org.apache.commons.math.optimization.linear.SimplexTableau.this.constraints.size()) != (coefficients.length)) {\n+                             coefficients[i] = 0;\n+                         }\n                     }\n"}]}}, {"project": "Math", "bug_id": "95", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:05:55.220970", "repair_begin": "2018-12-01 11:43:23.042055", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:43:14.723151256 -0500\n+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1310/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2018-12-01 05:59:01.567818650 -0500\n@@ -97,7 +97,11 @@\n      */\n     public double inverseCumulativeProbability(final double p) \n         throws MathException {\n-        if (p == 0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"probability of success must be between 0.0 and 1.0, inclusive.\");\n+\t\t\t}\n+\t\tif (p == 0) {\n             return 0d;\n         }\n         if (p == 1) {\n@@ -145,7 +149,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return denominatorDegreesOfFreedom;\n     }\n     \n     /**\n\n\n", "edits": [{"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return denominatorDegreesOfFreedom;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 100, "faulty": "if (p == 0) {\n  return 0d;\n}", "type": "InsertBefore", "seed": "if (p < 0.0 || p > 1.0) {\n  throw new IllegalArgumentException(\"probability of success must be between 0.0 and 1.0, inclusive.\");\n}"}]}]}}, {"project": "Math", "bug_id": "95", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 04:49:49.015228", "repair_begin": "2018-11-30 04:33:53.527097", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", "line": 179, "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", "type": "Replace", "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 100, "faulty": "if (p == 0) {\n  return 0d;\n}", "type": "InsertBefore", "seed": "setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);"}, {"path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", "line": 179, "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", "type": "Replace", "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"}, {"path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java", "line": 179, "faulty": "throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);", "type": "Replace", "seed": "if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw new IllegalArgumentException(\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \" initial=\"+ initial+ \" upperBound=\"+ upperBound);\n}"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 148, "faulty": "return ret;", "type": "Replace", "seed": "return denominatorDegreesOfFreedom;"}, {"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 100, "faulty": "if (p == 0) {\n  return 0d;\n}", "type": "Delete", "seed": "setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);"}]}]}}, {"project": "Math", "bug_id": "95", "tool": "jGenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 02:10:42.712402", "repair_begin": "2018-11-29 02:09:29.916954", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java\\n+++ org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java\\n@@ -145,8 +145,6 @@\\n \\t\\tdouble d = getDenominatorDegreesOfFreedom();\\n \\n \\t\\tret = d \\/ (d - 2.0);\\n-\\t\\treturn ret;\\n-\\t}\\n \\n \\n \\n@@ -154,20 +152,22 @@\\n \\n \\n \\n-\\tpublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\\n-\\t\\tif (degreesOfFreedom <= 0.0) {\\n-\\t\\t\\tthrow new java.lang.IllegalArgumentException(\\n-\\t\\t\\t\\\"degrees of freedom must be positive.\\\");\\n-\\t\\t}\\n-\\t\\tthis.numeratorDegreesOfFreedom = degreesOfFreedom;\\n-\\t}\\n \\n \\n \\n \\n \\n-\\tpublic double getNumeratorDegreesOfFreedom() {\\n-\\t\\treturn numeratorDegreesOfFreedom;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\treturn numeratorDegreesOfFreedom;} \\tpublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { \\t\\tif (degreesOfFreedom <= 0.0) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"degrees of freedom must be positive.\\\");} \\t\\tthis.numeratorDegreesOfFreedom = degreesOfFreedom;} \\tpublic double getNumeratorDegreesOfFreedom() { \\t\\treturn numeratorDegreesOfFreedom;\\n \\t}\\n \\n \\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl", "ORIGINAL_CODE": "return ret", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return numeratorDegreesOfFreedom", "INGREDIENT_PARENT": "return numeratorDegreesOfFreedom", "LOCATION": "org.apache.commons.math.distribution.FDistributionImpl", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Defects4J_Math_95\\/.\\/output_astor\\/AstorMain-Math-95\\/\\/src\\/\\/variant-206_f\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_Defects4J_Math_95\\/output_astor\\/AstorMain-Math-95\\/src\\/default\\/org\\/apache\\/commons\\/math\\/distribution\\/FDistributionImpl.java", "LINE": "148", "MP_RANKING": "5", "SUSPICIOUNESS": "0.258", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "103", "VARIANT_ID": "206", "TIME": "45", "VALIDATION": "|true|0|1301|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Defects4J_Math_95\\/.\\/output_astor\\/AstorMain-Math-95\\/\\/bin\\/\\/variant-206"}]}}, {"project": "Math", "bug_id": "95", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 23:08:25.420507", "repair_begin": "2018-11-29 23:07:00.813402", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java", "line": 145, "faulty": "double d=getDenominatorDegreesOfFreedom();", "type": "InsertReturn true"}]}]}}, {"project": "Math", "bug_id": "98", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 11:50:37.032909", "repair_begin": "2018-12-01 11:41:39.294742", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\t2018-12-01 05:41:32.402671471 -0500\n+++ /tmp/Arja_Defects4J_Math_98/patches_pldq/Patch_1612/patched/tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\t2018-12-01 05:49:38.749691872 -0500\n@@ -986,13 +986,15 @@\n         if (v.length != this.getColumnDimension()) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n-        final int nRows = this.getRowDimension();\n+        parity = 1;\n+\t\tfinal int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n-        final BigDecimal[] out = new BigDecimal[v.length];\n+        final BigDecimal[] out = new BigDecimal[nRows];\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {\n-                sum = sum.add(data[row][i].multiply(v[i]));\n+                lu = null;\n+\t\t\t\tsum = sum.add(data[row][i].multiply(v[i]));\n             }\n             out[row] = sum;\n         }\n\n\n--- /tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\t2018-12-01 05:41:32.402671471 -0500\n+++ /tmp/Arja_Defects4J_Math_98/patches_pldq/Patch_1612/patched/tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\t2018-12-01 05:49:38.749691872 -0500\n@@ -776,7 +776,7 @@\n         if (v.length != nCols) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n-        final double[] out = new double[v.length];\n+        final double[] out = new double[nRows];\n         for (int row = 0; row < nRows; row++) {\n             final double[] dataRow = data[row];\n             double sum = 0;\n\n\n", "edits": [{"path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java", "line": 989, "faulty": "final int nRows=this.getRowDimension();", "type": "InsertBefore", "seed": "parity=1;"}, {"path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java", "line": 991, "faulty": "final BigDecimal[] out=new BigDecimal[v.length];", "type": "Replace", "seed": "final BigDecimal[] out=new BigDecimal[nRows];"}, {"path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java", "line": 995, "faulty": "sum=sum.add(data[row][i].multiply(v[i]));", "type": "InsertBefore", "seed": "lu=null;"}, {"path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java", "line": 779, "faulty": "final double[] out=new double[v.length];", "type": "Replace", "seed": "final double[] out=new double[nRows];"}]}]}}, {"project": "Math", "bug_id": "103", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 12:11:33.585537", "repair_begin": "2018-12-01 11:42:24.523189", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2018-12-01 05:42:13.764560256 -0500\n+++ /tmp/Arja_Defects4J_Math_103/patches_qdd1/Patch_566/patched/tmp/Arja_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2018-12-01 05:52:49.507820325 -0500\n@@ -158,7 +158,26 @@\n         if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n             ret = Double.NaN;\n         } else if (x == 0.0) {\n-            ret = 0.0;\n+            if (x == 0.0) {\n+\t\t\t\tret = 0.0;\n+\t\t\t} else if (a >= 1.0 && x > a) {\n+\t\t\t\tret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n+\t\t\t} else {\n+\t\t\t\tdouble n = 0.0;\n+\t\t\t\tdouble an = 1.0 / a;\n+\t\t\t\tdouble sum = an;\n+\t\t\t\twhile (Math.abs(an) > epsilon && n < maxIterations) {\n+\t\t\t\t\tn = n + 1.0;\n+\t\t\t\t\tan = an * (x / (a + n));\n+\t\t\t\t\tsum = sum + an;\n+\t\t\t\t}\n+\t\t\t\tif (n >= maxIterations) {\n+\t\t\t\t\tthrow new MaxIterationsExceededException(maxIterations);\n+\t\t\t\t} else {\n+\t\t\t\t\tret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tret = 0.0;\n         } else if (a >= 1.0 && x > a) {\n             // use regularizedGammaQ because it should converge faster in this\n             // case.\n@@ -177,7 +196,7 @@\n                 sum = sum + an;\n             }\n             if (n >= maxIterations) {\n-                throw new MaxIterationsExceededException(maxIterations);\n+                ret = 1.0;\n             } else {\n                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n             }\n\n\n--- /tmp/Arja_Defects4J_Math_103/src/java/org/apache/commons/math/MathException.java\t2018-12-01 05:42:13.740560255 -0500\n+++ /tmp/Arja_Defects4J_Math_103/patches_qdd1/Patch_566/patched/tmp/Arja_Defects4J_Math_103/src/java/org/apache/commons/math/MathException.java\t2018-12-01 05:52:49.511820301 -0500\n@@ -262,7 +262,11 @@\n      * @param out  the <code>PrintWriter</code> to use for output\n      */\n     public void printStackTrace(PrintWriter out) {\n-        synchronized (out) {\n+        if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n+\t\t\tout.print(\"Caused by: \");\n+\t\t\trootCause.printStackTrace(out);\n+\t\t}\n+\t\tsynchronized (out) {\n             super.printStackTrace(out);\n             if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n                 out.print(\"Caused by: \");\n\n\n", "edits": [{"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 161, "faulty": "ret=0.0;", "type": "InsertBefore", "seed": "if (x == 0.0) {\n  ret=0.0;\n}\n else if (a >= 1.0 && x > a) {\n  ret=1.0 - regularizedGammaQ(a,x,epsilon,maxIterations);\n}\n else {\n  double n=0.0;\n  double an=1.0 / a;\n  double sum=an;\n  while (Math.abs(an) > epsilon && n < maxIterations) {\n    n=n + 1.0;\n    an=an * (x / (a + n));\n    sum=sum + an;\n  }\n  if (n >= maxIterations) {\n    throw new MaxIterationsExceededException(maxIterations);\n  }\n else {\n    ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n  }\n}"}, {"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 180, "faulty": "throw new MaxIterationsExceededException(maxIterations);", "type": "Replace", "seed": "ret=1.0;"}, {"path": "src/java/org/apache/commons/math/MathException.java", "line": 265, "faulty": "synchronized (out) {\n  super.printStackTrace(out);\n  if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n    out.print(\"Caused by: \");\n    rootCause.printStackTrace(out);\n  }\n}", "type": "InsertBefore", "seed": "if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n  out.print(\"Caused by: \");\n  rootCause.printStackTrace(out);\n}"}]}]}}, {"project": "Math", "bug_id": "103", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 04:52:22.158730", "repair_begin": "2018-11-30 04:29:25.661808", "patches": [{"edits": [{"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 161, "faulty": "ret=0.0;", "type": "InsertBefore", "seed": "if (x == 0.0) {\n  ret=0.0;\n}\n else if (a >= 1.0 && x > a) {\n  ret=1.0 - regularizedGammaQ(a,x,epsilon,maxIterations);\n}\n else {\n  double n=0.0;\n  double an=1.0 / a;\n  double sum=an;\n  while (Math.abs(an) > epsilon && n < maxIterations) {\n    n=n + 1.0;\n    an=an * (x / (a + n));\n    sum=sum + an;\n  }\n  if (n >= maxIterations) {\n    throw new MaxIterationsExceededException(maxIterations);\n  }\n else {\n    ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n  }\n}"}, {"path": "src/java/org/apache/commons/math/MathException.java", "line": 267, "faulty": "if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n  out.print(\"Caused by: \");\n  rootCause.printStackTrace(out);\n}", "type": "InsertBefore", "seed": "super.printStackTrace(out);"}, {"path": "src/java/org/apache/commons/math/special/Gamma.java", "line": 180, "faulty": "throw new MaxIterationsExceededException(maxIterations);", "type": "Replace", "seed": "ret=1.0;"}]}]}}, {"project": "Math", "bug_id": "105", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 16:10:47.363713", "repair_begin": "2018-12-01 16:07:16.634348", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 107, "class": "org.apache.commons.math.stat.regression.SimpleRegression"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -106,3 +106,5 @@\n         if (n == 0) {\n-            xbar = x;\n+            if ((x <= 1) || (y <= x)) {\n+                xbar = x;\n+            }\n             ybar = y;\n"}]}}, {"project": "Math", "bug_id": "105", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 03:42:22.744726", "repair_begin": "2018-11-29 03:41:51.117676", "patches": [{"nb_test_that_execute_statement": 9, "patchLocation": {"line": 108, "class": "org.apache.commons.math.stat.regression.SimpleRegression"}, "patchType": "PRECONDITION", "patch": "--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -107,3 +107,5 @@\n             xbar = x;\n-            ybar = y;\n+            if (y <= x) {\n+                ybar = y;\n+            }\n         } else {\n"}]}}, {"project": "Mockito", "bug_id": "8", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 01:39:18.499387", "repair_begin": "2018-11-29 01:37:32.305914", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 377, "class": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType"}, "patchType": "PRECONDITION", "patch": "--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,3 +376,5 @@\n             for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n+                if (false) {\n+                    registerTypeVariablesOn(type);\n+                }\n             }\n"}]}}, {"project": "Mockito", "bug_id": "10", "tool": "Arja", "benchmark": "Defects4J", "result": {"repair_end": "2018-12-01 15:02:12.531330", "repair_begin": "2018-12-01 14:43:00.115970", "patches": [{"diff": "--- /tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/util/MockCreationValidator.java\t2018-12-01 08:41:42.641290161 -0500\n+++ /tmp/Arja_Defects4J_Mockito_10/patches_jed8/Patch_2485/patched/tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/util/MockCreationValidator.java\t2018-12-01 08:59:37.154211887 -0500\n@@ -60,7 +60,6 @@\n                 && !(Serializable.class.isAssignableFrom(classToMock))\n                 && Constructors.noArgConstructorOf(classToMock) == null\n                 ) {\n-            new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);\n         }\n     }\n }\n\\ No newline at end of file\n\n\n", "edits": [{"path": "src/org/mockito/internal/util/MockCreationValidator.java", "line": 63, "faulty": "new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);", "type": "Delete", "seed": "NULL"}]}]}}, {"project": "Mockito", "bug_id": "29", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 04:23:53.767560", "repair_begin": "2018-11-30 04:06:28.040836", "patches": [{"edits": [{"path": "src/org/mockito/internal/matchers/Same.java", "line": 29, "faulty": "description.appendText(wanted.toString());", "type": "Delete", "seed": "return this;"}, {"path": "src/org/mockito/Matchers.java", "line": 525, "faulty": "return (T)reportMatcher(new Same(value)).<T>returnFor(value);", "type": "InsertBefore", "seed": "boolean alreadyAssigned=false;"}]}]}}, {"project": "Mockito", "bug_id": "34", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:01:52.438732", "repair_begin": "2018-11-29 00:01:18.929980", "patches": [{"nb_test_that_execute_statement": 115, "patchLocation": {"line": 107, "class": "org.mockito.internal.invocation.InvocationMatcher"}, "patchType": "PRECONDITION", "patch": "--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -106,3 +106,5 @@\n             if (m instanceof CapturesArguments) {\n-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n+                if (i.getArgumentsCount() != 0) {\n+                    ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n+                }\n             }\n"}]}}, {"project": "Mockito", "bug_id": "38", "tool": "GenProg", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-30 03:53:17.278296", "repair_begin": "2018-11-30 03:52:46.290541", "patches": [{"edits": [{"path": "src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java", "line": 27, "faulty": "for (Matcher m : matchers) {\n  if (m instanceof ContainsExtraTypeInformation && !safelyMatches(m,arguments[i]) && toStringEquals(m,arguments[i])&& !((ContainsExtraTypeInformation)m).typeMatches(arguments[i])) {\n    suspicious.add(i);\n  }\n  i++;\n}", "type": "Replace", "seed": "if (matchers.size() != arguments.length) {\n  return new Integer[0];\n}"}]}]}}, {"project": "Mockito", "bug_id": "38", "tool": "Kali", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 22:10:34.648738", "repair_begin": "2018-11-29 22:09:58.805412", "patches": [{"edits": [{"path": "src/org/mockito/internal/matchers/Equals.java", "line": 20, "faulty": "if (this.wanted == null) {\n  return actual == null;\n}", "type": "RedirectBranch true"}]}]}}, {"project": "Time", "bug_id": "11", "tool": "DynaMoth", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 07:50:36.042080", "repair_begin": "2018-11-29 06:52:37.609126", "patches": [{"nb_test_that_execute_statement": 3, "patchLocation": {"line": 1460, "class": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n@@ -1459,5 +1459,7 @@\n                     .equals(tailZone.iEndRecurrence.getNameKey())) {\n-                    if (ZoneInfoCompiler.verbose()) {\n-                        System.out.println(\"Fixing duplicate recurrent name key - \" +\n-                                           tailZone.iStartRecurrence.getNameKey());\n+                    if (false) {\n+                        if (ZoneInfoCompiler.verbose()) {\n+                            System.out.println(\"Fixing duplicate recurrent name key - \" +\n+                            tailZone.iStartRecurrence.getNameKey());\n+                        }\n                     }\n"}]}}, {"project": "Time", "bug_id": "14", "tool": "Nopol", "benchmark": "Defects4J", "result": {"repair_end": "2018-11-29 00:10:02.079952", "repair_begin": "2018-11-29 00:08:38.178369", "patches": [{"nb_test_that_execute_statement": 63, "patchLocation": {"line": 210, "class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -209,3 +209,3 @@\n             // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        if ((org.joda.time.chrono.BasicMonthOfYearDateTimeField.MIN <= fieldIndex) || ((!(1 == valueToAdd)) && ((valueToAdd) != (-1)))) {\n             long instant = 0L;\n"}]}}, {"project": "digits", "bug_id": "6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_004", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 09:34:30.589633", "repair_begin": "2018-11-29 09:34:20.794303", "patches": [{"nb_test_that_execute_statement": 15, "patchLocation": {"line": 71, "class": "introclassJava.digits_6e464f2b_004"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/digits_6e464f2b_004.java\n+++ b/src/main/java/introclassJava/digits_6e464f2b_004.java\n@@ -70,3 +70,3 @@\n             i.value = i.value / 10;\n-            if (n.value < 0 && i.value == 0) {\n+            if (((introclassJava.digits_6e464f2b_004.this.scanner!=null) && (!(((n.value) < 0)))) || (((i.value) == 0))) {\n                 output += (String.format (\"%d\\n\", j.value));\n"}]}}, {"project": "digits", "bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:49:10.877452", "repair_begin": "2018-11-28 15:36:32.812033", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 66, "faulty": "if (number.value < 0) {\n  number.value=number.value * -1;\n  state.value=-1;\n}", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "output+=(String.format(\"\\nEnter an integer > \"));"}]}]}}, {"project": "digits", "bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "DynaMoth", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:00:16.318678", "repair_begin": "2018-11-28 16:00:09.723548", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.digits_c5d8f924_003"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/digits_c5d8f924_003.java\n+++ b/src/main/java/introclassJava/digits_c5d8f924_003.java\n@@ -75,3 +75,5 @@\n             number.value = number.value / 10;\n-            i.value++;\n+            if (false) {\n+                i.value++;\n+            }\n             if (number.value == 0) {\n"}]}}, {"project": "digits", "bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "GenProg", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:24:13.567336", "repair_begin": "2018-11-28 16:12:49.553210", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "store.value=number.value * state.value;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "store.value=number.value * state.value;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "store.value=number.value * state.value;"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 77, "faulty": "if (number.value == 0) {\n  output+=(String.format(\"That's all, have a nice day!\\n\"));\n  break;\n}", "type": "InsertBefore", "seed": "if (number.value < 0) {\n  number.value=number.value * -1;\n  state.value=-1;\n}"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 66, "faulty": "if (number.value < 0) {\n  number.value=number.value * -1;\n  state.value=-1;\n}", "type": "InsertBefore", "seed": "output+=(String.format(\"\\n\"));"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 83, "faulty": "return;", "type": "InsertBefore", "seed": "if (number.value <= 9) {\n  store.value=number.value * state.value;\n}"}]}]}}, {"project": "digits", "bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "Kali", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:03:48.427066", "repair_begin": "2018-11-28 16:03:31.194484", "patches": [{"edits": [{"path": "", "line": 76, "faulty": "i.value++;", "type": "Delete /tmp/Kali_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003/src/main/java/introclassJava/digits_c5d8f924_003.java"}]}]}}, {"project": "digits", "bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 09:28:01.521353", "repair_begin": "2018-11-29 09:27:55.010694", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.digits_c5d8f924_003"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/digits_c5d8f924_003.java\n+++ b/src/main/java/introclassJava/digits_c5d8f924_003.java\n@@ -75,3 +75,5 @@\n             number.value = number.value / 10;\n-            i.value++;\n+            if (introclassJava.digits_c5d8f924_003.this.scanner.hasNext()) {\n+                i.value++;\n+            }\n             if (number.value == 0) {\n"}]}}, {"project": "digits", "bug_id": "c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4_003", "tool": "RSRepair", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:59:07.356591", "repair_begin": "2018-11-28 16:50:56.466143", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 76, "faulty": "i.value++;", "type": "Delete", "seed": "output+=(String.format(\"\\nEnter an integer > \"));"}, {"path": "src/main/java/introclassJava/digits_c5d8f924_003.java", "line": 83, "faulty": ";", "type": "Replace", "seed": "store.value=number.value * state.value;"}]}]}}, {"project": "digits", "bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:43:54.133824", "repair_begin": "2018-11-28 15:36:14.458322", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 63, "faulty": "digit.value=Math.abs(num.value) % 10;", "type": "Delete", "seed": "output+=(String.format(\"\\n%d\",digit.value));"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 83, "faulty": "if (num.value >= 0) {\n  while (num.value != digit.value) {\n    digit.value=num.value % 10;\n    output+=(String.format(\"\\n%d\",digit.value));\n    num.value=(num.value - digit.value) / 10;\n    if (num.value == 0) {\n      break;\n    }\n    if (num.value == digit.value) {\n      output+=(String.format(\"\\n%d\",num.value));\n    }\n  }\n}", "type": "InsertBefore", "seed": ";"}]}]}}, {"project": "digits", "bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "DynaMoth", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:00:16.840736", "repair_begin": "2018-11-28 16:00:09.379404", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 63, "class": "introclassJava.digits_d5059e2b_000"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/digits_d5059e2b_000.java\n+++ b/src/main/java/introclassJava/digits_d5059e2b_000.java\n@@ -62,3 +62,5 @@\n         num.value = scanner.nextInt ();\n-        digit.value = Math.abs (num.value) % 10;\n+        if (false) {\n+            digit.value = Math.abs (num.value) % 10;\n+        }\n         if (num.value < 0) {\n"}]}}, {"project": "digits", "bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "GenProg", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:20:54.221698", "repair_begin": "2018-11-28 16:12:37.551468", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 63, "faulty": "digit.value=Math.abs(num.value) % 10;", "type": "Delete", "seed": "IntObj num=new IntObj(), digit=new IntObj();"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 63, "faulty": "digit.value=Math.abs(num.value) % 10;", "type": "Delete", "seed": "IntObj num=new IntObj(), digit=new IntObj();"}, {"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 62, "faulty": "num.value=scanner.nextInt();", "type": "InsertBefore", "seed": ";"}]}]}}, {"project": "digits", "bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "Kali", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:03:45.364698", "repair_begin": "2018-11-28 16:03:30.589847", "patches": [{"edits": [{"path": "", "line": 63, "faulty": "digit.value=Math.abs(num.value) % 10;", "type": "Delete /tmp/Kali_IntroClassJava_digits_d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000/src/main/java/introclassJava/digits_d5059e2b_000.java"}]}]}}, {"project": "digits", "bug_id": "d5059e2b1493f91b32bb0c2c846d8461c50356f709a91792b6b625e112675de4edac2a09fa627d58c4651c662bbcf2c477660469b9327ed9427b43c25e4e070c_000", "tool": "RSRepair", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 17:11:18.701205", "repair_begin": "2018-11-28 17:02:49.058080", "patches": [{"edits": [{"path": "src/main/java/introclassJava/digits_d5059e2b_000.java", "line": 83, "faulty": "if (num.value >= 0) {\n  while (num.value != digit.value) {\n    digit.value=num.value % 10;\n    output+=(String.format(\"\\n%d\",digit.value));\n    num.value=(num.value - digit.value) / 10;\n    if (num.value == 0) {\n      break;\n    }\n    if (num.value == digit.value) {\n      output+=(String.format(\"\\n%d\",num.value));\n    }\n  }\n}", "type": "InsertBefore", "seed": "if (num.value == digit.value) {\n  output+=(String.format(\"\\n%d\",num.value));\n}"}]}]}}, {"project": "grade", "bug_id": "b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_001", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:29:39.080399", "repair_begin": "2018-11-29 08:29:28.695799", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 74, "class": "introclassJava.grade_b1924d63_001"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/grade_b1924d63_001.java\n+++ b/src/main/java/introclassJava/grade_b1924d63_001.java\n@@ -73,3 +73,3 @@\n             output += (String.format (\"Student has an A grade\\n\"));\n-        } else if ((score.value >= b.value) && (score.value > a.value)) {\n+        } else if (((score.value) >= (b.value))) {\n             output += (String.format (\"Student has an B grade\\n\"));\n"}]}}, {"project": "grade", "bug_id": "b1924d63a2e25b7c8d9a794093c4ae97fdceec9e0ea46b6a4b02d9a18b9ba9cecf07cb0c42c264a0947aec22b0bacff788a547a8250c2265f601581ab545bf82_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:29:25.159839", "repair_begin": "2018-11-29 08:29:17.640598", "patches": [{"nb_test_that_execute_statement": 14, "patchLocation": {"line": 74, "class": "introclassJava.grade_b1924d63_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/grade_b1924d63_003.java\n+++ b/src/main/java/introclassJava/grade_b1924d63_003.java\n@@ -73,3 +73,3 @@\n             output += (String.format (\"Student has an A grade\\n\"));\n-        } else if ((score.value >= b.value) && (score.value > a.value)) {\n+        } else if (((score.value) >= (b.value))) {\n             output += (String.format (\"Student has an B grade\\n\"));\n"}]}}, {"project": "median", "bug_id": "0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:43:41.661038", "repair_begin": "2018-11-28 15:36:11.626304", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 67, "faulty": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 77, "faulty": "output+=(String.format(\"%d is the median\\n\",median.value));", "type": "InsertBefore", "seed": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}"}]}]}}, {"project": "median", "bug_id": "0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003", "tool": "GenProg", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:20:28.900833", "repair_begin": "2018-11-28 16:12:44.523298", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 71, "faulty": "if ((b.value >= a.value && b.value <= c.value) || (b.value >= c.value && b.value <= a.value)) {\n  median.value=b.value;\n}\n else {\n  median.value=c.value;\n}", "type": "InsertBefore", "seed": "median.value=c.value;"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 79, "faulty": ";", "type": "InsertBefore", "seed": "median.value=c.value;"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 62, "faulty": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 69, "faulty": "median.value=a.value;", "type": "Delete", "seed": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 65, "faulty": "b.value=scanner.nextInt();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 75, "faulty": "median.value=c.value;", "type": "Delete", "seed": "a.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 71, "faulty": "if ((b.value >= a.value && b.value <= c.value) || (b.value >= c.value && b.value <= a.value)) {\n  median.value=b.value;\n}\n else {\n  median.value=c.value;\n}", "type": "InsertBefore", "seed": "median.value=c.value;"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 71, "faulty": "if ((b.value >= a.value && b.value <= c.value) || (b.value >= c.value && b.value <= a.value)) {\n  median.value=b.value;\n}\n else {\n  median.value=c.value;\n}", "type": "InsertBefore", "seed": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 75, "faulty": "median.value=c.value;", "type": "Delete", "seed": "output+=(String.format(\"%d is the median\\n\",median.value));"}, {"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 66, "faulty": "c.value=scanner.nextInt();", "type": "Replace", "seed": "c.value=scanner.nextInt();"}]}]}}, {"project": "median", "bug_id": "0cdfa335eea3c612e6fa3ad261276b0c3ebbc6ff0ff13c20bdc249bad29a8037ca6dc887dd28558964e1e1a24f47c4cffc05adba525285dc8b93660cdf9b8b7c_003", "tool": "RSRepair", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 17:28:11.563713", "repair_begin": "2018-11-28 17:20:47.447521", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_0cdfa335_003.java", "line": 77, "faulty": "output+=(String.format(\"%d is the median\\n\",median.value));", "type": "InsertBefore", "seed": "if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n  median.value=a.value;\n}"}]}]}}, {"project": "median", "bug_id": "0cea42f9680f35f5a84c724c396d4d588b65c303453f9585562f2e2af8db74f5096a83a70b17c5126538222b111a0795a34e9fb6db95d62d771d01592abe3ff6_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 09:05:10.811343", "repair_begin": "2018-11-29 09:04:55.114737", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 66, "class": "introclassJava.median_0cea42f9_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_0cea42f9_003.java\n+++ b/src/main/java/introclassJava/median_0cea42f9_003.java\n@@ -65,10 +65,9 @@\n         c.value = scanner.nextInt ();\n-        if (((a.value > b.value) && (a.value < c.value))\n-                || ((a.value < b.value) && (a.value > c.value))) {\n+        if (!(((((a.value) < (b.value))) && (((a.value) < (c.value)))) || ((((a.value) > (c.value))) && (((a.value) > (b.value)))))) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if (((b.value > a.value) && (b.value < c.value))\n-                   || ((b.value < a.value) && (b.value > c.value))) {\n+        || ((b.value < a.value) && (b.value > c.value))) {\n             output += (String.format (\"%d is the median\\n\", b.value));\n         } else if (((c.value > a.value) && (c.value < b.value))\n-                   || ((c.value < a.value) && (c.value > b.value))) {\n+        || ((c.value < a.value) && (c.value > b.value))) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n"}]}}, {"project": "median", "bug_id": "1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_000", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:41:23.300514", "repair_begin": "2018-11-29 08:41:07.152263", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 66, "class": "introclassJava.median_1b31fa5c_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_1b31fa5c_000.java\n+++ b/src/main/java/introclassJava/median_1b31fa5c_000.java\n@@ -65,17 +65,16 @@\n         num3.value = scanner.nextInt ();\n-        if ((((num1.value > num2.value) && (num1.value < num3.value)))\n-                || ((num1.value > num3.value) && (num1.value < num2.value))) {\n+        if (((!(((num1.value) > (num2.value)))) && (!((((num1.value) < (num2.value))) && (((num1.value) < (num3.value)))))) || ((((num1.value) > (num2.value)) && ((num1.value) < (num3.value))))) {\n             output += (String.format (\"%d is the median\\n\", num1.value));\n             if (true)\n-                return;;\n+            return;;\n         } else if ((((num2.value > num1.value) && (num2.value < num3.value)))\n-                   || ((num2.value > num3.value) && (num2.value < num1.value))) {\n+        || ((num2.value > num3.value) && (num2.value < num1.value))) {\n             output += (String.format (\"%d is the median\\n\", num2.value));\n             if (true)\n-                return;;\n+            return;;\n         } else if ((((num3.value > num2.value) && (num3.value < num1.value)))\n-                   || ((num3.value > num1.value) && (num3.value < num2.value))) {\n+        || ((num3.value > num1.value) && (num3.value < num2.value))) {\n             output += (String.format (\"%d is the median\\n\", num3.value));\n             if (true)\n-                return;;\n+            return;;\n         }\n"}]}}, {"project": "median", "bug_id": "1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:43:40.143193", "repair_begin": "2018-11-28 15:36:12.278834", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_1bf73a9c_003.java", "line": 64, "faulty": "first.value=scanner.nextInt();", "type": "InsertBefore", "seed": "third.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_1bf73a9c_003.java", "line": 66, "faulty": "third.value=scanner.nextInt();", "type": "Replace", "seed": "ans.value=third.value;"}]}]}}, {"project": "median", "bug_id": "1bf73a9ca02e8d64fd54aaf8de9ad5d029ebfff775224c3f5b010db80793ea8698863524436d122a100abc08c3486a795eb1caf39f78fc55d3948124861669ac_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:42:44.548301", "repair_begin": "2018-11-29 08:42:21.466497", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 70, "class": "introclassJava.median_1bf73a9c_003"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/median_1bf73a9c_003.java\n+++ b/src/main/java/introclassJava/median_1bf73a9c_003.java\n@@ -69,7 +69,11 @@\n             ans.value = first.value;\n-        } else if ((second.value > first.value && second.value < third.value)\n-                   || (second.value > third.value && second.value < first.value)) {\n-            ans.value = second.value;\n         } else {\n-            ans.value = third.value;\n+            if ((!(((second.value) < (third.value)))) || ((((second.value) > (first.value))) || (((second.value) < (first.value))))) {\n+                if ((second.value > first.value && second.value < third.value)\n+                || (second.value > third.value && second.value < first.value)) {\n+                    ans.value = second.value;\n+                } else {\n+                    ans.value = third.value;\n+                }\n+            }\n         }\n"}]}}, {"project": "median", "bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:52:29.585919", "repair_begin": "2018-11-29 08:52:23.224195", "patches": [{"nb_test_that_execute_statement": 6, "patchLocation": {"line": 80, "class": "introclassJava.median_3b2376ab_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_3b2376ab_003.java\n+++ b/src/main/java/introclassJava/median_3b2376ab_003.java\n@@ -79,3 +79,3 @@\n                 output += (String.format (\"%d is the median\\n\", n2.value));\n-            } else if (n3.value > n1.value) {\n+            } else if (!((n3.value) > (n1.value))) {\n                 output += (String.format (\"%d is the median\\n\", n3.value));\n"}]}}, {"project": "median", "bug_id": "3cf6d33ab0357953aa5826c67dc74c4aa483f16ef04c973a68d58cda6f19ea712954b24f366f880b9c18b628c6605eabc4d3e80dc4aa120fac80fe680e2e708f_007", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:52:06.945333", "repair_begin": "2018-11-29 08:51:52.450191", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 69, "class": "introclassJava.median_3cf6d33a_007"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_3cf6d33a_007.java\n+++ b/src/main/java/introclassJava/median_3cf6d33a_007.java\n@@ -68,7 +68,6 @@\n             output += (String.format (\"%d is the median\\n\", b.value));\n-        } else if ((b.value > a.value && a.value > c.value)\n-                   || (c.value > a.value && a.value > b.value)) {\n+        } else if ((introclassJava.median_3cf6d33a_007.this.output.length()==0) || (!(((((c.value) > (a.value))) && (((b.value) > (a.value)))) || ((((a.value) > (b.value))) && (((a.value) > (c.value))))))) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if ((a.value > c.value && c.value > b.value)\n-                   || (b.value > c.value && c.value > a.value)) {\n+        || (b.value > c.value && c.value > a.value)) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n"}]}}, {"project": "median", "bug_id": "6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:43:42.774103", "repair_begin": "2018-11-28 15:36:15.450560", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_6aaeaf2f_000.java", "line": 62, "faulty": "output+=(String.format(\"Please enter 3 numbers separated by spaces > \"));", "type": "InsertBefore", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/median_6aaeaf2f_000.java", "line": 66, "faulty": "c.value=scanner.nextInt();", "type": "Replace", "seed": "median.value=a.value;"}]}]}}, {"project": "median", "bug_id": "6aaeaf2ffb623b5736c0c0b9e8a1a3b080e8aef14d963d899eb3e4073245ad1171e26fb2a64fb88db6e40aa59e894a55eac832e38d444755cb3b6ad10ba74c62_000", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:55:37.353037", "repair_begin": "2018-11-29 08:55:02.666353", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 70, "class": "introclassJava.median_6aaeaf2f_000"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/median_6aaeaf2f_000.java\n+++ b/src/main/java/introclassJava/median_6aaeaf2f_000.java\n@@ -69,7 +69,11 @@\n             median.value = a.value;\n-        } else if (((b.value > a.value) && (c.value > b.value))\n-                   || ((b.value < a.value) && (b.value > c.value))) {\n-            median.value = b.value;\n         } else {\n-            median.value = c.value;\n+            if ((!(((!((((b.value) > (a.value))) || (((b.value) < (a.value))))) && (((c.value) > (b.value)))) || (1 == introclassJava.median_6aaeaf2f_000.this.output.length()))) && (a!=null)) {\n+                if (((b.value > a.value) && (c.value > b.value))\n+                || ((b.value < a.value) && (b.value > c.value))) {\n+                    median.value = b.value;\n+                } else {\n+                    median.value = c.value;\n+                }\n+            }\n         }\n"}]}}, {"project": "median", "bug_id": "6e464f2b5ba1d5ad3d4fc366e7d7712b424aabd8b41ca36257115a16416d202feb27397a413d04944c9ac76976fa8ff8ae646144855e08791ebf9593d1caaaca_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:49:03.832215", "repair_begin": "2018-11-29 08:48:54.601712", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 69, "class": "introclassJava.median_6e464f2b_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_6e464f2b_003.java\n+++ b/src/main/java/introclassJava/median_6e464f2b_003.java\n@@ -68,4 +68,3 @@\n             output += (String.format (\"%d is the median\\n\", a.value));\n-        } else if ((b.value > a.value && b.value < c.value)\n-                   || (b.value < a.value && b.value > c.value)) {\n+        } else if (((((b.value) < (a.value)) && ((b.value) > (c.value)))) || ((!(((b.value) < (a.value)))) && (((b.value) < (c.value))))) {\n             output += (String.format (\"%d is the median\\n\", b.value));\n"}]}}, {"project": "median", "bug_id": "36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_000", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:44:35.773500", "repair_begin": "2018-11-29 08:44:09.667630", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 70, "class": "introclassJava.median_36d8008b_000"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/median_36d8008b_000.java\n+++ b/src/main/java/introclassJava/median_36d8008b_000.java\n@@ -69,7 +69,11 @@\n             d.value = a.value;\n-        } else if (b.value > a.value && b.value < c.value || b.value < a.value\n-                   && b.value > c.value) {\n-            d.value = b.value;\n         } else {\n-            d.value = c.value;\n+            if ((((((b.value) > (a.value)) && ((b.value) < (c.value))) || (((b.value) < (a.value)) && ((b.value) > (c.value)))) && ((((b.value) > (a.value)) && ((b.value) < (c.value))))) || ((!(((b.value) < (c.value)))) || (((b.value) < (a.value))))) {\n+                if (b.value > a.value && b.value < c.value || b.value < a.value\n+                && b.value > c.value) {\n+                    d.value = b.value;\n+                } else {\n+                    d.value = c.value;\n+                }\n+            }\n         }\n"}]}}, {"project": "median", "bug_id": "89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010", "tool": "GenProg", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:20:27.755971", "repair_begin": "2018-11-28 16:12:36.858775", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 65, "faulty": "b.value=scanner.nextInt();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 76, "faulty": "m.value=b.value;", "type": "InsertBefore", "seed": "m.value=a.value;"}, {"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 76, "faulty": "m.value=b.value;", "type": "Delete", "seed": "if (c.value == a.value || c.value == b.value) {\n  m.value=c.value;\n}\n else {\n  if ((a.value >= b.value && a.value <= c.value) || (a.value >= c.value && a.value <= b.value)) {\n    m.value=b.value;\n  }\n else   if ((b.value >= a.value && b.value <= c.value) || (b.value >= c.value && b.value <= a.value)) {\n    m.value=b.value;\n  }\n else   if ((c.value >= a.value && c.value <= b.value) || (c.value >= b.value && c.value <= a.value)) {\n    m.value=c.value;\n  }\n}"}, {"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 87, "faulty": ";", "type": "Delete", "seed": ";"}, {"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 87, "faulty": ";", "type": "InsertBefore", "seed": "m.value=c.value;"}]}]}}, {"project": "median", "bug_id": "89b1a701f92f7e190fd4caf2ad32365f2c9261790b9a33967efd0bfb4d047c721db673225a01819900d542401a0b95d29db7ff0d8548087faabd4230f896474f_010", "tool": "RSRepair", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 17:22:53.998022", "repair_begin": "2018-11-28 17:15:21.499032", "patches": [{"edits": [{"path": "src/main/java/introclassJava/median_89b1a701_010.java", "line": 76, "faulty": "m.value=b.value;", "type": "Replace", "seed": "m.value=a.value;"}]}]}}, {"project": "median", "bug_id": "90a14c1ac8f56395389fade6f67872a9684e61f83099e634ac675eae04f391f3cc2b6f6ebe966f2488ce7e00a2cabb218f3b1372d4161b3c05d134b1b7f296d2_000", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:59:48.532591", "repair_begin": "2018-11-29 08:59:28.824629", "patches": [{"nb_test_that_execute_statement": 8, "patchLocation": {"line": 75, "class": "introclassJava.median_90a14c1a_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_90a14c1a_000.java\n+++ b/src/main/java/introclassJava/median_90a14c1a_000.java\n@@ -74,10 +74,9 @@\n             output += (String.format (\"%d is the median\\n\", n3.value));\n-        } else if ((n2.value > n1.value) && (n2.value > n3.value)\n-                   && (n1.value > n3.value)) {\n+        } else if ((n2!=null) && ((((n2.value) > (n3.value))) || (!(((n2.value) > (n1.value)))))) {\n             output += (String.format (\"%d is the median\\n\", n1.value));\n         } else if ((n3.value > n1.value) && (n3.value > n2.value)\n-                   && (n1.value > n2.value)) {\n+        && (n1.value > n2.value)) {\n             output += (String.format (\"%d is the median\\n\", n1.value));\n         } else if ((n3.value > n1.value) && (n3.value > n2.value)\n-                   && (n2.value > n1.value)) {\n+        && (n2.value > n1.value)) {\n             output += (String.format (\"%d is the median\\n\", n2.value));\n"}]}}, {"project": "median", "bug_id": "93f87bf20be12abd3b52e14015efb6d78b6038d2022e0ab5889979f9c6b6c8c757d6b5a59feae9f8415158057992ae837da76609dc156ea76b5cca7a43a4678b_012", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:53:45.489551", "repair_begin": "2018-11-29 08:53:36.272932", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 66, "class": "introclassJava.median_93f87bf2_012"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_93f87bf2_012.java\n+++ b/src/main/java/introclassJava/median_93f87bf2_012.java\n@@ -65,10 +65,9 @@\n         int3.value = scanner.nextInt ();\n-        if (((int1.value <= int2.value) && (int1.value >= int3.value))\n-                || ((int1.value <= int2.value) && (int1.value >= int3.value))) {\n+        if ((!((((int1.value) >= (int3.value))) || (((int1.value) <= (int2.value))))) || ((((int1.value) <= (int2.value)) && ((int1.value) >= (int3.value))))) {\n             output += (String.format (\"%d is the median\\n\", int1.value));\n         } else if ((((int2.value <= int1.value)) && (int2.value >= int3.value))\n-                   || ((int2.value <= int3.value) && (int2.value >= int1.value))) {\n+        || ((int2.value <= int3.value) && (int2.value >= int1.value))) {\n             output += (String.format (\"%d is the median\\n\", int2.value));\n         } else if (((int3.value <= int1.value) && (int3.value >= int2.value))\n-                   || ((int3.value <= int2.value) && (int3.value >= int1.value))) {\n+        || ((int3.value <= int2.value) && (int3.value >= int1.value))) {\n             output += (String.format (\"%d is the median\\n\", int3.value));\n"}]}}, {"project": "median", "bug_id": "93f87bf20be12abd3b52e14015efb6d78b6038d2022e0ab5889979f9c6b6c8c757d6b5a59feae9f8415158057992ae837da76609dc156ea76b5cca7a43a4678b_015", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:53:47.949035", "repair_begin": "2018-11-29 08:53:37.386802", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 66, "class": "introclassJava.median_93f87bf2_015"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_93f87bf2_015.java\n+++ b/src/main/java/introclassJava/median_93f87bf2_015.java\n@@ -65,10 +65,9 @@\n         int3.value = scanner.nextInt ();\n-        if (((int1.value <= int2.value) && (int1.value >= int3.value))\n-                || ((int1.value <= int2.value) && (int1.value >= int3.value))) {\n+        if (!((((((int1.value) >= (int3.value))) || (((int1.value) <= (int2.value)))) || (introclassJava.median_93f87bf2_015.this.output.length()==0)) && (!((((int1.value) <= (int2.value)) && ((int1.value) >= (int3.value))) || (((int1.value) <= (int2.value)) && ((int1.value) >= (int3.value))))))) {\n             output += (String.format (\"%d is the median \\n\", int1.value));\n         } else if ((((int2.value <= int1.value)) && (int2.value >= int3.value))\n-                   || ((int2.value <= int3.value) && (int2.value >= int1.value))) {\n+        || ((int2.value <= int3.value) && (int2.value >= int1.value))) {\n             output += (String.format (\"%d is the median \\n\", int2.value));\n         } else if (((int3.value <= int1.value) && (int3.value >= int2.value))\n-                   || ((int3.value <= int2.value) && (int3.value >= int1.value))) {\n+        || ((int3.value <= int2.value) && (int3.value >= int1.value))) {\n             output += (String.format (\"%d is the median \\n\", int3.value));\n"}]}}, {"project": "median", "bug_id": "317aa7055d3b7337ab43b73863692d1288ca246c473f9fd176bc737a7c3e1e08c37a15603cfb7bfc86f7bc2dcc239967b79b605aec11f86ae3ab90dc140b540f_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 09:06:34.257110", "repair_begin": "2018-11-29 09:06:19.453596", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 74, "class": "introclassJava.median_317aa705_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_317aa705_003.java\n+++ b/src/main/java/introclassJava/median_317aa705_003.java\n@@ -73,4 +73,3 @@\n         }\n-        if ((a.value > b.value && a.value < c.value)\n-                || (a.value < b.value && a.value > c.value)) {\n+        if (!(((((a.value) > (c.value))) && (((a.value) > (b.value)))) || (((((a.value) < (c.value))) && (((a.value) < (b.value)))) || (introclassJava.median_317aa705_003.this.output.length()==0)))) {\n             output += (String.format (\"%d is the median\", a.value));\n"}]}}, {"project": "median", "bug_id": "9083480332b4a5e4274f3bf5ef8bd5d1bd75048c0c066e574c27a2de6d919d658efc519e8b6a230a074eb5f2957d5768f4dc981a8e926c3a72993bc448a017f7_010", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 09:02:50.356981", "repair_begin": "2018-11-29 09:02:42.147371", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 67, "class": "introclassJava.median_90834803_010"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_90834803_010.java\n+++ b/src/main/java/introclassJava/median_90834803_010.java\n@@ -66,10 +66,9 @@\n         c.value = scanner.nextInt ();\n-        if ((b.value >= a.value && a.value >= c.value)\n-                || (c.value <= a.value && a.value <= b.value)) {\n+        if ((!((((a.value) <= (b.value))) || ((((c.value) <= (a.value))) && (introclassJava.median_90834803_010.this.output!=null)))) || ((((c.value) <= (a.value)) && ((a.value) <= (b.value))))) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if ((a.value >= b.value && b.value >= c.value)\n-                   || (a.value <= b.value && b.value <= c.value)) {\n+        || (a.value <= b.value && b.value <= c.value)) {\n             output += (String.format (\"%d is the median\\n\", b.value));\n         } else if ((a.value >= c.value && c.value >= b.value)\n-                   || (a.value <= c.value && c.value <= b.value)) {\n+        || (a.value <= c.value && c.value <= b.value)) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n@@ -77,3 +76,3 @@\n             if (true)\n-                return;;\n+            return;;\n         }\n"}]}}, {"project": "median", "bug_id": "cd2d9b5b5cff96b07c5b22c0d139ffa2aa36b01823c9eb4db6eca19065a0ce2c4d2516bfcc2f1bc95daeae5b0bbd5e9c15b83feda776735e7bc3de6c49d25144_010", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:59:05.830378", "repair_begin": "2018-11-29 08:58:48.709767", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 70, "class": "introclassJava.median_cd2d9b5b_010"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/introclassJava/median_cd2d9b5b_010.java\n+++ b/src/main/java/introclassJava/median_cd2d9b5b_010.java\n@@ -69,7 +69,11 @@\n             median.value = num1.value;\n-        } else if ((num2.value < num1.value && num2.value > num3.value)\n-                   || (num2.value > num1.value && num2.value < num3.value)) {\n-            median.value = num2.value;\n         } else {\n-            median.value = num3.value;\n+            if (((((num2.value) < (num1.value)) && ((num2.value) > (num3.value))) || (((num2.value) > (num1.value)) && ((num2.value) < (num3.value)))) || (((!((((num2.value) > (num1.value)) && ((num2.value) < (num3.value))))) && (!(((num2.value) < (num3.value))))) || ((((num2.value) < (num1.value))) && (((num2.value) < (num3.value)))))) {\n+                if ((num2.value < num1.value && num2.value > num3.value)\n+                || (num2.value > num1.value && num2.value < num3.value)) {\n+                    median.value = num2.value;\n+                } else {\n+                    median.value = num3.value;\n+                }\n+            }\n         }\n"}]}}, {"project": "median", "bug_id": "d43d32076778e9cb3a2aa237e806bc00b0eaffde5b75563c9321019a817607f8303e6b982bf49358787264ac38e22026f27bde7e67a87ba43b973c29442f9e93_000", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 09:00:03.496179", "repair_begin": "2018-11-29 08:59:54.580334", "patches": [{"nb_test_that_execute_statement": 11, "patchLocation": {"line": 69, "class": "introclassJava.median_d43d3207_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_d43d3207_000.java\n+++ b/src/main/java/introclassJava/median_d43d3207_000.java\n@@ -68,4 +68,3 @@\n             output += (String.format (\"%d is the median\\n\", int1.value));\n-        } else if ((int2.value < int3.value && int2.value > int1.value)\n-                   || (int2.value > int3.value && int2.value < int1.value)) {\n+        } else if (((((int2.value) < (int3.value)) && ((int2.value) > (int1.value))) || (((int2.value) > (int3.value)) && ((int2.value) < (int1.value)))) || ((!(((int2.value) < (int1.value)))) && (((int2.value) < (int3.value))))) {\n             output += (String.format (\"%d is the median\\n\", int2.value));\n"}]}}, {"project": "median", "bug_id": "e9c6206d3a4862876b0dead881ac55078f11e291f60215ab028651f06fcbee2a591a31a7727037774542df4fe051a89460d85f6067a0b9729ae86e4afe1e6e92_001", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 08:38:43.800183", "repair_begin": "2018-11-29 08:38:27.337412", "patches": [{"nb_test_that_execute_statement": 10, "patchLocation": {"line": 69, "class": "introclassJava.median_e9c6206d_001"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/median_e9c6206d_001.java\n+++ b/src/main/java/introclassJava/median_e9c6206d_001.java\n@@ -68,7 +68,6 @@\n             output += (String.format (\"%d is the median\\n\", b.value));\n-        } else if ((b.value < a.value && a.value < c.value)\n-                   || (c.value < a.value && a.value < b.value)) {\n+        } else if (!((!((((b.value) < (a.value)) && ((a.value) < (c.value))) || (((c.value) < (a.value)) && ((a.value) < (b.value))))) && (((((a.value) < (c.value))) && (((a.value) < (b.value)))) || (((c.value) < (a.value)))))) {\n             output += (String.format (\"%d is the median\\n\", a.value));\n         } else if ((a.value < c.value && c.value < b.value)\n-                   || (b.value < c.value && c.value < a.value)) {\n+        || (b.value < c.value && c.value < a.value)) {\n             output += (String.format (\"%d is the median\\n\", c.value));\n"}]}}, {"project": "smallest", "bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:44:24.627507", "repair_begin": "2018-11-28 15:36:16.154801", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 75, "faulty": "if (n4.value < n3.value) {\n  small.value=n4.value;\n}\n else if (n4.value < n1.value) {\n  small.value=n4.value;\n}", "type": "Replace", "seed": "if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 76, "faulty": "small.value=n4.value;", "type": "Delete", "seed": "if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 82, "faulty": "return;", "type": "Delete", "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"}]}]}}, {"project": "smallest", "bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "DynaMoth", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:00:17.626791", "repair_begin": "2018-11-28 16:00:09.367812", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 75, "class": "introclassJava.smallest_3b2376ab_007"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_3b2376ab_007.java\n+++ b/src/main/java/introclassJava/smallest_3b2376ab_007.java\n@@ -74,3 +74,3 @@\n         }\n-        if (n4.value < n3.value) {\n+        if (false) {\n             small.value = n4.value;\n"}]}}, {"project": "smallest", "bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "GenProg", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:20:54.639815", "repair_begin": "2018-11-28 16:12:42.755098", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 72, "faulty": "if (n3.value < n2.value) {\n  small.value=n3.value;\n}", "type": "Delete", "seed": "n2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 82, "faulty": ";", "type": "Delete", "seed": "n2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 76, "faulty": "small.value=n4.value;", "type": "Replace", "seed": "small.value=n4.value;"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 82, "faulty": ";", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 82, "faulty": "return;", "type": "Replace", "seed": "if (n4.value < n3.value) {\n  small.value=n4.value;\n}\n else if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 72, "faulty": "if (n3.value < n2.value) {\n  small.value=n3.value;\n}", "type": "Delete", "seed": "n2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 76, "faulty": "small.value=n4.value;", "type": "Replace", "seed": "small.value=n4.value;"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 82, "faulty": ";", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 72, "faulty": "if (n3.value < n2.value) {\n  small.value=n3.value;\n}", "type": "Delete", "seed": "n2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 76, "faulty": "small.value=n4.value;", "type": "Replace", "seed": "small.value=n4.value;"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 82, "faulty": ";", "type": "Replace", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 66, "faulty": "n3.value=scanner.nextInt();", "type": "Replace", "seed": "if (n2.value < n1.value) {\n  small.value=n2.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 72, "faulty": "if (n3.value < n2.value) {\n  small.value=n3.value;\n}", "type": "InsertBefore", "seed": "if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 82, "faulty": "return;", "type": "Replace", "seed": "if (n4.value < n3.value) {\n  small.value=n4.value;\n}\n else if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 66, "faulty": "n3.value=scanner.nextInt();", "type": "Replace", "seed": "n4.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 65, "faulty": "n2.value=scanner.nextInt();", "type": "InsertBefore", "seed": "if (n4.value < n3.value) {\n  small.value=n4.value;\n}\n else if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}]}]}}, {"project": "smallest", "bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "Kali", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:03:38.559788", "repair_begin": "2018-11-28 16:03:32.073803", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 75, "faulty": "if (n4.value < n3.value) {\n  small.value=n4.value;\n}\n else if (n4.value < n1.value) {\n  small.value=n4.value;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "smallest", "bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:15:26.549593", "repair_begin": "2018-11-29 10:14:38.525068", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 75, "class": "introclassJava.smallest_3b2376ab_007"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_3b2376ab_007.java\n+++ b/src/main/java/introclassJava/smallest_3b2376ab_007.java\n@@ -74,3 +74,3 @@\n         }\n-        if (n4.value < n3.value) {\n+        if (introclassJava.smallest_3b2376ab_007.this.output.length()==0) {\n             small.value = n4.value;\n"}]}}, {"project": "smallest", "bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_007", "tool": "RSRepair", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 17:15:22.034560", "repair_begin": "2018-11-28 17:06:56.251206", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 72, "faulty": "if (n3.value < n2.value) {\n  small.value=n3.value;\n}", "type": "Replace", "seed": "if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_3b2376ab_007.java", "line": 76, "faulty": "small.value=n4.value;", "type": "Delete", "seed": "if (n4.value < n1.value) {\n  small.value=n4.value;\n}"}]}]}}, {"project": "smallest", "bug_id": "3b2376ab97bb5d1a5dbbf2b45cf062db320757549c761936d19df05e856de894e45695014cd8063cdc22148b13fa1803b3c9e77356931d66f4fbec0efacf7829_008", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:14:22.181033", "repair_begin": "2018-11-29 10:14:12.695819", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_3b2376ab_008"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_3b2376ab_008.java\n+++ b/src/main/java/introclassJava/smallest_3b2376ab_008.java\n@@ -69,7 +69,6 @@\n             output += (String.format (\"%d is the smallest \", n1.value));\n-        } else if (n2.value < n1.value && n2.value < n3.value\n-                   && n2.value < n4.value) {\n+        } else if (((n2.value) < (n4.value))) {\n             output += (String.format (\"%d is the smallest\", n2.value));\n         } else if (n3.value < n1.value && n3.value < n2.value\n-                   && n3.value < n4.value) {\n+        && n3.value < n4.value) {\n             output += (String.format (\"%d is the smallest\", n3.value));\n"}]}}, {"project": "smallest", "bug_id": "15cb07a72bc49f3f4b4a1000410c388b4d03b9f36236365ba4b611ca0617243b6de4e2e0868abf9ccb667e5ff71ccd3ce631cd59fcf13ee22addabf66c1824fa_007", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:16:55.860152", "repair_begin": "2018-11-29 10:16:46.079991", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 71, "class": "introclassJava.smallest_15cb07a7_007"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_15cb07a7_007.java\n+++ b/src/main/java/introclassJava/smallest_15cb07a7_007.java\n@@ -70,7 +70,6 @@\n             output += (String.format (\"%d is the smallest\\n\", frst.value));\n-        } else if (scnd.value < frst.value && scnd.value < thrd.value\n-                   && scnd.value < frth.value) {\n+        } else if (((scnd.value) < (frth.value))) {\n             output += (String.format (\"%d is the smallest\\n\", scnd.value));\n         } else if (thrd.value < frst.value && thrd.value < scnd.value\n-                   && thrd.value < frth.value) {\n+        && thrd.value < frth.value) {\n             output += (String.format (\"%d is the smallest\\n\", thrd.value));\n"}]}}, {"project": "smallest", "bug_id": "36d8008b13f6475ca8fa4553fea10042b0a6c623665065672051445c3464d61b29b47cb66321844a0264505a0f5ccf5aa6de072aa266b5a8b0cf13198380a389_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:10:47.712623", "repair_begin": "2018-11-29 10:10:41.128914", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_36d8008b_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_36d8008b_003.java\n+++ b/src/main/java/introclassJava/smallest_36d8008b_003.java\n@@ -69,3 +69,3 @@\n             e.value = a.value;\n-        } else if (b.value < a.value && b.value < c.value && b.value < d.value) {\n+        } else if (((b.value) < (d.value))) {\n             e.value = b.value;\n"}]}}, {"project": "smallest", "bug_id": "48b82975576f07f162163145b334648a73321d003a0a8cd4577172e48ce4836e63953dffd4460a9a7aadc511a695ff93de0ce2baf953e4b78b747440caa736a6_001", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:05:21.079682", "repair_begin": "2018-11-29 10:05:11.758854", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_48b82975_001"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_48b82975_001.java\n+++ b/src/main/java/introclassJava/smallest_48b82975_001.java\n@@ -69,3 +69,3 @@\n             r.value = a.value;\n-        } else if (b.value < a.value && b.value < c.value && b.value < d.value) {\n+        } else if (((b.value) < (d.value))) {\n             r.value = b.value;\n"}]}}, {"project": "smallest", "bug_id": "68eb0bb00bcd06020ba4e5c5afbce504f5e7af9618c274197da7d50f668649a59f3eb961a718f5f67cc8731f9f5e2df46e511d083b2b5e785e9377c8f94e6ea5_000", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:03:50.229467", "repair_begin": "2018-11-29 10:03:40.680836", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_68eb0bb0_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_68eb0bb0_000.java\n+++ b/src/main/java/introclassJava/smallest_68eb0bb0_000.java\n@@ -69,3 +69,3 @@\n             output += (String.format (\"%d is the smallest\\n\", a.value));\n-        } else if (b.value < a.value && b.value < c.value && b.value < d.value) {\n+        } else if (((b.value) < (d.value))) {\n             output += (String.format (\"%d is the smallest\\n\", b.value));\n"}]}}, {"project": "smallest", "bug_id": "97f6b15278788d90f6a0159ac65668f63f182fadf165e78bfecd7750de89f8611759f8d8206b3505407f7de14d124db7b0309a53e222c538c4dedadc6fa24fe6_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:21:54.261622", "repair_begin": "2018-11-29 10:21:45.133357", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 71, "class": "introclassJava.smallest_97f6b152_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_97f6b152_003.java\n+++ b/src/main/java/introclassJava/smallest_97f6b152_003.java\n@@ -70,7 +70,6 @@\n             small.value = num1.value;\n-        } else if (num2.value < num1.value && num2.value < num3.value\n-                   && num2.value < num4.value) {\n+        } else if (((num2.value) < (num4.value))) {\n             small.value = num2.value;\n         } else if (num3.value < num1.value && num3.value < num2.value\n-                   && num3.value < num4.value) {\n+        && num3.value < num4.value) {\n             small.value = num3.value;\n"}]}}, {"project": "smallest", "bug_id": "769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_007", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:44:18.033467", "repair_begin": "2018-11-28 15:36:17.298273", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_769cd811_007.java", "line": 65, "faulty": "y.value=scanner.nextInt();", "type": "InsertBefore", "seed": "a.value=t.value;"}, {"path": "src/main/java/introclassJava/smallest_769cd811_007.java", "line": 67, "faulty": "t.value=scanner.nextInt();", "type": "Replace", "seed": "z.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_769cd811_007.java", "line": 77, "faulty": "a.value=t.value;", "type": "Delete", "seed": "if (z.value > t.value) {\n  a.value=t.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_769cd811_007.java", "line": 81, "faulty": ";", "type": "Delete", "seed": "if (x.value > y.value) {\n  a.value=y.value;\n}\n else {\n  a.value=x.value;\n}"}]}]}}, {"project": "smallest", "bug_id": "769cd811312cbbb82c87033a78ac9584ad282550bcb9cc3ae8c4e3da44c288c1a5b3954e01998c3c0654ee6774ceab66e9fe5b135750905c917d2b0bb5fab98b_009", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:43:58.488319", "repair_begin": "2018-11-28 15:36:11.677069", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 64, "faulty": "a.value=scanner.nextInt();", "type": "Replace", "seed": "x.value=a.value;"}, {"path": "src/main/java/introclassJava/smallest_769cd811_009.java", "line": 67, "faulty": "d.value=scanner.nextInt();", "type": "InsertBefore", "seed": "a.value=scanner.nextInt();"}]}]}}, {"project": "smallest", "bug_id": "818f8cf4e2e713753d02db9ee70a099b71f2a5a6bdc904191cf9ba68cfa5f64328464dccdd9b02fe0822e14a403dc196fe88b9964969409e60c93a776186a86a_003", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:44:28.439982", "repair_begin": "2018-11-28 15:36:25.760578", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_818f8cf4_003.java", "line": 65, "faulty": "num2.value=scanner.nextInt();", "type": "Delete", "seed": "num4.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_818f8cf4_003.java", "line": 68, "faulty": "if ((num1.value <= num2.value) && (num1.value <= num3.value) && (num1.value <= num4.value)) {\n  num_smallest.value=num1.value;\n  output+=(String.format(\"%d is the smallest\\n\",num_smallest.value));\n}\n else if ((num2.value <= num1.value) && (num2.value <= num3.value) && (num2.value <= num4.value)) {\n  num_smallest.value=num2.value;\n  output+=(String.format(\"%d is the smallest\\n\",num_smallest.value));\n}\n else if ((num3.value <= num1.value) && (num3.value <= num2.value) && (num3.value <= num4.value)) {\n  num_smallest.value=num3.value;\n  output+=(String.format(\"%d is the smallest\\n\",num_smallest.value));\n}\n else if ((num4.value <= num1.value) && (num4.value <= num2.value) && (num4.value <= num3.value)) {\n  num_smallest.value=num1.value;\n  output+=(String.format(\"%d is the smallest\\n\",num_smallest.value));\n}", "type": "InsertBefore", "seed": "num2.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_818f8cf4_003.java", "line": 80, "faulty": "if ((num4.value <= num1.value) && (num4.value <= num2.value) && (num4.value <= num3.value)) {\n  num_smallest.value=num1.value;\n  output+=(String.format(\"%d is the smallest\\n\",num_smallest.value));\n}", "type": "Delete", "seed": "num3.value=scanner.nextInt();"}]}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:44:15.908564", "repair_begin": "2018-11-28 15:36:11.207449", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 67, "faulty": "d.value=scanner.nextInt();", "type": "Replace", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "Delete", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 83, "faulty": ";", "type": "InsertBefore", "seed": "b.value=scanner.nextInt();"}]}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "DynaMoth", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:00:17.665897", "repair_begin": "2018-11-28 16:00:12.176876", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.smallest_88394fc0_002"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_88394fc0_002.java\n+++ b/src/main/java/introclassJava/smallest_88394fc0_002.java\n@@ -75,3 +75,3 @@\n         }\n-        if (c.value > d.value) {\n+        if (false) {\n             smallest.value = d.value;\n"}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "GenProg", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:20:46.036108", "repair_begin": "2018-11-28 16:12:45.114621", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 66, "faulty": "c.value=scanner.nextInt();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 69, "faulty": "smallest.value=a.value;", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Delete", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Delete", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Delete", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 66, "faulty": "c.value=scanner.nextInt();", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Delete", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 69, "faulty": "smallest.value=a.value;", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Delete", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Delete", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 69, "faulty": "smallest.value=a.value;", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 83, "faulty": ";", "type": "Replace", "seed": "smallest.value=c.value;"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 83, "faulty": "return;", "type": "InsertBefore", "seed": "smallest.value=d.value;"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 66, "faulty": "c.value=scanner.nextInt();", "type": "Replace", "seed": "c.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "b.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "InsertBefore", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "Delete", "seed": "output+=(String.format(\"%d is the smallest\",smallest.value));"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 83, "faulty": ";", "type": "Replace", "seed": "a.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 64, "faulty": "a.value=scanner.nextInt();", "type": "Replace", "seed": "a.value=scanner.nextInt();"}]}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "Kali", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:03:39.424665", "repair_begin": "2018-11-28 16:03:32.869874", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:13:01.357889", "repair_begin": "2018-11-29 10:12:18.563008", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.smallest_88394fc0_002"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_88394fc0_002.java\n+++ b/src/main/java/introclassJava/smallest_88394fc0_002.java\n@@ -75,3 +75,3 @@\n         }\n-        if (c.value > d.value) {\n+        if (introclassJava.smallest_88394fc0_002.this.output.length()==0) {\n             smallest.value = d.value;\n"}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_002", "tool": "RSRepair", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 17:13:21.485361", "repair_begin": "2018-11-28 17:06:32.156416", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_002.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}]}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "Arja", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 15:44:20.958023", "repair_begin": "2018-11-28 15:36:12.126494", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 66, "faulty": "c.value=scanner.nextInt();", "type": "Replace", "seed": "d.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Replace", "seed": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 83, "faulty": ";", "type": "Delete", "seed": "smallest.value=b.value;"}]}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "DynaMoth", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:00:20.534439", "repair_begin": "2018-11-28 16:00:15.033951", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.smallest_88394fc0_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_88394fc0_003.java\n+++ b/src/main/java/introclassJava/smallest_88394fc0_003.java\n@@ -75,3 +75,3 @@\n         }\n-        if (c.value > d.value) {\n+        if (false) {\n             smallest.value = d.value;\n"}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "GenProg", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:20:16.938812", "repair_begin": "2018-11-28 16:12:36.849651", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 73, "faulty": "if (b.value > c.value) {\n  smallest.value=c.value;\n}", "type": "Delete", "seed": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));"}, {"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 66, "faulty": "c.value=scanner.nextInt();", "type": "Replace", "seed": "d.value=scanner.nextInt();"}]}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "Kali", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:03:26.140353", "repair_begin": "2018-11-28 16:03:19.102885", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 76, "faulty": "if (c.value > d.value) {\n  smallest.value=d.value;\n}\n else if (a.value > d.value) {\n  smallest.value=d.value;\n}", "type": "RedirectBranch false"}]}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:14:11.585803", "repair_begin": "2018-11-29 10:13:14.004247", "patches": [{"nb_test_that_execute_statement": 16, "patchLocation": {"line": 76, "class": "introclassJava.smallest_88394fc0_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_88394fc0_003.java\n+++ b/src/main/java/introclassJava/smallest_88394fc0_003.java\n@@ -75,3 +75,3 @@\n         }\n-        if (c.value > d.value) {\n+        if (introclassJava.smallest_88394fc0_003.this.scanner.hasNext()) {\n             smallest.value = d.value;\n"}]}}, {"project": "smallest", "bug_id": "88394fc00b7053b386e97564e28ef68421ae09c0baeaf887bba7e254f452419783ed8f774bff3c0c7d23bdc8f6c1443fb47c7af97323d4d3d63cc088d3b6841a_003", "tool": "RSRepair", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 17:13:36.032181", "repair_begin": "2018-11-28 17:06:32.140385", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_88394fc0_003.java", "line": 77, "faulty": "smallest.value=d.value;", "type": "Replace", "seed": "if (a.value > d.value) {\n  smallest.value=d.value;\n}"}]}]}}, {"project": "smallest", "bug_id": "c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000", "tool": "GenProg", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 16:20:16.713231", "repair_begin": "2018-11-28 16:12:48.344556", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 74, "faulty": "numbers[j.value]=temp.value;", "type": "Delete", "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 74, "faulty": "numbers[j.value]=temp.value;", "type": "Replace", "seed": "smallest.value=numbers[0];"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 74, "faulty": "numbers[j.value]=temp.value;", "type": "Delete", "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 69, "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", "type": "InsertBefore", "seed": "x.value=scanner.nextInt();"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 81, "faulty": "return;", "type": "InsertBefore", "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 71, "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", "type": "InsertBefore", "seed": "numbers[i.value]=x.value;"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 70, "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", "type": "InsertBefore", "seed": ";"}, {"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 71, "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", "type": "InsertBefore", "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"}]}]}}, {"project": "smallest", "bug_id": "c868b30a4adebf62b0ed20170a14ee9e5f8bc62d827e9712294ffa4a10ab8423e3d903c29e2392c83963972019a470e667c1987e2547294d1e2d1df1db832912_000", "tool": "RSRepair", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-28 17:14:02.701568", "repair_begin": "2018-11-28 17:06:32.174022", "patches": [{"edits": [{"path": "src/main/java/introclassJava/smallest_c868b30a_000.java", "line": 66, "faulty": "x.value=scanner.nextInt();", "type": "InsertBefore", "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"}]}]}}, {"project": "smallest", "bug_id": "dedc2a7c919835ade6d92729cfb18fc71addf6dcdf36ce26ca8b1e3d3aea81bad974c61b96fd71537e95a6aac4582d5b08f9fd8057ce40fb18fb5df37d86b70d_000", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:03:29.833907", "repair_begin": "2018-11-29 10:03:20.294924", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_dedc2a7c_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_dedc2a7c_000.java\n+++ b/src/main/java/introclassJava/smallest_dedc2a7c_000.java\n@@ -69,7 +69,6 @@\n             output += (String.format (\"%.0f is the smallest\\n\", a.value));\n-        } else if ((b.value < a.value) && (b.value < c.value)\n-                   && (b.value < d.value)) {\n+        } else if (((b.value) < (d.value))) {\n             output += (String.format (\"%.0f is the smallest\\n\", b.value));\n         } else if ((c.value < a.value) && (c.value < b.value)\n-                   && (c.value < d.value)) {\n+        && (c.value < d.value)) {\n             output += (String.format (\"%.0f is the smallest\\n\", c.value));\n"}]}}, {"project": "smallest", "bug_id": "ea67b84145a12733c524b716da44f36a42cf815013d14cafbd2a66a5a4c8b5a99022c355960cd62ca71a640315747cd604afdfa9ec753d1739c686734b2798a7_003", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:25:36.153620", "repair_begin": "2018-11-29 10:25:26.633305", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_ea67b841_003"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_ea67b841_003.java\n+++ b/src/main/java/introclassJava/smallest_ea67b841_003.java\n@@ -69,7 +69,6 @@\n             SN.value = a.value;\n-        } else if ((b.value < a.value) && (b.value < c.value)\n-                   && (b.value < d.value)) {\n+        } else if (((b.value) < (d.value))) {\n             SN.value = b.value;\n         } else if ((c.value < a.value) && (c.value < b.value)\n-                   && (c.value < d.value)) {\n+        && (c.value < d.value)) {\n             SN.value = c.value;\n"}]}}, {"project": "smallest", "bug_id": "f8d57deac89e46f99354a70e8f6bc830e0bded0c297d7a0765348de79d6071cb076d4e8f2cd60cff584cb220049d6065827a29904a7e1f9144f510f7773e6d0e_000", "tool": "Nopol", "benchmark": "IntroClassJava", "result": {"repair_end": "2018-11-29 10:23:44.981767", "repair_begin": "2018-11-29 10:23:38.208250", "patches": [{"nb_test_that_execute_statement": 13, "patchLocation": {"line": 70, "class": "introclassJava.smallest_f8d57dea_000"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/introclassJava/smallest_f8d57dea_000.java\n+++ b/src/main/java/introclassJava/smallest_f8d57dea_000.java\n@@ -69,7 +69,6 @@\n             output += (String.format (\"%d is the smallest\\n\", v1.value));\n-        } else if (v2.value < v1.value && v2.value < v3.value\n-                   && v2.value < v4.value) {\n+        } else if (((v2.value) < (v4.value))) {\n             output += (String.format (\"%d is the smallest\\n\", v2.value));\n         } else if (v3.value < v1.value && v3.value < v2.value\n-                   && v3.value < v4.value) {\n+        && v3.value < v4.value) {\n             output += (String.format (\"%d is the smallest\\n\", v3.value));\n"}]}}, {"project": "DEPTH_FIRST_SEARCH", "bug_id": "", "tool": "Arja", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 11:34:25.110999", "repair_begin": "2018-12-01 11:30:37.200758", "patches": [{"diff": "--- /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-01 05:30:31.310534151 -0500\n+++ /tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/patches_cujd/Patch_16/patched/tmp/Arja_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-01 05:30:44.870534461 -0500\n@@ -47,7 +47,7 @@\n     }\n \n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n+        this.successors = new ArrayList<>();\n     }\n \n     public void setPredecessors(ArrayList<Node> predecessors) {\n\n\n", "edits": [{"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Replace", "seed": "this.successors=new ArrayList<>();"}]}]}}, {"project": "DEPTH_FIRST_SEARCH", "bug_id": "", "tool": "DynaMoth", "benchmark": "QuixBugs", "result": {"repair_end": "2018-11-28 16:37:29.163667", "repair_begin": "2018-11-28 16:37:23.852039", "patches": [{"nb_test_that_execute_statement": 1, "patchLocation": {"line": 50, "class": "java_programs.Node"}, "patchType": "PRECONDITION", "patch": "--- a/src/main/java/Node.java\n+++ b/src/main/java/Node.java\n@@ -49,3 +49,5 @@\n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n+        if (false) {\n+            this.successors = successors;\n+        }\n     }\n"}]}}, {"project": "DEPTH_FIRST_SEARCH", "bug_id": "", "tool": "GenProg", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 12:00:01.551550", "repair_begin": "2018-12-01 11:56:24.956175", "patches": [{"diff": "--- /tmp/GenProg_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-01 05:56:21.119807058 -0500\n+++ /tmp/GenProg_QuixBugs_DEPTH_FIRST_SEARCH_/patches_jokh/Patch_1051/patched/tmp/GenProg_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-01 05:59:02.583814527 -0500\n@@ -47,7 +47,6 @@\n     }\n \n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n     }\n \n     public void setPredecessors(ArrayList<Node> predecessors) {\n@@ -59,7 +58,9 @@\n     }\n \n     public ArrayList<Node> getSuccessors() {\n-        return successors;\n+        this.successor = null;\n+\t\tSet<Node> nodesvisited = new HashSet<>();\n+\t\treturn successors;\n     }\n     public ArrayList<Node> getPredecessors() {\n         return predecessors;\n\n\n", "edits": [{"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Delete", "seed": "this.value=value;"}, {"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Delete", "seed": "this.value=value;"}, {"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Delete", "seed": "return successors;"}, {"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Delete", "seed": "return successors;"}, {"path": "src/main/java/Node.java", "line": 62, "faulty": "return successors;", "type": "InsertBefore", "seed": "this.successor=null;"}, {"path": "src/main/java/Node.java", "line": 62, "faulty": "return successors;", "type": "Replace", "seed": "return successors;"}, {"path": "src/main/java/Node.java", "line": 62, "faulty": "return successors;", "type": "InsertBefore", "seed": "Set<Node> nodesvisited=new HashSet<>();"}]}]}}, {"project": "DEPTH_FIRST_SEARCH", "bug_id": "", "tool": "jGenProg", "benchmark": "QuixBugs", "result": {"repair_end": "2018-11-28 16:17:20.202591", "repair_begin": "2018-11-28 16:17:08.176817", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/Node.java\\n+++ java_programs\\/Node.java\\n@@ -46,8 +46,8 @@\\n \\t\\tthis.successor = successor;\\n \\t}\\n \\n-\\tpublic void setSuccessors(java.util.ArrayList<java_programs.Node> successors) {\\n-\\t\\tthis.successors = successors;\\n+\\tpublic void setSuccessors(java.util.ArrayList<java_programs.Node> successors) { \\t\\tthis.value = value;\\n+\\n \\t}\\n \\n \\tpublic void setPredecessors(java.util.ArrayList<java_programs.Node> predecessors) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "this.successors = successors", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "this.value = value", "INGREDIENT_PARENT": "this.value = value", "LOCATION": "java_programs.Node", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/src\\/\\/variant-34_f\\/java_programs\\/Node.java", "OPERATOR": "ReplaceOp", "PATH": "\\/tmp\\/jGenProg_QuixBugs_DEPTH_FIRST_SEARCH_\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/src\\/default\\/Node.java", "LINE": "50", "MP_RANKING": "0", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtAssignmentImpl|CtBlockImpl"}], "GENERATION": "17", "VARIANT_ID": "34", "TIME": "5", "VALIDATION": "|true|0|5|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/bin\\/\\/variant-34"}]}}, {"project": "DEPTH_FIRST_SEARCH", "bug_id": "", "tool": "jKali", "benchmark": "QuixBugs", "result": {"repair_end": "2018-11-28 17:34:28.427446", "repair_begin": "2018-11-28 17:34:20.697790", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/Node.java\\n+++ java_programs\\/Node.java\\n@@ -47,7 +47,7 @@\\n \\t}\\n \\n \\tpublic void setSuccessors(java.util.ArrayList<java_programs.Node> successors) {\\n-\\t\\tthis.successors = successors;\\n+\\n \\t}\\n \\n \\tpublic void setPredecessors(java.util.ArrayList<java_programs.Node> predecessors) {\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtAssignmentImpl|CtBlockImpl", "ORIGINAL_CODE": "this.successors = successors", "LOCATION": "java_programs.Node", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/src\\/\\/variant-2_f\\/java_programs\\/Node.java", "OPERATOR": "RemoveOp", "PATH": "\\/tmp\\/jKali_QuixBugs_DEPTH_FIRST_SEARCH_\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/src\\/default\\/Node.java", "LINE": "50", "MP_RANKING": "0", "SUSPICIOUNESS": "1"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|5|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_QuixBugs_DEPTH_FIRST_SEARCH_\\/.\\/output_astor\\/AstorMain-DEPTH_FIRST_SEARCH-\\/\\/bin\\/\\/variant-2"}]}}, {"project": "DEPTH_FIRST_SEARCH", "bug_id": "", "tool": "Kali", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 11:38:34.456821", "repair_begin": "2018-12-01 11:38:31.155989", "patches": [{"diff": "--- /tmp/Kali_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-01 05:38:27.264857673 -0500\n+++ /tmp/Kali_QuixBugs_DEPTH_FIRST_SEARCH_/patches_frk7/Patch_1/patched/tmp/Kali_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-01 05:38:34.080857989 -0500\n@@ -47,7 +47,9 @@\n     }\n \n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n+        if (true)\n+\t\t\treturn;\n+\t\tthis.successors = successors;\n     }\n \n     public void setPredecessors(ArrayList<Node> predecessors) {\n\n\n", "edits": [{"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "InsertReturn true"}]}]}}, {"project": "DEPTH_FIRST_SEARCH", "bug_id": "", "tool": "RSRepair", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 14:12:58.522935", "repair_begin": "2018-12-01 14:11:30.442997", "patches": [{"diff": "--- /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-01 08:11:21.980555708 -0500\n+++ /tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/patches_d6o7/Patch_5/patched/tmp/RSRepair_QuixBugs_DEPTH_FIRST_SEARCH_/src/main/java/Node.java\t2018-12-01 08:11:36.256556288 -0500\n@@ -47,7 +47,6 @@\n     }\n \n     public void setSuccessors(ArrayList<Node> successors) {\n-        this.successors = successors;\n     }\n \n     public void setPredecessors(ArrayList<Node> predecessors) {\n\n\n", "edits": [{"path": "src/main/java/Node.java", "line": 50, "faulty": "this.successors=successors;", "type": "Delete", "seed": "return false;"}]}]}}, {"project": "FIND_IN_SORTED", "bug_id": "", "tool": "Nopol", "benchmark": "QuixBugs", "result": {"repair_end": "2018-11-28 18:09:37.558315", "repair_begin": "2018-11-28 18:09:25.643015", "patches": [{"nb_test_that_execute_statement": 7, "patchLocation": {"line": 17, "class": "java_programs.FIND_IN_SORTED"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/FIND_IN_SORTED.java\n+++ b/src/main/java/FIND_IN_SORTED.java\n@@ -16,3 +16,3 @@\n         int mid = start + (end - start) / 2; // check this is floor division\n-        if (x < arr[mid]) {\n+        if (((!(2 < mid)) || ((arr[mid]) <= arr.length)) && ((x) != ((arr[mid])))) {\n             return binsearch(arr, x, start, mid);\n"}]}}, {"project": "LIS", "bug_id": "", "tool": "Arja", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 11:23:03.573743", "repair_begin": "2018-12-01 11:18:55.225879", "patches": [{"diff": "--- /tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-01 05:18:51.715932359 -0500\n+++ /tmp/Arja_QuixBugs_LIS_/patches_airp/Patch_415/patched/tmp/Arja_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-01 05:20:01.096033089 -0500\n@@ -26,9 +26,17 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n             }\n \n             i++;\n\n\n", "edits": [{"path": "src/main/java/LIS.java", "line": 29, "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", "type": "InsertBefore", "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"}, {"path": "src/main/java/LIS.java", "line": 31, "faulty": "longest=length + 1;", "type": "Replace", "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"}]}]}}, {"project": "LIS", "bug_id": "", "tool": "GenProg", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 11:49:52.973664", "repair_begin": "2018-12-01 11:46:56.408475", "patches": [{"diff": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-01 05:46:51.385678110 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_0wfb/Patch_342/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-01 05:48:07.281679841 -0500\n@@ -20,7 +20,10 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n+                    if (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t\tprefix_lengths.add(j);\n                 }\n             }\n \n@@ -28,11 +31,15 @@\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n             }\n \n             i++;\n         }\n-        return longest;\n+        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n+\t\treturn longest;\n     }\n }\n\n\n", "edits": [{"path": "src/main/java/LIS.java", "line": 31, "faulty": "longest=length + 1;", "type": "Replace", "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"}, {"path": "src/main/java/LIS.java", "line": 31, "faulty": "longest=length + 1;", "type": "Replace", "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"}, {"path": "src/main/java/LIS.java", "line": 36, "faulty": "return longest;", "type": "InsertBefore", "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"}, {"path": "src/main/java/LIS.java", "line": 23, "faulty": "prefix_lengths.add(j);", "type": "InsertBefore", "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"}]}]}}, {"project": "LIS", "bug_id": "", "tool": "RSRepair", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 14:02:18.793770", "repair_begin": "2018-12-01 14:00:35.908048", "patches": [{"diff": "--- /tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-01 08:00:32.344107811 -0500\n+++ /tmp/RSRepair_QuixBugs_LIS_/patches_1z30/Patch_18/patched/tmp/RSRepair_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-01 08:00:41.940156798 -0500\n@@ -28,7 +28,10 @@\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n             }\n \n             i++;\n\n\n", "edits": [{"path": "src/main/java/LIS.java", "line": 31, "faulty": "longest=length + 1;", "type": "Replace", "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"}]}]}}, {"project": "QUICKSORT", "bug_id": "", "tool": "DynaMoth", "benchmark": "QuixBugs", "result": {"repair_end": "2018-11-28 16:43:32.733502", "repair_begin": "2018-11-28 16:43:24.086673", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 26, "class": "java_programs.QUICKSORT"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/QUICKSORT.java\n+++ b/src/main/java/QUICKSORT.java\n@@ -25,3 +25,3 @@\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+            } else if (true) {\n                 greater.add(x);\n"}]}}, {"project": "QUICKSORT", "bug_id": "", "tool": "jKali", "benchmark": "QuixBugs", "result": {"repair_end": "2018-11-28 17:34:38.458365", "repair_begin": "2018-11-28 17:34:32.928815", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/QUICKSORT.java\\n+++ java_programs\\/QUICKSORT.java\\n@@ -23,7 +23,7 @@\\n \\t\\tfor (java.lang.Integer x : arr.subList(1, arr.size())) {\\n \\t\\t\\tif (x < pivot) {\\n \\t\\t\\t\\tlesser.add(x);\\n-\\t\\t\\t}else { \\t\\t\\t\\tif (x > pivot) {\\n+\\t\\t\\t}else { \\t\\t\\t\\tif (true) {\\n \\t\\t\\t\\t\\tgreater.add(x);\\n \\t\\t\\t\\t}}\\n \\t\\t}\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (x > pivot) {\\n\\tgreater.add(x);\\n}", "PATCH_HUNK_CODE": "if (true) {\\n\\tgreater.add(x);\\n}", "LOCATION": "java_programs.QUICKSORT", "MODIFIED_FILE_PATH": "\\/tmp\\/jKali_QuixBugs_QUICKSORT_\\/.\\/output_astor\\/AstorMain-QUICKSORT-\\/\\/src\\/\\/variant-2_f\\/java_programs\\/QUICKSORT.java", "OPERATOR": "ReplaceIfBooleanOp", "PATH": "\\/tmp\\/jKali_QuixBugs_QUICKSORT_\\/output_astor\\/AstorMain-QUICKSORT-\\/src\\/default\\/QUICKSORT.java", "LINE": "26", "MP_RANKING": "0", "SUSPICIOUNESS": "0.289", "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"}], "GENERATION": "1", "VARIANT_ID": "2", "TIME": "0", "VALIDATION": "|true|0|13|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jKali_QuixBugs_QUICKSORT_\\/.\\/output_astor\\/AstorMain-QUICKSORT-\\/\\/bin\\/\\/variant-2"}]}}, {"project": "QUICKSORT", "bug_id": "", "tool": "Kali", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 11:32:55.134977", "repair_begin": "2018-12-01 11:32:50.347083", "patches": [{"diff": "--- /tmp/Kali_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-01 05:32:44.830074455 -0500\n+++ /tmp/Kali_QuixBugs_QUICKSORT_/patches_a7m4/Patch_1/patched/tmp/Kali_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-01 05:32:54.758074682 -0500\n@@ -23,7 +23,7 @@\n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+            } else if (true) {\n                 greater.add(x);\n             }\n         }\n\n\n", "edits": [{"path": "src/main/java/QUICKSORT.java", "line": 26, "faulty": "if (x > pivot) {\n  greater.add(x);\n}", "type": "RedirectBranch true"}]}]}}, {"project": "QUICKSORT", "bug_id": "", "tool": "Nopol", "benchmark": "QuixBugs", "result": {"repair_end": "2018-11-28 18:02:11.692735", "repair_begin": "2018-11-28 18:02:04.884031", "patches": [{"nb_test_that_execute_statement": 12, "patchLocation": {"line": 26, "class": "java_programs.QUICKSORT"}, "patchType": "CONDITIONAL", "patch": "--- a/src/main/java/QUICKSORT.java\n+++ b/src/main/java/QUICKSORT.java\n@@ -25,3 +25,3 @@\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+            } else if (lesser!=null) {\n                 greater.add(x);\n"}]}}, {"project": "QUICKSORT", "bug_id": "", "tool": "RSRepair", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 14:05:29.621615", "repair_begin": "2018-12-01 14:00:50.419240", "patches": [{"diff": "--- /tmp/RSRepair_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-01 08:00:45.300927256 -0500\n+++ /tmp/RSRepair_QuixBugs_QUICKSORT_/patches_98qt/Patch_314/patched/tmp/RSRepair_QuixBugs_QUICKSORT_/src/main/java/QUICKSORT.java\t2018-12-01 08:02:09.510210635 -0500\n@@ -23,9 +23,8 @@\n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n-                greater.add(x);\n-            }\n+            } else\n+\t\t\t\tgreater.add(x);\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n\n\n", "edits": [{"path": "src/main/java/QUICKSORT.java", "line": 26, "faulty": "if (x > pivot) {\n  greater.add(x);\n}", "type": "Replace", "seed": "greater.add(x);"}]}]}}, {"project": "SHORTEST_PATH_LENGTHS", "bug_id": "", "tool": "Arja", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 11:23:55.282988", "repair_begin": "2018-12-01 11:18:36.614704", "patches": [{"diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-01 05:18:30.163507402 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_ralw/Patch_394/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-01 05:19:47.497283041 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", "edits": [{"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 20, "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", "type": "Replace", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 26, "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", "type": "InsertBefore", "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}]}]}}, {"project": "SHORTEST_PATH_LENGTHS", "bug_id": "", "tool": "GenProg", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 11:50:03.163518", "repair_begin": "2018-12-01 11:45:50.234711", "patches": [{"diff": "--- /tmp/GenProg_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-01 05:45:46.309302137 -0500\n+++ /tmp/GenProg_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_kp2i/Patch_734/patched/tmp/GenProg_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-01 05:47:12.725306135 -0500\n@@ -15,28 +15,8 @@\n     // for vertices not connected to each other\n     final static int INF = 99999;\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n-        Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n-        for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n+        Map<List<Integer>, Integer> length_by_path = new HashMap<>();\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", "edits": [{"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 28, "faulty": "length_by_path.put(edge,INF);", "type": "Delete", "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 28, "faulty": "length_by_path.put(edge,INF);", "type": "Delete", "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 34, "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", "type": "Delete", "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 37, "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", "type": "InsertBefore", "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 34, "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", "type": "Delete", "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 33, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", "type": "Delete", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 28, "faulty": "length_by_path.put(edge,INF);", "type": "Delete", "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 34, "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", "type": "Delete", "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 37, "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", "type": "InsertBefore", "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 34, "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", "type": "Delete", "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 33, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", "type": "Delete", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 21, "faulty": "List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));", "type": "Replace", "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 25, "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Delete", "seed": "length_by_path.put(edge,INF);"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 28, "faulty": "length_by_path.put(edge,INF);", "type": "InsertBefore", "seed": "length_by_path.put(edge,INF);"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 19, "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", "type": "Delete", "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 23, "faulty": "length_by_path.put(edge,0);", "type": "InsertBefore", "seed": "length_by_path.put(edge,length_by_edge.get(edge));"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 22, "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Replace", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 25, "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Replace", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 28, "faulty": "length_by_path.put(edge,INF);", "type": "InsertBefore", "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 34, "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", "type": "InsertBefore", "seed": "return length_by_path;"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 25, "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Replace", "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 23, "faulty": "length_by_path.put(edge,0);", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 26, "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", "type": "Replace", "seed": "List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 35, "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", "type": "Delete", "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 21, "faulty": "List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));", "type": "Replace", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 37, "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", "type": "Delete", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 18, "faulty": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();", "type": "Replace", "seed": "Map<List<Integer>,Integer> length_by_path=new HashMap<>();"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 34, "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", "type": "Delete", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 26, "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", "type": "InsertBefore", "seed": "length_by_path.put(edge,length_by_edge.get(edge));"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 37, "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", "type": "Delete", "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 28, "faulty": "length_by_path.put(edge,INF);", "type": "Delete", "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"}]}]}}, {"project": "SHORTEST_PATH_LENGTHS", "bug_id": "", "tool": "jGenProg", "benchmark": "QuixBugs", "result": {"repair_end": "2018-11-28 16:18:59.667816", "repair_begin": "2018-11-28 16:18:45.896624", "patches": [{"PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- java_programs\\/SHORTEST_PATH_LENGTHS.java\\n+++ java_programs\\/SHORTEST_PATH_LENGTHS.java\\n@@ -27,16 +27,16 @@\\n \\t\\t\\t\\t\\t}else {\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\treturn length_by_path;}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n", "patchhunks": [{"BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", "ORIGINAL_CODE": "if (i == j) {\\n\\tlength_by_path.put(edge, 0);\\n}else\\n\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t}else {\\n\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t}", "INGREDIENT_SCOPE": "LOCAL", "PATCH_HUNK_CODE": "return length_by_path", "INGREDIENT_PARENT": "return length_by_path", "LOCATION": "java_programs.SHORTEST_PATH_LENGTHS", "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/src\\/\\/variant-52_f\\/java_programs\\/SHORTEST_PATH_LENGTHS.java", "OPERATOR": "InsertAfterOp", "PATH": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/src\\/default\\/SHORTEST_PATH_LENGTHS.java", "LINE": "22", "MP_RANKING": "4", "SUSPICIOUNESS": "1", "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl"}], "GENERATION": "26", "VARIANT_ID": "52", "TIME": "7", "VALIDATION": "|true|0|4|[]|", "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_QuixBugs_SHORTEST_PATH_LENGTHS_\\/.\\/output_astor\\/AstorMain-SHORTEST_PATH_LENGTHS-\\/\\/bin\\/\\/variant-52"}]}}, {"project": "SHORTEST_PATH_LENGTHS", "bug_id": "", "tool": "RSRepair", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 14:04:03.807075", "repair_begin": "2018-12-01 14:01:04.966936", "patches": [{"diff": "--- /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-01 08:00:59.157548270 -0500\n+++ /tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_719u/Patch_8/patched/tmp/RSRepair_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-01 08:01:11.177548083 -0500\n@@ -21,21 +21,12 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\t;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n             }\n         }\n         return length_by_path;\n\n\n", "edits": [{"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 25, "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", "type": "Delete", "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"}, {"path": "src/main/java/SHORTEST_PATH_LENGTHS.java", "line": 34, "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", "type": "Delete", "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"}]}]}}, {"project": "SQRT", "bug_id": "", "tool": "GenProg", "benchmark": "QuixBugs", "result": {"repair_end": "2018-12-01 12:06:47.910182", "repair_begin": "2018-12-01 11:52:53.944429", "patches": [{"diff": "--- /tmp/GenProg_QuixBugs_SQRT_/src/main/java/SQRT.java\t2018-12-01 05:52:48.519218701 -0500\n+++ /tmp/GenProg_QuixBugs_SQRT_/patches_4ae7/Patch_1608/patched/tmp/GenProg_QuixBugs_SQRT_/src/main/java/SQRT.java\t2018-12-01 06:05:34.253862843 -0500\n@@ -13,9 +13,57 @@\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2f;\n-        while (Math.abs(x-approx) > epsilon) {\n-            approx = 0.5f * (approx + x / approx);\n-        }\n-        return approx;\n+        approx = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\tapprox = 0.5f * (approx + x / approx);\n+\t\treturn approx;\n     }\n }\n\n\n", "edits": [{"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "InsertBefore", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "InsertBefore", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Delete", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "InsertBefore", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 15, "faulty": "double approx=x / 2f;", "type": "Replace", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Delete", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Delete", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "InsertBefore", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "InsertBefore", "seed": "return approx;"}, {"path": "src/main/java/SQRT.java", "line": 16, "faulty": "while (Math.abs(x - approx) > epsilon) {\n  approx=0.5f * (approx + x / approx);\n}", "type": "Delete", "seed": "approx=0.5f * (approx + x / approx);"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "Delete", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 15, "faulty": "double approx=x / 2f;", "type": "Replace", "seed": "double approx=x / 2f;"}, {"path": "src/main/java/SQRT.java", "line": 17, "faulty": "approx=0.5f * (approx + x / approx);", "type": "Replace", "seed": "approx=0.5f * (approx + x / approx);"}]}]}}]